cscope 15 $HOME\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs"               0001094843
	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\misc.h

30 #i‚de‡
__MISC_H


31 
	#__MISC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

56 
uöt8_t
 
NVIC_IRQCh™√l
;

61 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

65 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

69 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

72 } 
	tNVIC_InôTy≥Def
;

110 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

111 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

112 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
) || \

113 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

	)

122 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

123 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

124 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

125 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
) || \

126 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

127 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

	)

136 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

138 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

140 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

142 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

144 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

147 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
) || \

148 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

149 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

150 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

151 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

	)

153 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

155 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

157 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x0005FFFF)

	)

167 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

168 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

169 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
) || \

170 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

	)

182 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

183 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

184 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

185 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

186 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

188 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_adc.h

30 #i‚de‡
__STM32L1xx_ADC_H


31 
	#__STM32L1xx_ADC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

56 
uöt32_t
 
ADC_Resﬁuti⁄
;

59 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

63 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

67 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄vEdge
;

71 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

75 
uöt32_t
 
ADC_D©aAlign
;

78 
uöt8_t
 
ADC_NbrOfC⁄vîsi⁄
;

81 }
	tADC_InôTy≥Def
;

85 
uöt32_t
 
ADC_PªsˇÀr
;

88 }
	tADC_Comm⁄InôTy≥Def
;

95 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë((PERIPHË=
ADC1
)

	)

96 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë((PERIPHË=
ADC1
)

	)

101 
	#ADC_PowîDown_Dñay
 ((
uöt32_t
)0x00010000)

	)

102 
	#ADC_PowîDown_IdÀ
 ((
uöt32_t
)0x00020000)

	)

103 
	#ADC_PowîDown_IdÀ_Dñay
 ((
uöt32_t
)0x00030000)

	)

105 
	#IS_ADC_POWER_DOWN
(
DWON
Ë(((DWONË=
ADC_PowîDown_Dñay
) || \

106 ((
DWON
Ë=
ADC_PowîDown_IdÀ
) || \

107 ((
DWON
Ë=
ADC_PowîDown_IdÀ_Dñay
))

	)

116 
	#ADC_PªsˇÀr_Div1
 ((
uöt32_t
)0x00000000)

	)

117 
	#ADC_PªsˇÀr_Div2
 ((
uöt32_t
)0x00010000)

	)

118 
	#ADC_PªsˇÀr_Div4
 ((
uöt32_t
)0x00020000)

	)

120 
	#IS_ADC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
ADC_PªsˇÀr_Div1
) || \

121 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div2
) || \

122 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div4
))

	)

132 
	#ADC_Resﬁuti⁄_12b
 ((
uöt32_t
)0x00000000)

	)

133 
	#ADC_Resﬁuti⁄_10b
 ((
uöt32_t
)0x01000000)

	)

134 
	#ADC_Resﬁuti⁄_8b
 ((
uöt32_t
)0x02000000)

	)

135 
	#ADC_Resﬁuti⁄_6b
 ((
uöt32_t
)0x03000000)

	)

137 
	#IS_ADC_RESOLUTION
(
RESOLUTION
Ë(((RESOLUTIONË=
ADC_Resﬁuti⁄_12b
) || \

138 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_10b
) || \

139 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_8b
) || \

140 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_6b
))

	)

149 
	#ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

150 
	#ADC_Exã∫ÆTrigC⁄vEdge_Risög
 ((
uöt32_t
)0x10000000)

	)

151 
	#ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
 ((
uöt32_t
)0x20000000)

	)

152 
	#ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x30000000)

	)

154 
	#IS_ADC_EXT_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
) || \

155 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_Risög
) || \

156 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
) || \

157 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
))

	)

167 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x02000000)

	)

168 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x03000000)

	)

169 
	#ADC_Exã∫ÆTrigC⁄v_T2_TRGO
 ((
uöt32_t
)0x06000000)

	)

172 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x07000000)

	)

173 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC3
 ((
uöt32_t
)0x08000000)

	)

174 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x04000000)

	)

177 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x05000000)

	)

178 
	#ADC_Exã∫ÆTrigC⁄v_T4_TRGO
 ((
uöt32_t
)0x09000000)

	)

181 
	#ADC_Exã∫ÆTrigC⁄v_T6_TRGO
 ((
uöt32_t
)0x0A000000)

	)

184 
	#ADC_Exã∫ÆTrigC⁄v_T9_CC2
 ((
uöt32_t
)0x00000000)

	)

185 
	#ADC_Exã∫ÆTrigC⁄v_T9_TRGO
 ((
uöt32_t
)0x01000000)

	)

188 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11
 ((
uöt32_t
)0x0F000000)

	)

190 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T9_CC2
) || \

191 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T9_TRGO
) || \

192 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

193 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

194 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

195 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

196 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_TRGO
) || \

197 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

198 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC3
) || \

199 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_TRGO
) || \

200 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T6_TRGO
) || \

201 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11
))

	)

210 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

211 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

213 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
) || \

214 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

	)

223 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

224 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

225 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

226 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

228 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

229 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

230 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

231 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

232 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

233 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

234 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

238 
	#ADC_Ch™√l_0b
 
ADC_Ch™√l_0


	)

239 
	#ADC_Ch™√l_1b
 
ADC_Ch™√l_1


	)

240 
	#ADC_Ch™√l_2b
 
ADC_Ch™√l_2


	)

241 
	#ADC_Ch™√l_3b
 
ADC_Ch™√l_3


	)

243 
	#ADC_Ch™√l_6b
 
ADC_Ch™√l_6


	)

244 
	#ADC_Ch™√l_7b
 
ADC_Ch™√l_7


	)

245 
	#ADC_Ch™√l_8b
 
ADC_Ch™√l_8


	)

246 
	#ADC_Ch™√l_9b
 
ADC_Ch™√l_9


	)

247 
	#ADC_Ch™√l_10b
 
ADC_Ch™√l_10


	)

248 
	#ADC_Ch™√l_11b
 
ADC_Ch™√l_11


	)

249 
	#ADC_Ch™√l_12b
 
ADC_Ch™√l_12


	)

252 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

253 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

255 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

256 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

257 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

258 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

259 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

260 
	#ADC_Ch™√l_18
 ((
uöt8_t
)0x12)

	)

261 
	#ADC_Ch™√l_19
 ((
uöt8_t
)0x13)

	)

262 
	#ADC_Ch™√l_20
 ((
uöt8_t
)0x14)

	)

263 
	#ADC_Ch™√l_21
 ((
uöt8_t
)0x15)

	)

264 
	#ADC_Ch™√l_22
 ((
uöt8_t
)0x16)

	)

265 
	#ADC_Ch™√l_23
 ((
uöt8_t
)0x17)

	)

266 
	#ADC_Ch™√l_24
 ((
uöt8_t
)0x18)

	)

267 
	#ADC_Ch™√l_25
 ((
uöt8_t
)0x19)

	)

269 
	#ADC_Ch™√l_27
 ((
uöt8_t
)0x1B)

	)

270 
	#ADC_Ch™√l_28
 ((
uöt8_t
)0x1C)

	)

271 
	#ADC_Ch™√l_29
 ((
uöt8_t
)0x1D)

	)

272 
	#ADC_Ch™√l_30
 ((
uöt8_t
)0x1E)

	)

273 
	#ADC_Ch™√l_31
 ((
uöt8_t
)0x1F)

	)

275 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

276 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

278 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
Ë|| ((CHANNELË=
ADC_Ch™√l_1
) || \

279 ((
CHANNEL
Ë=
ADC_Ch™√l_2
Ë|| ((CHANNELË=
ADC_Ch™√l_3
) || \

280 ((
CHANNEL
Ë=
ADC_Ch™√l_4
Ë|| ((CHANNELË=
ADC_Ch™√l_5
) || \

281 ((
CHANNEL
Ë=
ADC_Ch™√l_6
Ë|| ((CHANNELË=
ADC_Ch™√l_7
) || \

282 ((
CHANNEL
Ë=
ADC_Ch™√l_8
Ë|| ((CHANNELË=
ADC_Ch™√l_9
) || \

283 ((
CHANNEL
Ë=
ADC_Ch™√l_10
Ë|| ((CHANNELË=
ADC_Ch™√l_11
) || \

284 ((
CHANNEL
Ë=
ADC_Ch™√l_12
Ë|| ((CHANNELË=
ADC_Ch™√l_13
) || \

285 ((
CHANNEL
Ë=
ADC_Ch™√l_14
Ë|| ((CHANNELË=
ADC_Ch™√l_15
) || \

286 ((
CHANNEL
Ë=
ADC_Ch™√l_16
Ë|| ((CHANNELË=
ADC_Ch™√l_17
) || \

287 ((
CHANNEL
Ë=
ADC_Ch™√l_18
Ë|| ((CHANNELË=
ADC_Ch™√l_19
) || \

288 ((
CHANNEL
Ë=
ADC_Ch™√l_20
Ë|| ((CHANNELË=
ADC_Ch™√l_21
) || \

289 ((
CHANNEL
Ë=
ADC_Ch™√l_22
Ë|| ((CHANNELË=
ADC_Ch™√l_23
) || \

290 ((
CHANNEL
Ë=
ADC_Ch™√l_24
Ë|| ((CHANNELË=
ADC_Ch™√l_25
) || \

291 ((
CHANNEL
Ë=
ADC_Ch™√l_27
Ë|| ((CHANNELË=
ADC_Ch™√l_28
) || \

292 ((
CHANNEL
Ë=
ADC_Ch™√l_29
Ë|| ((CHANNELË=
ADC_Ch™√l_30
) || \

293 ((
CHANNEL
Ë=
ADC_Ch™√l_31
))

	)

302 
	#ADC_Sam∂eTime_4Cy˛es
 ((
uöt8_t
)0x00)

	)

303 
	#ADC_Sam∂eTime_9Cy˛es
 ((
uöt8_t
)0x01)

	)

304 
	#ADC_Sam∂eTime_16Cy˛es
 ((
uöt8_t
)0x02)

	)

305 
	#ADC_Sam∂eTime_24Cy˛es
 ((
uöt8_t
)0x03)

	)

306 
	#ADC_Sam∂eTime_48Cy˛es
 ((
uöt8_t
)0x04)

	)

307 
	#ADC_Sam∂eTime_96Cy˛es
 ((
uöt8_t
)0x05)

	)

308 
	#ADC_Sam∂eTime_192Cy˛es
 ((
uöt8_t
)0x06)

	)

309 
	#ADC_Sam∂eTime_384Cy˛es
 ((
uöt8_t
)0x07)

	)

311 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_4Cy˛es
) || \

312 ((
TIME
Ë=
ADC_Sam∂eTime_9Cy˛es
) || \

313 ((
TIME
Ë=
ADC_Sam∂eTime_16Cy˛es
) || \

314 ((
TIME
Ë=
ADC_Sam∂eTime_24Cy˛es
) || \

315 ((
TIME
Ë=
ADC_Sam∂eTime_48Cy˛es
) || \

316 ((
TIME
Ë=
ADC_Sam∂eTime_96Cy˛es
) || \

317 ((
TIME
Ë=
ADC_Sam∂eTime_192Cy˛es
) || \

318 ((
TIME
Ë=
ADC_Sam∂eTime_384Cy˛es
))

	)

327 
	#ADC_DñayLígth_N⁄e
 ((
uöt8_t
)0x00)

	)

328 
	#ADC_DñayLígth_Fªeze
 ((
uöt8_t
)0x10)

	)

329 
	#ADC_DñayLígth_7Cy˛es
 ((
uöt8_t
)0x20)

	)

330 
	#ADC_DñayLígth_15Cy˛es
 ((
uöt8_t
)0x30)

	)

331 
	#ADC_DñayLígth_31Cy˛es
 ((
uöt8_t
)0x40)

	)

332 
	#ADC_DñayLígth_63Cy˛es
 ((
uöt8_t
)0x50)

	)

333 
	#ADC_DñayLígth_127Cy˛es
 ((
uöt8_t
)0x60)

	)

334 
	#ADC_DñayLígth_255Cy˛es
 ((
uöt8_t
)0x70)

	)

336 
	#IS_ADC_DELAY_LENGTH
(
LENGTH
Ë(((LENGTHË=
ADC_DñayLígth_N⁄e
) || \

337 ((
LENGTH
Ë=
ADC_DñayLígth_Fªeze
) || \

338 ((
LENGTH
Ë=
ADC_DñayLígth_7Cy˛es
) || \

339 ((
LENGTH
Ë=
ADC_DñayLígth_15Cy˛es
) || \

340 ((
LENGTH
Ë=
ADC_DñayLígth_31Cy˛es
) || \

341 ((
LENGTH
Ë=
ADC_DñayLígth_63Cy˛es
) || \

342 ((
LENGTH
Ë=
ADC_DñayLígth_127Cy˛es
) || \

343 ((
LENGTH
Ë=
ADC_DñayLígth_255Cy˛es
))

	)

352 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

353 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
 ((
uöt32_t
)0x00100000)

	)

354 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
 ((
uöt32_t
)0x00200000)

	)

355 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x00300000)

	)

357 
	#IS_ADC_EXT_INJEC_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
) || \

358 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
) || \

359 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
) || \

360 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
))

	)

372 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00020000)

	)

373 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00030000)

	)

376 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00040000)

	)

379 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00050000)

	)

380 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
 ((
uöt32_t
)0x00060000)

	)

381 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
 ((
uöt32_t
)0x00070000)

	)

382 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00080000)

	)

385 
	#ADC_Exã∫ÆTrigInjecC⁄v_T7_TRGO
 ((
uöt32_t
)0x000A0000)

	)

388 
	#ADC_Exã∫ÆTrigInjecC⁄v_T9_CC1
 ((
uöt32_t
)0x00000000)

	)

389 
	#ADC_Exã∫ÆTrigInjecC⁄v_T9_TRGO
 ((
uöt32_t
)0x00010000)

	)

392 
	#ADC_Exã∫ÆTrigInjecC⁄v_T10_CC1
 ((
uöt32_t
)0x00090000)

	)

395 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
 ((
uöt32_t
)0x000F0000)

	)

397 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T9_CC1
) || \

398 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T9_TRGO
) || \

399 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

400 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

401 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

402 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

403 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
) || \

404 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
) || \

405 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

406 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T10_CC1
) || \

407 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T7_TRGO
) || \

408 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
))

	)

416 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x18)

	)

417 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x1C)

	)

418 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x20)

	)

419 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x24)

	)

421 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
) || \

422 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

423 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

424 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

	)

433 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

434 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

435 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

436 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

437 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

438 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

439 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

441 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
) || \

442 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

443 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

444 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

445 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

446 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

447 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

	)

456 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0106)

	)

457 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0205)

	)

458 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0407)

	)

459 
	#ADC_IT_OVR
 ((
uöt16_t
)0x201A)

	)

461 
	#IS_ADC_IT
(
IT
Ë(((ITË=
ADC_IT_AWD
Ë|| ((ITË=
ADC_IT_EOC
) || \

462 ((
IT
Ë=
ADC_IT_JEOC
)|| ((ITË=
ADC_IT_OVR
))

	)

471 
	#ADC_FLAG_AWD
 ((
uöt16_t
)0x0001)

	)

472 
	#ADC_FLAG_EOC
 ((
uöt16_t
)0x0002)

	)

473 
	#ADC_FLAG_JEOC
 ((
uöt16_t
)0x0004)

	)

474 
	#ADC_FLAG_JSTRT
 ((
uöt16_t
)0x0008)

	)

475 
	#ADC_FLAG_STRT
 ((
uöt16_t
)0x0010)

	)

476 
	#ADC_FLAG_OVR
 ((
uöt16_t
)0x0020)

	)

477 
	#ADC_FLAG_ADONS
 ((
uöt16_t
)0x0040)

	)

478 
	#ADC_FLAG_RCNR
 ((
uöt16_t
)0x0100)

	)

479 
	#ADC_FLAG_JCNR
 ((
uöt16_t
)0x0200)

	)

481 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFC0Ë=0x00Ë&& ((FLAGË!0x00))

	)

483 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
Ë|| ((FLAGË=
ADC_FLAG_EOC
) || \

484 ((
FLAG
Ë=
ADC_FLAG_JEOC
Ë|| ((FLAG)=
ADC_FLAG_JSTRT
) || \

485 ((
FLAG
Ë=
ADC_FLAG_STRT
Ë|| ((FLAG)=
ADC_FLAG_OVR
) || \

486 ((
FLAG
Ë=
ADC_FLAG_ADONS
Ë|| ((FLAG)=
ADC_FLAG_RCNR
) || \

487 ((
FLAG
Ë=
ADC_FLAG_JCNR
))

	)

496 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

506 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

516 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

526 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

536 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>1Ë&& ((LENGTHË<28))

	)

546 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>1Ë&& ((RANKË<28))

	)

556 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

565 
	#ADC_B™k_A
 ((
uöt8_t
)0x00)

	)

566 
	#ADC_B™k_B
 ((
uöt8_t
)0x01)

	)

567 
	#IS_ADC_BANK
(
BANK
Ë(((BANKË=
ADC_B™k_A
Ë|| ((BANKË=
ADC_B™k_B
))

	)

581 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

584 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

585 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

586 
ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

587 
ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

588 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

589 
ADC_B™kSñe˘i⁄
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_B™k
);

592 
ADC_PowîDownCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_PowîDown
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

593 
ADC_DñaySñe˘i⁄C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_DñayLígth
);

596 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

597 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,uöt16_à
LowThªshﬁd
);

598 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

601 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

604 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

605 
ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

606 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

607 
ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

608 
ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

609 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

610 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

611 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

614 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

615 
ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

618 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

619 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

620 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

621 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

622 
ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
);

623 
ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

624 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

625 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

626 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

627 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

630 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

631 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_FLAG
);

632 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_FLAG
);

633 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

634 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

636 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_aes.h

30 #i‚de‡
__STM32L1xx_AES_H


31 
	#__STM32L1xx_AES_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

55 
uöt32_t
 
AES_O≥øti⁄
;

57 
uöt32_t
 
AES_Chaöög
;

59 
uöt32_t
 
AES_D©aTy≥
;

61 }
	tAES_InôTy≥Def
;

68 
uöt32_t
 
AES_Key0
;

69 
uöt32_t
 
AES_Key1
;

70 
uöt32_t
 
AES_Key2
;

71 
uöt32_t
 
AES_Key3
;

72 }
	tAES_KeyInôTy≥Def
;

79 
uöt32_t
 
AES_IV0
;

80 
uöt32_t
 
AES_IV1
;

81 
uöt32_t
 
AES_IV2
;

82 
uöt32_t
 
AES_IV3
;

83 }
	tAES_IVInôTy≥Def
;

94 
	#AES_O≥øti⁄_En¸yp
 ((
uöt32_t
)0x00000000Ë

	)

95 
	#AES_O≥øti⁄_KeyDîiv
 
AES_CR_MODE_0


	)

96 
	#AES_O≥øti⁄_De¸yp
 
AES_CR_MODE_1


	)

97 
	#AES_O≥øti⁄_KeyDîivAndDe¸yp
 
AES_CR_MODE


	)

99 
	#IS_AES_MODE
(
OPERATION
Ë(((OPERATIONË=
AES_O≥øti⁄_En¸yp
) || \

100 ((
OPERATION
Ë=
AES_O≥øti⁄_KeyDîiv
) || \

101 ((
OPERATION
Ë=
AES_O≥øti⁄_De¸yp
) || \

102 ((
OPERATION
Ë=
AES_O≥øti⁄_KeyDîivAndDe¸yp
))

	)

111 
	#AES_Chaöög_ECB
 ((
uöt32_t
)0x00000000Ë

	)

112 
	#AES_Chaöög_CBC
 
AES_CR_CHMOD_0


	)

113 
	#AES_Chaöög_CTR
 
AES_CR_CHMOD_1


	)

115 
	#IS_AES_CHAINING
(
CHAINING
Ë(((CHAININGË=
AES_Chaöög_ECB
) || \

116 ((
CHAINING
Ë=
AES_Chaöög_CBC
) || \

117 ((
CHAINING
Ë=
AES_Chaöög_CTR
))

	)

125 
	#AES_D©aTy≥_32b
 ((
uöt32_t
)0x00000000Ë

	)

126 
	#AES_D©aTy≥_16b
 
AES_CR_DATATYPE_0


	)

127 
	#AES_D©aTy≥_8b
 
AES_CR_DATATYPE_1


	)

128 
	#AES_D©aTy≥_1b
 
AES_CR_DATATYPE


	)

130 
	#IS_AES_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
AES_D©aTy≥_32b
) || \

131 ((
DATATYPE
Ë=
AES_D©aTy≥_16b
)|| \

132 ((
DATATYPE
Ë=
AES_D©aTy≥_8b
) || \

133 ((
DATATYPE
Ë=
AES_D©aTy≥_1b
))

	)

141 
	#AES_FLAG_CCF
 
AES_SR_CCF


	)

142 
	#AES_FLAG_RDERR
 
AES_SR_RDERR


	)

143 
	#AES_FLAG_WRERR
 
AES_SR_WRERR


	)

145 
	#IS_AES_FLAG
(
FLAG
Ë(((FLAGË=
AES_FLAG_CCF
) || \

146 ((
FLAG
Ë=
AES_FLAG_RDERR
) || \

147 ((
FLAG
Ë=
AES_FLAG_WRERR
))

	)

155 
	#AES_IT_CC
 
AES_CR_CCIE


	)

156 
	#AES_IT_ERR
 
AES_CR_ERRIE


	)

158 
	#IS_AES_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFF9FFË=0x00Ë&& ((ITË!0x00))

	)

159 
	#IS_AES_GET_IT
(
IT
Ë(((ITË=
AES_IT_CC
Ë|| ((ITË=
AES_IT_ERR
))

	)

168 
	#AES_DMATøns„r_In
 
AES_CR_DMAINEN


	)

169 
	#AES_DMATøns„r_Out
 
AES_CR_DMAOUTEN


	)

170 
	#AES_DMATøns„r_InOut
 (
AES_CR_DMAINEN
 | 
AES_CR_DMAOUTEN
Ë

	)

172 
	#IS_AES_DMA_TRANSFER
(
TRANSFER
Ë(((TRANSFERË=
AES_DMATøns„r_In
) || \

173 ((
TRANSFER
Ë=
AES_DMATøns„r_Out
) || \

174 ((
TRANSFER
Ë=
AES_DMATøns„r_InOut
))

	)

187 
AES_DeInô
();

188 
AES_Inô
(
AES_InôTy≥Def
* 
AES_InôSåu˘
);

189 
AES_KeyInô
(
AES_KeyInôTy≥Def
* 
AES_KeyInôSåu˘
);

190 
AES_IVInô
(
AES_IVInôTy≥Def
* 
AES_IVInôSåu˘
);

191 
AES_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

194 
AES_Såu˘Inô
(
AES_InôTy≥Def
* 
AES_InôSåu˘
);

195 
AES_KeySåu˘Inô
(
AES_KeyInôTy≥Def
* 
AES_KeyInôSåu˘
);

196 
AES_IVSåu˘Inô
(
AES_IVInôTy≥Def
* 
AES_IVInôSåu˘
);

199 
AES_WrôeSubD©a
(
uöt32_t
 
D©a
);

200 
uöt32_t
 
AES_RódSubD©a
();

201 
AES_RódKey
(
AES_KeyInôTy≥Def
* 
AES_KeyInôSåu˘
);

202 
AES_RódIV
(
AES_IVInôTy≥Def
* 
AES_IVInôSåu˘
);

205 
AES_DMAC⁄fig
(
uöt32_t
 
AES_DMATøns„r
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

208 
AES_ITC⁄fig
(
uöt32_t
 
AES_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

209 
FœgSètus
 
AES_GëFœgSètus
(
uöt32_t
 
AES_FLAG
);

210 
AES_CÀ¨Fœg
(
uöt32_t
 
AES_FLAG
);

211 
ITSètus
 
AES_GëITSètus
(
uöt32_t
 
AES_IT
);

212 
AES_CÀ¨ITPídögBô
(
uöt32_t
 
AES_IT
);

215 
Eº‹Sètus
 
AES_ECB_En¸y±
(
uöt8_t
* 
Key
, uöt8_t* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
);

216 
Eº‹Sètus
 
AES_ECB_De¸y±
(
uöt8_t
* 
Key
, uöt8_t* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
);

217 
Eº‹Sètus
 
AES_CBC_En¸y±
(
uöt8_t
* 
Key
, uöt8_à
InôVe˘‹s
[16], uöt8_t* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
);

218 
Eº‹Sètus
 
AES_CBC_De¸y±
(
uöt8_t
* 
Key
, uöt8_à
InôVe˘‹s
[16], uöt8_t* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
);

219 
Eº‹Sètus
 
AES_CTR_En¸y±
(
uöt8_t
* 
Key
, uöt8_à
InôVe˘‹s
[16], uöt8_t* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
);

220 
Eº‹Sètus
 
AES_CTR_De¸y±
(
uöt8_t
* 
Key
, uöt8_à
InôVe˘‹s
[16], uöt8_t* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
);

222 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_comp.h

30 #i‚de‡
__STM32L1xx_COMP_H


31 
	#__STM32L1xx_COMP_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

56 
uöt32_t
 
COMP_S≥ed
;

58 
uöt32_t
 
COMP_InvîtögI≈ut
;

60 
uöt32_t
 
COMP_OuçutSñe˘
;

63 }
	tCOMP_InôTy≥Def
;

71 
	#COMP_OuçutLevñ_High
 ((
uöt32_t
)0x00000001)

	)

72 
	#COMP_OuçutLevñ_Low
 ((
uöt32_t
)0x00000000)

	)

78 
	#COMP_Sñe˘i⁄_COMP1
 ((
uöt32_t
)0x00000001)

	)

79 
	#COMP_Sñe˘i⁄_COMP2
 ((
uöt32_t
)0x00000002)

	)

81 
	#IS_COMP_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
COMP_Sñe˘i⁄_COMP1
) || \

82 ((
PERIPH
Ë=
COMP_Sñe˘i⁄_COMP2
))

	)

92 
	#COMP_InvîtögI≈ut_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

93 
	#COMP_InvîtögI≈ut_IO
 ((
uöt32_t
)0x00040000)

	)

94 
	#COMP_InvîtögI≈ut_VREFINT
 ((
uöt32_t
)0x00080000)

	)

95 
	#COMP_InvîtögI≈ut_3_4VREFINT
 ((
uöt32_t
)0x000C0000)

	)

96 
	#COMP_InvîtögI≈ut_1_2VREFINT
 ((
uöt32_t
)0x00100000)

	)

97 
	#COMP_InvîtögI≈ut_1_4VREFINT
 ((
uöt32_t
)0x00140000)

	)

98 
	#COMP_InvîtögI≈ut_DAC1
 ((
uöt32_t
)0x00180000)

	)

99 
	#COMP_InvîtögI≈ut_DAC2
 ((
uöt32_t
)0x001C0000)

	)

101 
	#IS_COMP_INVERTING_INPUT
(
INPUT
Ë(((INPUTË=
COMP_InvîtögI≈ut_N⁄e
) || \

102 ((
INPUT
Ë=
COMP_InvîtögI≈ut_IO
) || \

103 ((
INPUT
Ë=
COMP_InvîtögI≈ut_VREFINT
) || \

104 ((
INPUT
Ë=
COMP_InvîtögI≈ut_3_4VREFINT
) || \

105 ((
INPUT
Ë=
COMP_InvîtögI≈ut_1_2VREFINT
) || \

106 ((
INPUT
Ë=
COMP_InvîtögI≈ut_1_4VREFINT
) || \

107 ((
INPUT
Ë=
COMP_InvîtögI≈ut_DAC1
) || \

108 ((
INPUT
Ë=
COMP_InvîtögI≈ut_DAC2
))

	)

117 
	#COMP_OuçutSñe˘_TIM2IC4
 ((
uöt32_t
)0x00000000)

	)

118 
	#COMP_OuçutSñe˘_TIM2OCREFCLR
 ((
uöt32_t
)0x00200000)

	)

119 
	#COMP_OuçutSñe˘_TIM3IC4
 ((
uöt32_t
)0x00400000)

	)

120 
	#COMP_OuçutSñe˘_TIM3OCREFCLR
 ((
uöt32_t
)0x00600000)

	)

121 
	#COMP_OuçutSñe˘_TIM4IC4
 ((
uöt32_t
)0x00800000)

	)

122 
	#COMP_OuçutSñe˘_TIM4OCREFCLR
 ((
uöt32_t
)0x00A00000)

	)

123 
	#COMP_OuçutSñe˘_TIM10IC1
 ((
uöt32_t
)0x00C00000)

	)

124 
	#COMP_OuçutSñe˘_N⁄e
 ((
uöt32_t
)0x00E00000)

	)

126 
	#IS_COMP_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
COMP_OuçutSñe˘_TIM2IC4
) || \

127 ((
OUTPUT
Ë=
COMP_OuçutSñe˘_TIM2OCREFCLR
) || \

128 ((
OUTPUT
Ë=
COMP_OuçutSñe˘_TIM3IC4
) || \

129 ((
OUTPUT
Ë=
COMP_OuçutSñe˘_TIM3OCREFCLR
) || \

130 ((
OUTPUT
Ë=
COMP_OuçutSñe˘_TIM4IC4
) || \

131 ((
OUTPUT
Ë=
COMP_OuçutSñe˘_TIM4OCREFCLR
) || \

132 ((
OUTPUT
Ë=
COMP_OuçutSñe˘_TIM10IC1
) || \

133 ((
OUTPUT
Ë=
COMP_OuçutSñe˘_N⁄e
))

	)

142 
	#COMP_S≥ed_Slow
 ((
uöt32_t
)0x00000000)

	)

143 
	#COMP_S≥ed_Fa°
 ((
uöt32_t
)0x00001000)

	)

145 
	#IS_COMP_SPEED
(
SPEED
Ë(((SPEEDË=
COMP_S≥ed_Slow
) || \

146 ((
SPEED
Ë=
COMP_S≥ed_Fa°
))

	)

159 
COMP_DeInô
();

162 
COMP_Inô
(
COMP_InôTy≥Def
* 
COMP_InôSåu˘
);

163 
COMP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

164 
uöt8_t
 
COMP_GëOuçutLevñ
(
uöt32_t
 
COMP_Sñe˘i⁄
);

165 
COMP_SW1SwôchC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

168 
COMP_WödowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

171 
COMP_VªfötOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

173 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_crc.h

30 #i‚de‡
__STM32L1xx_CRC_H


31 
	#__STM32L1xx_CRC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

62 
CRC_Re£tDR
();

63 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

64 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

65 
uöt32_t
 
CRC_GëCRC
();

66 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

67 
uöt8_t
 
CRC_GëIDRegi°î
();

69 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_dac.h

30 #i‚de‡
__STM32L1xx_DAC_H


31 
	#__STM32L1xx_DAC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

56 
uöt32_t
 
DAC_Triggî
;

59 
uöt32_t
 
DAC_WaveGíî©i⁄
;

63 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

67 
uöt32_t
 
DAC_OuçutBuf„r
;

69 }
	tDAC_InôTy≥Def
;

81 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

83 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

84 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

85 
	#DAC_Triggî_T9_TRGO
 ((
uöt32_t
)0x0000001CË

	)

86 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

87 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

88 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

89 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

91 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
) || \

92 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

93 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

94 ((
TRIGGER
Ë=
DAC_Triggî_T9_TRGO
) || \

95 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

	)

108 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

109 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

110 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

111 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
) || \

112 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

113 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

	)

122 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

123 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

124 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

125 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

126 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

127 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

128 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

129 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

130 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

131 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

132 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

133 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

134 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

135 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

136 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

137 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

138 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

147 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
) || \

148 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

149 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

150 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

151 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

152 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

159 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

160 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

161 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

162 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

163 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

	)

179 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

180 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

181 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
) || \

182 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

	)

191 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

192 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

193 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
) || \

194 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

	)

203 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

204 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

205 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

206 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
) || \

207 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

208 ((
ALIGN
Ë=
DAC_Align_8b_R
))

	)

217 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

218 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

219 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
) || \

220 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

	)

229 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

239 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

240 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

251 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

253 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

267 
DAC_DeInô
();

270 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

271 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

272 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

273 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

274 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

275 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

276 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

277 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

278 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

279 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

282 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

286 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

287 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

288 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

289 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

291 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_dbgmcu.h

30 #i‚de‡
__STM32L1xx_DBGMCU_H


31 
	#__STM32L1xx_DBGMCU_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

55 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

56 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

57 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

58 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFF8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

60 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

61 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

62 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

63 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

64 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

65 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

66 
	#DBGMCU_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

67 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

68 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

69 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

70 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

71 
	#IS_DBGMCU_APB1PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFF9FE3C0Ë=0x00Ë&& ((PERIPHË!0x00))

	)

73 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x00000004)

	)

74 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x00000008)

	)

75 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x00000010)

	)

76 
	#IS_DBGMCU_APB2PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFE3Ë=0x00Ë&& ((PERIPHË!0x00))

	)

85 
uöt32_t
 
DBGMCU_GëREVID
();

86 
uöt32_t
 
DBGMCU_GëDEVID
();

87 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

88 
DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

89 
DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

91 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_dma.h

30 #i‚de‡
__STM32L1xx_DMA_H


31 
	#__STM32L1xx_DMA_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

56 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

58 
uöt32_t
 
DMA_Mem‹yBa£Addr
;

60 
uöt32_t
 
DMA_DIR
;

63 
uöt32_t
 
DMA_Buf„rSize
;

67 
uöt32_t
 
DMA_PîùhîÆInc
;

70 
uöt32_t
 
DMA_Mem‹yInc
;

73 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

76 
uöt32_t
 
DMA_Mem‹yD©aSize
;

79 
uöt32_t
 
DMA_Mode
;

84 
uöt32_t
 
DMA_Pri‹ôy
;

87 
uöt32_t
 
DMA_M2M
;

89 }
	tDMA_InôTy≥Def
;

97 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Ch™√l1
) || \

98 ((
PERIPH
Ë=
DMA1_Ch™√l2
) || \

99 ((
PERIPH
Ë=
DMA1_Ch™√l3
) || \

100 ((
PERIPH
Ë=
DMA1_Ch™√l4
) || \

101 ((
PERIPH
Ë=
DMA1_Ch™√l5
) || \

102 ((
PERIPH
Ë=
DMA1_Ch™√l6
) || \

103 ((
PERIPH
Ë=
DMA1_Ch™√l7
) || \

104 ((
PERIPH
Ë=
DMA2_Ch™√l1
) || \

105 ((
PERIPH
Ë=
DMA2_Ch™√l2
) || \

106 ((
PERIPH
Ë=
DMA2_Ch™√l3
) || \

107 ((
PERIPH
Ë=
DMA2_Ch™√l4
) || \

108 ((
PERIPH
Ë=
DMA2_Ch™√l5
))

	)

114 
	#DMA_DIR_PîùhîÆDST
 ((
uöt32_t
)0x00000010)

	)

115 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

116 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆDST
) || \

117 ((
DIR
Ë=
DMA_DIR_PîùhîÆSRC
))

	)

126 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

127 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

128 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
) || \

129 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

	)

138 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000080)

	)

139 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

140 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
) || \

141 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

	)

150 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

151 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000100)

	)

152 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00000200)

	)

153 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
) || \

154 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

155 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

	)

164 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

165 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000400)

	)

166 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00000800)

	)

167 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
) || \

168 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

169 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

	)

178 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000020)

	)

179 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

180 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_Cúcuœr
Ë|| ((MODEË=
DMA_Mode_N‹mÆ
))

	)

189 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00003000)

	)

190 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00002000)

	)

191 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00001000)

	)

192 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

193 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
) || \

194 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

195 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

196 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

	)

205 
	#DMA_M2M_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

206 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

207 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_E«bÀ
Ë|| ((STATEË=
DMA_M2M_DißbÀ
))

	)

217 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

218 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

219 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

220 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

222 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

223 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

224 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

225 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

226 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

227 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

228 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

229 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

230 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

231 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

232 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

233 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

234 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

235 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

236 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

237 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

238 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

239 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

240 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

241 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

242 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

243 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

244 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

245 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

246 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

247 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

248 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

249 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

251 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

252 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

253 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

254 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

255 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

256 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

257 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

258 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

259 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

260 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

261 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

262 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

263 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

264 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

265 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

266 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

267 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

268 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

269 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

270 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

272 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

274 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
) || \

275 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

276 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

277 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

278 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

279 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

280 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

281 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

282 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

283 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

284 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

285 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

286 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

287 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

288 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

289 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

290 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

291 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

292 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

293 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

294 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

295 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

296 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

297 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

	)

305 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

306 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

307 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

308 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

309 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

310 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

311 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

312 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

313 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

314 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

315 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

316 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

317 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

318 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

319 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

320 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

321 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

322 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

323 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

324 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

325 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

326 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

327 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

328 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

329 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

330 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

331 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

332 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

334 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

335 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

336 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

337 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

338 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

339 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

340 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

341 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

342 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

343 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

344 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

345 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

346 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

347 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

348 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

349 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

350 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

351 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

352 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

353 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

355 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

357 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
) || \

358 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

359 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

360 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

361 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

362 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

363 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

364 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

365 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

366 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

367 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

368 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

369 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

370 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

371 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

372 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

373 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

374 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

375 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

376 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

377 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

378 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

379 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

380 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

	)

389 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

403 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

406 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

407 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

408 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

411 
DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
);

412 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

415 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

416 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
);

417 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
);

418 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
);

419 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
);

421 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_exti.h

30 #i‚de‡
__STM32L1xx_EXTI_H


31 
	#__STM32L1xx_EXTI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

56 
EXTI_Mode_I¡îru±
 = 0x00,

57 
EXTI_Mode_Evít
 = 0x04

58 }
	tEXTIMode_Ty≥Def
;

60 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

68 
EXTI_Triggî_Risög
 = 0x08,

69 
EXTI_Triggî_FÆlög
 = 0x0C,

70 
EXTI_Triggî_Risög_FÆlög
 = 0x10

71 }
	tEXTITriggî_Ty≥Def
;

73 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
) || \

74 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

75 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

	)

82 
uöt32_t
 
EXTI_Löe
;

85 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

88 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

91 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

93 }
	tEXTI_InôTy≥Def
;

105 
	#EXTI_Löe0
 ((
uöt32_t
)0x00000001Ë

	)

106 
	#EXTI_Löe1
 ((
uöt32_t
)0x00000002Ë

	)

107 
	#EXTI_Löe2
 ((
uöt32_t
)0x00000004Ë

	)

108 
	#EXTI_Löe3
 ((
uöt32_t
)0x00000008Ë

	)

109 
	#EXTI_Löe4
 ((
uöt32_t
)0x00000010Ë

	)

110 
	#EXTI_Löe5
 ((
uöt32_t
)0x00000020Ë

	)

111 
	#EXTI_Löe6
 ((
uöt32_t
)0x00000040Ë

	)

112 
	#EXTI_Löe7
 ((
uöt32_t
)0x00000080Ë

	)

113 
	#EXTI_Löe8
 ((
uöt32_t
)0x00000100Ë

	)

114 
	#EXTI_Löe9
 ((
uöt32_t
)0x00000200Ë

	)

115 
	#EXTI_Löe10
 ((
uöt32_t
)0x00000400Ë

	)

116 
	#EXTI_Löe11
 ((
uöt32_t
)0x00000800Ë

	)

117 
	#EXTI_Löe12
 ((
uöt32_t
)0x00001000Ë

	)

118 
	#EXTI_Löe13
 ((
uöt32_t
)0x00002000Ë

	)

119 
	#EXTI_Löe14
 ((
uöt32_t
)0x00004000Ë

	)

120 
	#EXTI_Löe15
 ((
uöt32_t
)0x00008000Ë

	)

121 
	#EXTI_Löe16
 ((
uöt32_t
)0x00010000Ë

	)

123 
	#EXTI_Löe17
 ((
uöt32_t
)0x00020000Ë

	)

126 
	#EXTI_Löe18
 ((
uöt32_t
)0x00040000Ë

	)

129 
	#EXTI_Löe19
 ((
uöt32_t
)0x00080000Ë

	)

132 
	#EXTI_Löe20
 ((
uöt32_t
)0x00100000Ë

	)

135 
	#EXTI_Löe21
 ((
uöt32_t
)0x00200000Ë

	)

139 
	#EXTI_Löe22
 ((
uöt32_t
)0x00400000Ë

	)

143 
	#EXTI_Löe23
 ((
uöt32_t
)0x00800000Ë

	)

146 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

148 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
) || \

149 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

150 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

151 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

152 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

153 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

154 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

155 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

156 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

157 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
) || \

158 ((
LINE
Ë=
EXTI_Löe20
Ë|| ((LINEË=
EXTI_Löe21
) || \

159 ((
LINE
Ë=
EXTI_Löe22
Ë|| ((LINEË=
EXTI_Löe23
))

	)

172 
EXTI_DeInô
();

175 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

176 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

177 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

180 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

181 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

182 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

183 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

185 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_flash.h

30 #i‚de‡
__STM32L1xx_FLASH_H


31 
	#__STM32L1xx_FLASH_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

55 
FLASH_BUSY
 = 1,

56 
FLASH_ERROR_WRP
,

57 
FLASH_ERROR_PROGRAM
,

58 
FLASH_COMPLETE
,

59 
FLASH_TIMEOUT


60 }
	tFLASH_Sètus
;

71 
	#FLASH_L©ícy_0
 ((
uöt8_t
)0x00Ë

	)

72 
	#FLASH_L©ícy_1
 ((
uöt8_t
)0x01Ë

	)

74 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
) || \

75 ((
LATENCY
Ë=
FLASH_L©ícy_1
))

	)

84 
	#FLASH_IT_EOP
 
FLASH_PECR_EOPIE


	)

85 
	#FLASH_IT_ERR
 
FLASH_PECR_ERRIE


	)

86 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFCFFFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

95 
	#IS_FLASH_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08080000Ë&& ((ADDRESSË<0x08082FFF))

	)

96 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË<0x0805FFFF))

	)

106 
	#OB_WRP_Pages0to15
 ((
uöt32_t
)0x00000001Ë

	)

107 
	#OB_WRP_Pages16to31
 ((
uöt32_t
)0x00000002Ë

	)

108 
	#OB_WRP_Pages32to47
 ((
uöt32_t
)0x00000004Ë

	)

109 
	#OB_WRP_Pages48to63
 ((
uöt32_t
)0x00000008Ë

	)

110 
	#OB_WRP_Pages64to79
 ((
uöt32_t
)0x00000010Ë

	)

111 
	#OB_WRP_Pages80to95
 ((
uöt32_t
)0x00000020Ë

	)

112 
	#OB_WRP_Pages96to111
 ((
uöt32_t
)0x00000040Ë

	)

113 
	#OB_WRP_Pages112to127
 ((
uöt32_t
)0x00000080Ë

	)

114 
	#OB_WRP_Pages128to143
 ((
uöt32_t
)0x00000100Ë

	)

115 
	#OB_WRP_Pages144to159
 ((
uöt32_t
)0x00000200Ë

	)

116 
	#OB_WRP_Pages160to175
 ((
uöt32_t
)0x00000400Ë

	)

117 
	#OB_WRP_Pages176to191
 ((
uöt32_t
)0x00000800Ë

	)

118 
	#OB_WRP_Pages192to207
 ((
uöt32_t
)0x00001000Ë

	)

119 
	#OB_WRP_Pages208to223
 ((
uöt32_t
)0x00002000Ë

	)

120 
	#OB_WRP_Pages224to239
 ((
uöt32_t
)0x00004000Ë

	)

121 
	#OB_WRP_Pages240to255
 ((
uöt32_t
)0x00008000Ë

	)

122 
	#OB_WRP_Pages256to271
 ((
uöt32_t
)0x00010000Ë

	)

123 
	#OB_WRP_Pages272to287
 ((
uöt32_t
)0x00020000Ë

	)

124 
	#OB_WRP_Pages288to303
 ((
uöt32_t
)0x00040000Ë

	)

125 
	#OB_WRP_Pages304to319
 ((
uöt32_t
)0x00080000Ë

	)

126 
	#OB_WRP_Pages320to335
 ((
uöt32_t
)0x00100000Ë

	)

127 
	#OB_WRP_Pages336to351
 ((
uöt32_t
)0x00200000Ë

	)

128 
	#OB_WRP_Pages352to367
 ((
uöt32_t
)0x00400000Ë

	)

129 
	#OB_WRP_Pages368to383
 ((
uöt32_t
)0x00800000Ë

	)

130 
	#OB_WRP_Pages384to399
 ((
uöt32_t
)0x01000000Ë

	)

131 
	#OB_WRP_Pages400to415
 ((
uöt32_t
)0x02000000Ë

	)

132 
	#OB_WRP_Pages416to431
 ((
uöt32_t
)0x04000000Ë

	)

133 
	#OB_WRP_Pages432to447
 ((
uöt32_t
)0x08000000Ë

	)

134 
	#OB_WRP_Pages448to463
 ((
uöt32_t
)0x10000000Ë

	)

135 
	#OB_WRP_Pages464to479
 ((
uöt32_t
)0x20000000Ë

	)

136 
	#OB_WRP_Pages480to495
 ((
uöt32_t
)0x40000000Ë

	)

137 
	#OB_WRP_Pages496to511
 ((
uöt32_t
)0x80000000Ë

	)

139 
	#OB_WRP_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

141 
	#OB_WRP1_Pages512to527
 ((
uöt32_t
)0x00000001Ë

	)

142 
	#OB_WRP1_Pages528to543
 ((
uöt32_t
)0x00000002Ë

	)

143 
	#OB_WRP1_Pages544to559
 ((
uöt32_t
)0x00000004Ë

	)

144 
	#OB_WRP1_Pages560to575
 ((
uöt32_t
)0x00000008Ë

	)

145 
	#OB_WRP1_Pages576to591
 ((
uöt32_t
)0x00000010Ë

	)

146 
	#OB_WRP1_Pages592to607
 ((
uöt32_t
)0x00000020Ë

	)

147 
	#OB_WRP1_Pages608to623
 ((
uöt32_t
)0x00000040Ë

	)

148 
	#OB_WRP1_Pages624to639
 ((
uöt32_t
)0x00000080Ë

	)

149 
	#OB_WRP1_Pages640to655
 ((
uöt32_t
)0x00000100Ë

	)

150 
	#OB_WRP1_Pages656to671
 ((
uöt32_t
)0x00000200Ë

	)

151 
	#OB_WRP1_Pages672to687
 ((
uöt32_t
)0x00000400Ë

	)

152 
	#OB_WRP1_Pages688to703
 ((
uöt32_t
)0x00000800Ë

	)

153 
	#OB_WRP1_Pages704to719
 ((
uöt32_t
)0x00001000Ë

	)

154 
	#OB_WRP1_Pages720to735
 ((
uöt32_t
)0x00002000Ë

	)

155 
	#OB_WRP1_Pages736to751
 ((
uöt32_t
)0x00004000Ë

	)

156 
	#OB_WRP1_Pages752to767
 ((
uöt32_t
)0x00008000Ë

	)

157 
	#OB_WRP1_Pages768to783
 ((
uöt32_t
)0x00010000Ë

	)

158 
	#OB_WRP1_Pages784to799
 ((
uöt32_t
)0x00020000Ë

	)

159 
	#OB_WRP1_Pages800to815
 ((
uöt32_t
)0x00040000Ë

	)

160 
	#OB_WRP1_Pages816to831
 ((
uöt32_t
)0x00080000Ë

	)

161 
	#OB_WRP1_Pages832to847
 ((
uöt32_t
)0x00100000Ë

	)

162 
	#OB_WRP1_Pages848to863
 ((
uöt32_t
)0x00200000Ë

	)

163 
	#OB_WRP1_Pages864to879
 ((
uöt32_t
)0x00400000Ë

	)

164 
	#OB_WRP1_Pages880to895
 ((
uöt32_t
)0x00800000Ë

	)

165 
	#OB_WRP1_Pages896to911
 ((
uöt32_t
)0x01000000Ë

	)

166 
	#OB_WRP1_Pages912to927
 ((
uöt32_t
)0x02000000Ë

	)

167 
	#OB_WRP1_Pages928to943
 ((
uöt32_t
)0x04000000Ë

	)

168 
	#OB_WRP1_Pages944to959
 ((
uöt32_t
)0x08000000Ë

	)

169 
	#OB_WRP1_Pages960to975
 ((
uöt32_t
)0x10000000Ë

	)

170 
	#OB_WRP1_Pages976to991
 ((
uöt32_t
)0x20000000Ë

	)

171 
	#OB_WRP1_Pages992to1007
 ((
uöt32_t
)0x40000000Ë

	)

172 
	#OB_WRP1_Pages1008to1023
 ((
uöt32_t
)0x80000000Ë

	)

174 
	#OB_WRP1_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

176 
	#OB_WRP2_Pages1024to1039
 ((
uöt32_t
)0x00000001Ë

	)

177 
	#OB_WRP2_Pages1040to1055
 ((
uöt32_t
)0x00000002Ë

	)

178 
	#OB_WRP2_Pages1056to1071
 ((
uöt32_t
)0x00000004Ë

	)

179 
	#OB_WRP2_Pages1072to1087
 ((
uöt32_t
)0x00000008Ë

	)

180 
	#OB_WRP2_Pages1088to1103
 ((
uöt32_t
)0x00000010Ë

	)

181 
	#OB_WRP2_Pages1104to1119
 ((
uöt32_t
)0x00000020Ë

	)

182 
	#OB_WRP2_Pages1120to1135
 ((
uöt32_t
)0x00000040Ë

	)

183 
	#OB_WRP2_Pages1136to1151
 ((
uöt32_t
)0x00000080Ë

	)

184 
	#OB_WRP2_Pages1152to1167
 ((
uöt32_t
)0x00000100Ë

	)

185 
	#OB_WRP2_Pages1168to1183
 ((
uöt32_t
)0x00000200Ë

	)

186 
	#OB_WRP2_Pages1184to1199
 ((
uöt32_t
)0x00000400Ë

	)

187 
	#OB_WRP2_Pages1200to1215
 ((
uöt32_t
)0x00000800Ë

	)

188 
	#OB_WRP2_Pages1216to1231
 ((
uöt32_t
)0x00001000Ë

	)

189 
	#OB_WRP2_Pages1232to1247
 ((
uöt32_t
)0x00002000Ë

	)

190 
	#OB_WRP2_Pages1248to1263
 ((
uöt32_t
)0x00004000Ë

	)

191 
	#OB_WRP2_Pages1264to1279
 ((
uöt32_t
)0x00008000Ë

	)

192 
	#OB_WRP2_Pages1280to1295
 ((
uöt32_t
)0x00010000Ë

	)

193 
	#OB_WRP2_Pages1296to1311
 ((
uöt32_t
)0x00020000Ë

	)

194 
	#OB_WRP2_Pages1312to1327
 ((
uöt32_t
)0x00040000Ë

	)

195 
	#OB_WRP2_Pages1328to1343
 ((
uöt32_t
)0x00080000Ë

	)

196 
	#OB_WRP2_Pages1344to1359
 ((
uöt32_t
)0x00100000Ë

	)

197 
	#OB_WRP2_Pages1360to1375
 ((
uöt32_t
)0x00200000Ë

	)

198 
	#OB_WRP2_Pages1376to1391
 ((
uöt32_t
)0x00400000Ë

	)

199 
	#OB_WRP2_Pages1392to1407
 ((
uöt32_t
)0x00800000Ë

	)

200 
	#OB_WRP2_Pages1408to1423
 ((
uöt32_t
)0x01000000Ë

	)

201 
	#OB_WRP2_Pages1424to1439
 ((
uöt32_t
)0x02000000Ë

	)

202 
	#OB_WRP2_Pages1440to1455
 ((
uöt32_t
)0x04000000Ë

	)

203 
	#OB_WRP2_Pages1456to1471
 ((
uöt32_t
)0x08000000Ë

	)

204 
	#OB_WRP2_Pages1472to1487
 ((
uöt32_t
)0x10000000Ë

	)

205 
	#OB_WRP2_Pages1488to1503
 ((
uöt32_t
)0x20000000Ë

	)

206 
	#OB_WRP2_Pages1504to1519
 ((
uöt32_t
)0x40000000Ë

	)

207 
	#OB_WRP2_Pages1520to1535
 ((
uöt32_t
)0x80000000Ë

	)

209 
	#OB_WRP2_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

211 
	#IS_OB_WRP
(
PAGE
Ë(((PAGEË!0x0000000))

	)

221 
	#OB_PcROP_E«bÀ
 ((
uöt16_t
)0x0100Ë

	)

222 
	#OB_PcROP_DißbÀ
 ((
uöt16_t
)0x0000Ë

	)

223 
	#IS_OB_PCROP_SELECT
(
OB_PcROP
Ë(((OB_PcROPË=
OB_PcROP_E«bÀ
Ë|| ((OB_PcROPË=
OB_PcROP_DißbÀ
))

	)

236 
	#OB_RDP_Levñ_0
 ((
uöt8_t
)0xAA)

	)

237 
	#OB_RDP_Levñ_1
 ((
uöt8_t
)0xBB)

	)

241 
	#IS_OB_RDP
(
LEVEL
Ë(((LEVELË=
OB_RDP_Levñ_0
)||\

242 ((
LEVEL
Ë=
OB_RDP_Levñ_1
))

	)

252 
	#OB_IWDG_SW
 ((
uöt8_t
)0x10Ë

	)

253 
	#OB_IWDG_HW
 ((
uöt8_t
)0x00Ë

	)

254 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

264 
	#OB_STOP_NoRST
 ((
uöt8_t
)0x20Ë

	)

265 
	#OB_STOP_RST
 ((
uöt8_t
)0x00Ë

	)

266 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

276 
	#OB_STDBY_NoRST
 ((
uöt8_t
)0x40Ë

	)

277 
	#OB_STDBY_RST
 ((
uöt8_t
)0x00Ë

	)

278 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

288 
	#OB_BOOT_BANK2
 ((
uöt8_t
)0x00Ë

	)

291 
	#OB_BOOT_BANK1
 ((
uöt8_t
)0x80Ë

	)

293 
	#IS_OB_BOOT_BANK
(
BANK
Ë(((BANKË=
OB_BOOT_BANK2
Ë|| ((BANKË=
OB_BOOT_BANK1
))

	)

303 
	#OB_BOR_OFF
 ((
uöt8_t
)0x00Ë

	)

305 
	#OB_BOR_LEVEL1
 ((
uöt8_t
)0x08Ë

	)

306 
	#OB_BOR_LEVEL2
 ((
uöt8_t
)0x09Ë

	)

307 
	#OB_BOR_LEVEL3
 ((
uöt8_t
)0x0AË

	)

308 
	#OB_BOR_LEVEL4
 ((
uöt8_t
)0x0BË

	)

309 
	#OB_BOR_LEVEL5
 ((
uöt8_t
)0x0CË

	)

311 
	#IS_OB_BOR_LEVEL
(
LEVEL
Ë(((LEVELË=
OB_BOR_OFF
) || \

312 ((
LEVEL
Ë=
OB_BOR_LEVEL1
) || \

313 ((
LEVEL
Ë=
OB_BOR_LEVEL2
) || \

314 ((
LEVEL
Ë=
OB_BOR_LEVEL3
) || \

315 ((
LEVEL
Ë=
OB_BOR_LEVEL4
) || \

316 ((
LEVEL
Ë=
OB_BOR_LEVEL5
))

	)

326 
	#FLASH_FLAG_BSY
 
FLASH_SR_BSY


	)

327 
	#FLASH_FLAG_EOP
 
FLASH_SR_EOP


	)

328 
	#FLASH_FLAG_ENDHV
 
FLASH_SR_ENHV


	)

329 
	#FLASH_FLAG_READY
 
FLASH_SR_READY


	)

330 
	#FLASH_FLAG_WRPERR
 
FLASH_SR_WRPERR


	)

331 
	#FLASH_FLAG_PGAERR
 
FLASH_SR_PGAERR


	)

332 
	#FLASH_FLAG_SIZERR
 
FLASH_SR_SIZERR


	)

333 
	#FLASH_FLAG_OPTVERR
 
FLASH_SR_OPTVERR


	)

334 
	#FLASH_FLAG_OPTVERRUSR
 
FLASH_SR_OPTVERRUSR


	)

335 
	#FLASH_FLAG_RDERR
 
FLASH_SR_RDERR


	)

338 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFC0FDË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

340 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_EOP
) || \

341 ((
FLAG
Ë=
FLASH_FLAG_ENDHV
Ë|| ((FLAGË=
FLASH_FLAG_READY
 ) || \

342 ((
FLAG
Ë=
FLASH_FLAG_WRPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGAERR
 ) || \

343 ((
FLAG
Ë=
FLASH_FLAG_SIZERR
Ë|| ((FLAGË=
FLASH_FLAG_OPTVERR
) || \

344 ((
FLAG
Ë=
FLASH_FLAG_OPTVERRUSR
Ë|| ((FLAGË=
FLASH_FLAG_RDERR
))

	)

353 
	#FLASH_PDKEY1
 ((
uöt32_t
)0x04152637Ë

	)

354 
	#FLASH_PDKEY2
 ((
uöt32_t
)0xFAFBFCFDË

	)

357 
	#FLASH_PEKEY1
 ((
uöt32_t
)0x89ABCDEFË

	)

358 
	#FLASH_PEKEY2
 ((
uöt32_t
)0x02030405Ë

	)

362 
	#FLASH_PRGKEY1
 ((
uöt32_t
)0x8C9DAEBFË

	)

363 
	#FLASH_PRGKEY2
 ((
uöt32_t
)0x13141516Ë

	)

366 
	#FLASH_OPTKEY1
 ((
uöt32_t
)0xFBEAD9C8Ë

	)

367 
	#FLASH_OPTKEY2
 ((
uöt32_t
)0x24252627Ë

	)

376 
	#FLASH_ER_PRG_TIMEOUT
 ((
uöt32_t
)0x8000)

	)

385 #i‡
deföed
 ( 
__ICCARM__
 )

386 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Msk
 
I¡Ty≥_ACTLR_DISMCYCINT_Msk


	)

402 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

403 
FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

404 
FLASH_RódAc˚ss64Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

405 
FLASH_SLEEPPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

408 
FLASH_U∆ock
();

409 
FLASH_Lock
();

410 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

411 
FLASH_Sètus
 
FLASH_Fa°ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

414 
DATA_EEPROM_U∆ock
();

415 
DATA_EEPROM_Lock
();

416 
DATA_EEPROM_FixedTimeProgømCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

417 
FLASH_Sètus
 
DATA_EEPROM_Eø£Byã
(
uöt32_t
 
Addªss
);

418 
FLASH_Sètus
 
DATA_EEPROM_Eø£HÆfW‹d
(
uöt32_t
 
Addªss
);

419 
FLASH_Sètus
 
DATA_EEPROM_Eø£W‹d
(
uöt32_t
 
Addªss
);

420 
FLASH_Sètus
 
DATA_EEPROM_Fa°ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

421 
FLASH_Sètus
 
DATA_EEPROM_Fa°ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

422 
FLASH_Sètus
 
DATA_EEPROM_Fa°ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

423 
FLASH_Sètus
 
DATA_EEPROM_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

424 
FLASH_Sètus
 
DATA_EEPROM_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

425 
FLASH_Sètus
 
DATA_EEPROM_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

428 
FLASH_OB_U∆ock
();

429 
FLASH_OB_Lock
();

430 
FLASH_OB_Launch
();

431 
FLASH_Sètus
 
FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
FLASH_Sètus
 
FLASH_OB_WRP1C⁄fig
(
uöt32_t
 
OB_WRP1
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
FLASH_Sètus
 
FLASH_OB_WRP2C⁄fig
(
uöt32_t
 
OB_WRP2
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

434 
FLASH_Sètus
 
FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
);

435 
FLASH_Sètus
 
FLASH_OB_PCROPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

436 
FLASH_Sètus
 
FLASH_OB_PCROP1C⁄fig
(
uöt32_t
 
OB_WRP1
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

437 
FLASH_Sètus
 
FLASH_OB_PCROPSñe˘i⁄C⁄fig
(
uöt16_t
 
OB_PcROP
);

438 
FLASH_Sètus
 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
);

439 
FLASH_Sètus
 
FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
);

440 
FLASH_Sètus
 
FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
);

441 
uöt8_t
 
FLASH_OB_GëU£r
();

442 
uöt32_t
 
FLASH_OB_GëWRP
();

443 
uöt32_t
 
FLASH_OB_GëWRP1
();

444 
uöt32_t
 
FLASH_OB_GëWRP2
();

445 
FœgSètus
 
FLASH_OB_GëRDP
();

446 
FœgSètus
 
FLASH_OB_GëSPRMOD
();

447 
uöt8_t
 
FLASH_OB_GëBOR
();

450 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

452 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

453 
FLASH_Sètus
 
FLASH_GëSètus
();

454 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

461 
__RAM_FUNC
 
FLASH_RUNPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
__RAM_FUNC
 
FLASH_Eø£P¨ÆÀlPage
(
uöt32_t
 
Page_Addªss1
, uöt32_à
Page_Addªss2
);

463 
__RAM_FUNC
 
FLASH_ProgømHÆfPage
(
uöt32_t
 
Addªss
, uöt32_t* 
pBuf„r
);

464 
__RAM_FUNC
 
FLASH_ProgømP¨ÆÀlHÆfPage
(
uöt32_t
 
Addªss1
, uöt32_t* 
pBuf„r1
, uöt32_à
Addªss2
, uöt32_t* 
pBuf„r2
);

465 
__RAM_FUNC
 
DATA_EEPROM_Eø£DoubÀW‹d
(
uöt32_t
 
Addªss
);

466 
__RAM_FUNC
 
DATA_EEPROM_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
);

468 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_fsmc.h

30 #i‚de‡
__STM32L1xx_FSMC_H


31 
	#__STM32L1xx_FSMC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

56 
uöt32_t
 
FSMC_AddªssSëupTime
;

61 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

66 
uöt32_t
 
FSMC_D©aSëupTime
;

71 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

76 
uöt32_t
 
FSMC_CLKDivisi⁄
;

80 
uöt32_t
 
FSMC_D©aL©ícy
;

88 
uöt32_t
 
FSMC_Ac˚ssMode
;

90 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

98 
uöt32_t
 
FSMC_B™k
;

101 
uöt32_t
 
FSMC_D©aAddªssMux
;

105 
uöt32_t
 
FSMC_Mem‹yTy≥
;

109 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

112 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

116 
uöt32_t
 
FSMC_Asynchr⁄ousWaô
;

120 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

124 
uöt32_t
 
FSMC_WøpMode
;

128 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

133 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

136 
uöt32_t
 
FSMC_WaôSig«l
;

140 
uöt32_t
 
FSMC_ExãndedMode
;

143 
uöt32_t
 
FSMC_WrôeBur°
;

146 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

148 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

149 }
	tFSMC_NORSRAMInôTy≥Def
;

160 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

161 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

162 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

163 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

165 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
) || \

166 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

167 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

168 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

	)

181 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

182 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

183 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
) || \

184 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

	)

194 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

195 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

196 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

197 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
) || \

198 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

199 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

	)

209 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

210 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

211 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
) || \

212 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

	)

222 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

223 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

224 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
) || \

225 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

	)

233 
	#FSMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

234 
	#FSMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

235 
	#IS_FSMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FSMC_Asynchr⁄ousWaô_DißbÀ
) || \

236 ((
STATE
Ë=
FSMC_Asynchr⁄ousWaô_E«bÀ
))

	)

246 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

247 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

248 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
) || \

249 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

	)

259 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

260 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

261 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
) || \

262 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

	)

272 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

273 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

274 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
) || \

275 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

	)

285 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

286 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

287 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
) || \

288 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

	)

298 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

299 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

300 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
) || \

301 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

	)

310 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

311 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

313 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
) || \

314 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

	)

324 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

325 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

326 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
) || \

327 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

	)

336 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

346 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

356 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

366 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

376 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

386 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

396 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

397 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

398 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

399 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

400 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
) || \

401 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

402 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

403 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

	)

420 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

421 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

422 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

423 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

425 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_gpio.h

30 #i‚de‡
__STM32L1xx_GPIO_H


31 
	#__STM32L1xx_GPIO_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

50 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
) || \

51 ((
PERIPH
Ë=
GPIOB
) || \

52 ((
PERIPH
Ë=
GPIOC
) || \

53 ((
PERIPH
Ë=
GPIOD
) || \

54 ((
PERIPH
Ë=
GPIOE
) || \

55 ((
PERIPH
Ë=
GPIOH
) || \

56 ((
PERIPH
Ë=
GPIOF
) || \

57 ((
PERIPH
Ë=
GPIOG
))

	)

64 
GPIO_Mode_IN
 = 0x00,

65 
GPIO_Mode_OUT
 = 0x01,

66 
GPIO_Mode_AF
 = 0x02,

67 
GPIO_Mode_AN
 = 0x03

68 }
	tGPIOMode_Ty≥Def
;

69 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_IN
Ë|| ((MODEË=
GPIO_Mode_OUT
) || \

70 ((
MODE
Ë=
GPIO_Mode_AF
)|| ((MODEË=
GPIO_Mode_AN
))

	)

79 { 
GPIO_OTy≥_PP
 = 0x00,

80 
GPIO_OTy≥_OD
 = 0x01

81 }
	tGPIOOTy≥_Ty≥Def
;

82 
	#IS_GPIO_OTYPE
(
OTYPE
Ë(((OTYPEË=
GPIO_OTy≥_PP
Ë|| ((OTYPEË=
GPIO_OTy≥_OD
))

	)

93 
GPIO_S≥ed_400KHz
 = 0x00,

94 
GPIO_S≥ed_2MHz
 = 0x01,

95 
GPIO_S≥ed_10MHz
 = 0x02,

96 
GPIO_S≥ed_40MHz
 = 0x03

97 }
	tGPIOS≥ed_Ty≥Def
;

98 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_400KHz
Ë|| ((SPEEDË=
GPIO_S≥ed_2MHz
) || \

99 ((
SPEED
Ë=
GPIO_S≥ed_10MHz
)|| ((SPEEDË=
GPIO_S≥ed_40MHz
))

	)

108 { 
GPIO_PuPd_NOPULL
 = 0x00,

109 
GPIO_PuPd_UP
 = 0x01,

110 
GPIO_PuPd_DOWN
 = 0x02

111 }
	tGPIOPuPd_Ty≥Def
;

112 
	#IS_GPIO_PUPD
(
PUPD
Ë(((PUPDË=
GPIO_PuPd_NOPULL
Ë|| ((PUPDË=
GPIO_PuPd_UP
) || \

113 ((
PUPD
Ë=
GPIO_PuPd_DOWN
))

	)

122 { 
Bô_RESET
 = 0,

123 
Bô_SET


124 }
	tBôA˘i⁄
;

125 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

136 
uöt32_t
 
GPIO_Pö
;

139 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

142 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

145 
GPIOOTy≥_Ty≥Def
 
GPIO_OTy≥
;

148 
GPIOPuPd_Ty≥Def
 
GPIO_PuPd
;

150 }
	tGPIO_InôTy≥Def
;

161 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

162 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

163 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

164 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

165 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

166 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

167 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

168 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

169 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

170 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

171 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

172 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

173 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

174 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

175 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

176 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

177 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

179 
	#IS_GPIO_PIN
(
PIN
Ë((PINË!(
uöt16_t
)0x00)

	)

180 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
) || \

181 ((
PIN
Ë=
GPIO_Pö_1
) || \

182 ((
PIN
Ë=
GPIO_Pö_2
) || \

183 ((
PIN
Ë=
GPIO_Pö_3
) || \

184 ((
PIN
Ë=
GPIO_Pö_4
) || \

185 ((
PIN
Ë=
GPIO_Pö_5
) || \

186 ((
PIN
Ë=
GPIO_Pö_6
) || \

187 ((
PIN
Ë=
GPIO_Pö_7
) || \

188 ((
PIN
Ë=
GPIO_Pö_8
) || \

189 ((
PIN
Ë=
GPIO_Pö_9
) || \

190 ((
PIN
Ë=
GPIO_Pö_10
) || \

191 ((
PIN
Ë=
GPIO_Pö_11
) || \

192 ((
PIN
Ë=
GPIO_Pö_12
) || \

193 ((
PIN
Ë=
GPIO_Pö_13
) || \

194 ((
PIN
Ë=
GPIO_Pö_14
) || \

195 ((
PIN
Ë=
GPIO_Pö_15
))

	)

203 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

204 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

205 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

206 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

207 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

208 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

209 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

210 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

211 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

212 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

213 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

214 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

215 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

216 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

217 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

218 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

220 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
) || \

221 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

222 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

223 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

224 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

225 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

226 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

227 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

228 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

229 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

230 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

231 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

232 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

233 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

234 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

235 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

	)

247 
	#GPIO_AF_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

248 
	#GPIO_AF_MCO
 ((
uöt8_t
)0x00Ë

	)

249 
	#GPIO_AF_RTC_AF1
 ((
uöt8_t
)0x00Ë

	)

250 
	#GPIO_AF_WKUP
 ((
uöt8_t
)0x00Ë

	)

251 
	#GPIO_AF_SWJ
 ((
uöt8_t
)0x00Ë

	)

252 
	#GPIO_AF_TRACE
 ((
uöt8_t
)0x00Ë

	)

257 
	#GPIO_AF_TIM2
 ((
uöt8_t
)0x01Ë

	)

261 
	#GPIO_AF_TIM3
 ((
uöt8_t
)0x02Ë

	)

262 
	#GPIO_AF_TIM4
 ((
uöt8_t
)0x02Ë

	)

263 
	#GPIO_AF_TIM5
 ((
uöt8_t
)0x02Ë

	)

267 
	#GPIO_AF_TIM9
 ((
uöt8_t
)0x03Ë

	)

268 
	#GPIO_AF_TIM10
 ((
uöt8_t
)0x03Ë

	)

269 
	#GPIO_AF_TIM11
 ((
uöt8_t
)0x03Ë

	)

273 
	#GPIO_AF_I2C1
 ((
uöt8_t
)0x04Ë

	)

274 
	#GPIO_AF_I2C2
 ((
uöt8_t
)0x04Ë

	)

278 
	#GPIO_AF_SPI1
 ((
uöt8_t
)0x05Ë

	)

279 
	#GPIO_AF_SPI2
 ((
uöt8_t
)0x05Ë

	)

283 
	#GPIO_AF_SPI3
 ((
uöt8_t
)0x06Ë

	)

287 
	#GPIO_AF_USART1
 ((
uöt8_t
)0x07Ë

	)

288 
	#GPIO_AF_USART2
 ((
uöt8_t
)0x07Ë

	)

289 
	#GPIO_AF_USART3
 ((
uöt8_t
)0x07Ë

	)

293 
	#GPIO_AF_UART4
 ((
uöt8_t
)0x08Ë

	)

294 
	#GPIO_AF_UART5
 ((
uöt8_t
)0x08Ë

	)

298 
	#GPIO_AF_USB
 ((
uöt8_t
)0xAË

	)

302 
	#GPIO_AF_LCD
 ((
uöt8_t
)0x0BË

	)

306 
	#GPIO_AF_FSMC
 ((
uöt8_t
)0x0CË

	)

307 
	#GPIO_AF_SDIO
 ((
uöt8_t
)0x0CË

	)

311 
	#GPIO_AF_RI
 ((
uöt8_t
)0x0EË

	)

316 
	#GPIO_AF_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

318 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_MCO
) || \

319 ((
AF
Ë=
GPIO_AF_RTC_AF1
Ë|| ((AFË=
GPIO_AF_WKUP
) || \

320 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

321 ((
AF
Ë=
GPIO_AF_TIM2
Ë|| ((AF)=
GPIO_AF_TIM3
) || \

322 ((
AF
Ë=
GPIO_AF_TIM4
Ë|| ((AF)=
GPIO_AF_TIM9
) || \

323 ((
AF
Ë=
GPIO_AF_TIM10
Ë|| ((AF)=
GPIO_AF_TIM11
) || \

324 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

325 ((
AF
Ë=
GPIO_AF_SPI1
Ë|| ((AFË=
GPIO_AF_SPI2
) || \

326 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

327 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_USB
) || \

328 ((
AF
Ë=
GPIO_AF_LCD
Ë|| ((AFË=
GPIO_AF_RI
) || \

329 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_SPI3
) || \

330 ((
AF
Ë=
GPIO_AF_UART4
Ë|| ((AFË=
GPIO_AF_UART5
) || \

331 ((
AF
Ë=
GPIO_AF_FSMC
Ë|| ((AFË=
GPIO_AF_SDIO
) || \

332 ((
AF
Ë=
GPIO_AF_EVENTOUT
))

	)

342 
	#GPIO_Mode_AIN
 
GPIO_Mode_AN


	)

356 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

359 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

360 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

361 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

364 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

365 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

366 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

367 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

368 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

369 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

370 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

371 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

372 
GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

375 
GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
);

377 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_i2c.h

30 #i‚de‡
__STM32L1xx_I2C_H


31 
	#__STM32L1xx_I2C_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

56 
uöt32_t
 
I2C_ClockS≥ed
;

59 
uöt16_t
 
I2C_Mode
;

62 
uöt16_t
 
I2C_DutyCy˛e
;

65 
uöt16_t
 
I2C_OwnAddªss1
;

68 
uöt16_t
 
I2C_Ack
;

71 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

73 }
	tI2C_InôTy≥Def
;

82 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
) || \

83 ((
PERIPH
Ë=
I2C2
))

	)

88 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

89 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

90 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

91 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
) || \

92 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

93 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

	)

102 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

103 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

104 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
) || \

105 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

	)

114 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

115 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

116 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
) || \

117 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

	)

126 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

127 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

128 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
) || \

129 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

	)

138 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

139 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

140 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
) || \

141 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

	)

150 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

151 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

152 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

153 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

154 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

155 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

156 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

157 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

158 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

159 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
) || \

160 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

161 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

162 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

163 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

164 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

165 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

166 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

167 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

	)

176 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

177 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

178 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
) || \

179 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

	)

188 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

189 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

190 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
) || \

191 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

	)

200 
	#I2C_NACKPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

201 
	#I2C_NACKPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

202 
	#IS_I2C_NACK_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_NACKPosôi⁄_Next
) || \

203 ((
POSITION
Ë=
I2C_NACKPosôi⁄_Cuºít
))

	)

212 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

213 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

214 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

215 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

224 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

225 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

226 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

227 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

228 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

229 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

230 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

231 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

232 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

233 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

234 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

235 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

236 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

237 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

239 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

241 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
) || \

242 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

243 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

244 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

245 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

246 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

247 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

	)

260 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

261 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

262 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

263 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

264 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

265 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

266 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

272 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

273 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

274 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

275 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

276 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

277 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

278 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

279 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

280 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

281 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

282 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

283 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

284 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

285 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

287 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

289 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
) || \

290 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

291 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

292 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

293 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

294 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

295 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

296 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

297 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

298 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

299 ((
FLAG
Ë=
I2C_FLAG_SB
))

	)

323 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

351 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

352 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

354 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

387 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

391 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

393 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

430 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

431 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

434 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

435 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

438 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

469 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

471 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

475 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

476 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

478 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

486 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
) || \

487 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

488 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

489 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

490 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

491 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

492 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

493 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

494 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

495 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

496 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

497 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

498 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

499 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

500 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

501 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

502 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

503 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

504 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

505 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

	)

514 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

523 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

536 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

539 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

540 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

541 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

542 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

543 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

544 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

545 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

546 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

547 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

548 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

549 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

550 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

551 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

552 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

553 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

556 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

557 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

558 
I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
);

561 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

562 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

563 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

564 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

567 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

568 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

572 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

573 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

670 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

676 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

682 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

685 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

686 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

687 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

689 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_iwdg.h

30 #i‚de‡
__STM32L1xx_IWDG_H


31 
	#__STM32L1xx_IWDG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

59 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

60 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

61 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
) || \

62 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

	)

71 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

72 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

73 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

74 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

75 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

76 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

77 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

78 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

83 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

84 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

	)

93 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

94 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

95 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

96 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

109 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

110 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

111 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

112 
IWDG_RñﬂdCou¡î
();

115 
IWDG_E«bÀ
();

118 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

120 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_lcd.h

30 #i‚de‡
__STM32L1xx_LCD_H


31 
	#__STM32L1xx_LCD_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

56 
uöt32_t
 
LCD_PªsˇÀr
;

58 
uöt32_t
 
LCD_Dividî
;

60 
uöt32_t
 
LCD_Duty
;

62 
uöt32_t
 
LCD_Büs
;

64 
uöt32_t
 
LCD_VﬁègeSour˚
;

66 }
	tLCD_InôTy≥Def
;

79 
	#LCD_PªsˇÀr_1
 ((
uöt32_t
)0x00000000Ë

	)

80 
	#LCD_PªsˇÀr_2
 ((
uöt32_t
)0x00400000Ë

	)

81 
	#LCD_PªsˇÀr_4
 ((
uöt32_t
)0x00800000Ë

	)

82 
	#LCD_PªsˇÀr_8
 ((
uöt32_t
)0x00C00000Ë

	)

83 
	#LCD_PªsˇÀr_16
 ((
uöt32_t
)0x01000000Ë

	)

84 
	#LCD_PªsˇÀr_32
 ((
uöt32_t
)0x01400000Ë

	)

85 
	#LCD_PªsˇÀr_64
 ((
uöt32_t
)0x01800000Ë

	)

86 
	#LCD_PªsˇÀr_128
 ((
uöt32_t
)0x01C00000Ë

	)

87 
	#LCD_PªsˇÀr_256
 ((
uöt32_t
)0x02000000Ë

	)

88 
	#LCD_PªsˇÀr_512
 ((
uöt32_t
)0x02400000Ë

	)

89 
	#LCD_PªsˇÀr_1024
 ((
uöt32_t
)0x02800000Ë

	)

90 
	#LCD_PªsˇÀr_2048
 ((
uöt32_t
)0x02C00000Ë

	)

91 
	#LCD_PªsˇÀr_4096
 ((
uöt32_t
)0x03000000Ë

	)

92 
	#LCD_PªsˇÀr_8192
 ((
uöt32_t
)0x03400000Ë

	)

93 
	#LCD_PªsˇÀr_16384
 ((
uöt32_t
)0x03800000Ë

	)

94 
	#LCD_PªsˇÀr_32768
 ((
uöt32_t
)0x03C00000Ë

	)

96 
	#IS_LCD_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
LCD_PªsˇÀr_1
) || \

97 ((
PRESCALER
Ë=
LCD_PªsˇÀr_2
) || \

98 ((
PRESCALER
Ë=
LCD_PªsˇÀr_4
) || \

99 ((
PRESCALER
Ë=
LCD_PªsˇÀr_8
) || \

100 ((
PRESCALER
Ë=
LCD_PªsˇÀr_16
) || \

101 ((
PRESCALER
Ë=
LCD_PªsˇÀr_32
) || \

102 ((
PRESCALER
Ë=
LCD_PªsˇÀr_64
) || \

103 ((
PRESCALER
Ë=
LCD_PªsˇÀr_128
) || \

104 ((
PRESCALER
Ë=
LCD_PªsˇÀr_256
) || \

105 ((
PRESCALER
Ë=
LCD_PªsˇÀr_512
) || \

106 ((
PRESCALER
Ë=
LCD_PªsˇÀr_1024
) || \

107 ((
PRESCALER
Ë=
LCD_PªsˇÀr_2048
) || \

108 ((
PRESCALER
Ë=
LCD_PªsˇÀr_4096
) || \

109 ((
PRESCALER
Ë=
LCD_PªsˇÀr_8192
) || \

110 ((
PRESCALER
Ë=
LCD_PªsˇÀr_16384
) || \

111 ((
PRESCALER
Ë=
LCD_PªsˇÀr_32768
))

	)

121 
	#LCD_Dividî_16
 ((
uöt32_t
)0x00000000Ë

	)

122 
	#LCD_Dividî_17
 ((
uöt32_t
)0x00040000Ë

	)

123 
	#LCD_Dividî_18
 ((
uöt32_t
)0x00080000Ë

	)

124 
	#LCD_Dividî_19
 ((
uöt32_t
)0x000C0000Ë

	)

125 
	#LCD_Dividî_20
 ((
uöt32_t
)0x00100000Ë

	)

126 
	#LCD_Dividî_21
 ((
uöt32_t
)0x00140000Ë

	)

127 
	#LCD_Dividî_22
 ((
uöt32_t
)0x00180000Ë

	)

128 
	#LCD_Dividî_23
 ((
uöt32_t
)0x001C0000Ë

	)

129 
	#LCD_Dividî_24
 ((
uöt32_t
)0x00200000Ë

	)

130 
	#LCD_Dividî_25
 ((
uöt32_t
)0x00240000Ë

	)

131 
	#LCD_Dividî_26
 ((
uöt32_t
)0x00280000Ë

	)

132 
	#LCD_Dividî_27
 ((
uöt32_t
)0x002C0000Ë

	)

133 
	#LCD_Dividî_28
 ((
uöt32_t
)0x00300000Ë

	)

134 
	#LCD_Dividî_29
 ((
uöt32_t
)0x00340000Ë

	)

135 
	#LCD_Dividî_30
 ((
uöt32_t
)0x00380000Ë

	)

136 
	#LCD_Dividî_31
 ((
uöt32_t
)0x003C0000Ë

	)

138 
	#IS_LCD_DIVIDER
(
DIVIDER
Ë(((DIVIDERË=
LCD_Dividî_16
) || \

139 ((
DIVIDER
Ë=
LCD_Dividî_17
) || \

140 ((
DIVIDER
Ë=
LCD_Dividî_18
) || \

141 ((
DIVIDER
Ë=
LCD_Dividî_19
) || \

142 ((
DIVIDER
Ë=
LCD_Dividî_20
) || \

143 ((
DIVIDER
Ë=
LCD_Dividî_21
) || \

144 ((
DIVIDER
Ë=
LCD_Dividî_22
) || \

145 ((
DIVIDER
Ë=
LCD_Dividî_23
) || \

146 ((
DIVIDER
Ë=
LCD_Dividî_24
) || \

147 ((
DIVIDER
Ë=
LCD_Dividî_25
) || \

148 ((
DIVIDER
Ë=
LCD_Dividî_26
) || \

149 ((
DIVIDER
Ë=
LCD_Dividî_27
) || \

150 ((
DIVIDER
Ë=
LCD_Dividî_28
) || \

151 ((
DIVIDER
Ë=
LCD_Dividî_29
) || \

152 ((
DIVIDER
Ë=
LCD_Dividî_30
) || \

153 ((
DIVIDER
Ë=
LCD_Dividî_31
))

	)

164 
	#LCD_Duty_Sètic
 ((
uöt32_t
)0x00000000Ë

	)

165 
	#LCD_Duty_1_2
 ((
uöt32_t
)0x00000004Ë

	)

166 
	#LCD_Duty_1_3
 ((
uöt32_t
)0x00000008Ë

	)

167 
	#LCD_Duty_1_4
 ((
uöt32_t
)0x0000000CË

	)

168 
	#LCD_Duty_1_8
 ((
uöt32_t
)0x00000010Ë

	)

170 
	#IS_LCD_DUTY
(
DUTY
Ë(((DUTYË=
LCD_Duty_Sètic
) || \

171 ((
DUTY
Ë=
LCD_Duty_1_2
) || \

172 ((
DUTY
Ë=
LCD_Duty_1_3
) || \

173 ((
DUTY
Ë=
LCD_Duty_1_4
) || \

174 ((
DUTY
Ë=
LCD_Duty_1_8
))

	)

185 
	#LCD_Büs_1_4
 ((
uöt32_t
)0x00000000Ë

	)

186 
	#LCD_Büs_1_2
 
LCD_CR_BIAS_0


	)

187 
	#LCD_Büs_1_3
 
LCD_CR_BIAS_1


	)

189 
	#IS_LCD_BIAS
(
BIAS
Ë(((BIASË=
LCD_Büs_1_4
) || \

190 ((
BIAS
Ë=
LCD_Büs_1_2
) || \

191 ((
BIAS
Ë=
LCD_Büs_1_3
))

	)

200 
	#LCD_VﬁègeSour˚_I¡î«l
 ((
uöt32_t
)0x00000000Ë

	)

201 
	#LCD_VﬁègeSour˚_Exã∫Æ
 
LCD_CR_VSEL


	)

203 
	#IS_LCD_VOLTAGE_SOURCE
(
SOURCE
Ë(((SOURCEË=
LCD_VﬁègeSour˚_I¡î«l
) || \

204 ((
SOURCE
Ë=
LCD_VﬁègeSour˚_Exã∫Æ
))

	)

213 
	#LCD_IT_SOF
 
LCD_FCR_SOFIE


	)

214 
	#LCD_IT_UDD
 
LCD_FCR_UDDIE


	)

216 
	#IS_LCD_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFF5Ë=0x00Ë&& ((ITË!0x00))

	)

218 
	#IS_LCD_GET_IT
(
IT
Ë(((ITË=
LCD_IT_SOF
Ë|| ((ITË=
LCD_IT_UDD
))

	)

228 
	#LCD_Pul£OnDuøti⁄_0
 ((
uöt32_t
)0x00000000Ë

	)

229 
	#LCD_Pul£OnDuøti⁄_1
 ((
uöt32_t
)0x00000010Ë

	)

230 
	#LCD_Pul£OnDuøti⁄_2
 ((
uöt32_t
)0x00000020Ë

	)

231 
	#LCD_Pul£OnDuøti⁄_3
 ((
uöt32_t
)0x00000030Ë

	)

232 
	#LCD_Pul£OnDuøti⁄_4
 ((
uöt32_t
)0x00000040Ë

	)

233 
	#LCD_Pul£OnDuøti⁄_5
 ((
uöt32_t
)0x00000050Ë

	)

234 
	#LCD_Pul£OnDuøti⁄_6
 ((
uöt32_t
)0x00000060Ë

	)

235 
	#LCD_Pul£OnDuøti⁄_7
 ((
uöt32_t
)0x00000070Ë

	)

237 
	#IS_LCD_PULSE_ON_DURATION
(
DURATION
Ë(((DURATIONË=
LCD_Pul£OnDuøti⁄_0
) || \

238 ((
DURATION
Ë=
LCD_Pul£OnDuøti⁄_1
) || \

239 ((
DURATION
Ë=
LCD_Pul£OnDuøti⁄_2
) || \

240 ((
DURATION
Ë=
LCD_Pul£OnDuøti⁄_3
) || \

241 ((
DURATION
Ë=
LCD_Pul£OnDuøti⁄_4
) || \

242 ((
DURATION
Ë=
LCD_Pul£OnDuøti⁄_5
) || \

243 ((
DURATION
Ë=
LCD_Pul£OnDuøti⁄_6
) || \

244 ((
DURATION
Ë=
LCD_Pul£OnDuøti⁄_7
))

	)

254 
	#LCD_DódTime_0
 ((
uöt32_t
)0x00000000Ë

	)

255 
	#LCD_DódTime_1
 ((
uöt32_t
)0x00000080Ë

	)

256 
	#LCD_DódTime_2
 ((
uöt32_t
)0x00000100Ë

	)

257 
	#LCD_DódTime_3
 ((
uöt32_t
)0x00000180Ë

	)

258 
	#LCD_DódTime_4
 ((
uöt32_t
)0x00000200Ë

	)

259 
	#LCD_DódTime_5
 ((
uöt32_t
)0x00000280Ë

	)

260 
	#LCD_DódTime_6
 ((
uöt32_t
)0x00000300Ë

	)

261 
	#LCD_DódTime_7
 ((
uöt32_t
)0x00000380Ë

	)

263 
	#IS_LCD_DEAD_TIME
(
TIME
Ë(((TIMEË=
LCD_DódTime_0
) || \

264 ((
TIME
Ë=
LCD_DódTime_1
) || \

265 ((
TIME
Ë=
LCD_DódTime_2
) || \

266 ((
TIME
Ë=
LCD_DódTime_3
) || \

267 ((
TIME
Ë=
LCD_DódTime_4
) || \

268 ((
TIME
Ë=
LCD_DódTime_5
) || \

269 ((
TIME
Ë=
LCD_DódTime_6
) || \

270 ((
TIME
Ë=
LCD_DódTime_7
))

	)

279 
	#LCD_BlökMode_Off
 ((
uöt32_t
)0x00000000Ë

	)

280 
	#LCD_BlökMode_SEG0_COM0
 ((
uöt32_t
)0x00010000Ë

	)

281 
	#LCD_BlökMode_SEG0_AŒCOM
 ((
uöt32_t
)0x00020000Ë

	)

283 
	#LCD_BlökMode_AŒSEG_AŒCOM
 ((
uöt32_t
)0x00030000Ë

	)

285 
	#IS_LCD_BLINK_MODE
(
MODE
Ë(((MODEË=
LCD_BlökMode_Off
) || \

286 ((
MODE
Ë=
LCD_BlökMode_SEG0_COM0
) || \

287 ((
MODE
Ë=
LCD_BlökMode_SEG0_AŒCOM
) || \

288 ((
MODE
Ë=
LCD_BlökMode_AŒSEG_AŒCOM
))

	)

297 
	#LCD_BlökFªquícy_Div8
 ((
uöt32_t
)0x00000000Ë

	)

298 
	#LCD_BlökFªquícy_Div16
 ((
uöt32_t
)0x00002000Ë

	)

299 
	#LCD_BlökFªquícy_Div32
 ((
uöt32_t
)0x00004000Ë

	)

300 
	#LCD_BlökFªquícy_Div64
 ((
uöt32_t
)0x00006000Ë

	)

301 
	#LCD_BlökFªquícy_Div128
 ((
uöt32_t
)0x00008000Ë

	)

302 
	#LCD_BlökFªquícy_Div256
 ((
uöt32_t
)0x0000A000Ë

	)

303 
	#LCD_BlökFªquícy_Div512
 ((
uöt32_t
)0x0000C000Ë

	)

304 
	#LCD_BlökFªquícy_Div1024
 ((
uöt32_t
)0x0000E000Ë

	)

306 
	#IS_LCD_BLINK_FREQUENCY
(
FREQUENCY
Ë(((FREQUENCYË=
LCD_BlökFªquícy_Div8
) || \

307 ((
FREQUENCY
Ë=
LCD_BlökFªquícy_Div16
) || \

308 ((
FREQUENCY
Ë=
LCD_BlökFªquícy_Div32
) || \

309 ((
FREQUENCY
Ë=
LCD_BlökFªquícy_Div64
) || \

310 ((
FREQUENCY
Ë=
LCD_BlökFªquícy_Div128
) || \

311 ((
FREQUENCY
Ë=
LCD_BlökFªquícy_Div256
) || \

312 ((
FREQUENCY
Ë=
LCD_BlökFªquícy_Div512
) || \

313 ((
FREQUENCY
Ë=
LCD_BlökFªquícy_Div1024
))

	)

322 
	#LCD_C⁄åa°_Levñ_0
 ((
uöt32_t
)0x00000000Ë

	)

323 
	#LCD_C⁄åa°_Levñ_1
 ((
uöt32_t
)0x00000400Ë

	)

324 
	#LCD_C⁄åa°_Levñ_2
 ((
uöt32_t
)0x00000800Ë

	)

325 
	#LCD_C⁄åa°_Levñ_3
 ((
uöt32_t
)0x00000C00Ë

	)

326 
	#LCD_C⁄åa°_Levñ_4
 ((
uöt32_t
)0x00001000Ë

	)

327 
	#LCD_C⁄åa°_Levñ_5
 ((
uöt32_t
)0x00001400Ë

	)

328 
	#LCD_C⁄åa°_Levñ_6
 ((
uöt32_t
)0x00001800Ë

	)

329 
	#LCD_C⁄åa°_Levñ_7
 ((
uöt32_t
)0x00001C00Ë

	)

331 
	#IS_LCD_CONTRAST
(
CONTRAST
Ë(((CONTRASTË=
LCD_C⁄åa°_Levñ_0
) || \

332 ((
CONTRAST
Ë=
LCD_C⁄åa°_Levñ_1
) || \

333 ((
CONTRAST
Ë=
LCD_C⁄åa°_Levñ_2
) || \

334 ((
CONTRAST
Ë=
LCD_C⁄åa°_Levñ_3
) || \

335 ((
CONTRAST
Ë=
LCD_C⁄åa°_Levñ_4
) || \

336 ((
CONTRAST
Ë=
LCD_C⁄åa°_Levñ_5
) || \

337 ((
CONTRAST
Ë=
LCD_C⁄åa°_Levñ_6
) || \

338 ((
CONTRAST
Ë=
LCD_C⁄åa°_Levñ_7
))

	)

347 
	#LCD_FLAG_ENS
 
LCD_SR_ENS


	)

348 
	#LCD_FLAG_SOF
 
LCD_SR_SOF


	)

349 
	#LCD_FLAG_UDR
 
LCD_SR_UDR


	)

350 
	#LCD_FLAG_UDD
 
LCD_SR_UDD


	)

351 
	#LCD_FLAG_RDY
 
LCD_SR_RDY


	)

352 
	#LCD_FLAG_FCRSF
 
LCD_SR_FCRSR


	)

354 
	#IS_LCD_GET_FLAG
(
FLAG
Ë(((FLAGË=
LCD_FLAG_ENS
Ë|| ((FLAGË=
LCD_FLAG_SOF
) || \

355 ((
FLAG
Ë=
LCD_FLAG_UDR
Ë|| ((FLAGË=
LCD_FLAG_UDD
) || \

356 ((
FLAG
Ë=
LCD_FLAG_RDY
Ë|| ((FLAGË=
LCD_FLAG_FCRSF
))

	)

358 
	#IS_LCD_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF5Ë=0x00Ë&& ((FLAGË!0x00))

	)

367 
	#LCD_RAMRegi°î_0
 ((
uöt32_t
)0x00000000Ë

	)

368 
	#LCD_RAMRegi°î_1
 ((
uöt32_t
)0x00000001Ë

	)

369 
	#LCD_RAMRegi°î_2
 ((
uöt32_t
)0x00000002Ë

	)

370 
	#LCD_RAMRegi°î_3
 ((
uöt32_t
)0x00000003Ë

	)

371 
	#LCD_RAMRegi°î_4
 ((
uöt32_t
)0x00000004Ë

	)

372 
	#LCD_RAMRegi°î_5
 ((
uöt32_t
)0x00000005Ë

	)

373 
	#LCD_RAMRegi°î_6
 ((
uöt32_t
)0x00000006Ë

	)

374 
	#LCD_RAMRegi°î_7
 ((
uöt32_t
)0x00000007Ë

	)

375 
	#LCD_RAMRegi°î_8
 ((
uöt32_t
)0x00000008Ë

	)

376 
	#LCD_RAMRegi°î_9
 ((
uöt32_t
)0x00000009Ë

	)

377 
	#LCD_RAMRegi°î_10
 ((
uöt32_t
)0x0000000AË

	)

378 
	#LCD_RAMRegi°î_11
 ((
uöt32_t
)0x0000000BË

	)

379 
	#LCD_RAMRegi°î_12
 ((
uöt32_t
)0x0000000CË

	)

380 
	#LCD_RAMRegi°î_13
 ((
uöt32_t
)0x0000000DË

	)

381 
	#LCD_RAMRegi°î_14
 ((
uöt32_t
)0x0000000EË

	)

382 
	#LCD_RAMRegi°î_15
 ((
uöt32_t
)0x0000000FË

	)

384 
	#IS_LCD_RAM_REGISTER
(
REGISTER
Ë(((REGISTERË=
LCD_RAMRegi°î_0
) || \

385 ((
REGISTER
Ë=
LCD_RAMRegi°î_1
) || \

386 ((
REGISTER
Ë=
LCD_RAMRegi°î_2
) || \

387 ((
REGISTER
Ë=
LCD_RAMRegi°î_3
) || \

388 ((
REGISTER
Ë=
LCD_RAMRegi°î_4
) || \

389 ((
REGISTER
Ë=
LCD_RAMRegi°î_5
) || \

390 ((
REGISTER
Ë=
LCD_RAMRegi°î_6
) || \

391 ((
REGISTER
Ë=
LCD_RAMRegi°î_7
) || \

392 ((
REGISTER
Ë=
LCD_RAMRegi°î_8
) || \

393 ((
REGISTER
Ë=
LCD_RAMRegi°î_9
) || \

394 ((
REGISTER
Ë=
LCD_RAMRegi°î_10
) || \

395 ((
REGISTER
Ë=
LCD_RAMRegi°î_11
) || \

396 ((
REGISTER
Ë=
LCD_RAMRegi°î_12
) || \

397 ((
REGISTER
Ë=
LCD_RAMRegi°î_13
) || \

398 ((
REGISTER
Ë=
LCD_RAMRegi°î_14
) || \

399 ((
REGISTER
Ë=
LCD_RAMRegi°î_15
))

	)

413 
LCD_DeInô
();

416 
LCD_Inô
(
LCD_InôTy≥Def
* 
LCD_InôSåu˘
);

417 
LCD_Såu˘Inô
(
LCD_InôTy≥Def
* 
LCD_InôSåu˘
);

418 
LCD_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

419 
LCD_WaôF‹Synchro
();

420 
LCD_HighDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

421 
LCD_MuxSegmítCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

422 
LCD_Pul£OnDuøti⁄C⁄fig
(
uöt32_t
 
LCD_Pul£OnDuøti⁄
);

423 
LCD_DódTimeC⁄fig
(
uöt32_t
 
LCD_DódTime
);

424 
LCD_BlökC⁄fig
(
uöt32_t
 
LCD_BlökMode
, uöt32_à
LCD_BlökFªquícy
);

425 
LCD_C⁄åa°C⁄fig
(
uöt32_t
 
LCD_C⁄åa°
);

428 
LCD_Wrôe
(
uöt32_t
 
LCD_RAMRegi°î
, uöt32_à
LCD_D©a
);

429 
LCD_Upd©eDi•œyReque°
();

432 
LCD_ITC⁄fig
(
uöt32_t
 
LCD_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

433 
FœgSètus
 
LCD_GëFœgSètus
(
uöt32_t
 
LCD_FLAG
);

434 
LCD_CÀ¨Fœg
(
uöt32_t
 
LCD_FLAG
);

435 
ITSètus
 
LCD_GëITSètus
(
uöt32_t
 
LCD_IT
);

436 
LCD_CÀ¨ITPídögBô
(
uöt32_t
 
LCD_IT
);

438 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_opamp.h

30 #i‚de‡
__STM32L1xx_OPAMP_H


31 
	#__STM32L1xx_OPAMP_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

59 
	#OPAMP_Sñe˘i⁄_OPAMP1
 
OPAMP_CSR_OPA1PD


	)

60 
	#OPAMP_Sñe˘i⁄_OPAMP2
 
OPAMP_CSR_OPA2PD


	)

61 
	#OPAMP_Sñe˘i⁄_OPAMP3
 
OPAMP_CSR_OPA3PD


	)

63 
	#IS_OPAMP_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
OPAMP_Sñe˘i⁄_OPAMP1
) || \

64 ((
PERIPH
Ë=
OPAMP_Sñe˘i⁄_OPAMP2
) || \

65 ((
PERIPH
Ë=
OPAMP_Sñe˘i⁄_OPAMP3
))

	)

76 
	#OPAMP_OPAMP1Swôch3
 
OPAMP_CSR_S3SEL1


	)

77 
	#OPAMP_OPAMP1Swôch4
 
OPAMP_CSR_S4SEL1


	)

78 
	#OPAMP_OPAMP1Swôch5
 
OPAMP_CSR_S5SEL1


	)

79 
	#OPAMP_OPAMP1Swôch6
 
OPAMP_CSR_S6SEL1


	)

80 
	#OPAMP_OPAMP1SwôchANA
 
OPAMP_CSR_ANAWSEL1


	)

83 
	#OPAMP_OPAMP2Swôch3
 
OPAMP_CSR_S3SEL2


	)

84 
	#OPAMP_OPAMP2Swôch4
 
OPAMP_CSR_S4SEL2


	)

85 
	#OPAMP_OPAMP2Swôch5
 
OPAMP_CSR_S5SEL2


	)

86 
	#OPAMP_OPAMP2Swôch6
 
OPAMP_CSR_S6SEL2


	)

87 
	#OPAMP_OPAMP2Swôch7
 
OPAMP_CSR_S7SEL2


	)

88 
	#OPAMP_OPAMP2SwôchANA
 
OPAMP_CSR_ANAWSEL2


	)

91 
	#OPAMP_OPAMP3Swôch3
 
OPAMP_CSR_S3SEL3


	)

92 
	#OPAMP_OPAMP3Swôch4
 
OPAMP_CSR_S4SEL3


	)

93 
	#OPAMP_OPAMP3Swôch5
 
OPAMP_CSR_S5SEL3


	)

94 
	#OPAMP_OPAMP3Swôch6
 
OPAMP_CSR_S6SEL3


	)

95 
	#OPAMP_OPAMP3SwôchANA
 
OPAMP_CSR_ANAWSEL3


	)

97 
	#IS_OPAMP_SWITCH
(
SWITCH
Ë((((SWITCHË& (
uöt32_t
)0xF0E1E1E1Ë=0x00Ë&& ((SWITCHË!0x00))

	)

107 
	#OPAMP_Trimmög_Fa˘‹y
 ((
uöt32_t
)0x00000000Ë

	)

108 
	#OPAMP_Trimmög_U£r
 
OPAMP_OTR_OT_USER


	)

110 
	#IS_OPAMP_TRIMMING
(
TRIMMING
Ë(((TRIMMINGË=
OPAMP_Trimmög_Fa˘‹y
) || \

111 ((
TRIMMING
Ë=
OPAMP_Trimmög_U£r
))

	)

121 
	#OPAMP_I≈ut_NMOS
 
OPAMP_CSR_OPA1CAL_H


	)

122 
	#OPAMP_I≈ut_PMOS
 
OPAMP_CSR_OPA1CAL_L


	)

124 
	#IS_OPAMP_INPUT
(
INPUT
Ë(((INPUTË=
OPAMP_I≈ut_NMOS
) || \

125 ((
INPUT
Ë=
OPAMP_I≈ut_PMOS
))

	)

135 
	#IS_OPAMP_TRIMMINGVALUE
(
VALUE
Ë((VALUEË<0x0000001FË

	)

145 
	#OPAMP_PowîR™ge_Low
 ((
uöt32_t
)0x00000000Ë

	)

146 
	#OPAMP_PowîR™ge_High
 
OPAMP_CSR_AOP_RANGE


	)

148 
	#IS_OPAMP_RANGE
(
RANGE
Ë(((RANGEË=
OPAMP_PowîR™ge_Low
) || \

149 ((
RANGE
Ë=
OPAMP_PowîR™ge_High
))

	)

161 
OPAMP_DeInô
();

162 
OPAMP_SwôchCmd
(
uöt32_t
 
OPAMP_OPAMPxSwôchy
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

163 
OPAMP_Cmd
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

164 
OPAMP_LowPowîCmd
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

165 
OPAMP_PowîR™geSñe˘
(
uöt32_t
 
OPAMP_PowîR™ge
);

168 
OPAMP_Off£tTrimmögModeSñe˘
(
uöt32_t
 
OPAMP_Trimmög
);

169 
OPAMP_Off£tTrimC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, uöt32_à
OPAMP_I≈ut
, uöt32_à
OPAMP_TrimVÆue
);

170 
OPAMP_Off£tTrimLowPowîC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, uöt32_à
OPAMP_I≈ut
, uöt32_à
OPAMP_TrimVÆue
);

171 
FœgSètus
 
OPAMP_GëFœgSètus
(
uöt32_t
 
OPAMP_Sñe˘i⁄
);

173 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_pwr.h

30 #i‚de‡
__STM32L1xx_PWR_H


31 
	#__STM32L1xx_PWR_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

59 
	#PWR_PVDLevñ_0
 
PWR_CR_PLS_LEV0


	)

60 
	#PWR_PVDLevñ_1
 
PWR_CR_PLS_LEV1


	)

61 
	#PWR_PVDLevñ_2
 
PWR_CR_PLS_LEV2


	)

62 
	#PWR_PVDLevñ_3
 
PWR_CR_PLS_LEV3


	)

63 
	#PWR_PVDLevñ_4
 
PWR_CR_PLS_LEV4


	)

64 
	#PWR_PVDLevñ_5
 
PWR_CR_PLS_LEV5


	)

65 
	#PWR_PVDLevñ_6
 
PWR_CR_PLS_LEV6


	)

66 
	#PWR_PVDLevñ_7
 
PWR_CR_PLS_LEV7


	)

68 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_0
Ë|| ((LEVELË=
PWR_PVDLevñ_1
)|| \

69 ((
LEVEL
Ë=
PWR_PVDLevñ_2
Ë|| ((LEVELË=
PWR_PVDLevñ_3
)|| \

70 ((
LEVEL
Ë=
PWR_PVDLevñ_4
Ë|| ((LEVELË=
PWR_PVDLevñ_5
)|| \

71 ((
LEVEL
Ë=
PWR_PVDLevñ_6
Ë|| ((LEVELË=
PWR_PVDLevñ_7
))

	)

80 
	#PWR_WakeUpPö_1
 ((
uöt32_t
)0x00000000)

	)

81 
	#PWR_WakeUpPö_2
 ((
uöt32_t
)0x00000004)

	)

82 
	#PWR_WakeUpPö_3
 ((
uöt32_t
)0x00000008)

	)

83 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WakeUpPö_1
) || \

84 ((
PIN
Ë=
PWR_WakeUpPö_2
) || \

85 ((
PIN
Ë=
PWR_WakeUpPö_3
))

	)

95 
	#PWR_VﬁègeSˇlög_R™ge1
 
PWR_CR_VOS_0


	)

96 
	#PWR_VﬁègeSˇlög_R™ge2
 
PWR_CR_VOS_1


	)

97 
	#PWR_VﬁègeSˇlög_R™ge3
 
PWR_CR_VOS


	)

99 
	#IS_PWR_VOLTAGE_SCALING_RANGE
(
RANGE
Ë(((RANGEË=
PWR_VﬁègeSˇlög_R™ge1
) || \

100 ((
RANGE
Ë=
PWR_VﬁègeSˇlög_R™ge2
) || \

101 ((
RANGE
Ë=
PWR_VﬁègeSˇlög_R™ge3
))

	)

110 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

111 
	#PWR_Reguœt‹_LowPowî
 
PWR_CR_LPSDSR


	)

112 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
) || \

113 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

	)

122 
	#PWR_SLEEPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

123 
	#PWR_SLEEPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

124 
	#IS_PWR_SLEEP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_SLEEPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_SLEEPE¡ry_WFE
))

	)

134 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

135 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

136 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

146 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

147 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

148 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

149 
	#PWR_FLAG_VREFINTRDY
 
PWR_CSR_VREFINTRDYF


	)

150 
	#PWR_FLAG_VOS
 
PWR_CSR_VOSF


	)

151 
	#PWR_FLAG_REGLP
 
PWR_CSR_REGLPF


	)

153 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

154 ((
FLAG
Ë=
PWR_FLAG_PVDO
Ë|| ((FLAGË=
PWR_FLAG_VREFINTRDY
) || \

155 ((
FLAG
Ë=
PWR_FLAG_VOS
Ë|| ((FLAGË=
PWR_FLAG_REGLP
))

	)

157 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

170 
PWR_DeInô
();

173 
PWR_RTCAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

176 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

177 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

180 
PWR_WakeUpPöCmd
(
uöt32_t
 
PWR_WakeUpPö
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

183 
PWR_Fa°WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

184 
PWR_U…øLowPowîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

187 
PWR_VﬁègeSˇlögC⁄fig
(
uöt32_t
 
PWR_VﬁègeSˇlög
);

190 
PWR_E¡îLowPowîRunMode
(
Fun˘i⁄ÆSèã
 
NewSèã
);

191 
PWR_E¡îSÀïMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_SLEEPE¡ry
);

192 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

193 
PWR_E¡îSTANDBYMode
();

196 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

197 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

199 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_rcc.h

30 #i‚de‡
__STM32L1xx_RCC_H


31 
	#__STM32L1xx_RCC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

52 
uöt32_t
 
SYSCLK_Fªquícy
;

53 
uöt32_t
 
HCLK_Fªquícy
;

54 
uöt32_t
 
PCLK1_Fªquícy
;

55 
uöt32_t
 
PCLK2_Fªquícy
;

56 }
	tRCC_ClocksTy≥Def
;

68 
	#RCC_HSE_OFF
 ((
uöt8_t
)0x00)

	)

69 
	#RCC_HSE_ON
 ((
uöt8_t
)0x01)

	)

70 
	#RCC_HSE_By∑ss
 ((
uöt8_t
)0x05)

	)

71 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
) || \

72 ((
HSE
Ë=
RCC_HSE_By∑ss
))

	)

82 
	#RCC_MSIR™ge_0
 
RCC_ICSCR_MSIRANGE_0


	)

83 
	#RCC_MSIR™ge_1
 
RCC_ICSCR_MSIRANGE_1


	)

84 
	#RCC_MSIR™ge_2
 
RCC_ICSCR_MSIRANGE_2


	)

85 
	#RCC_MSIR™ge_3
 
RCC_ICSCR_MSIRANGE_3


	)

86 
	#RCC_MSIR™ge_4
 
RCC_ICSCR_MSIRANGE_4


	)

87 
	#RCC_MSIR™ge_5
 
RCC_ICSCR_MSIRANGE_5


	)

88 
	#RCC_MSIR™ge_6
 
RCC_ICSCR_MSIRANGE_6


	)

90 
	#IS_RCC_MSI_CLOCK_RANGE
(
RANGE
Ë(((RANGEË=
RCC_MSIR™ge_0
) || \

91 ((
RANGE
Ë=
RCC_MSIR™ge_1
) || \

92 ((
RANGE
Ë=
RCC_MSIR™ge_2
) || \

93 ((
RANGE
Ë=
RCC_MSIR™ge_3
) || \

94 ((
RANGE
Ë=
RCC_MSIR™ge_4
) || \

95 ((
RANGE
Ë=
RCC_MSIR™ge_5
) || \

96 ((
RANGE
Ë=
RCC_MSIR™ge_6
))

	)

106 
	#RCC_PLLSour˚_HSI
 ((
uöt8_t
)0x00)

	)

107 
	#RCC_PLLSour˚_HSE
 ((
uöt8_t
)0x01)

	)

109 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI
) || \

110 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE
))

	)

119 
	#RCC_PLLMul_3
 ((
uöt8_t
)0x00)

	)

120 
	#RCC_PLLMul_4
 ((
uöt8_t
)0x04)

	)

121 
	#RCC_PLLMul_6
 ((
uöt8_t
)0x08)

	)

122 
	#RCC_PLLMul_8
 ((
uöt8_t
)0x0C)

	)

123 
	#RCC_PLLMul_12
 ((
uöt8_t
)0x10)

	)

124 
	#RCC_PLLMul_16
 ((
uöt8_t
)0x14)

	)

125 
	#RCC_PLLMul_24
 ((
uöt8_t
)0x18)

	)

126 
	#RCC_PLLMul_32
 ((
uöt8_t
)0x1C)

	)

127 
	#RCC_PLLMul_48
 ((
uöt8_t
)0x20)

	)

130 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_3
Ë|| ((MULË=
RCC_PLLMul_4
) || \

131 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_8
) || \

132 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_16
) || \

133 ((
MUL
Ë=
RCC_PLLMul_24
Ë|| ((MULË=
RCC_PLLMul_32
) || \

134 ((
MUL
Ë=
RCC_PLLMul_48
))

	)

143 
	#RCC_PLLDiv_2
 ((
uöt8_t
)0x40)

	)

144 
	#RCC_PLLDiv_3
 ((
uöt8_t
)0x80)

	)

145 
	#RCC_PLLDiv_4
 ((
uöt8_t
)0xC0)

	)

148 
	#IS_RCC_PLL_DIV
(
DIV
Ë(((DIVË=
RCC_PLLDiv_2
Ë|| ((DIVË=
RCC_PLLDiv_3
) || \

149 ((
DIV
Ë=
RCC_PLLDiv_4
))

	)

158 
	#RCC_SYSCLKSour˚_MSI
 
RCC_CFGR_SW_MSI


	)

159 
	#RCC_SYSCLKSour˚_HSI
 
RCC_CFGR_SW_HSI


	)

160 
	#RCC_SYSCLKSour˚_HSE
 
RCC_CFGR_SW_HSE


	)

161 
	#RCC_SYSCLKSour˚_PLLCLK
 
RCC_CFGR_SW_PLL


	)

162 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_MSI
) || \

163 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSI
) || \

164 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

165 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

	)

174 
	#RCC_SYSCLK_Div1
 
RCC_CFGR_HPRE_DIV1


	)

175 
	#RCC_SYSCLK_Div2
 
RCC_CFGR_HPRE_DIV2


	)

176 
	#RCC_SYSCLK_Div4
 
RCC_CFGR_HPRE_DIV4


	)

177 
	#RCC_SYSCLK_Div8
 
RCC_CFGR_HPRE_DIV8


	)

178 
	#RCC_SYSCLK_Div16
 
RCC_CFGR_HPRE_DIV16


	)

179 
	#RCC_SYSCLK_Div64
 
RCC_CFGR_HPRE_DIV64


	)

180 
	#RCC_SYSCLK_Div128
 
RCC_CFGR_HPRE_DIV128


	)

181 
	#RCC_SYSCLK_Div256
 
RCC_CFGR_HPRE_DIV256


	)

182 
	#RCC_SYSCLK_Div512
 
RCC_CFGR_HPRE_DIV512


	)

183 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
) || \

184 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

185 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

186 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

187 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

	)

196 
	#RCC_HCLK_Div1
 
RCC_CFGR_PPRE1_DIV1


	)

197 
	#RCC_HCLK_Div2
 
RCC_CFGR_PPRE1_DIV2


	)

198 
	#RCC_HCLK_Div4
 
RCC_CFGR_PPRE1_DIV4


	)

199 
	#RCC_HCLK_Div8
 
RCC_CFGR_PPRE1_DIV8


	)

200 
	#RCC_HCLK_Div16
 
RCC_CFGR_PPRE1_DIV16


	)

201 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
) || \

202 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

203 ((
PCLK
Ë=
RCC_HCLK_Div16
))

	)

213 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

214 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

215 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

216 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

217 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

218 
	#RCC_IT_MSIRDY
 ((
uöt8_t
)0x20)

	)

219 
	#RCC_IT_LSECSS
 ((
uöt8_t
)0x40)

	)

220 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

222 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

224 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

225 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

226 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_MSIRDY
) || \

227 ((
IT
Ë=
RCC_IT_CSS
Ë|| ((ITË=
RCC_IT_LSECSS
))

	)

229 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x00Ë=0x00Ë&& ((ITË!0x00))

	)

239 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

240 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

241 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x05)

	)

242 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
) || \

243 ((
LSE
Ë=
RCC_LSE_By∑ss
))

	)

252 
	#RCC_RTCCLKSour˚_LSE
 
RCC_CSR_RTCSEL_LSE


	)

253 
	#RCC_RTCCLKSour˚_LSI
 
RCC_CSR_RTCSEL_LSI


	)

254 
	#RCC_RTCCLKSour˚_HSE_Div2
 
RCC_CSR_RTCSEL_HSE


	)

255 
	#RCC_RTCCLKSour˚_HSE_Div4
 ((
uöt32_t
)
RCC_CSR_RTCSEL_HSE
 | 
RCC_CR_RTCPRE_0
)

	)

256 
	#RCC_RTCCLKSour˚_HSE_Div8
 ((
uöt32_t
)
RCC_CSR_RTCSEL_HSE
 | 
RCC_CR_RTCPRE_1
)

	)

257 
	#RCC_RTCCLKSour˚_HSE_Div16
 ((
uöt32_t
)
RCC_CSR_RTCSEL_HSE
 | 
RCC_CR_RTCPRE
)

	)

258 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
) || \

259 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

260 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div2
) || \

261 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div4
) || \

262 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div8
) || \

263 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div16
))

	)

272 
	#RCC_AHBPîùh_GPIOA
 
RCC_AHBENR_GPIOAEN


	)

273 
	#RCC_AHBPîùh_GPIOB
 
RCC_AHBENR_GPIOBEN


	)

274 
	#RCC_AHBPîùh_GPIOC
 
RCC_AHBENR_GPIOCEN


	)

275 
	#RCC_AHBPîùh_GPIOD
 
RCC_AHBENR_GPIODEN


	)

276 
	#RCC_AHBPîùh_GPIOE
 
RCC_AHBENR_GPIOEEN


	)

277 
	#RCC_AHBPîùh_GPIOH
 
RCC_AHBENR_GPIOHEN


	)

278 
	#RCC_AHBPîùh_GPIOF
 
RCC_AHBENR_GPIOFEN


	)

279 
	#RCC_AHBPîùh_GPIOG
 
RCC_AHBENR_GPIOGEN


	)

280 
	#RCC_AHBPîùh_CRC
 
RCC_AHBENR_CRCEN


	)

281 
	#RCC_AHBPîùh_FLITF
 
RCC_AHBENR_FLITFEN


	)

282 
	#RCC_AHBPîùh_SRAM
 
RCC_AHBLPENR_SRAMLPEN


	)

283 
	#RCC_AHBPîùh_DMA1
 
RCC_AHBENR_DMA1EN


	)

284 
	#RCC_AHBPîùh_DMA2
 
RCC_AHBENR_DMA2EN


	)

285 
	#RCC_AHBPîùh_AES
 
RCC_AHBENR_AESEN


	)

286 
	#RCC_AHBPîùh_FSMC
 
RCC_AHBENR_FSMCEN


	)

288 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xB4FF6F00Ë=0x00Ë&& ((PERIPHË!0x00))

	)

289 
	#IS_RCC_AHB_LPMODE_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xB4FF6F00Ë=0x00Ë&& ((PERIPHË!0x00))

	)

299 
	#RCC_APB2Pîùh_SYSCFG
 
RCC_APB2ENR_SYSCFGEN


	)

300 
	#RCC_APB2Pîùh_TIM9
 
RCC_APB2ENR_TIM9EN


	)

301 
	#RCC_APB2Pîùh_TIM10
 
RCC_APB2ENR_TIM10EN


	)

302 
	#RCC_APB2Pîùh_TIM11
 
RCC_APB2ENR_TIM11EN


	)

303 
	#RCC_APB2Pîùh_ADC1
 
RCC_APB2ENR_ADC1EN


	)

304 
	#RCC_APB2Pîùh_SDIO
 
RCC_APB2ENR_SDIOEN


	)

305 
	#RCC_APB2Pîùh_SPI1
 
RCC_APB2ENR_SPI1EN


	)

306 
	#RCC_APB2Pîùh_USART1
 
RCC_APB2ENR_USART1EN


	)

308 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFA5E2Ë=0x00Ë&& ((PERIPHË!0x00))

	)

317 
	#RCC_APB1Pîùh_TIM2
 
RCC_APB1ENR_TIM2EN


	)

318 
	#RCC_APB1Pîùh_TIM3
 
RCC_APB1ENR_TIM3EN


	)

319 
	#RCC_APB1Pîùh_TIM4
 
RCC_APB1ENR_TIM4EN


	)

320 
	#RCC_APB1Pîùh_TIM5
 
RCC_APB1ENR_TIM5EN


	)

321 
	#RCC_APB1Pîùh_TIM6
 
RCC_APB1ENR_TIM6EN


	)

322 
	#RCC_APB1Pîùh_TIM7
 
RCC_APB1ENR_TIM7EN


	)

323 
	#RCC_APB1Pîùh_LCD
 
RCC_APB1ENR_LCDEN


	)

324 
	#RCC_APB1Pîùh_WWDG
 
RCC_APB1ENR_WWDGEN


	)

325 
	#RCC_APB1Pîùh_SPI2
 
RCC_APB1ENR_SPI2EN


	)

326 
	#RCC_APB1Pîùh_SPI3
 
RCC_APB1ENR_SPI3EN


	)

327 
	#RCC_APB1Pîùh_USART2
 
RCC_APB1ENR_USART2EN


	)

328 
	#RCC_APB1Pîùh_USART3
 
RCC_APB1ENR_USART3EN


	)

329 
	#RCC_APB1Pîùh_UART4
 
RCC_APB1ENR_UART4EN


	)

330 
	#RCC_APB1Pîùh_UART5
 
RCC_APB1ENR_UART5EN


	)

331 
	#RCC_APB1Pîùh_I2C1
 
RCC_APB1ENR_I2C1EN


	)

332 
	#RCC_APB1Pîùh_I2C2
 
RCC_APB1ENR_I2C2EN


	)

333 
	#RCC_APB1Pîùh_USB
 
RCC_APB1ENR_USBEN


	)

334 
	#RCC_APB1Pîùh_PWR
 
RCC_APB1ENR_PWREN


	)

335 
	#RCC_APB1Pîùh_DAC
 
RCC_APB1ENR_DACEN


	)

336 
	#RCC_APB1Pîùh_COMP
 
RCC_APB1ENR_COMPEN


	)

339 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x4F0135C0Ë=0x00Ë&& ((PERIPHË!0x00))

	)

348 
	#RCC_MCOSour˚_NoClock
 ((
uöt8_t
)0x00)

	)

349 
	#RCC_MCOSour˚_SYSCLK
 ((
uöt8_t
)0x01)

	)

350 
	#RCC_MCOSour˚_HSI
 ((
uöt8_t
)0x02)

	)

351 
	#RCC_MCOSour˚_MSI
 ((
uöt8_t
)0x03)

	)

352 
	#RCC_MCOSour˚_HSE
 ((
uöt8_t
)0x04)

	)

353 
	#RCC_MCOSour˚_PLLCLK
 ((
uöt8_t
)0x05)

	)

354 
	#RCC_MCOSour˚_LSI
 ((
uöt8_t
)0x06)

	)

355 
	#RCC_MCOSour˚_LSE
 ((
uöt8_t
)0x07)

	)

357 
	#IS_RCC_MCO_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCOSour˚_NoClock
Ë|| ((SOURCEË=
RCC_MCOSour˚_SYSCLK
) || \

358 ((
SOURCE
Ë=
RCC_MCOSour˚_HSI
Ë|| ((SOURCEË=
RCC_MCOSour˚_MSI
) || \

359 ((
SOURCE
Ë=
RCC_MCOSour˚_HSE
Ë|| ((SOURCEË=
RCC_MCOSour˚_PLLCLK
) || \

360 ((
SOURCE
Ë=
RCC_MCOSour˚_LSI
Ë|| ((SOURCEË=
RCC_MCOSour˚_LSE
))

	)

369 
	#RCC_MCODiv_1
 ((
uöt8_t
)0x00)

	)

370 
	#RCC_MCODiv_2
 ((
uöt8_t
)0x10)

	)

371 
	#RCC_MCODiv_4
 ((
uöt8_t
)0x20)

	)

372 
	#RCC_MCODiv_8
 ((
uöt8_t
)0x30)

	)

373 
	#RCC_MCODiv_16
 ((
uöt8_t
)0x40)

	)

375 
	#IS_RCC_MCO_DIV
(
DIV
Ë(((DIVË=
RCC_MCODiv_1
Ë|| ((DIVË=
RCC_MCODiv_2
) || \

376 ((
DIV
Ë=
RCC_MCODiv_4
Ë|| ((DIVË=
RCC_MCODiv_8
) || \

377 ((
DIV
Ë=
RCC_MCODiv_16
))

	)

386 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

387 
	#RCC_FLAG_MSIRDY
 ((
uöt8_t
)0x29)

	)

388 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

389 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

390 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x49)

	)

391 
	#RCC_FLAG_LSECSS
 ((
uöt8_t
)0x4A)

	)

392 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x41)

	)

393 
	#RCC_FLAG_OBLRST
 ((
uöt8_t
)0x59)

	)

394 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x5A)

	)

395 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x5B)

	)

396 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x5C)

	)

397 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x5D)

	)

398 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x5E)

	)

399 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x5F)

	)

401 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

402 ((
FLAG
Ë=
RCC_FLAG_MSIRDY
Ë|| ((FLAGË=
RCC_FLAG_PLLRDY
) || \

403 ((
FLAG
Ë=
RCC_FLAG_LSERDY
Ë|| ((FLAGË=
RCC_FLAG_LSIRDY
) || \

404 ((
FLAG
Ë=
RCC_FLAG_PINRST
Ë|| ((FLAGË=
RCC_FLAG_PORRST
) || \

405 ((
FLAG
Ë=
RCC_FLAG_SFTRST
Ë|| ((FLAGË=
RCC_FLAG_IWDGRST
)|| \

406 ((
FLAG
Ë=
RCC_FLAG_WWDGRST
)|| ((FLAGË=
RCC_FLAG_LPWRRST
)|| \

407 ((
FLAG
Ë=
RCC_FLAG_WWDGRST
)|| ((FLAGË=
RCC_FLAG_LSECSS
))

	)

409 
	#IS_RCC_HSI_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

410 
	#IS_RCC_MSI_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x3F)

	)

424 
RCC_DeInô
();

427 
RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
);

428 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

429 
RCC_MSIR™geC⁄fig
(
uöt32_t
 
RCC_MSIR™ge
);

430 
RCC_Adju°MSICÆibøti⁄VÆue
(
uöt8_t
 
MSICÆibøti⁄VÆue
);

431 
RCC_MSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

432 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

433 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

434 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

435 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

436 
RCC_PLLC⁄fig
(
uöt8_t
 
RCC_PLLSour˚
, uöt8_à
RCC_PLLMul
, uöt8_à
RCC_PLLDiv
);

437 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

438 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

439 
RCC_LSEClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

440 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCOSour˚
, uöt8_à
RCC_MCODiv
);

443 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

444 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

445 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

446 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

447 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

448 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

451 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

452 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

453 
RCC_RTCRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

455 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

456 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

457 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

459 
RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

460 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

461 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

463 
RCC_AHBPîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

464 
RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

465 
RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

468 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

469 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

470 
RCC_CÀ¨Fœg
();

471 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

472 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

474 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_rtc.h

30 #i‚de‡
__STM32L1xx_RTC_H


31 
	#__STM32L1xx_RTC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

55 
uöt32_t
 
RTC_HourF‹m©
;

58 
uöt32_t
 
RTC_AsynchPªdiv
;

61 
uöt32_t
 
RTC_SynchPªdiv
;

63 }
	tRTC_InôTy≥Def
;

70 
uöt8_t
 
RTC_Hours
;

75 
uöt8_t
 
RTC_Möuãs
;

78 
uöt8_t
 
RTC_Sec⁄ds
;

81 
uöt8_t
 
RTC_H12
;

83 }
	tRTC_TimeTy≥Def
;

90 
uöt8_t
 
RTC_WìkDay
;

93 
uöt8_t
 
RTC_M⁄th
;

96 
uöt8_t
 
RTC_D©e
;

99 
uöt8_t
 
RTC_Yór
;

101 }
	tRTC_D©eTy≥Def
;

108 
RTC_TimeTy≥Def
 
RTC_AœrmTime
;

110 
uöt32_t
 
RTC_AœrmMask
;

113 
uöt32_t
 
RTC_AœrmD©eWìkDaySñ
;

116 
uöt8_t
 
RTC_AœrmD©eWìkDay
;

121 }
	tRTC_AœrmTy≥Def
;

133 
	#RTC_HourF‹m©_24
 ((
uöt32_t
)0x00000000)

	)

134 
	#RTC_HourF‹m©_12
 ((
uöt32_t
)0x00000040)

	)

135 
	#IS_RTC_HOUR_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_HourF‹m©_12
) || \

136 ((
FORMAT
Ë=
RTC_HourF‹m©_24
))

	)

144 
	#IS_RTC_ASYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7F)

	)

154 
	#IS_RTC_SYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7FFF)

	)

163 
	#IS_RTC_HOUR12
(
HOUR
Ë(((HOURË> 0Ë&& ((HOURË<12))

	)

164 
	#IS_RTC_HOUR24
(
HOUR
Ë((HOURË<23)

	)

165 
	#IS_RTC_MINUTES
(
MINUTES
Ë((MINUTESË<59)

	)

166 
	#IS_RTC_SECONDS
(
SECONDS
Ë((SECONDSË<59)

	)

175 
	#RTC_H12_AM
 ((
uöt8_t
)0x00)

	)

176 
	#RTC_H12_PM
 ((
uöt8_t
)0x40)

	)

177 
	#IS_RTC_H12
(
PM
Ë(((PMË=
RTC_H12_AM
Ë|| ((PMË=
RTC_H12_PM
))

	)

186 
	#IS_RTC_YEAR
(
YEAR
Ë((YEARË<99)

	)

197 
	#RTC_M⁄th_J™u¨y
 ((
uöt8_t
)0x01)

	)

198 
	#RTC_M⁄th_Febru¨y
 ((
uöt8_t
)0x02)

	)

199 
	#RTC_M⁄th_M¨ch
 ((
uöt8_t
)0x03)

	)

200 
	#RTC_M⁄th_A¥û
 ((
uöt8_t
)0x04)

	)

201 
	#RTC_M⁄th_May
 ((
uöt8_t
)0x05)

	)

202 
	#RTC_M⁄th_Ju√
 ((
uöt8_t
)0x06)

	)

203 
	#RTC_M⁄th_July
 ((
uöt8_t
)0x07)

	)

204 
	#RTC_M⁄th_Augu°
 ((
uöt8_t
)0x08)

	)

205 
	#RTC_M⁄th_Sïãmbî
 ((
uöt8_t
)0x09)

	)

206 
	#RTC_M⁄th_O˘obî
 ((
uöt8_t
)0x10)

	)

207 
	#RTC_M⁄th_Novembî
 ((
uöt8_t
)0x11)

	)

208 
	#RTC_M⁄th_De˚mbî
 ((
uöt8_t
)0x12)

	)

209 
	#IS_RTC_MONTH
(
MONTH
Ë(((MONTHË>1Ë&& ((MONTHË<12))

	)

210 
	#IS_RTC_DATE
(
DATE
Ë(((DATEË>1Ë&& ((DATEË<31))

	)

220 
	#RTC_Wìkday_M⁄day
 ((
uöt8_t
)0x01)

	)

221 
	#RTC_Wìkday_Tuesday
 ((
uöt8_t
)0x02)

	)

222 
	#RTC_Wìkday_Wed√sday
 ((
uöt8_t
)0x03)

	)

223 
	#RTC_Wìkday_Thursday
 ((
uöt8_t
)0x04)

	)

224 
	#RTC_Wìkday_Friday
 ((
uöt8_t
)0x05)

	)

225 
	#RTC_Wìkday_S©urday
 ((
uöt8_t
)0x06)

	)

226 
	#RTC_Wìkday_Sunday
 ((
uöt8_t
)0x07)

	)

227 
	#IS_RTC_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
) || \

228 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

229 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

230 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

231 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

232 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

233 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

	)

242 
	#IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
DATE
Ë(((DATEË> 0Ë&& ((DATEË<31))

	)

243 
	#IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
) || \

244 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

245 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

246 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

247 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

248 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

249 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

	)

259 
	#RTC_AœrmD©eWìkDaySñ_D©e
 ((
uöt32_t
)0x00000000)

	)

260 
	#RTC_AœrmD©eWìkDaySñ_WìkDay
 ((
uöt32_t
)0x40000000)

	)

262 
	#IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
SEL
Ë(((SELË=
RTC_AœrmD©eWìkDaySñ_D©e
) || \

263 ((
SEL
Ë=
RTC_AœrmD©eWìkDaySñ_WìkDay
))

	)

273 
	#RTC_AœrmMask_N⁄e
 ((
uöt32_t
)0x00000000)

	)

274 
	#RTC_AœrmMask_D©eWìkDay
 ((
uöt32_t
)0x80000000)

	)

275 
	#RTC_AœrmMask_Hours
 ((
uöt32_t
)0x00800000)

	)

276 
	#RTC_AœrmMask_Möuãs
 ((
uöt32_t
)0x00008000)

	)

277 
	#RTC_AœrmMask_Sec⁄ds
 ((
uöt32_t
)0x00000080)

	)

278 
	#RTC_AœrmMask_AŒ
 ((
uöt32_t
)0x80808080)

	)

279 
	#IS_ALARM_MASK
(
MASK
Ë(((MASKË& 0x7F7F7F7FË=(
uöt32_t
)
RESET
)

	)

288 
	#RTC_Aœrm_A
 ((
uöt32_t
)0x00000100)

	)

289 
	#RTC_Aœrm_B
 ((
uöt32_t
)0x00000200)

	)

290 
	#IS_RTC_ALARM
(
ALARM
Ë(((ALARMË=
RTC_Aœrm_A
Ë|| ((ALARMË=
RTC_Aœrm_B
))

	)

291 
	#IS_RTC_CMD_ALARM
(
ALARM
Ë(((ALARMË& (
RTC_Aœrm_A
 | 
RTC_Aœrm_B
)Ë!(
uöt32_t
)
RESET
)

	)

300 
	#RTC_AœrmSubSec⁄dMask_AŒ
 ((
uöt32_t
)0x00000000Ë

	)

303 
	#RTC_AœrmSubSec⁄dMask_SS14_1
 ((
uöt32_t
)0x01000000Ë

	)

305 
	#RTC_AœrmSubSec⁄dMask_SS14_2
 ((
uöt32_t
)0x02000000Ë

	)

307 
	#RTC_AœrmSubSec⁄dMask_SS14_3
 ((
uöt32_t
)0x03000000Ë

	)

309 
	#RTC_AœrmSubSec⁄dMask_SS14_4
 ((
uöt32_t
)0x04000000Ë

	)

311 
	#RTC_AœrmSubSec⁄dMask_SS14_5
 ((
uöt32_t
)0x05000000Ë

	)

313 
	#RTC_AœrmSubSec⁄dMask_SS14_6
 ((
uöt32_t
)0x06000000Ë

	)

315 
	#RTC_AœrmSubSec⁄dMask_SS14_7
 ((
uöt32_t
)0x07000000Ë

	)

317 
	#RTC_AœrmSubSec⁄dMask_SS14_8
 ((
uöt32_t
)0x08000000Ë

	)

319 
	#RTC_AœrmSubSec⁄dMask_SS14_9
 ((
uöt32_t
)0x09000000Ë

	)

321 
	#RTC_AœrmSubSec⁄dMask_SS14_10
 ((
uöt32_t
)0x0A000000Ë

	)

323 
	#RTC_AœrmSubSec⁄dMask_SS14_11
 ((
uöt32_t
)0x0B000000Ë

	)

325 
	#RTC_AœrmSubSec⁄dMask_SS14_12
 ((
uöt32_t
)0x0C000000Ë

	)

327 
	#RTC_AœrmSubSec⁄dMask_SS14_13
 ((
uöt32_t
)0x0D000000Ë

	)

329 
	#RTC_AœrmSubSec⁄dMask_SS14
 ((
uöt32_t
)0x0E000000Ë

	)

331 
	#RTC_AœrmSubSec⁄dMask_N⁄e
 ((
uöt32_t
)0x0F000000Ë

	)

333 
	#IS_RTC_ALARM_SUB_SECOND_MASK
(
MASK
Ë(((MASKË=
RTC_AœrmSubSec⁄dMask_AŒ
) || \

334 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_1
) || \

335 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_2
) || \

336 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_3
) || \

337 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_4
) || \

338 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_5
) || \

339 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_6
) || \

340 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_7
) || \

341 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_8
) || \

342 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_9
) || \

343 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_10
) || \

344 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_11
) || \

345 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_12
) || \

346 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_13
) || \

347 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14
) || \

348 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_N⁄e
))

	)

357 
	#IS_RTC_ALARM_SUB_SECOND_VALUE
(
VALUE
Ë((VALUEË<0x00007FFF)

	)

366 
	#RTC_WakeUpClock_RTCCLK_Div16
 ((
uöt32_t
)0x00000000)

	)

367 
	#RTC_WakeUpClock_RTCCLK_Div8
 ((
uöt32_t
)0x00000001)

	)

368 
	#RTC_WakeUpClock_RTCCLK_Div4
 ((
uöt32_t
)0x00000002)

	)

369 
	#RTC_WakeUpClock_RTCCLK_Div2
 ((
uöt32_t
)0x00000003)

	)

370 
	#RTC_WakeUpClock_CK_SPRE_16bôs
 ((
uöt32_t
)0x00000004)

	)

371 
	#RTC_WakeUpClock_CK_SPRE_17bôs
 ((
uöt32_t
)0x00000006)

	)

372 
	#IS_RTC_WAKEUP_CLOCK
(
CLOCK
Ë(((CLOCKË=
RTC_WakeUpClock_RTCCLK_Div16
) || \

373 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div8
) || \

374 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div4
) || \

375 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div2
) || \

376 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_16bôs
) || \

377 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_17bôs
))

	)

378 
	#IS_RTC_WAKEUP_COUNTER
(
COUNTER
Ë((COUNTERË<0xFFFF)

	)

386 
	#RTC_TimeSèmpEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

387 
	#RTC_TimeSèmpEdge_FÆlög
 ((
uöt32_t
)0x00000008)

	)

388 
	#IS_RTC_TIMESTAMP_EDGE
(
EDGE
Ë(((EDGEË=
RTC_TimeSèmpEdge_Risög
) || \

389 ((
EDGE
Ë=
RTC_TimeSèmpEdge_FÆlög
))

	)

397 
	#RTC_Ouçut_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

398 
	#RTC_Ouçut_AœrmA
 ((
uöt32_t
)0x00200000)

	)

399 
	#RTC_Ouçut_AœrmB
 ((
uöt32_t
)0x00400000)

	)

400 
	#RTC_Ouçut_WakeUp
 ((
uöt32_t
)0x00600000)

	)

402 
	#IS_RTC_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_Ouçut_DißbÀ
) || \

403 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmA
) || \

404 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmB
) || \

405 ((
OUTPUT
Ë=
RTC_Ouçut_WakeUp
))

	)

414 
	#RTC_OuçutPﬁ¨ôy_High
 ((
uöt32_t
)0x00000000)

	)

415 
	#RTC_OuçutPﬁ¨ôy_Low
 ((
uöt32_t
)0x00100000)

	)

416 
	#IS_RTC_OUTPUT_POL
(
POL
Ë(((POLË=
RTC_OuçutPﬁ¨ôy_High
) || \

417 ((
POL
Ë=
RTC_OuçutPﬁ¨ôy_Low
))

	)

425 
	#RTC_CÆibSign_Posôive
 ((
uöt32_t
)0x00000000)

	)

426 
	#RTC_CÆibSign_Neg©ive
 ((
uöt32_t
)0x00000080)

	)

427 
	#IS_RTC_CALIB_SIGN
(
SIGN
Ë(((SIGNË=
RTC_CÆibSign_Posôive
) || \

428 ((
SIGN
Ë=
RTC_CÆibSign_Neg©ive
))

	)

429 
	#IS_RTC_CALIB_VALUE
(
VALUE
Ë((VALUEË< 0x20)

	)

438 
	#RTC_CÆibOuçut_512Hz
 ((
uöt32_t
)0x00000000)

	)

439 
	#RTC_CÆibOuçut_1Hz
 ((
uöt32_t
)0x00080000)

	)

440 
	#IS_RTC_CALIB_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_CÆibOuçut_512Hz
) || \

441 ((
OUTPUT
Ë=
RTC_CÆibOuçut_1Hz
))

	)

449 
	#RTC_SmoŸhCÆibPîiod_32£c
 ((
uöt32_t
)0x00000000Ë

	)

451 
	#RTC_SmoŸhCÆibPîiod_16£c
 ((
uöt32_t
)0x00002000Ë

	)

453 
	#RTC_SmoŸhCÆibPîiod_8£c
 ((
uöt32_t
)0x00004000Ë

	)

455 
	#IS_RTC_SMOOTH_CALIB_PERIOD
(
PERIOD
Ë(((PERIODË=
RTC_SmoŸhCÆibPîiod_32£c
) || \

456 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_16£c
) || \

457 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_8£c
))

	)

466 
	#RTC_SmoŸhCÆibPlusPul£s_Së
 ((
uöt32_t
)0x00008000Ë

	)

469 
	#RTC_SmoŸhCÆibPlusPul£s_Re£t
 ((
uöt32_t
)0x00000000Ë

	)

471 
	#IS_RTC_SMOOTH_CALIB_PLUS
(
PLUS
Ë(((PLUSË=
RTC_SmoŸhCÆibPlusPul£s_Së
) || \

472 ((
PLUS
Ë=
RTC_SmoŸhCÆibPlusPul£s_Re£t
))

	)

481 
	#IS_RTC_SMOOTH_CALIB_MINUS
(
VALUE
Ë((VALUEË<0x000001FF)

	)

490 
	#RTC_DayLightSavög_SUB1H
 ((
uöt32_t
)0x00020000)

	)

491 
	#RTC_DayLightSavög_ADD1H
 ((
uöt32_t
)0x00010000)

	)

492 
	#IS_RTC_DAYLIGHT_SAVING
(
SAVE
Ë(((SAVEË=
RTC_DayLightSavög_SUB1H
) || \

493 ((
SAVE
Ë=
RTC_DayLightSavög_ADD1H
))

	)

495 
	#RTC_St‹eO≥øti⁄_Re£t
 ((
uöt32_t
)0x00000000)

	)

496 
	#RTC_St‹eO≥øti⁄_Së
 ((
uöt32_t
)0x00040000)

	)

497 
	#IS_RTC_STORE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
RTC_St‹eO≥øti⁄_Re£t
) || \

498 ((
OPERATION
Ë=
RTC_St‹eO≥øti⁄_Së
))

	)

506 
	#RTC_Tam≥rTriggî_RisögEdge
 ((
uöt32_t
)0x00000000)

	)

507 
	#RTC_Tam≥rTriggî_FÆlögEdge
 ((
uöt32_t
)0x00000001)

	)

508 
	#RTC_Tam≥rTriggî_LowLevñ
 ((
uöt32_t
)0x00000000)

	)

509 
	#RTC_Tam≥rTriggî_HighLevñ
 ((
uöt32_t
)0x00000001)

	)

510 
	#IS_RTC_TAMPER_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
RTC_Tam≥rTriggî_RisögEdge
) || \

511 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_FÆlögEdge
) || \

512 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_LowLevñ
) || \

513 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_HighLevñ
))

	)

522 
	#RTC_Tam≥rFûãr_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

524 
	#RTC_Tam≥rFûãr_2Sam∂e
 ((
uöt32_t
)0x00000800Ë

	)

526 
	#RTC_Tam≥rFûãr_4Sam∂e
 ((
uöt32_t
)0x00001000Ë

	)

528 
	#RTC_Tam≥rFûãr_8Sam∂e
 ((
uöt32_t
)0x00001800Ë

	)

530 
	#IS_RTC_TAMPER_FILTER
(
FILTER
Ë(((FILTERË=
RTC_Tam≥rFûãr_DißbÀ
) || \

531 ((
FILTER
Ë=
RTC_Tam≥rFûãr_2Sam∂e
) || \

532 ((
FILTER
Ë=
RTC_Tam≥rFûãr_4Sam∂e
) || \

533 ((
FILTER
Ë=
RTC_Tam≥rFûãr_8Sam∂e
))

	)

541 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
 ((
uöt32_t
)0x00000000Ë

	)

543 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
 ((
uöt32_t
)0x000000100Ë

	)

545 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
 ((
uöt32_t
)0x00000200Ë

	)

547 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
 ((
uöt32_t
)0x00000300Ë

	)

549 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
 ((
uöt32_t
)0x00000400Ë

	)

551 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
 ((
uöt32_t
)0x00000500Ë

	)

553 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
 ((
uöt32_t
)0x00000600Ë

	)

555 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
 ((
uöt32_t
)0x00000700Ë

	)

557 
	#IS_RTC_TAMPER_SAMPLING_FREQ
(
FREQ
Ë(((FREQË==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
) || \

558 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
) || \

559 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
) || \

560 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
) || \

561 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
) || \

562 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
) || \

563 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
) || \

564 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
))

	)

573 
	#RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
 ((
uöt32_t
)0x00000000Ë

	)

575 
	#RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
 ((
uöt32_t
)0x00002000Ë

	)

577 
	#RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
 ((
uöt32_t
)0x00004000Ë

	)

579 
	#RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
 ((
uöt32_t
)0x00006000Ë

	)

582 
	#IS_RTC_TAMPER_PRECHARGE_DURATION
(
DURATION
Ë(((DURATIONË=
RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
) || \

583 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
) || \

584 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
) || \

585 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
))

	)

593 
	#RTC_Tam≥r_1
 
RTC_TAFCR_TAMP1E


	)

595 
	#RTC_Tam≥r_2
 
RTC_TAFCR_TAMP2E


	)

597 
	#RTC_Tam≥r_3
 
RTC_TAFCR_TAMP3E


	)

600 
	#IS_RTC_TAMPER
(
TAMPER
Ë((((TAMPERË& (
uöt32_t
)0xFFFFFFD6Ë=0x00Ë&& ((TAMPERË!(uöt32_t)
RESET
))

	)

610 
	#RTC_OuçutTy≥_O≥nDøö
 ((
uöt32_t
)0x00000000)

	)

611 
	#RTC_OuçutTy≥_PushPuŒ
 ((
uöt32_t
)0x00040000)

	)

612 
	#IS_RTC_OUTPUT_TYPE
(
TYPE
Ë(((TYPEË=
RTC_OuçutTy≥_O≥nDøö
) || \

613 ((
TYPE
Ë=
RTC_OuçutTy≥_PushPuŒ
))

	)

622 
	#RTC_Shi·Add1S_Re£t
 ((
uöt32_t
)0x00000000)

	)

623 
	#RTC_Shi·Add1S_Së
 ((
uöt32_t
)0x80000000)

	)

624 
	#IS_RTC_SHIFT_ADD1S
(
SEL
Ë(((SELË=
RTC_Shi·Add1S_Re£t
) || \

625 ((
SEL
Ë=
RTC_Shi·Add1S_Së
))

	)

633 
	#IS_RTC_SHIFT_SUBFS
(
FS
Ë((FSË<0x00007FFF)

	)

643 
	#RTC_BKP_DR0
 ((
uöt32_t
)0x00000000)

	)

644 
	#RTC_BKP_DR1
 ((
uöt32_t
)0x00000001)

	)

645 
	#RTC_BKP_DR2
 ((
uöt32_t
)0x00000002)

	)

646 
	#RTC_BKP_DR3
 ((
uöt32_t
)0x00000003)

	)

647 
	#RTC_BKP_DR4
 ((
uöt32_t
)0x00000004)

	)

648 
	#RTC_BKP_DR5
 ((
uöt32_t
)0x00000005)

	)

649 
	#RTC_BKP_DR6
 ((
uöt32_t
)0x00000006)

	)

650 
	#RTC_BKP_DR7
 ((
uöt32_t
)0x00000007)

	)

651 
	#RTC_BKP_DR8
 ((
uöt32_t
)0x00000008)

	)

652 
	#RTC_BKP_DR9
 ((
uöt32_t
)0x00000009)

	)

653 
	#RTC_BKP_DR10
 ((
uöt32_t
)0x0000000A)

	)

654 
	#RTC_BKP_DR11
 ((
uöt32_t
)0x0000000B)

	)

655 
	#RTC_BKP_DR12
 ((
uöt32_t
)0x0000000C)

	)

656 
	#RTC_BKP_DR13
 ((
uöt32_t
)0x0000000D)

	)

657 
	#RTC_BKP_DR14
 ((
uöt32_t
)0x0000000E)

	)

658 
	#RTC_BKP_DR15
 ((
uöt32_t
)0x0000000F)

	)

659 
	#RTC_BKP_DR16
 ((
uöt32_t
)0x00000010)

	)

660 
	#RTC_BKP_DR17
 ((
uöt32_t
)0x00000011)

	)

661 
	#RTC_BKP_DR18
 ((
uöt32_t
)0x00000012)

	)

662 
	#RTC_BKP_DR19
 ((
uöt32_t
)0x00000013)

	)

663 
	#RTC_BKP_DR20
 ((
uöt32_t
)0x00000014)

	)

664 
	#RTC_BKP_DR21
 ((
uöt32_t
)0x00000015)

	)

665 
	#RTC_BKP_DR22
 ((
uöt32_t
)0x00000016)

	)

666 
	#RTC_BKP_DR23
 ((
uöt32_t
)0x00000017)

	)

667 
	#RTC_BKP_DR24
 ((
uöt32_t
)0x00000018)

	)

668 
	#RTC_BKP_DR25
 ((
uöt32_t
)0x00000019)

	)

669 
	#RTC_BKP_DR26
 ((
uöt32_t
)0x0000001A)

	)

670 
	#RTC_BKP_DR27
 ((
uöt32_t
)0x0000001B)

	)

671 
	#RTC_BKP_DR28
 ((
uöt32_t
)0x0000001C)

	)

672 
	#RTC_BKP_DR29
 ((
uöt32_t
)0x0000001D)

	)

673 
	#RTC_BKP_DR30
 ((
uöt32_t
)0x0000001E)

	)

674 
	#RTC_BKP_DR31
 ((
uöt32_t
)0x0000001F)

	)

675 
	#IS_RTC_BKP
(
BKP
Ë(((BKPË=
RTC_BKP_DR0
) || \

676 ((
BKP
Ë=
RTC_BKP_DR1
) || \

677 ((
BKP
Ë=
RTC_BKP_DR2
) || \

678 ((
BKP
Ë=
RTC_BKP_DR3
) || \

679 ((
BKP
Ë=
RTC_BKP_DR4
) || \

680 ((
BKP
Ë=
RTC_BKP_DR5
) || \

681 ((
BKP
Ë=
RTC_BKP_DR6
) || \

682 ((
BKP
Ë=
RTC_BKP_DR7
) || \

683 ((
BKP
Ë=
RTC_BKP_DR8
) || \

684 ((
BKP
Ë=
RTC_BKP_DR9
) || \

685 ((
BKP
Ë=
RTC_BKP_DR10
) || \

686 ((
BKP
Ë=
RTC_BKP_DR11
) || \

687 ((
BKP
Ë=
RTC_BKP_DR12
) || \

688 ((
BKP
Ë=
RTC_BKP_DR13
) || \

689 ((
BKP
Ë=
RTC_BKP_DR14
) || \

690 ((
BKP
Ë=
RTC_BKP_DR15
) || \

691 ((
BKP
Ë=
RTC_BKP_DR16
) || \

692 ((
BKP
Ë=
RTC_BKP_DR17
) || \

693 ((
BKP
Ë=
RTC_BKP_DR18
) || \

694 ((
BKP
Ë=
RTC_BKP_DR19
) || \

695 ((
BKP
Ë=
RTC_BKP_DR20
) || \

696 ((
BKP
Ë=
RTC_BKP_DR21
) || \

697 ((
BKP
Ë=
RTC_BKP_DR22
) || \

698 ((
BKP
Ë=
RTC_BKP_DR23
) || \

699 ((
BKP
Ë=
RTC_BKP_DR24
) || \

700 ((
BKP
Ë=
RTC_BKP_DR25
) || \

701 ((
BKP
Ë=
RTC_BKP_DR26
) || \

702 ((
BKP
Ë=
RTC_BKP_DR27
) || \

703 ((
BKP
Ë=
RTC_BKP_DR28
) || \

704 ((
BKP
Ë=
RTC_BKP_DR29
) || \

705 ((
BKP
Ë=
RTC_BKP_DR30
) || \

706 ((
BKP
Ë=
RTC_BKP_DR31
))

	)

714 
	#RTC_F‹m©_BIN
 ((
uöt32_t
)0x000000000)

	)

715 
	#RTC_F‹m©_BCD
 ((
uöt32_t
)0x000000001)

	)

716 
	#IS_RTC_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_F‹m©_BIN
Ë|| ((FORMATË=
RTC_F‹m©_BCD
))

	)

725 
	#RTC_FLAG_RECALPF
 ((
uöt32_t
)0x00010000)

	)

726 
	#RTC_FLAG_TAMP3F
 ((
uöt32_t
)0x00008000)

	)

727 
	#RTC_FLAG_TAMP2F
 ((
uöt32_t
)0x00004000)

	)

728 
	#RTC_FLAG_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

729 
	#RTC_FLAG_TSOVF
 ((
uöt32_t
)0x00001000)

	)

730 
	#RTC_FLAG_TSF
 ((
uöt32_t
)0x00000800)

	)

731 
	#RTC_FLAG_WUTF
 ((
uöt32_t
)0x00000400)

	)

732 
	#RTC_FLAG_ALRBF
 ((
uöt32_t
)0x00000200)

	)

733 
	#RTC_FLAG_ALRAF
 ((
uöt32_t
)0x00000100)

	)

734 
	#RTC_FLAG_INITF
 ((
uöt32_t
)0x00000040)

	)

735 
	#RTC_FLAG_RSF
 ((
uöt32_t
)0x00000020)

	)

736 
	#RTC_FLAG_INITS
 ((
uöt32_t
)0x00000010)

	)

737 
	#RTC_FLAG_SHPF
 ((
uöt32_t
)0x00000008)

	)

738 
	#RTC_FLAG_WUTWF
 ((
uöt32_t
)0x00000004)

	)

739 
	#RTC_FLAG_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

740 
	#RTC_FLAG_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

741 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_TSOVF
Ë|| ((FLAGË=
RTC_FLAG_TSF
) || \

742 ((
FLAG
Ë=
RTC_FLAG_WUTF
Ë|| ((FLAGË=
RTC_FLAG_ALRBF
) || \

743 ((
FLAG
Ë=
RTC_FLAG_ALRAF
Ë|| ((FLAGË=
RTC_FLAG_INITF
) || \

744 ((
FLAG
Ë=
RTC_FLAG_RSF
Ë|| ((FLAGË=
RTC_FLAG_WUTWF
) || \

745 ((
FLAG
Ë=
RTC_FLAG_ALRBWF
Ë|| ((FLAGË=
RTC_FLAG_ALRAWF
) || \

746 ((
FLAG
Ë=
RTC_FLAG_TAMP1F
Ë|| ((FLAGË=
RTC_FLAG_TAMP2F
) || \

747 ((
FLAG
Ë=
RTC_FLAG_TAMP3F
Ë|| ((FLAGË=
RTC_FLAG_RECALPF
) || \

748 ((
FLAG
Ë=
RTC_FLAG_SHPF
))

	)

749 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë(((FLAGË!(
uöt32_t
)
RESET
Ë&& (((FLAGË& 0xFFFF00DFË=(uöt32_t)RESET))

	)

758 
	#RTC_IT_TS
 ((
uöt32_t
)0x00008000)

	)

759 
	#RTC_IT_WUT
 ((
uöt32_t
)0x00004000)

	)

760 
	#RTC_IT_ALRB
 ((
uöt32_t
)0x00002000)

	)

761 
	#RTC_IT_ALRA
 ((
uöt32_t
)0x00001000)

	)

762 
	#RTC_IT_TAMP
 ((
uöt32_t
)0x00000004Ë

	)

763 
	#RTC_IT_TAMP1
 ((
uöt32_t
)0x00020000)

	)

764 
	#RTC_IT_TAMP2
 ((
uöt32_t
)0x00040000)

	)

765 
	#RTC_IT_TAMP3
 ((
uöt32_t
)0x00080000)

	)

768 
	#IS_RTC_CONFIG_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFF0FFBË=(uöt32_t)RESET))

	)

769 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_TS
Ë|| ((ITË=
RTC_IT_WUT
) || \

770 ((
IT
Ë=
RTC_IT_ALRB
Ë|| ((ITË=
RTC_IT_ALRA
) || \

771 ((
IT
Ë=
RTC_IT_TAMP1
Ë|| ((ITË=
RTC_IT_TAMP2
) || \

772 ((
IT
Ë=
RTC_IT_TAMP3
))

	)

773 
	#IS_RTC_CLEAR_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFF10FFFË=(uöt32_t)RESET))

	)

782 
	#RTC_DigôÆCÆibC⁄fig
 
RTC_Cﬂr£CÆibC⁄fig


	)

783 
	#RTC_DigôÆCÆibCmd
 
RTC_Cﬂr£CÆibCmd


	)

798 
Eº‹Sètus
 
RTC_DeInô
();

802 
Eº‹Sètus
 
RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

803 
RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

804 
RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

805 
Eº‹Sètus
 
RTC_E¡îInôMode
();

806 
RTC_ExôInôMode
();

807 
Eº‹Sètus
 
RTC_WaôF‹Synchro
();

808 
Eº‹Sètus
 
RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

809 
RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

812 
Eº‹Sètus
 
RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

813 
RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

814 
RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

815 
uöt32_t
 
RTC_GëSubSec⁄d
();

816 
Eº‹Sètus
 
RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

817 
RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

818 
RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

821 
RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

822 
RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

823 
RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

824 
Eº‹Sètus
 
RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

825 
RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
);

826 
uöt32_t
 
RTC_GëAœrmSubSec⁄d
(uöt32_à
RTC_Aœrm
);

829 
RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
);

830 
RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
);

831 
uöt32_t
 
RTC_GëWakeUpCou¡î
();

832 
Eº‹Sètus
 
RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

835 
RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
);

836 
uöt32_t
 
RTC_GëSt‹eO≥øti⁄
();

839 
RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
);

842 
Eº‹Sètus
 
RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
);

843 
Eº‹Sètus
 
RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

844 
RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

845 
RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
);

846 
Eº‹Sètus
 
RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

847 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

848 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
);

851 
RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

852 
RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

853 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
);

854 
uöt32_t
 
RTC_GëTimeSèmpSubSec⁄d
();

857 
RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
);

858 
RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

859 
RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
);

860 
RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
);

861 
RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
);

862 
RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

863 
RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

866 
RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
);

867 
uöt32_t
 
RTC_RódBackupRegi°î
(uöt32_à
RTC_BKP_DR
);

870 
RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
);

873 
Eº‹Sètus
 
RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
);

876 
RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

877 
FœgSètus
 
RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
);

878 
RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
);

879 
ITSètus
 
RTC_GëITSètus
(
uöt32_t
 
RTC_IT
);

880 
RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
);

882 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_sdio.h

30 #i‚de‡
__STM32L1xx_SDIO_H


31 
	#__STM32L1xx_SDIO_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

52 
uöt32_t
 
SDIO_ClockEdge
;

55 
uöt32_t
 
SDIO_ClockBy∑ss
;

59 
uöt32_t
 
SDIO_ClockPowîSave
;

63 
uöt32_t
 
SDIO_BusWide
;

66 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

69 
uöt8_t
 
SDIO_ClockDiv
;

72 } 
	tSDIO_InôTy≥Def
;

76 
uöt32_t
 
SDIO_Argumít
;

81 
uöt32_t
 
SDIO_CmdIndex
;

83 
uöt32_t
 
SDIO_Re•⁄£
;

86 
uöt32_t
 
SDIO_Waô
;

89 
uöt32_t
 
SDIO_CPSM
;

92 } 
	tSDIO_CmdInôTy≥Def
;

96 
uöt32_t
 
SDIO_D©aTimeOut
;

98 
uöt32_t
 
SDIO_D©aLígth
;

100 
uöt32_t
 
SDIO_D©aBlockSize
;

103 
uöt32_t
 
SDIO_Tøns„rDú
;

107 
uöt32_t
 
SDIO_Tøns„rMode
;

110 
uöt32_t
 
SDIO_DPSM
;

113 } 
	tSDIO_D©aInôTy≥Def
;

125 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

126 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

127 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
) || \

128 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

	)

137 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

138 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

139 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
) || \

140 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

	)

149 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

150 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

151 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
) || \

152 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

	)

161 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

162 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

163 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

164 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
) || \

165 ((
WIDE
Ë=
SDIO_BusWide_8b
))

	)

175 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

176 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

177 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
) || \

178 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

	)

187 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

188 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

189 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

199 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

200 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

201 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

202 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

203 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

204 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

205 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

206 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

207 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

208 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

209 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

210 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

211 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

212 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

213 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

214 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

215 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

216 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

217 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

218 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

219 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

220 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

221 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

222 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

223 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

232 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

241 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

242 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

243 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

244 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
) || \

245 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

246 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

	)

255 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

256 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

257 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

258 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
) || \

259 ((
WAIT
Ë=
SDIO_Waô_Píd
))

	)

268 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

269 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

270 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

279 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

280 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

281 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

282 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

283 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
) || \

284 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

	)

293 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

302 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

303 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

304 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

305 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

306 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

307 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

308 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

309 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

310 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

311 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

312 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

313 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

314 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

315 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

316 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

317 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
) || \

318 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

329 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

330 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

331 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

	)

340 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

341 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

342 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
) || \

343 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

	)

352 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

353 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

354 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
) || \

355 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

	)

364 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

365 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

366 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

375 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

376 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

377 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

378 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

379 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

380 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

381 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

382 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

383 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

384 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

385 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

386 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

387 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

388 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

389 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

390 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

391 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

392 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

393 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

394 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

395 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

396 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

397 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

398 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

399 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
) || \

400 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

420 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

421 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

422 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

	)

424 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

426 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
) || \

427 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

428 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

429 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

430 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

431 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

432 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

433 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

434 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

435 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

436 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

437 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

438 ((
IT
Ë=
SDIO_IT_TXACT
) || \

439 ((
IT
Ë=
SDIO_IT_RXACT
) || \

440 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

441 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

442 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

443 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

444 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

445 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

446 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

447 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

448 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

449 ((
IT
Ë=
SDIO_IT_CEATAEND
))

	)

451 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

461 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

462 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

463 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
) || \

464 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

	)

476 
SDIO_DeInô
();

479 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

480 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

481 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

482 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

483 
uöt32_t
 
SDIO_GëPowîSèã
();

486 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

489 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

490 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

491 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

492 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

495 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

496 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

497 
uöt32_t
 
SDIO_GëD©aCou¡î
();

498 
uöt32_t
 
SDIO_RódD©a
();

499 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

500 
uöt32_t
 
SDIO_GëFIFOCou¡
();

503 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

504 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

506 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

510 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

511 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

512 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

515 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

516 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

517 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

518 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

519 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

521 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_spi.h

30 #i‚de‡
__STM32L1xx_SPI_H


31 
	#__STM32L1xx_SPI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

56 
uöt16_t
 
SPI_Dúe˘i⁄
;

59 
uöt16_t
 
SPI_Mode
;

62 
uöt16_t
 
SPI_D©aSize
;

65 
uöt16_t
 
SPI_CPOL
;

68 
uöt16_t
 
SPI_CPHA
;

71 
uöt16_t
 
SPI_NSS
;

75 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

81 
uöt16_t
 
SPI_Fú°Bô
;

84 
uöt16_t
 
SPI_CRCPﬁynomül
;

85 }
	tSPI_InôTy≥Def
;

94 
uöt16_t
 
I2S_Mode
;

97 
uöt16_t
 
I2S_Sènd¨d
;

100 
uöt16_t
 
I2S_D©aF‹m©
;

103 
uöt16_t
 
I2S_MCLKOuçut
;

106 
uöt32_t
 
I2S_AudioFªq
;

109 
uöt16_t
 
I2S_CPOL
;

111 }
	tI2S_InôTy≥Def
;

119 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

120 ((
PERIPH
Ë=
SPI2
) || \

121 ((
PERIPH
Ë=
SPI3
))

	)

122 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

123 ((
PERIPH
Ë=
SPI3
))

	)

129 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

130 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

131 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

132 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

133 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
) || \

134 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

135 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

136 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

	)

145 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

146 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

147 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
) || \

148 ((
MODE
Ë=
SPI_Mode_Sœve
))

	)

157 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

158 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

159 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
) || \

160 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

	)

169 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

170 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

171 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
) || \

172 ((
CPOL
Ë=
SPI_CPOL_High
))

	)

181 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

182 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

183 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
) || \

184 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

	)

193 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

194 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

195 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
) || \

196 ((
NSS
Ë=
SPI_NSS_H¨d
))

	)

205 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

206 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

207 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

208 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

209 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

210 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

211 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

212 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

213 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
) || \

214 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

215 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

216 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

217 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

218 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

219 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

220 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

	)

229 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

230 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

231 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
) || \

232 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

	)

241 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

242 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

243 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

244 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

245 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
) || \

246 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

247 ((
MODE
Ë=
I2S_Mode_Ma°îTx
)|| \

248 ((
MODE
Ë=
I2S_Mode_Ma°îRx
))

	)

258 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

259 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

260 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

261 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

262 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

263 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
) || \

264 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

265 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

266 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

267 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

	)

276 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

277 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

278 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

279 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

280 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
) || \

281 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

282 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

283 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

	)

292 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

293 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

294 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
) || \

295 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

	)

304 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

305 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

306 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

307 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

308 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

309 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

310 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

311 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

312 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

313 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

315 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
) && \

316 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

317 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

	)

326 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

327 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

328 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
) || \

329 ((
CPOL
Ë=
I2S_CPOL_High
))

	)

338 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

339 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

340 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

349 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

350 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

351 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
) || \

352 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

	)

361 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

362 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

363 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

372 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

373 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

374 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
) || \

375 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

	)

384 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

385 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

386 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

387 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

388 
	#SPI_I2S_IT_FRE
 ((
uöt8_t
)0x58)

	)

390 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
) || \

391 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

392 ((
IT
Ë=
SPI_I2S_IT_ERR
))

	)

394 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

395 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

396 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

398 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

400 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
) || \

401 ((
IT
Ë=
SPI_IT_CRCERR
Ë|| ((ITË=
SPI_IT_MODF
) || \

402 ((
IT
Ë=
SPI_I2S_IT_OVR
Ë|| ((ITË=
I2S_IT_UDR
) ||\

403 ((
IT
Ë=
SPI_I2S_IT_FRE
))

	)

412 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

413 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

414 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

415 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

416 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

417 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

418 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

419 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

420 
	#SPI_I2S_FLAG_FRE
 ((
uöt16_t
)0x0100)

	)

422 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

423 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
) || \

424 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

425 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

426 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
)|| \

427 ((
FLAG
Ë=
SPI_I2S_FLAG_FRE
))

	)

436 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

445 
	#SPI_DMAReq_Tx
 
SPI_I2S_DMAReq_Tx


	)

446 
	#SPI_DMAReq_Rx
 
SPI_I2S_DMAReq_Rx


	)

447 
	#SPI_IT_TXE
 
SPI_I2S_IT_TXE


	)

448 
	#SPI_IT_RXNE
 
SPI_I2S_IT_RXNE


	)

449 
	#SPI_IT_ERR
 
SPI_I2S_IT_ERR


	)

450 
	#SPI_IT_OVR
 
SPI_I2S_IT_OVR


	)

451 
	#SPI_FLAG_RXNE
 
SPI_I2S_FLAG_RXNE


	)

452 
	#SPI_FLAG_TXE
 
SPI_I2S_FLAG_TXE


	)

453 
	#SPI_FLAG_OVR
 
SPI_I2S_FLAG_OVR


	)

454 
	#SPI_FLAG_BSY
 
SPI_I2S_FLAG_BSY


	)

455 
	#SPI_DeInô
 
SPI_I2S_DeInô


	)

456 
	#SPI_ITC⁄fig
 
SPI_I2S_ITC⁄fig


	)

457 
	#SPI_DMACmd
 
SPI_I2S_DMACmd


	)

458 
	#SPI_SídD©a
 
SPI_I2S_SídD©a


	)

459 
	#SPI_Re˚iveD©a
 
SPI_I2S_Re˚iveD©a


	)

460 
	#SPI_GëFœgSètus
 
SPI_I2S_GëFœgSètus


	)

461 
	#SPI_CÀ¨Fœg
 
SPI_I2S_CÀ¨Fœg


	)

462 
	#SPI_GëITSètus
 
SPI_I2S_GëITSètus


	)

463 
	#SPI_CÀ¨ITPídögBô
 
SPI_I2S_CÀ¨ITPídögBô


	)

476 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

479 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

480 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

481 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

482 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

483 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

484 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

485 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

486 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

487 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

488 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

491 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

492 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

495 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

496 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

497 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

498 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

501 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

504 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

506 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

507 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

508 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

510 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_syscfg.h

30 #i‚de‡
__STM32L1xx_SYSCFG_H


31 
	#__STM32L1xx_SYSCFG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

58 
	#EXTI_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

59 
	#EXTI_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

60 
	#EXTI_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

61 
	#EXTI_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

62 
	#EXTI_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

63 
	#EXTI_P‹tSour˚GPIOH
 ((
uöt8_t
)0x05)

	)

64 
	#EXTI_P‹tSour˚GPIOF
 ((
uöt8_t
)0x06)

	)

65 
	#EXTI_P‹tSour˚GPIOG
 ((
uöt8_t
)0x07)

	)

67 
	#IS_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
EXTI_P‹tSour˚GPIOA
) || \

68 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOB
) || \

69 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOC
) || \

70 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOD
) || \

71 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOE
) || \

72 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOF
) || \

73 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOG
) || \

74 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOH
))

	)

82 
	#EXTI_PöSour˚0
 ((
uöt8_t
)0x00)

	)

83 
	#EXTI_PöSour˚1
 ((
uöt8_t
)0x01)

	)

84 
	#EXTI_PöSour˚2
 ((
uöt8_t
)0x02)

	)

85 
	#EXTI_PöSour˚3
 ((
uöt8_t
)0x03)

	)

86 
	#EXTI_PöSour˚4
 ((
uöt8_t
)0x04)

	)

87 
	#EXTI_PöSour˚5
 ((
uöt8_t
)0x05)

	)

88 
	#EXTI_PöSour˚6
 ((
uöt8_t
)0x06)

	)

89 
	#EXTI_PöSour˚7
 ((
uöt8_t
)0x07)

	)

90 
	#EXTI_PöSour˚8
 ((
uöt8_t
)0x08)

	)

91 
	#EXTI_PöSour˚9
 ((
uöt8_t
)0x09)

	)

92 
	#EXTI_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

93 
	#EXTI_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

94 
	#EXTI_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

95 
	#EXTI_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

96 
	#EXTI_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

97 
	#EXTI_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

98 
	#IS_EXTI_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
EXTI_PöSour˚0
) || \

99 ((
PINSOURCE
Ë=
EXTI_PöSour˚1
) || \

100 ((
PINSOURCE
Ë=
EXTI_PöSour˚2
) || \

101 ((
PINSOURCE
Ë=
EXTI_PöSour˚3
) || \

102 ((
PINSOURCE
Ë=
EXTI_PöSour˚4
) || \

103 ((
PINSOURCE
Ë=
EXTI_PöSour˚5
) || \

104 ((
PINSOURCE
Ë=
EXTI_PöSour˚6
) || \

105 ((
PINSOURCE
Ë=
EXTI_PöSour˚7
) || \

106 ((
PINSOURCE
Ë=
EXTI_PöSour˚8
) || \

107 ((
PINSOURCE
Ë=
EXTI_PöSour˚9
) || \

108 ((
PINSOURCE
Ë=
EXTI_PöSour˚10
) || \

109 ((
PINSOURCE
Ë=
EXTI_PöSour˚11
) || \

110 ((
PINSOURCE
Ë=
EXTI_PöSour˚12
) || \

111 ((
PINSOURCE
Ë=
EXTI_PöSour˚13
) || \

112 ((
PINSOURCE
Ë=
EXTI_PöSour˚14
) || \

113 ((
PINSOURCE
Ë=
EXTI_PöSour˚15
))

	)

121 
	#SYSCFG_Mem‹yRem≠_Fœsh
 ((
uöt8_t
)0x00)

	)

122 
	#SYSCFG_Mem‹yRem≠_Sy°emFœsh
 ((
uöt8_t
)0x01)

	)

123 
	#SYSCFG_Mem‹yRem≠_FSMC
 ((
uöt8_t
)0x02)

	)

124 
	#SYSCFG_Mem‹yRem≠_SRAM
 ((
uöt8_t
)0x03)

	)

126 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

127 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

128 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FSMC
) || \

129 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
))

	)

139 
	#RI_Resi°‹_10KPU
 
COMP_CSR_10KPU


	)

140 
	#RI_Resi°‹_400KPU
 
COMP_CSR_400KPU


	)

141 
	#RI_Resi°‹_10KPD
 
COMP_CSR_10KPD


	)

142 
	#RI_Resi°‹_400KPD
 
COMP_CSR_400KPD


	)

144 
	#IS_RI_RESISTOR
(
RESISTOR
Ë(((RESISTORË=
COMP_CSR_10KPU
) || \

145 ((
RESISTOR
Ë=
COMP_CSR_400KPU
) || \

146 ((
RESISTOR
Ë=
COMP_CSR_10KPD
) || \

147 ((
RESISTOR
Ë=
COMP_CSR_400KPD
))

	)

157 
	#RI_Ch™√l_3
 ((
uöt32_t
)0x04000000)

	)

158 
	#RI_Ch™√l_8
 ((
uöt32_t
)0x08000000)

	)

159 
	#RI_Ch™√l_13
 ((
uöt32_t
)0x10000000)

	)

161 
	#IS_RI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
RI_Ch™√l_3
) || \

162 ((
CHANNEL
Ë=
RI_Ch™√l_8
) || \

163 ((
CHANNEL
Ë=
RI_Ch™√l_13
))

	)

173 
	#RI_Ch™√lS≥ed_Fa°
 ((
uöt32_t
)0x00000000)

	)

174 
	#RI_Ch™√lS≥ed_Slow
 ((
uöt32_t
)0x00000001)

	)

176 
	#IS_RI_CHANNELSPEED
(
SPEED
Ë(((SPEEDË=
RI_Ch™√lS≥ed_Fa°
) || \

177 ((
SPEED
Ë=
RI_Ch™√lS≥ed_Slow
))

	)

187 
	#RI_I≈utC≠tuª_IC1
 
RI_ICR_IC1


	)

188 
	#RI_I≈utC≠tuª_IC2
 
RI_ICR_IC2


	)

189 
	#RI_I≈utC≠tuª_IC3
 
RI_ICR_IC3


	)

190 
	#RI_I≈utC≠tuª_IC4
 
RI_ICR_IC4


	)

192 
	#IS_RI_INPUTCAPTURE
(
INPUTCAPTURE
Ë((((INPUTCAPTUREË& (
uöt32_t
)0xFFC2FFFFË=0x00Ë&& ((INPUTCAPTUREË!(uöt32_t)0x00))

	)

201 
	#TIM_Sñe˘_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

202 
	#TIM_Sñe˘_TIM2
 ((
uöt32_t
)0x00010000Ë

	)

203 
	#TIM_Sñe˘_TIM3
 ((
uöt32_t
)0x00020000Ë

	)

204 
	#TIM_Sñe˘_TIM4
 ((
uöt32_t
)0x00030000Ë

	)

206 
	#IS_RI_TIM
(
TIM
Ë(((TIMË=
TIM_Sñe˘_N⁄e
) || \

207 ((
TIM
Ë=
TIM_Sñe˘_TIM2
) || \

208 ((
TIM
Ë=
TIM_Sñe˘_TIM3
) || \

209 ((
TIM
Ë=
TIM_Sñe˘_TIM4
))

	)

219 
	#RI_I≈utC≠tuªRoutög_0
 ((
uöt32_t
)0x00000000Ë

	)

220 
	#RI_I≈utC≠tuªRoutög_1
 ((
uöt32_t
)0x00000001Ë

	)

221 
	#RI_I≈utC≠tuªRoutög_2
 ((
uöt32_t
)0x00000002Ë

	)

222 
	#RI_I≈utC≠tuªRoutög_3
 ((
uöt32_t
)0x00000003Ë

	)

223 
	#RI_I≈utC≠tuªRoutög_4
 ((
uöt32_t
)0x00000004Ë

	)

224 
	#RI_I≈utC≠tuªRoutög_5
 ((
uöt32_t
)0x00000005Ë

	)

225 
	#RI_I≈utC≠tuªRoutög_6
 ((
uöt32_t
)0x00000006Ë

	)

226 
	#RI_I≈utC≠tuªRoutög_7
 ((
uöt32_t
)0x00000007Ë

	)

227 
	#RI_I≈utC≠tuªRoutög_8
 ((
uöt32_t
)0x00000008Ë

	)

228 
	#RI_I≈utC≠tuªRoutög_9
 ((
uöt32_t
)0x00000009Ë

	)

229 
	#RI_I≈utC≠tuªRoutög_10
 ((
uöt32_t
)0x0000000AË

	)

230 
	#RI_I≈utC≠tuªRoutög_11
 ((
uöt32_t
)0x0000000BË

	)

231 
	#RI_I≈utC≠tuªRoutög_12
 ((
uöt32_t
)0x0000000CË

	)

232 
	#RI_I≈utC≠tuªRoutög_13
 ((
uöt32_t
)0x0000000DË

	)

233 
	#RI_I≈utC≠tuªRoutög_14
 ((
uöt32_t
)0x0000000EË

	)

234 
	#RI_I≈utC≠tuªRoutög_15
 ((
uöt32_t
)0x0000000FË

	)

236 
	#IS_RI_INPUTCAPTURE_ROUTING
(
ROUTING
Ë(((ROUTINGË=
RI_I≈utC≠tuªRoutög_0
) || \

237 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_1
) || \

238 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_2
) || \

239 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_3
) || \

240 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_4
) || \

241 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_5
) || \

242 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_6
) || \

243 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_7
) || \

244 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_8
) || \

245 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_9
) || \

246 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_10
) || \

247 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_11
) || \

248 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_12
) || \

249 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_13
) || \

250 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_14
) || \

251 ((
ROUTING
Ë=
RI_I≈utC≠tuªRoutög_15
))

	)

262 
	#RI_IOSwôch_CH0
 ((
uöt32_t
)0x80000001)

	)

263 
	#RI_IOSwôch_CH1
 ((
uöt32_t
)0x80000002)

	)

264 
	#RI_IOSwôch_CH2
 ((
uöt32_t
)0x80000004)

	)

265 
	#RI_IOSwôch_CH3
 ((
uöt32_t
)0x80000008)

	)

266 
	#RI_IOSwôch_CH4
 ((
uöt32_t
)0x80000010)

	)

267 
	#RI_IOSwôch_CH5
 ((
uöt32_t
)0x80000020)

	)

268 
	#RI_IOSwôch_CH6
 ((
uöt32_t
)0x80000040)

	)

269 
	#RI_IOSwôch_CH7
 ((
uöt32_t
)0x80000080)

	)

270 
	#RI_IOSwôch_CH8
 ((
uöt32_t
)0x80000100)

	)

271 
	#RI_IOSwôch_CH9
 ((
uöt32_t
)0x80000200)

	)

272 
	#RI_IOSwôch_CH10
 ((
uöt32_t
)0x80000400)

	)

273 
	#RI_IOSwôch_CH11
 ((
uöt32_t
)0x80000800)

	)

274 
	#RI_IOSwôch_CH12
 ((
uöt32_t
)0x80001000)

	)

275 
	#RI_IOSwôch_CH13
 ((
uöt32_t
)0x80002000)

	)

276 
	#RI_IOSwôch_CH14
 ((
uöt32_t
)0x80004000)

	)

277 
	#RI_IOSwôch_CH15
 ((
uöt32_t
)0x80008000)

	)

278 
	#RI_IOSwôch_CH31
 ((
uöt32_t
)0x80010000)

	)

279 
	#RI_IOSwôch_CH18
 ((
uöt32_t
)0x80040000)

	)

280 
	#RI_IOSwôch_CH19
 ((
uöt32_t
)0x80080000)

	)

281 
	#RI_IOSwôch_CH20
 ((
uöt32_t
)0x80100000)

	)

282 
	#RI_IOSwôch_CH21
 ((
uöt32_t
)0x80200000)

	)

283 
	#RI_IOSwôch_CH22
 ((
uöt32_t
)0x80400000)

	)

284 
	#RI_IOSwôch_CH23
 ((
uöt32_t
)0x80800000)

	)

285 
	#RI_IOSwôch_CH24
 ((
uöt32_t
)0x81000000)

	)

286 
	#RI_IOSwôch_CH25
 ((
uöt32_t
)0x82000000)

	)

287 
	#RI_IOSwôch_VCOMP
 ((
uöt32_t
)0x84000000Ë

	)

289 
	#RI_IOSwôch_CH27
 ((
uöt32_t
)0x88000000)

	)

290 
	#RI_IOSwôch_CH28
 ((
uöt32_t
)0x90000000)

	)

291 
	#RI_IOSwôch_CH29
 ((
uöt32_t
)0xA0000000)

	)

292 
	#RI_IOSwôch_CH30
 ((
uöt32_t
)0xC0000000)

	)

295 
	#RI_IOSwôch_GR10_1
 ((
uöt32_t
)0x00000001)

	)

296 
	#RI_IOSwôch_GR10_2
 ((
uöt32_t
)0x00000002)

	)

297 
	#RI_IOSwôch_GR10_3
 ((
uöt32_t
)0x00000004)

	)

298 
	#RI_IOSwôch_GR10_4
 ((
uöt32_t
)0x00000008)

	)

299 
	#RI_IOSwôch_GR6_1
 ((
uöt32_t
)0x00000010)

	)

300 
	#RI_IOSwôch_GR6_2
 ((
uöt32_t
)0x00000020)

	)

301 
	#RI_IOSwôch_GR5_1
 ((
uöt32_t
)0x00000040)

	)

302 
	#RI_IOSwôch_GR5_2
 ((
uöt32_t
)0x00000080)

	)

303 
	#RI_IOSwôch_GR5_3
 ((
uöt32_t
)0x00000100)

	)

304 
	#RI_IOSwôch_GR4_1
 ((
uöt32_t
)0x00000200)

	)

305 
	#RI_IOSwôch_GR4_2
 ((
uöt32_t
)0x00000400)

	)

306 
	#RI_IOSwôch_GR4_3
 ((
uöt32_t
)0x00000800)

	)

307 
	#RI_IOSwôch_GR4_4
 ((
uöt32_t
)0x00008000)

	)

308 
	#RI_IOSwôch_CH0b
 ((
uöt32_t
)0x00010000)

	)

309 
	#RI_IOSwôch_CH1b
 ((
uöt32_t
)0x00020000)

	)

310 
	#RI_IOSwôch_CH2b
 ((
uöt32_t
)0x00040000)

	)

311 
	#RI_IOSwôch_CH3b
 ((
uöt32_t
)0x00080000)

	)

312 
	#RI_IOSwôch_CH6b
 ((
uöt32_t
)0x00100000)

	)

313 
	#RI_IOSwôch_CH7b
 ((
uöt32_t
)0x00200000)

	)

314 
	#RI_IOSwôch_CH8b
 ((
uöt32_t
)0x00400000)

	)

315 
	#RI_IOSwôch_CH9b
 ((
uöt32_t
)0x00800000)

	)

316 
	#RI_IOSwôch_CH10b
 ((
uöt32_t
)0x01000000)

	)

317 
	#RI_IOSwôch_CH11b
 ((
uöt32_t
)0x02000000)

	)

318 
	#RI_IOSwôch_CH12b
 ((
uöt32_t
)0x04000000)

	)

319 
	#RI_IOSwôch_GR6_3
 ((
uöt32_t
)0x08000000)

	)

320 
	#RI_IOSwôch_GR6_4
 ((
uöt32_t
)0x10000000)

	)

321 
	#RI_IOSwôch_GR5_4
 ((
uöt32_t
)0x20000000)

	)

324 
	#IS_RI_IOSWITCH
(
IOSWITCH
Ë(((IOSWITCHË=
RI_IOSwôch_CH0
) || \

325 ((
IOSWITCH
Ë=
RI_IOSwôch_CH1
) || \

326 ((
IOSWITCH
Ë=
RI_IOSwôch_CH2
) || \

327 ((
IOSWITCH
Ë=
RI_IOSwôch_CH3
) || \

328 ((
IOSWITCH
Ë=
RI_IOSwôch_CH4
) || \

329 ((
IOSWITCH
Ë=
RI_IOSwôch_CH5
) || \

330 ((
IOSWITCH
Ë=
RI_IOSwôch_CH6
) || \

331 ((
IOSWITCH
Ë=
RI_IOSwôch_CH7
) || \

332 ((
IOSWITCH
Ë=
RI_IOSwôch_CH8
) || \

333 ((
IOSWITCH
Ë=
RI_IOSwôch_CH9
) || \

334 ((
IOSWITCH
Ë=
RI_IOSwôch_CH10
) || \

335 ((
IOSWITCH
Ë=
RI_IOSwôch_CH11
) || \

336 ((
IOSWITCH
Ë=
RI_IOSwôch_CH12
) || \

337 ((
IOSWITCH
Ë=
RI_IOSwôch_CH13
) || \

338 ((
IOSWITCH
Ë=
RI_IOSwôch_CH14
) || \

339 ((
IOSWITCH
Ë=
RI_IOSwôch_CH15
) || \

340 ((
IOSWITCH
Ë=
RI_IOSwôch_CH18
) || \

341 ((
IOSWITCH
Ë=
RI_IOSwôch_CH19
) || \

342 ((
IOSWITCH
Ë=
RI_IOSwôch_CH20
) || \

343 ((
IOSWITCH
Ë=
RI_IOSwôch_CH21
) || \

344 ((
IOSWITCH
Ë=
RI_IOSwôch_CH22
) || \

345 ((
IOSWITCH
Ë=
RI_IOSwôch_CH23
) || \

346 ((
IOSWITCH
Ë=
RI_IOSwôch_CH24
) || \

347 ((
IOSWITCH
Ë=
RI_IOSwôch_CH25
) || \

348 ((
IOSWITCH
Ë=
RI_IOSwôch_VCOMP
) || \

349 ((
IOSWITCH
Ë=
RI_IOSwôch_CH27
) || \

350 ((
IOSWITCH
Ë=
RI_IOSwôch_CH28
) || \

351 ((
IOSWITCH
Ë=
RI_IOSwôch_CH29
) || \

352 ((
IOSWITCH
Ë=
RI_IOSwôch_CH30
) || \

353 ((
IOSWITCH
Ë=
RI_IOSwôch_CH31
) || \

354 ((
IOSWITCH
Ë=
RI_IOSwôch_GR10_1
) || \

355 ((
IOSWITCH
Ë=
RI_IOSwôch_GR10_2
) || \

356 ((
IOSWITCH
Ë=
RI_IOSwôch_GR10_3
) || \

357 ((
IOSWITCH
Ë=
RI_IOSwôch_GR10_4
) || \

358 ((
IOSWITCH
Ë=
RI_IOSwôch_GR6_1
) || \

359 ((
IOSWITCH
Ë=
RI_IOSwôch_GR6_2
) || \

360 ((
IOSWITCH
Ë=
RI_IOSwôch_GR6_3
) || \

361 ((
IOSWITCH
Ë=
RI_IOSwôch_GR6_4
) || \

362 ((
IOSWITCH
Ë=
RI_IOSwôch_GR5_1
) || \

363 ((
IOSWITCH
Ë=
RI_IOSwôch_GR5_2
) || \

364 ((
IOSWITCH
Ë=
RI_IOSwôch_GR5_3
) || \

365 ((
IOSWITCH
Ë=
RI_IOSwôch_GR5_4
) || \

366 ((
IOSWITCH
Ë=
RI_IOSwôch_GR4_1
) || \

367 ((
IOSWITCH
Ë=
RI_IOSwôch_GR4_2
) || \

368 ((
IOSWITCH
Ë=
RI_IOSwôch_GR4_3
) || \

369 ((
IOSWITCH
Ë=
RI_IOSwôch_GR4_4
) || \

370 ((
IOSWITCH
Ë=
RI_IOSwôch_CH0b
) || \

371 ((
IOSWITCH
Ë=
RI_IOSwôch_CH1b
) || \

372 ((
IOSWITCH
Ë=
RI_IOSwôch_CH2b
) || \

373 ((
IOSWITCH
Ë=
RI_IOSwôch_CH3b
) || \

374 ((
IOSWITCH
Ë=
RI_IOSwôch_CH6b
) || \

375 ((
IOSWITCH
Ë=
RI_IOSwôch_CH7b
) || \

376 ((
IOSWITCH
Ë=
RI_IOSwôch_CH8b
) || \

377 ((
IOSWITCH
Ë=
RI_IOSwôch_CH9b
) || \

378 ((
IOSWITCH
Ë=
RI_IOSwôch_CH10b
) || \

379 ((
IOSWITCH
Ë=
RI_IOSwôch_CH11b
) || \

380 ((
IOSWITCH
Ë=
RI_IOSwôch_CH12b
))

	)

390 
	#RI_P‹tA
 ((
uöt8_t
)0x01Ë

	)

391 
	#RI_P‹tB
 ((
uöt8_t
)0x02Ë

	)

392 
	#RI_P‹tC
 ((
uöt8_t
)0x03Ë

	)

393 
	#RI_P‹tD
 ((
uöt8_t
)0x04Ë

	)

394 
	#RI_P‹tE
 ((
uöt8_t
)0x05Ë

	)

395 
	#RI_P‹tF
 ((
uöt8_t
)0x06Ë

	)

396 
	#RI_P‹tG
 ((
uöt8_t
)0x07Ë

	)

398 
	#IS_RI_PORT
(
PORT
Ë(((PORTË=
RI_P‹tA
) || \

399 ((
PORT
Ë=
RI_P‹tB
) || \

400 ((
PORT
Ë=
RI_P‹tC
) || \

401 ((
PORT
Ë=
RI_P‹tD
) || \

402 ((
PORT
Ë=
RI_P‹tE
) || \

403 ((
PORT
Ë=
RI_P‹tF
) || \

404 ((
PORT
Ë=
RI_P‹tG
))

	)

412 
	#RI_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

413 
	#RI_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

414 
	#RI_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

415 
	#RI_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

416 
	#RI_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

417 
	#RI_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

418 
	#RI_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

419 
	#RI_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

420 
	#RI_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

421 
	#RI_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

422 
	#RI_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

423 
	#RI_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

424 
	#RI_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

425 
	#RI_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

426 
	#RI_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

427 
	#RI_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

428 
	#RI_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

430 
	#IS_RI_PIN
(
PIN
Ë((PINË!(
uöt16_t
)0x00)

	)

444 
SYSCFG_DeInô
();

445 
SYSCFG_RIDeInô
();

448 
SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
);

449 
uöt32_t
 
SYSCFG_GëBoŸMode
();

450 
SYSCFG_USBPuCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

451 
SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
);

454 
SYSCFG_RITIMSñe˘
(
uöt32_t
 
TIM_Sñe˘
);

455 
SYSCFG_RITIMI≈utC≠tuªC⁄fig
(
uöt32_t
 
RI_I≈utC≠tuª
, uöt32_à
RI_I≈utC≠tuªRoutög
);

456 
SYSCFG_RIResi°‹C⁄fig
(
uöt32_t
 
RI_Resi°‹
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

457 
SYSCFG_RICh™√lS≥edC⁄fig
(
uöt32_t
 
RI_Ch™√l
, uöt32_à
RI_Ch™√lS≥ed
);

458 
SYSCFG_RISwôchC⁄åﬁModeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

459 
SYSCFG_RIIOSwôchC⁄fig
(
uöt32_t
 
RI_IOSwôch
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

460 
SYSCFG_RIHy°îesisC⁄fig
(
uöt8_t
 
RI_P‹t
, 
uöt16_t
 
RI_Pö
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

462 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_tim.h

30 #i‚de‡
__STM32L1xx_TIM_H


31 
	#__STM32L1xx_TIM_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

57 
uöt16_t
 
TIM_PªsˇÀr
;

60 
uöt16_t
 
TIM_Cou¡îMode
;

63 
uöt32_t
 
TIM_Pîiod
;

67 
uöt16_t
 
TIM_ClockDivisi⁄
;

70 } 
	tTIM_TimeBa£InôTy≥Def
;

78 
uöt16_t
 
TIM_OCMode
;

81 
uöt16_t
 
TIM_OuçutSèã
;

84 
uöt32_t
 
TIM_Pul£
;

87 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

90 } 
	tTIM_OCInôTy≥Def
;

99 
uöt16_t
 
TIM_Ch™√l
;

102 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

105 
uöt16_t
 
TIM_ICSñe˘i⁄
;

108 
uöt16_t
 
TIM_ICPªsˇÀr
;

111 
uöt16_t
 
TIM_ICFûãr
;

113 } 
	tTIM_ICInôTy≥Def
;

122 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM2
) || \

123 ((
PERIPH
Ë=
TIM3
) || \

124 ((
PERIPH
Ë=
TIM4
) || \

125 ((
PERIPH
Ë=
TIM5
) || \

126 ((
PERIPH
Ë=
TIM6
) || \

127 ((
PERIPH
Ë=
TIM7
) || \

128 ((
PERIPH
Ë=
TIM9
) || \

129 ((
PERIPH
Ë=
TIM10
) || \

130 ((
PERIPH
Ë=
TIM11
))

	)

133 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM2
) || \

134 ((
PERIPH
Ë=
TIM3
) || \

135 ((
PERIPH
Ë=
TIM4
) || \

136 ((
PERIPH
Ë=
TIM5
) || \

137 ((
PERIPH
Ë=
TIM9
) || \

138 ((
PERIPH
Ë=
TIM10
) || \

139 ((
PERIPH
Ë=
TIM11
))

	)

142 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM2
) || \

143 ((
PERIPH
Ë=
TIM3
) || \

144 ((
PERIPH
Ë=
TIM4
) || \

145 ((
PERIPH
Ë=
TIM5
))

	)

148 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM2
) || \

149 ((
PERIPH
Ë=
TIM3
) || \

150 ((
PERIPH
Ë=
TIM4
) || \

151 ((
PERIPH
Ë=
TIM5
) || \

152 ((
PERIPH
Ë=
TIM9
))

	)

155 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM2
) || \

156 ((
PERIPH
Ë=
TIM3
) || \

157 ((
PERIPH
Ë=
TIM4
) || \

158 ((
PERIPH
Ë=
TIM5
) ||\

159 ((
PERIPH
Ë=
TIM6
) || \

160 ((
PERIPH
Ë=
TIM7
) ||\

161 ((
PERIPH
Ë=
TIM9
))

	)

164 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM2
) || \

165 ((
PERIPH
Ë=
TIM3
) || \

166 ((
PERIPH
Ë=
TIM4
) || \

167 ((
PERIPH
Ë=
TIM5
) ||\

168 ((
PERIPH
Ë=
TIM6
) || \

169 ((
PERIPH
Ë=
TIM7
))

	)

172 
	#IS_TIM_LIST6_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM2
) || \

173 ((
PERIPH
Ë=
TIM3
) || \

174 ((
PERIPH
Ë=
TIM9
) || \

175 ((
PERIPH
Ë=
TIM10
) || \

176 ((
PERIPH
Ë=
TIM11
))

	)

184 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

185 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

186 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

187 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

188 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

189 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

190 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

191 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

192 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

193 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

194 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

195 ((
MODE
Ë=
TIM_OCMode_PWM2
))

	)

196 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

197 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

198 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

199 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

200 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

201 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

202 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

203 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

212 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

213 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

214 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
) || \

215 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

	)

224 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

225 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

226 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

227 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

229 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

230 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

231 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

232 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

	)

234 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

235 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

	)

245 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

246 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

247 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

248 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
) || \

249 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

250 ((
DIV
Ë=
TIM_CKD_DIV4
))

	)

259 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

260 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

261 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

262 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

263 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

264 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
) || \

265 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

266 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

267 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

268 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

	)

277 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

278 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

279 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
) || \

280 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

	)

290 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

291 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

292 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
) || \

293 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

	)

303 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

304 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

305 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
) || \

306 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

	)

315 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

316 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

317 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

318 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

319 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

320 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

	)

329 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

331 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

333 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

334 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
) || \

335 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

336 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

	)

345 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

346 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

347 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

348 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

349 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
) || \

350 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

351 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

352 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

	)

361 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

362 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

363 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

364 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

365 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

366 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

367 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFA0Ë=0x0000Ë&& ((ITË!0x0000))

	)

369 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
) || \

370 ((
IT
Ë=
TIM_IT_CC1
) || \

371 ((
IT
Ë=
TIM_IT_CC2
) || \

372 ((
IT
Ë=
TIM_IT_CC3
) || \

373 ((
IT
Ë=
TIM_IT_CC4
) || \

374 ((
IT
Ë=
TIM_IT_Triggî
))

	)

383 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

384 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

385 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

386 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

387 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

388 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

389 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

390 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

391 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

392 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

393 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

394 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

395 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

396 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

397 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

398 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

399 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

400 
	#TIM_DMABa£_OR
 ((
uöt16_t
)0x0013)

	)

401 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
) || \

402 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

403 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

404 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

405 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

406 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

407 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

408 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

409 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

410 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

411 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

412 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

413 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

414 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

415 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

416 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

417 ((
BASE
Ë=
TIM_DMABa£_DCR
) || \

418 ((
BASE
Ë=
TIM_DMABa£_OR
))

	)

427 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

428 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

429 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

430 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

431 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

432 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

433 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

434 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

435 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

436 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

437 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

438 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

439 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

440 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

441 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

442 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

443 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

444 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

445 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
) || \

446 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

447 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

448 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

449 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

450 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

451 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

452 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

453 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

454 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

455 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

456 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

457 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

458 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

459 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

460 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

461 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

462 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

	)

471 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

472 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

473 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

474 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

475 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

476 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

477 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xA0FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

487 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

488 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

489 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

490 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

491 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
) || \

492 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

493 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

494 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

	)

503 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

504 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

505 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

506 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

507 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

508 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

509 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

510 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

511 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

512 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

513 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

514 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

515 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

516 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

517 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

518 ((
SELECTION
Ë=
TIM_TS_ETRF
))

	)

519 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

520 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

521 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

522 ((
SELECTION
Ë=
TIM_TS_ITR3
))

	)

531 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

532 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

533 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

542 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

543 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

544 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
) || \

545 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

	)

554 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

555 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

556 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
) || \

557 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

	)

566 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

567 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

568 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

569 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

578 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

579 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

580 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

581 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
) || \

582 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

583 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

	)

593 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

594 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

595 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

596 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

597 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

598 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

599 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFFA0Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

609 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

612 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

613 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
) || \

614 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

	)

623 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

624 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

625 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
) || \

626 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

	)

635 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

636 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

637 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
) || \

638 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

	)

648 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

649 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

650 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
) || \

651 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

	)

660 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

661 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

662 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

663 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

664 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

665 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

666 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

667 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

668 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
) || \

669 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

670 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

671 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

672 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

673 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

674 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

675 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

	)

684 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

685 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

686 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

687 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

688 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
) || \

689 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

690 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

691 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

	)

700 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

701 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

702 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
) || \

703 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

	)

712 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

713 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

714 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

715 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

716 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

717 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

718 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

719 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

720 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

721 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

722 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
) || \

723 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

724 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

725 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

726 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

727 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

728 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

729 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

730 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

731 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

	)

732 
	#IS_TIM_CLEAR_FLAG
(
TIM_FLAG
Ë((((TIM_FLAGË& (
uöt16_t
)0xE1A0Ë=0x0000Ë&& ((TIM_FLAGË!0x0000))

	)

742 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

751 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

759 
	#TIM_OCRe„ªn˚CÀ¨_ETRF
 ((
uöt16_t
)0x0008)

	)

760 
	#TIM_OCRe„ªn˚CÀ¨_OCREFCLR
 ((
uöt16_t
)0x0000)

	)

761 
	#TIM_OCREFERENCECECLEAR_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_OCRe„ªn˚CÀ¨_ETRF
) || \

762 ((
SOURCE
Ë=
TIM_OCRe„ªn˚CÀ¨_OCREFCLR
))

	)

772 
	#TIM2_TIM10_OC
 ((
uöt32_t
)0xFFFE0000)

	)

773 
	#TIM2_TIM5_TRGO
 ((
uöt32_t
)0xFFFE0001)

	)

775 
	#TIM3_TIM11_OC
 ((
uöt32_t
)0xFFFE0000)

	)

776 
	#TIM3_TIM5_TRGO
 ((
uöt32_t
)0xFFFE0001)

	)

778 
	#TIM9_GPIO
 ((
uöt32_t
)0xFFFC0000)

	)

779 
	#TIM9_LSE
 ((
uöt32_t
)0xFFFC0001)

	)

781 
	#TIM9_TIM3_TRGO
 ((
uöt32_t
)0xFFFB0000)

	)

782 
	#TIM9_TS_IO
 ((
uöt32_t
)0xFFFB0004)

	)

784 
	#TIM10_GPIO
 ((
uöt32_t
)0xFFF40000)

	)

785 
	#TIM10_LSI
 ((
uöt32_t
)0xFFF40001)

	)

786 
	#TIM10_LSE
 ((
uöt32_t
)0xFFF40002)

	)

787 
	#TIM10_RTC
 ((
uöt32_t
)0xFFF40003)

	)

788 
	#TIM10_RI
 ((
uöt32_t
)0xFFF40008)

	)

790 
	#TIM10_ETR_LSE
 ((
uöt32_t
)0xFFFB0000)

	)

791 
	#TIM10_ETR_TIM9_TRGO
 ((
uöt32_t
)0xFFFB0004)

	)

793 
	#TIM11_GPIO
 ((
uöt32_t
)0xFFF40000)

	)

794 
	#TIM11_MSI
 ((
uöt32_t
)0xFFF40001)

	)

795 
	#TIM11_HSE_RTC
 ((
uöt32_t
)0xFFF40002)

	)

796 
	#TIM11_RI
 ((
uöt32_t
)0xFFF40008)

	)

798 
	#TIM11_ETR_LSE
 ((
uöt32_t
)0xFFFB0000)

	)

799 
	#TIM11_ETR_TIM9_TRGO
 ((
uöt32_t
)0xFFFB0004)

	)

801 
	#IS_TIM_REMAP
(
TIM_REMAP
Ë(((TIM_REMAPË=
TIM2_TIM10_OC
)|| \

802 ((
TIM_REMAP
Ë=
TIM2_TIM5_TRGO
)|| \

803 ((
TIM_REMAP
Ë=
TIM3_TIM11_OC
)|| \

804 ((
TIM_REMAP
Ë=
TIM3_TIM5_TRGO
)|| \

805 ((
TIM_REMAP
Ë=
TIM9_GPIO
)|| \

806 ((
TIM_REMAP
Ë=
TIM9_LSE
)|| \

807 ((
TIM_REMAP
Ë=
TIM9_TIM3_TRGO
)|| \

808 ((
TIM_REMAP
Ë=
TIM9_TS_IO
)|| \

809 ((
TIM_REMAP
Ë=
TIM10_GPIO
)|| \

810 ((
TIM_REMAP
Ë=
TIM10_LSI
)|| \

811 ((
TIM_REMAP
Ë=
TIM10_LSE
)|| \

812 ((
TIM_REMAP
Ë=
TIM10_RTC
)|| \

813 ((
TIM_REMAP
Ë=
TIM10_RI
)|| \

814 ((
TIM_REMAP
Ë=
TIM10_ETR_LSE
)|| \

815 ((
TIM_REMAP
Ë=
TIM10_ETR_TIM9_TRGO
)|| \

816 ((
TIM_REMAP
Ë=
TIM11_GPIO
)|| \

817 ((
TIM_REMAP
Ë=
TIM11_MSI
)|| \

818 ((
TIM_REMAP
Ë=
TIM11_HSE_RTC
)|| \

819 ((
TIM_REMAP
Ë=
TIM11_RI
)|| \

820 ((
TIM_REMAP
Ë=
TIM11_ETR_LSE
)|| \

821 ((
TIM_REMAP
Ë=
TIM11_ETR_TIM9_TRGO
))

	)

831 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

832 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

833 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

834 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

835 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

836 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

837 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

838 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

839 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

840 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

841 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

842 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

843 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

844 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

845 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

846 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

847 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

848 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

861 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

862 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

863 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

864 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

865 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

866 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
);

867 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
);

868 
uöt32_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

869 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

870 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

871 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

872 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

873 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

874 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

875 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

878 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

879 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

880 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

881 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

882 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

883 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

884 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
);

885 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
);

886 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
);

887 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
);

888 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

889 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

890 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

891 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

892 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

893 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

894 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

895 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

896 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

897 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

898 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

899 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

900 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

901 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

902 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

903 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

904 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

905 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

906 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

907 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

908 
TIM_Sñe˘OCREFCÀ¨
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCRe„ªn˚CÀ¨
);

909 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

912 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

913 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

914 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

915 
uöt32_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

916 
uöt32_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

917 
uöt32_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

918 
uöt32_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

919 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

920 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

921 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

922 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

925 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

926 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

927 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

928 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

929 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

930 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

931 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

932 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

933 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

936 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

937 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

938 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

939 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

940 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

941 
uöt16_t
 
ExtTRGFûãr
);

942 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

943 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

947 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

948 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

949 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

950 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

951 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

952 
uöt16_t
 
ExtTRGFûãr
);

955 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

956 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

957 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

960 
TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_Rem≠
);

963 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_usart.h

30 #i‚de‡
__STM32L1xx_USART_H


31 
	#__STM32L1xx_USART_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

56 
uöt32_t
 
USART_BaudR©e
;

62 
uöt16_t
 
USART_W‹dLígth
;

65 
uöt16_t
 
USART_St›Bôs
;

68 
uöt16_t
 
USART_P¨ôy
;

75 
uöt16_t
 
USART_Mode
;

78 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

81 } 
	tUSART_InôTy≥Def
;

90 
uöt16_t
 
USART_Clock
;

93 
uöt16_t
 
USART_CPOL
;

96 
uöt16_t
 
USART_CPHA
;

99 
uöt16_t
 
USART_La°Bô
;

102 } 
	tUSART_ClockInôTy≥Def
;

110 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

111 ((
PERIPH
Ë=
USART2
) || \

112 ((
PERIPH
Ë=
USART3
) || \

113 ((
PERIPH
Ë=
UART4
) || \

114 ((
PERIPH
Ë=
UART5
))

	)

116 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

117 ((
PERIPH
Ë=
USART2
) || \

118 ((
PERIPH
Ë=
USART3
))

	)

124 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

125 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

127 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
) || \

128 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

	)

137 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

138 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

139 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

140 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

141 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
) || \

142 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

143 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

144 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

	)

153 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

154 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

155 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

156 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
) || \

157 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

158 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

	)

167 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

168 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

169 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

177 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

178 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

179 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

180 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

181 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

182 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

183 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

184 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

185 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

	)

193 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

194 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

195 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
) || \

196 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

	)

205 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

206 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

207 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

217 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

218 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

219 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

229 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

230 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

231 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
) || \

232 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

	)

241 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

242 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

243 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

244 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

245 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

246 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

247 
	#USART_IT_ORE_RX
 ((
uöt16_t
)0x0325Ë

	)

248 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

249 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

250 
	#USART_IT_ORE_ER
 ((
uöt16_t
)0x0360Ë

	)

251 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

252 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

257 
	#USART_IT_ORE
 
USART_IT_ORE_ER


	)

262 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

263 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

264 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

265 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

	)

266 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

267 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

268 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

269 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE_RX
) || \

270 ((
IT
Ë=
USART_IT_ORE_ER
Ë|| ((ITË=
USART_IT_NE
) || \

271 ((
IT
Ë=
USART_IT_FE
))

	)

272 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

273 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

	)

282 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

283 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

284 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

294 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

295 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

296 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
) || \

297 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

	)

306 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

307 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

308 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
) \

309 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

310 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

	)

319 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

320 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

321 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
) || \

322 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

	)

331 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

332 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

333 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

334 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

335 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

336 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

337 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

338 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

339 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

340 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

341 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
) || \

342 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

343 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

344 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

345 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

	)

347 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

349 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x003D0901))

	)

350 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

351 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

365 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

368 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

369 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

370 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

371 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

372 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

373 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

374 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

375 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

378 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

379 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

382 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

383 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

384 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

387 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

388 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

389 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

392 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

395 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

396 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

397 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

400 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

401 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

404 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

407 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

408 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

409 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

410 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

411 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

413 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_wwdg.h

30 #i‚de‡
__STM32L1xx_WWDG_H


31 
	#__STM32L1xx_WWDG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32l1xx.h
"

59 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

60 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

61 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

62 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

63 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

65 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

66 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

	)

67 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

68 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

81 
WWDG_DeInô
();

84 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

85 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

86 
WWDG_E«bÀIT
();

87 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

90 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

93 
FœgSètus
 
WWDG_GëFœgSètus
();

94 
WWDG_CÀ¨Fœg
();

96 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\misc.c

30 
	~"misc.h
"

43 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

119 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

122 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

125 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

126 
	}
}

137 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

139 
uöt8_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

142 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

143 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

144 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

146 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

149 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

150 
tmµª
 = (0x4 - 
tmµri‹ôy
);

151 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

153 
tmµri‹ôy
 = (
uöt32_t
)
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

154 
tmµri‹ôy
 |(
uöt8_t
)(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
);

155 
tmµri‹ôy
 =Åmppriority << 0x04;

157 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

160 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

161 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

166 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

167 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

169 
	}
}

180 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

183 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

184 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

186 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

187 
	}
}

200 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

203 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

204 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

206 i‡(
NewSèã
 !
DISABLE
)

208 
SCB
->
SCR
 |
LowPowîMode
;

212 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

214 
	}
}

224 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

227 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

229 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

231 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

235 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

237 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_adc.c

86 
	~"°m32l1xx_adc.h
"

87 
	~"°m32l1xx_rcc.h
"

101 
	#CR1_DISCNUM_RESET
 ((
uöt32_t
)0xFFFF1FFF)

	)

104 
	#CR1_AWDCH_RESET
 ((
uöt32_t
)0xFFFFFFE0)

	)

107 
	#CR1_AWDMODE_RESET
 ((
uöt32_t
)0xFF3FFDFF)

	)

110 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)0xFCFFFEFF)

	)

113 
	#CR2_DELS_RESET
 ((
uöt32_t
)0xFFFFFF0F)

	)

116 
	#CR2_JEXTEN_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

119 
	#CR2_JEXTSEL_RESET
 ((
uöt32_t
)0xFFF0FFFF)

	)

122 
	#CR2_CLEAR_MASK
 ((
uöt32_t
)0xC0FFF7FD)

	)

125 
	#SQR5_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

126 
	#SQR4_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

127 
	#SQR3_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

128 
	#SQR2_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

129 
	#SQR1_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

132 
	#SQR1_L_RESET
 ((
uöt32_t
)0xFE0FFFFF)

	)

135 
	#JSQR_JSQ_SET
 ((
uöt32_t
)0x0000001F)

	)

138 
	#JSQR_JL_SET
 ((
uöt32_t
)0x00300000)

	)

139 
	#JSQR_JL_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

142 
	#SMPR1_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

143 
	#SMPR2_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

144 
	#SMPR3_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

145 
	#SMPR0_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

148 
	#JDR_OFFSET
 ((
uöt8_t
)0x30)

	)

151 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0xFFFCFFFF)

	)

190 
	$ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
)

193 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

195 if(
ADCx
 =
ADC1
)

198 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
ENABLE
);

200 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC1
, 
DISABLE
);

202 
	}
}

217 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

219 
uöt32_t
 
tm¥eg1
 = 0;

220 
uöt8_t
 
tm¥eg2
 = 0;

223 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

224 
	`as£π_∑øm
(
	`IS_ADC_RESOLUTION
(
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
));

225 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

226 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

227 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG_EDGE
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
));

228 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

229 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

230 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
));

234 
tm¥eg1
 = 
ADCx
->
CR1
;

236 
tm¥eg1
 &
CR1_CLEAR_MASK
;

240 
tm¥eg1
 |(
uöt32_t
)(((uöt32_t)
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 << 8Ë| ADC_InôSåu˘->
ADC_Resﬁuti⁄
);

242 
ADCx
->
CR1
 = 
tm¥eg1
;

246 
tm¥eg1
 = 
ADCx
->
CR2
;

248 
tm¥eg1
 &
CR2_CLEAR_MASK
;

254 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | ADC_InôSåu˘->
ADC_Exã∫ÆTrigC⁄v
 |

255 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 | ((
uöt32_t
)ADC_InôSåu˘->
ADC_C⁄töuousC⁄vMode
 << 1));

257 
ADCx
->
CR2
 = 
tm¥eg1
;

261 
tm¥eg1
 = 
ADCx
->
SQR1
;

263 
tm¥eg1
 &
SQR1_L_RESET
;

266 
tm¥eg2
 |(
uöt8_t
)(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 - (uint8_t)1);

267 
tm¥eg1
 |((
uöt32_t
)
tm¥eg2
 << 20);

269 
ADCx
->
SQR1
 = 
tm¥eg1
;

270 
	}
}

283 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

287 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
 = 
ADC_Resﬁuti⁄_12b
;

290 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

293 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

296 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 = 
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
;

299 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T2_CC2
;

302 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

305 
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 = 1;

306 
	}
}

315 
	$ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

317 
uöt32_t
 
tm¥eg
 = 0;

320 
	`as£π_∑øm
(
	`IS_ADC_PRESCALER
(
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
));

324 
tm¥eg
 = 
ADC
->
CCR
;

327 
tm¥eg
 &
CR_CLEAR_MASK
;

330 
tm¥eg
 |(
uöt32_t
)(
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
);

333 
ADC
->
CCR
 = 
tm¥eg
;

334 
	}
}

342 
	$ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

346 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 = 
ADC_PªsˇÀr_Div1
;

347 
	}
}

356 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

359 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

360 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

362 i‡(
NewSèã
 !
DISABLE
)

365 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_ADON
;

370 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_ADON
);

372 
	}
}

382 
	$ADC_B™kSñe˘i⁄
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_B™k
)

385 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

386 
	`as£π_∑øm
(
	`IS_ADC_BANK
(
ADC_B™k
));

388 i‡(
ADC_B™k
 !
ADC_B™k_A
)

391 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_CFG
;

396 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_CFG
);

398 
	}
}

448 
	$ADC_PowîDownCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_PowîDown
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

451 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

452 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

453 
	`as£π_∑øm
(
	`IS_ADC_POWER_DOWN
(
ADC_PowîDown
));

455 i‡(
NewSèã
 !
DISABLE
)

458 
ADCx
->
CR1
 |
ADC_PowîDown
;

463 
ADCx
->
CR1
 &(
uöt32_t
)~
ADC_PowîDown
;

465 
	}
}

499 
	$ADC_DñaySñe˘i⁄C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_DñayLígth
)

501 
uöt32_t
 
tm¥eg
 = 0;

504 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

505 
	`as£π_∑øm
(
	`IS_ADC_DELAY_LENGTH
(
ADC_DñayLígth
));

508 
tm¥eg
 = 
ADCx
->
CR2
;

510 
tm¥eg
 &
CR2_DELS_RESET
;

512 
tm¥eg
 |
ADC_DñayLígth
;

514 
ADCx
->
CR2
 = 
tm¥eg
;

516 
	}
}

564 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

566 
uöt32_t
 
tm¥eg
 = 0;

569 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

570 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

573 
tm¥eg
 = 
ADCx
->
CR1
;

575 
tm¥eg
 &
CR1_AWDMODE_RESET
;

577 
tm¥eg
 |
ADC_A«logW©chdog
;

579 
ADCx
->
CR1
 = 
tm¥eg
;

580 
	}
}

591 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

592 
uöt16_t
 
LowThªshﬁd
)

595 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

596 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

597 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

600 
ADCx
->
HTR
 = 
HighThªshﬁd
;

602 
ADCx
->
LTR
 = 
LowThªshﬁd
;

603 
	}
}

654 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

656 
uöt32_t
 
tm¥eg
 = 0;

659 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

660 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

663 
tm¥eg
 = 
ADCx
->
CR1
;

665 
tm¥eg
 &
CR1_AWDCH_RESET
;

667 
tm¥eg
 |
ADC_Ch™√l
;

669 
ADCx
->
CR1
 = 
tm¥eg
;

670 
	}
}

704 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

707 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

709 i‡(
NewSèã
 !
DISABLE
)

712 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_TSVREFE
;

717 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_TSVREFE
);

719 
	}
}

822 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

824 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

827 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

828 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

829 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

830 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

833 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_29
)

836 
tm¥eg1
 = 
ADCx
->
SMPR0
;

838 
tm¥eg2
 = 
SMPR0_SMP_SET
 << (3 * (
ADC_Ch™√l
 - 30));

840 
tm¥eg1
 &~
tm¥eg2
;

842 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 30));

844 
tm¥eg1
 |
tm¥eg2
;

846 
ADCx
->
SMPR0
 = 
tm¥eg1
;

849 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_19
)

852 
tm¥eg1
 = 
ADCx
->
SMPR1
;

854 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3 * (
ADC_Ch™√l
 - 20));

856 
tm¥eg1
 &~
tm¥eg2
;

858 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 20));

860 
tm¥eg1
 |
tm¥eg2
;

862 
ADCx
->
SMPR1
 = 
tm¥eg1
;

865 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

868 
tm¥eg1
 = 
ADCx
->
SMPR2
;

870 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * (
ADC_Ch™√l
 - 10));

872 
tm¥eg1
 &~
tm¥eg2
;

874 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

876 
tm¥eg1
 |
tm¥eg2
;

878 
ADCx
->
SMPR2
 = 
tm¥eg1
;

883 
tm¥eg1
 = 
ADCx
->
SMPR3
;

885 
tm¥eg2
 = 
SMPR3_SMP_SET
 << (3 * 
ADC_Ch™√l
);

887 
tm¥eg1
 &~
tm¥eg2
;

889 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

891 
tm¥eg1
 |
tm¥eg2
;

893 
ADCx
->
SMPR3
 = 
tm¥eg1
;

896 i‡(
R™k
 < 7)

899 
tm¥eg1
 = 
ADCx
->
SQR5
;

901 
tm¥eg2
 = 
SQR5_SQ_SET
 << (5 * (
R™k
 - 1));

903 
tm¥eg1
 &~
tm¥eg2
;

905 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

907 
tm¥eg1
 |
tm¥eg2
;

909 
ADCx
->
SQR5
 = 
tm¥eg1
;

912 i‡(
R™k
 < 13)

915 
tm¥eg1
 = 
ADCx
->
SQR4
;

917 
tm¥eg2
 = 
SQR4_SQ_SET
 << (5 * (
R™k
 - 7));

919 
tm¥eg1
 &~
tm¥eg2
;

921 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

923 
tm¥eg1
 |
tm¥eg2
;

925 
ADCx
->
SQR4
 = 
tm¥eg1
;

928 i‡(
R™k
 < 19)

931 
tm¥eg1
 = 
ADCx
->
SQR3
;

933 
tm¥eg2
 = 
SQR3_SQ_SET
 << (5 * (
R™k
 - 13));

935 
tm¥eg1
 &~
tm¥eg2
;

937 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

939 
tm¥eg1
 |
tm¥eg2
;

941 
ADCx
->
SQR3
 = 
tm¥eg1
;

945 i‡(
R™k
 < 25)

948 
tm¥eg1
 = 
ADCx
->
SQR2
;

950 
tm¥eg2
 = 
SQR2_SQ_SET
 << (5 * (
R™k
 - 19));

952 
tm¥eg1
 &~
tm¥eg2
;

954 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 19));

956 
tm¥eg1
 |
tm¥eg2
;

958 
ADCx
->
SQR2
 = 
tm¥eg1
;

965 
tm¥eg1
 = 
ADCx
->
SQR1
;

967 
tm¥eg2
 = 
SQR1_SQ_SET
 << (5 * (
R™k
 - 25));

969 
tm¥eg1
 &~
tm¥eg2
;

971 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 25));

973 
tm¥eg1
 |
tm¥eg2
;

975 
ADCx
->
SQR1
 = 
tm¥eg1
;

977 
	}
}

984 
	$ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

987 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

990 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_SWSTART
;

991 
	}
}

998 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

1000 
FœgSètus
 
bô°©us
 = 
RESET
;

1003 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1006 i‡((
ADCx
->
CR2
 & 
ADC_CR2_SWSTART
Ë!(
uöt32_t
)
RESET
)

1009 
bô°©us
 = 
SET
;

1014 
bô°©us
 = 
RESET
;

1017  
bô°©us
;

1018 
	}
}

1027 
	$ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1030 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1031 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1033 i‡(
NewSèã
 !
DISABLE
)

1036 
ADCx
->
CR2
 |
ADC_CR2_EOCS
;

1041 
ADCx
->
CR2
 &(
uöt32_t
)~
ADC_CR2_EOCS
;

1043 
	}
}

1052 
	$ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1055 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1056 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1058 i‡(
NewSèã
 !
DISABLE
)

1061 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_CONT
;

1066 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_CONT
);

1068 
	}
}

1078 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

1080 
uöt32_t
 
tm¥eg1
 = 0;

1081 
uöt32_t
 
tm¥eg2
 = 0;

1084 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1085 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

1088 
tm¥eg1
 = 
ADCx
->
CR1
;

1090 
tm¥eg1
 &
CR1_DISCNUM_RESET
;

1092 
tm¥eg2
 = 
Numbî
 - 1;

1093 
tm¥eg1
 |
tm¥eg2
 << 13;

1095 
ADCx
->
CR1
 = 
tm¥eg1
;

1096 
	}
}

1107 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1110 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1111 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1113 i‡(
NewSèã
 !
DISABLE
)

1116 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_DISCEN
;

1121 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_DISCEN
);

1123 
	}
}

1130 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

1133 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1136  (
uöt16_t
Ë
ADCx
->
DR
;

1137 
	}
}

1174 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1177 
	`as£π_∑øm
(
	`IS_ADC_DMA_PERIPH
(
ADCx
));

1178 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1180 i‡(
NewSèã
 !
DISABLE
)

1183 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DMA
;

1188 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DMA
);

1190 
	}
}

1200 
	$ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1203 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1204 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1206 i‡(
NewSèã
 !
DISABLE
)

1209 
ADCx
->
CR2
 |
ADC_CR2_DDS
;

1214 
ADCx
->
CR2
 &(
uöt32_t
)~
ADC_CR2_DDS
;

1216 
	}
}

1312 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

1314 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

1317 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1318 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1319 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

1320 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

1323 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_29
)

1326 
tm¥eg1
 = 
ADCx
->
SMPR0
;

1328 
tm¥eg2
 = 
SMPR0_SMP_SET
 << (3 * (
ADC_Ch™√l
 - 30));

1330 
tm¥eg1
 &~
tm¥eg2
;

1332 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 30));

1334 
tm¥eg1
 |
tm¥eg2
;

1336 
ADCx
->
SMPR0
 = 
tm¥eg1
;

1339 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_19
)

1342 
tm¥eg1
 = 
ADCx
->
SMPR1
;

1344 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3 * (
ADC_Ch™√l
 - 20));

1346 
tm¥eg1
 &~
tm¥eg2
;

1348 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 20));

1350 
tm¥eg1
 |
tm¥eg2
;

1352 
ADCx
->
SMPR1
 = 
tm¥eg1
;

1355 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

1358 
tm¥eg1
 = 
ADCx
->
SMPR2
;

1360 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * (
ADC_Ch™√l
 - 10));

1362 
tm¥eg1
 &~
tm¥eg2
;

1364 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

1366 
tm¥eg1
 |
tm¥eg2
;

1368 
ADCx
->
SMPR2
 = 
tm¥eg1
;

1373 
tm¥eg1
 = 
ADCx
->
SMPR3
;

1375 
tm¥eg2
 = 
SMPR3_SMP_SET
 << (3 * 
ADC_Ch™√l
);

1377 
tm¥eg1
 &~
tm¥eg2
;

1379 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

1381 
tm¥eg1
 |
tm¥eg2
;

1383 
ADCx
->
SMPR3
 = 
tm¥eg1
;

1388 
tm¥eg1
 = 
ADCx
->
JSQR
;

1390 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_SET
)>> 20;

1392 
tm¥eg2
 = (
uöt32_t
)(
JSQR_JSQ_SET
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1))));

1394 
tm¥eg1
 &~
tm¥eg2
;

1396 
tm¥eg2
 = (
uöt32_t
)(((uöt32_t)(
ADC_Ch™√l
)Ë<< (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1))));

1398 
tm¥eg1
 |
tm¥eg2
;

1400 
ADCx
->
JSQR
 = 
tm¥eg1
;

1401 
	}
}

1410 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

1412 
uöt32_t
 
tm¥eg1
 = 0;

1413 
uöt32_t
 
tm¥eg2
 = 0;

1416 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1417 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1420 
tm¥eg1
 = 
ADCx
->
JSQR
;

1422 
tm¥eg1
 &
JSQR_JL_RESET
;

1424 
tm¥eg2
 = 
Lígth
 - 1;

1425 
tm¥eg1
 |
tm¥eg2
 << 20;

1427 
ADCx
->
JSQR
 = 
tm¥eg1
;

1428 
	}
}

1443 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1445 
__IO
 
uöt32_t
 
tmp
 = 0;

1448 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1449 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1450 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1452 
tmp
 = (
uöt32_t
)
ADCx
;

1453 
tmp
 +
ADC_Inje˘edCh™√l
;

1456 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1457 
	}
}

1478 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

1480 
uöt32_t
 
tm¥eg
 = 0;

1483 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1484 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

1487 
tm¥eg
 = 
ADCx
->
CR2
;

1489 
tm¥eg
 &
CR2_JEXTSEL_RESET
;

1491 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

1493 
ADCx
->
CR2
 = 
tm¥eg
;

1494 
	}
}

1510 
	$ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
)

1512 
uöt32_t
 
tm¥eg
 = 0;

1515 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1516 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG_EDGE
(
ADC_Exã∫ÆTrigInjecC⁄vEdge
));

1519 
tm¥eg
 = 
ADCx
->
CR2
;

1521 
tm¥eg
 &
CR2_JEXTEN_RESET
;

1523 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄vEdge
;

1525 
ADCx
->
CR2
 = 
tm¥eg
;

1526 
	}
}

1534 
	$ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

1537 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1539 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_JSWSTART
;

1540 
	}
}

1547 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

1549 
FœgSètus
 
bô°©us
 = 
RESET
;

1552 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1555 i‡((
ADCx
->
CR2
 & 
ADC_CR2_JSWSTART
Ë!(
uöt32_t
)
RESET
)

1558 
bô°©us
 = 
SET
;

1563 
bô°©us
 = 
RESET
;

1566  
bô°©us
;

1567 
	}
}

1578 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1581 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1582 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1584 i‡(
NewSèã
 !
DISABLE
)

1587 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JAUTO
;

1592 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JAUTO
);

1594 
	}
}

1604 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1607 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1608 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1610 i‡(
NewSèã
 !
DISABLE
)

1613 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JDISCEN
;

1618 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JDISCEN
);

1620 
	}
}

1633 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1635 
__IO
 
uöt32_t
 
tmp
 = 0;

1638 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1639 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1641 
tmp
 = (
uöt32_t
)
ADCx
;

1642 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_OFFSET
;

1645  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1646 
	}
}

1739 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1741 
uöt32_t
 
ômask
 = 0;

1744 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1745 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1746 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1749 
ômask
 = (
uöt8_t
)
ADC_IT
;

1750 
ômask
 = (
uöt32_t
)0x01 << itmask;

1752 i‡(
NewSèã
 !
DISABLE
)

1755 
ADCx
->
CR1
 |
ômask
;

1760 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

1762 
	}
}

1780 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_FLAG
)

1782 
FœgSètus
 
bô°©us
 = 
RESET
;

1785 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1786 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1789 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1792 
bô°©us
 = 
SET
;

1797 
bô°©us
 = 
RESET
;

1800  
bô°©us
;

1801 
	}
}

1816 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_FLAG
)

1819 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1820 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1823 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1824 
	}
}

1837 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1839 
ITSètus
 
bô°©us
 = 
RESET
;

1840 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1843 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1844 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1847 
ômask
 = (
uöt32_t
)((uöt32_t)
ADC_IT
 >> 8);

1850 
íabÀ°©us
 = (
ADCx
->
CR1
 & ((
uöt32_t
)0x01 << (
uöt8_t
)
ADC_IT
));

1853 i‡(((
uöt32_t
)(
ADCx
->
SR
 & (uöt32_t)
ômask
Ë!(uöt32_t)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

1856 
bô°©us
 = 
SET
;

1861 
bô°©us
 = 
RESET
;

1864  
bô°©us
;

1865 
	}
}

1878 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1880 
uöt8_t
 
ômask
 = 0;

1883 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1884 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1887 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1890 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1891 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_aes.c

73 
	~"°m32l1xx_´s.h
"

74 
	~"°m32l1xx_rcc.h
"

87 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF81)

	)

115 
	$AES_DeInô
()

118 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_AES
, 
ENABLE
);

120 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_AES
, 
DISABLE
);

121 
	}
}

135 
	$AES_Inô
(
AES_InôTy≥Def
* 
AES_InôSåu˘
)

137 
uöt32_t
 
tm¥eg
 = 0;

140 
	`as£π_∑øm
(
	`IS_AES_MODE
(
AES_InôSåu˘
->
AES_O≥øti⁄
));

141 
	`as£π_∑øm
(
	`IS_AES_CHAINING
(
AES_InôSåu˘
->
AES_Chaöög
));

142 
	`as£π_∑øm
(
	`IS_AES_DATATYPE
(
AES_InôSåu˘
->
AES_D©aTy≥
));

145 
tm¥eg
 = 
AES
->
CR
;

148 
tm¥eg
 &(
uöt32_t
)
CR_CLEAR_MASK
;

150 
tm¥eg
 |(
AES_InôSåu˘
->
AES_O≥øti⁄
 | AES_InôSåu˘->
AES_Chaöög
 | AES_InôSåu˘->
AES_D©aTy≥
);

152 
AES
->
CR
 = (
uöt32_t
Ë
tm¥eg
;

153 
	}
}

165 
	$AES_KeyInô
(
AES_KeyInôTy≥Def
* 
AES_KeyInôSåu˘
)

167 
AES
->
KEYR0
 = 
AES_KeyInôSåu˘
->
AES_Key0
;

168 
AES
->
KEYR1
 = 
AES_KeyInôSåu˘
->
AES_Key1
;

169 
AES
->
KEYR2
 = 
AES_KeyInôSåu˘
->
AES_Key2
;

170 
AES
->
KEYR3
 = 
AES_KeyInôSåu˘
->
AES_Key3
;

171 
	}
}

184 
	$AES_IVInô
(
AES_IVInôTy≥Def
* 
AES_IVInôSåu˘
)

186 
AES
->
IVR0
 = 
AES_IVInôSåu˘
->
AES_IV0
;

187 
AES
->
IVR1
 = 
AES_IVInôSåu˘
->
AES_IV1
;

188 
AES
->
IVR2
 = 
AES_IVInôSåu˘
->
AES_IV2
;

189 
AES
->
IVR3
 = 
AES_IVInôSåu˘
->
AES_IV3
;

190 
	}
}

199 
	$AES_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

202 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

204 i‡(
NewSèã
 !
DISABLE
)

207 
AES
->
CR
 |(
uöt32_t
Ë
AES_CR_EN
;

212 
AES
->
CR
 &(
uöt32_t
)(~
AES_CR_EN
);

214 
	}
}

238 
	$AES_Såu˘Inô
(
AES_InôTy≥Def
* 
AES_InôSåu˘
)

240 
AES_InôSåu˘
->
AES_O≥øti⁄
 = 
AES_O≥øti⁄_En¸yp
;

241 
AES_InôSåu˘
->
AES_Chaöög
 = 
AES_Chaöög_ECB
;

242 
AES_InôSåu˘
->
AES_D©aTy≥
 = 
AES_D©aTy≥_32b
;

243 
	}
}

251 
	$AES_KeySåu˘Inô
(
AES_KeyInôTy≥Def
* 
AES_KeyInôSåu˘
)

253 
AES_KeyInôSåu˘
->
AES_Key0
 = 0x00000000;

254 
AES_KeyInôSåu˘
->
AES_Key1
 = 0x00000000;

255 
AES_KeyInôSåu˘
->
AES_Key2
 = 0x00000000;

256 
AES_KeyInôSåu˘
->
AES_Key3
 = 0x00000000;

257 
	}
}

265 
	$AES_IVSåu˘Inô
(
AES_IVInôTy≥Def
* 
AES_IVInôSåu˘
)

267 
AES_IVInôSåu˘
->
AES_IV0
 = 0x00000000;

268 
AES_IVInôSåu˘
->
AES_IV1
 = 0x00000000;

269 
AES_IVInôSåu˘
->
AES_IV2
 = 0x00000000;

270 
AES_IVInôSåu˘
->
AES_IV3
 = 0x00000000;

271 
	}
}

298 
	$AES_WrôeSubD©a
(
uöt32_t
 
D©a
)

301 
AES
->
DINR
 = 
D©a
;

302 
	}
}

311 
uöt32_t
 
	$AES_RódSubD©a
()

314  
AES
->
DOUTR
;

315 
	}
}

327 
	$AES_RódKey
(
AES_KeyInôTy≥Def
* 
AES_KeyInôSåu˘
)

329 
AES_KeyInôSåu˘
->
AES_Key0
 = 
AES
->
KEYR0
;

330 
AES_KeyInôSåu˘
->
AES_Key1
 = 
AES
->
KEYR1
;

331 
AES_KeyInôSåu˘
->
AES_Key2
 = 
AES
->
KEYR2
;

332 
AES_KeyInôSåu˘
->
AES_Key3
 = 
AES
->
KEYR3
;

333 
	}
}

348 
	$AES_RódIV
(
AES_IVInôTy≥Def
* 
AES_IVInôSåu˘
)

350 
AES_IVInôSåu˘
->
AES_IV0
 = 
AES
->
IVR0
;

351 
AES_IVInôSåu˘
->
AES_IV1
 = 
AES
->
IVR1
;

352 
AES_IVInôSåu˘
->
AES_IV2
 = 
AES
->
IVR2
;

353 
AES_IVInôSåu˘
->
AES_IV3
 = 
AES
->
IVR3
;

354 
	}
}

384 
	$AES_DMAC⁄fig
(
uöt32_t
 
AES_DMATøns„r
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

387 
	`as£π_∑øm
(
	`IS_AES_DMA_TRANSFER
(
AES_DMATøns„r
));

389 i‡(
NewSèã
 !
DISABLE
)

392 
AES
->
CR
 |(
uöt32_t
Ë
AES_DMATøns„r
;

397 
AES
->
CR
 &(
uöt32_t
)(~
AES_DMATøns„r
);

399 
	}
}

430 
	$AES_ITC⁄fig
(
uöt32_t
 
AES_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

433 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

434 
	`as£π_∑øm
(
	`IS_AES_IT
(
AES_IT
));

436 i‡(
NewSèã
 !
DISABLE
)

438 
AES
->
CR
 |(
uöt32_t
Ë
AES_IT
;

442 
AES
->
CR
 &(
uöt32_t
)(~
AES_IT
);

444 
	}
}

458 
FœgSètus
 
	$AES_GëFœgSètus
(
uöt32_t
 
AES_FLAG
)

460 
FœgSètus
 
bô°©us
 = 
RESET
;

463 
	`as£π_∑øm
(
	`IS_AES_FLAG
(
AES_FLAG
));

465 i‡((
AES
->
SR
 & 
AES_FLAG
Ë!(
uöt32_t
)
RESET
)

467 
bô°©us
 = 
SET
;

471 
bô°©us
 = 
RESET
;

475  
bô°©us
;

476 
	}
}

490 
	$AES_CÀ¨Fœg
(
uöt32_t
 
AES_FLAG
)

493 
	`as£π_∑øm
(
	`IS_AES_FLAG
(
AES_FLAG
));

496 i‡(
AES_FLAG
 =
AES_FLAG_CCF
)

499 
AES
->
CR
 |(
uöt32_t
Ë
AES_CR_CCFC
;

504 
AES
->
CR
 |(
uöt32_t
Ë
AES_CR_ERRC
;

506 
	}
}

516 
ITSètus
 
	$AES_GëITSètus
(
uöt32_t
 
AES_IT
)

518 
ITSètus
 
ô°©us
 = 
RESET
;

519 
uöt32_t
 
ccõbô°©us
 = 
RESET
, 
ccfbô°©us
 = RESET;

522 
	`as£π_∑øm
(
	`IS_AES_GET_IT
(
AES_IT
));

524 
ccõbô°©us
 = 
AES
->
CR
 & 
AES_CR_CCIE
;

525 
ccfbô°©us
 = 
AES
->
SR
 & 
AES_SR_CCF
;

528 i‡(
AES_IT
 =
AES_IT_CC
)

531 i‡(((
ccõbô°©us
Ë!(
uöt32_t
)
RESET
Ë&& ((
ccfbô°©us
) != (uint32_t)RESET))

534 
ô°©us
 = 
SET
;

539 
ô°©us
 = 
RESET
;

545 i‡((
AES
->
CR
 & 
AES_CR_ERRIE
Ë!
RESET
)

548 i‡((
AES
->
SR
 & (
uöt32_t
)(
AES_SR_WRERR
 | 
AES_SR_RDERR
)Ë!(
uöt16_t
)
RESET
)

551 
ô°©us
 = 
SET
;

556 
ô°©us
 = 
RESET
;

562 
ô°©us
 = (
ITSètus
Ë
RESET
;

567  
ô°©us
;

568 
	}
}

578 
	$AES_CÀ¨ITPídögBô
(
uöt32_t
 
AES_IT
)

581 
	`as£π_∑øm
(
	`IS_AES_IT
(
AES_IT
));

584 
AES
->
CR
 |(
uöt32_t
Ë(
AES_IT
 >> (uint32_t) 0x00000002);

585 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_aes_util.c

51 
	~"°m32l1xx_´s.h
"

64 
	#AES_CC_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

97 
Eº‹Sètus
 
	$AES_ECB_En¸y±
(
uöt8_t
* 
Key
, uöt8_t* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
)

99 
AES_InôTy≥Def
 
AES_InôSåu˘uª
;

100 
AES_KeyInôTy≥Def
 
AES_KeyInôSåu˘uª
;

101 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

102 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

103 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

104 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

105 
__IO
 
uöt32_t
 
cou¡î
 = 0;

106 
uöt32_t
 
cc°©us
 = 0;

107 
uöt32_t
 
i
 = 0;

110 
AES_KeyInôSåu˘uª
.
AES_Key3
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

111 
keyaddr
 += 4;

112 
AES_KeyInôSåu˘uª
.
AES_Key2
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

113 
keyaddr
 += 4;

114 
AES_KeyInôSåu˘uª
.
AES_Key1
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

115 
keyaddr
 += 4;

116 
AES_KeyInôSåu˘uª
.
AES_Key0
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

117 
	`AES_KeyInô
(&
AES_KeyInôSåu˘uª
);

120 
AES_InôSåu˘uª
.
AES_O≥øti⁄
 = 
AES_O≥øti⁄_En¸yp
;

121 
AES_InôSåu˘uª
.
AES_Chaöög
 = 
AES_Chaöög_ECB
;

122 
AES_InôSåu˘uª
.
AES_D©aTy≥
 = 
AES_D©aTy≥_8b
;

123 
	`AES_Inô
(&
AES_InôSåu˘uª
);

126 
	`AES_Cmd
(
ENABLE
);

128 
i
 = 0; ((ò< 
IÀngth
Ë&& (
°©us
 !
ERROR
)); i += 16)

130 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

131 
öpuèddr
 += 4;

132 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

133 
öpuèddr
 += 4;

134 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

135 
öpuèddr
 += 4;

136 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

137 
öpuèddr
 += 4;

140 
cou¡î
 = 0;

143 
cc°©us
 = 
	`AES_GëFœgSètus
(
AES_FLAG_CCF
);

144 
cou¡î
++;

145 }(
cou¡î
 !
AES_CC_TIMEOUT
Ë&& (
cc°©us
 =
RESET
));

147 i‡(
cc°©us
 =
RESET
)

149 
°©us
 = 
ERROR
;

154 
	`AES_CÀ¨Fœg
(
AES_FLAG_CCF
);

156 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

157 
ouçuèddr
 += 4;

158 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

159 
ouçuèddr
 += 4;

160 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

161 
ouçuèddr
 += 4;

162 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

163 
ouçuèddr
 += 4;

168 
	`AES_Cmd
(
DISABLE
);

170  
°©us
;

171 
	}
}

183 
Eº‹Sètus
 
	$AES_ECB_De¸y±
(
uöt8_t
* 
Key
, uöt8_t* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
)

185 
AES_InôTy≥Def
 
AES_InôSåu˘uª
;

186 
AES_KeyInôTy≥Def
 
AES_KeyInôSåu˘uª
;

187 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

188 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

189 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

190 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

191 
__IO
 
uöt32_t
 
cou¡î
 = 0;

192 
uöt32_t
 
cc°©us
 = 0;

193 
uöt32_t
 
i
 = 0;

196 
AES_KeyInôSåu˘uª
.
AES_Key3
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

197 
keyaddr
 += 4;

198 
AES_KeyInôSåu˘uª
.
AES_Key2
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

199 
keyaddr
 += 4;

200 
AES_KeyInôSåu˘uª
.
AES_Key1
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

201 
keyaddr
 += 4;

202 
AES_KeyInôSåu˘uª
.
AES_Key0
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

203 
	`AES_KeyInô
(&
AES_KeyInôSåu˘uª
);

206 
AES_InôSåu˘uª
.
AES_O≥øti⁄
 = 
AES_O≥øti⁄_KeyDîivAndDe¸yp
;

207 
AES_InôSåu˘uª
.
AES_Chaöög
 = 
AES_Chaöög_ECB
;

208 
AES_InôSåu˘uª
.
AES_D©aTy≥
 = 
AES_D©aTy≥_8b
;

209 
	`AES_Inô
(&
AES_InôSåu˘uª
);

212 
	`AES_Cmd
(
ENABLE
);

214 
i
 = 0; ((ò< 
IÀngth
Ë&& (
°©us
 !
ERROR
)); i += 16)

216 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

217 
öpuèddr
 += 4;

218 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

219 
öpuèddr
 += 4;

220 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

221 
öpuèddr
 += 4;

222 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

223 
öpuèddr
 += 4;

226 
cou¡î
 = 0;

229 
cc°©us
 = 
	`AES_GëFœgSètus
(
AES_FLAG_CCF
);

230 
cou¡î
++;

231 }(
cou¡î
 !
AES_CC_TIMEOUT
Ë&& (
cc°©us
 =
RESET
));

233 i‡(
cc°©us
 =
RESET
)

235 
°©us
 = 
ERROR
;

240 
	`AES_CÀ¨Fœg
(
AES_FLAG_CCF
);

243 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

244 
ouçuèddr
 += 4;

245 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

246 
ouçuèddr
 += 4;

247 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

248 
ouçuèddr
 += 4;

249 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

250 
ouçuèddr
 += 4;

255 
	`AES_Cmd
(
DISABLE
);

257  
°©us
;

258 
	}
}

271 
Eº‹Sètus
 
	$AES_CBC_En¸y±
(
uöt8_t
* 
Key
, uöt8_à
InôVe˘‹s
[16], uöt8_t* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
)

273 
AES_InôTy≥Def
 
AES_InôSåu˘uª
;

274 
AES_KeyInôTy≥Def
 
AES_KeyInôSåu˘uª
;

275 
AES_IVInôTy≥Def
 
AES_IVInôSåu˘uª
;

276 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

277 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

278 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

279 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

280 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

281 
__IO
 
uöt32_t
 
cou¡î
 = 0;

282 
uöt32_t
 
cc°©us
 = 0;

283 
uöt32_t
 
i
 = 0;

286 
AES_KeyInôSåu˘uª
.
AES_Key3
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

287 
keyaddr
 += 4;

288 
AES_KeyInôSåu˘uª
.
AES_Key2
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

289 
keyaddr
 += 4;

290 
AES_KeyInôSåu˘uª
.
AES_Key1
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

291 
keyaddr
 += 4;

292 
AES_KeyInôSåu˘uª
.
AES_Key0
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

293 
	`AES_KeyInô
(&
AES_KeyInôSåu˘uª
);

296 
AES_IVInôSåu˘uª
.
AES_IV3
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

297 
ivaddr
 += 4;

298 
AES_IVInôSåu˘uª
.
AES_IV2
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

299 
ivaddr
 += 4;

300 
AES_IVInôSåu˘uª
.
AES_IV1
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

301 
ivaddr
 += 4;

302 
AES_IVInôSåu˘uª
.
AES_IV0
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

303 
	`AES_IVInô
(&
AES_IVInôSåu˘uª
);

306 
AES_InôSåu˘uª
.
AES_O≥øti⁄
 = 
AES_O≥øti⁄_En¸yp
;

307 
AES_InôSåu˘uª
.
AES_Chaöög
 = 
AES_Chaöög_CBC
;

308 
AES_InôSåu˘uª
.
AES_D©aTy≥
 = 
AES_D©aTy≥_8b
;

309 
	`AES_Inô
(&
AES_InôSåu˘uª
);

312 
	`AES_Cmd
(
ENABLE
);

314 
i
 = 0; ((ò< 
IÀngth
Ë&& (
°©us
 !
ERROR
)); i += 16)

316 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

317 
öpuèddr
 += 4;

318 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

319 
öpuèddr
 += 4;

320 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

321 
öpuèddr
 += 4;

322 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

323 
öpuèddr
 += 4;

326 
cou¡î
 = 0;

329 
cc°©us
 = 
	`AES_GëFœgSètus
(
AES_FLAG_CCF
);

330 
cou¡î
++;

331 }(
cou¡î
 !
AES_CC_TIMEOUT
Ë&& (
cc°©us
 =
RESET
));

333 i‡(
cc°©us
 =
RESET
)

335 
°©us
 = 
ERROR
;

340 
	`AES_CÀ¨Fœg
(
AES_FLAG_CCF
);

343 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

344 
ouçuèddr
 += 4;

345 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

346 
ouçuèddr
 += 4;

347 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

348 
ouçuèddr
 += 4;

349 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

350 
ouçuèddr
 += 4;

355 
	`AES_Cmd
(
DISABLE
);

357  
°©us
;

358 
	}
}

371 
Eº‹Sètus
 
	$AES_CBC_De¸y±
(
uöt8_t
* 
Key
, uöt8_à
InôVe˘‹s
[16], uöt8_t* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
)

373 
AES_InôTy≥Def
 
AES_InôSåu˘uª
;

374 
AES_KeyInôTy≥Def
 
AES_KeyInôSåu˘uª
;

375 
AES_IVInôTy≥Def
 
AES_IVInôSåu˘uª
;

376 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

377 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

378 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

379 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

380 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

381 
__IO
 
uöt32_t
 
cou¡î
 = 0;

382 
uöt32_t
 
cc°©us
 = 0;

383 
uöt32_t
 
i
 = 0;

386 
AES_KeyInôSåu˘uª
.
AES_Key3
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

387 
keyaddr
 += 4;

388 
AES_KeyInôSåu˘uª
.
AES_Key2
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

389 
keyaddr
 += 4;

390 
AES_KeyInôSåu˘uª
.
AES_Key1
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

391 
keyaddr
 += 4;

392 
AES_KeyInôSåu˘uª
.
AES_Key0
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

393 
	`AES_KeyInô
(&
AES_KeyInôSåu˘uª
);

396 
AES_IVInôSåu˘uª
.
AES_IV3
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

397 
ivaddr
 += 4;

398 
AES_IVInôSåu˘uª
.
AES_IV2
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

399 
ivaddr
 += 4;

400 
AES_IVInôSåu˘uª
.
AES_IV1
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

401 
ivaddr
 += 4;

402 
AES_IVInôSåu˘uª
.
AES_IV0
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

403 
	`AES_IVInô
(&
AES_IVInôSåu˘uª
);

406 
AES_InôSåu˘uª
.
AES_O≥øti⁄
 = 
AES_O≥øti⁄_KeyDîivAndDe¸yp
;

407 
AES_InôSåu˘uª
.
AES_Chaöög
 = 
AES_Chaöög_CBC
;

408 
AES_InôSåu˘uª
.
AES_D©aTy≥
 = 
AES_D©aTy≥_8b
;

409 
	`AES_Inô
(&
AES_InôSåu˘uª
);

412 
	`AES_Cmd
(
ENABLE
);

414 
i
 = 0; ((ò< 
IÀngth
Ë&& (
°©us
 !
ERROR
)); i += 16)

416 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

417 
öpuèddr
 += 4;

418 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

419 
öpuèddr
 += 4;

420 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

421 
öpuèddr
 += 4;

422 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

423 
öpuèddr
 += 4;

426 
cou¡î
 = 0;

429 
cc°©us
 = 
	`AES_GëFœgSètus
(
AES_FLAG_CCF
);

430 
cou¡î
++;

431 }(
cou¡î
 !
AES_CC_TIMEOUT
Ë&& (
cc°©us
 =
RESET
));

433 i‡(
cc°©us
 =
RESET
)

435 
°©us
 = 
ERROR
;

440 
	`AES_CÀ¨Fœg
(
AES_FLAG_CCF
);

443 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

444 
ouçuèddr
 += 4;

445 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

446 
ouçuèddr
 += 4;

447 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

448 
ouçuèddr
 += 4;

449 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

450 
ouçuèddr
 += 4;

455 
	`AES_Cmd
(
DISABLE
);

457  
°©us
;

458 
	}
}

471 
Eº‹Sètus
 
	$AES_CTR_En¸y±
(
uöt8_t
* 
Key
, uöt8_à
InôVe˘‹s
[16], uöt8_t* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
)

473 
AES_InôTy≥Def
 
AES_InôSåu˘uª
;

474 
AES_KeyInôTy≥Def
 
AES_KeyInôSåu˘uª
;

475 
AES_IVInôTy≥Def
 
AES_IVInôSåu˘uª
;

477 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

478 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

479 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

480 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

481 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

482 
__IO
 
uöt32_t
 
cou¡î
 = 0;

483 
uöt32_t
 
cc°©us
 = 0;

484 
uöt32_t
 
i
 = 0;

487 
AES_KeyInôSåu˘uª
.
AES_Key3
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

488 
keyaddr
 += 4;

489 
AES_KeyInôSåu˘uª
.
AES_Key2
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

490 
keyaddr
 += 4;

491 
AES_KeyInôSåu˘uª
.
AES_Key1
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

492 
keyaddr
 += 4;

493 
AES_KeyInôSåu˘uª
.
AES_Key0
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

494 
	`AES_KeyInô
(&
AES_KeyInôSåu˘uª
);

497 
AES_IVInôSåu˘uª
.
AES_IV3
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

498 
ivaddr
 += 4;

499 
AES_IVInôSåu˘uª
.
AES_IV2

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

500 
ivaddr
 += 4;

501 
AES_IVInôSåu˘uª
.
AES_IV1
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

502 
ivaddr
 += 4;

503 
AES_IVInôSåu˘uª
.
AES_IV0

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

504 
	`AES_IVInô
(&
AES_IVInôSåu˘uª
);

507 
AES_InôSåu˘uª
.
AES_O≥øti⁄
 = 
AES_O≥øti⁄_En¸yp
;

508 
AES_InôSåu˘uª
.
AES_Chaöög
 = 
AES_Chaöög_CTR
;

509 
AES_InôSåu˘uª
.
AES_D©aTy≥
 = 
AES_D©aTy≥_8b
;

510 
	`AES_Inô
(&
AES_InôSåu˘uª
);

513 
	`AES_Cmd
(
ENABLE
);

515 
i
 = 0; ((ò< 
IÀngth
Ë&& (
°©us
 !
ERROR
)); i += 16)

517 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

518 
öpuèddr
 += 4;

519 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

520 
öpuèddr
 += 4;

521 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

522 
öpuèddr
 += 4;

523 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

524 
öpuèddr
 += 4;

527 
cou¡î
 = 0;

530 
cc°©us
 = 
	`AES_GëFœgSètus
(
AES_FLAG_CCF
);

531 
cou¡î
++;

532 }(
cou¡î
 !
AES_CC_TIMEOUT
Ë&& (
cc°©us
 =
RESET
));

534 i‡(
cc°©us
 =
RESET
)

536 
°©us
 = 
ERROR
;

541 
	`AES_CÀ¨Fœg
(
AES_FLAG_CCF
);

544 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

545 
ouçuèddr
 += 4;

546 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

547 
ouçuèddr
 += 4;

548 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

549 
ouçuèddr
 += 4;

550 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

551 
ouçuèddr
 += 4;

556 
	`AES_Cmd
(
DISABLE
);

558  
°©us
;

559 
	}
}

572 
Eº‹Sètus
 
	$AES_CTR_De¸y±
(
uöt8_t
* 
Key
, uöt8_à
InôVe˘‹s
[16], uöt8_t* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
)

574 
AES_InôTy≥Def
 
AES_InôSåu˘uª
;

575 
AES_KeyInôTy≥Def
 
AES_KeyInôSåu˘uª
;

576 
AES_IVInôTy≥Def
 
AES_IVInôSåu˘uª
;

578 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

579 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

580 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

581 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

582 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

583 
__IO
 
uöt32_t
 
cou¡î
 = 0;

584 
uöt32_t
 
cc°©us
 = 0;

585 
uöt32_t
 
i
 = 0;

588 
AES_KeyInôSåu˘uª
.
AES_Key3
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

589 
keyaddr
 += 4;

590 
AES_KeyInôSåu˘uª
.
AES_Key2
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

591 
keyaddr
 += 4;

592 
AES_KeyInôSåu˘uª
.
AES_Key1
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

593 
keyaddr
 += 4;

594 
AES_KeyInôSåu˘uª
.
AES_Key0
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

595 
	`AES_KeyInô
(&
AES_KeyInôSåu˘uª
);

598 
AES_IVInôSåu˘uª
.
AES_IV3
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

599 
ivaddr
 += 4;

600 
AES_IVInôSåu˘uª
.
AES_IV2
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

601 
ivaddr
 += 4;

602 
AES_IVInôSåu˘uª
.
AES_IV1
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

603 
ivaddr
 += 4;

604 
AES_IVInôSåu˘uª
.
AES_IV0
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

605 
	`AES_IVInô
(&
AES_IVInôSåu˘uª
);

608 
AES_InôSåu˘uª
.
AES_O≥øti⁄
 = 
AES_O≥øti⁄_KeyDîivAndDe¸yp
;

609 
AES_InôSåu˘uª
.
AES_Chaöög
 = 
AES_Chaöög_CTR
;

610 
AES_InôSåu˘uª
.
AES_D©aTy≥
 = 
AES_D©aTy≥_8b
;

611 
	`AES_Inô
(&
AES_InôSåu˘uª
);

614 
	`AES_Cmd
(
ENABLE
);

616 
i
 = 0; ((ò< 
IÀngth
Ë&& (
°©us
 !
ERROR
)); i += 16)

618 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

619 
öpuèddr
 += 4;

620 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

621 
öpuèddr
 += 4;

622 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

623 
öpuèddr
 += 4;

624 
	`AES_WrôeSubD©a
(*(
uöt32_t
*)(
öpuèddr
));

625 
öpuèddr
 += 4;

628 
cou¡î
 = 0;

631 
cc°©us
 = 
	`AES_GëFœgSètus
(
AES_FLAG_CCF
);

632 
cou¡î
++;

633 }(
cou¡î
 !
AES_CC_TIMEOUT
Ë&& (
cc°©us
 =
RESET
));

635 i‡(
cc°©us
 =
RESET
)

637 
°©us
 = 
ERROR
;

642 
	`AES_CÀ¨Fœg
(
AES_FLAG_CCF
);

645 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

646 
ouçuèddr
 += 4;

647 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

648 
ouçuèddr
 += 4;

649 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

650 
ouçuèddr
 += 4;

651 *(
uöt32_t
*)(
ouçuèddr
Ë
	`AES_RódSubD©a
();

652 
ouçuèddr
 += 4;

657 
	`AES_Cmd
(
DISABLE
);

659  
°©us
;

660 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_comp.c

77 
	~"°m32l1xx_comp.h
"

116 
	$COMP_DeInô
()

118 
COMP
->
CSR
 = ((
uöt32_t
)0x00000000);

119 
	}
}

131 
	$COMP_Inô
(
COMP_InôTy≥Def
* 
COMP_InôSåu˘
)

133 
uöt32_t
 
tm¥eg
 = 0;

136 
	`as£π_∑øm
(
	`IS_COMP_INVERTING_INPUT
(
COMP_InôSåu˘
->
COMP_InvîtögI≈ut
));

137 
	`as£π_∑øm
(
	`IS_COMP_OUTPUT
(
COMP_InôSåu˘
->
COMP_OuçutSñe˘
));

138 
	`as£π_∑øm
(
	`IS_COMP_SPEED
(
COMP_InôSåu˘
->
COMP_S≥ed
));

141 
tm¥eg
 = 
COMP
->
CSR
;

144 
tm¥eg
 &(
uöt32_t
Ë(~(uöt32_tË(
COMP_CSR_OUTSEL
 | 
COMP_CSR_INSEL
 | 
COMP_CSR_SPEED
));

150 
tm¥eg
 |(
uöt32_t
)((
COMP_InôSåu˘
->
COMP_S≥ed
 | COMP_InôSåu˘->
COMP_InvîtögI≈ut


151 | 
COMP_InôSåu˘
->
COMP_OuçutSñe˘
));

156 
COMP
->
CSR
 = 
tm¥eg
;

157 
	}
}

172 
	$COMP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

175 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

177 i‡(
NewSèã
 !
DISABLE
)

180 
COMP
->
CSR
 |(
uöt32_t
Ë
COMP_CSR_CMP1EN
;

185 
COMP
->
CSR
 &(
uöt32_t
)(~
COMP_CSR_CMP1EN
);

187 
	}
}

204 
uöt8_t
 
	$COMP_GëOuçutLevñ
(
uöt32_t
 
COMP_Sñe˘i⁄
)

206 
uöt8_t
 
compout
 = 0x0;

209 
	`as£π_∑øm
(
	`IS_COMP_ALL_PERIPH
(
COMP_Sñe˘i⁄
));

212 if(
COMP_Sñe˘i⁄
 =
COMP_Sñe˘i⁄_COMP1
)

215 if((
COMP
->
CSR
 & 
COMP_CSR_CMP1OUT
Ë!(
uöt8_t
Ë
RESET
)

218 
compout
 = (
uöt8_t
Ë
COMP_OuçutLevñ_High
;

224 
compout
 = (
uöt8_t
Ë
COMP_OuçutLevñ_Low
;

231 if((
COMP
->
CSR
 & 
COMP_CSR_CMP2OUT
Ë!(
uöt8_t
Ë
RESET
)

234 
compout
 = (
uöt8_t
Ë
COMP_OuçutLevñ_High
;

240 
compout
 = (
uöt8_t
Ë
COMP_OuçutLevñ_Low
;

244  (
uöt8_t
)(
compout
);

245 
	}
}

255 
	$COMP_SW1SwôchC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

258 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

260 i‡(
NewSèã
 !
DISABLE
)

263 
COMP
->
CSR
 |(
uöt32_t
Ë
COMP_CSR_SW1
;

268 
COMP
->
CSR
 &(
uöt32_t
)(~
COMP_CSR_SW1
);

270 
	}
}

302 
	$COMP_WödowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

305 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

307 i‡(
NewSèã
 !
DISABLE
)

310 
COMP
->
CSR
 |(
uöt32_t
Ë
COMP_CSR_WNDWE
;

315 
COMP
->
CSR
 &(
uöt32_t
)(~
COMP_CSR_WNDWE
);

317 
	}
}

345 
	$COMP_VªfötOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

348 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

350 i‡(
NewSèã
 !
DISABLE
)

353 
COMP
->
CSR
 |(
uöt32_t
Ë
COMP_CSR_VREFOUTEN
;

358 
COMP
->
CSR
 &(
uöt32_t
Ë(~
COMP_CSR_VREFOUTEN
);

360 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_crc.c

29 
	~"°m32l1xx_¸c.h
"

56 
	$CRC_Re£tDR
()

59 
CRC
->
CR
 = 
CRC_CR_RESET
;

60 
	}
}

67 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

69 
CRC
->
DR
 = 
D©a
;

71  (
CRC
->
DR
);

72 
	}
}

80 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

82 
uöt32_t
 
ödex
 = 0;

84 
ödex
 = 0; index < 
Buf„rLígth
; index++)

86 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

88  (
CRC
->
DR
);

89 
	}
}

96 
uöt32_t
 
	$CRC_GëCRC
()

98  (
CRC
->
DR
);

99 
	}
}

106 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

108 
CRC
->
IDR
 = 
IDVÆue
;

109 
	}
}

116 
uöt8_t
 
	$CRC_GëIDRegi°î
()

118  (
CRC
->
IDR
);

119 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_dac.c

104 
	~"°m32l1xx_dac.h
"

105 
	~"°m32l1xx_rcc.h
"

119 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0x00000FFE)

	)

122 
	#DUAL_SWTRIG_SET
 ((
uöt32_t
)0x00000003)

	)

123 
	#DUAL_SWTRIG_RESET
 ((
uöt32_t
)0xFFFFFFFC)

	)

126 
	#DHR12R1_OFFSET
 ((
uöt32_t
)0x00000008)

	)

127 
	#DHR12R2_OFFSET
 ((
uöt32_t
)0x00000014)

	)

128 
	#DHR12RD_OFFSET
 ((
uöt32_t
)0x00000020)

	)

131 
	#DOR_OFFSET
 ((
uöt32_t
)0x0000002C)

	)

159 
	$DAC_DeInô
()

162 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

164 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

165 
	}
}

178 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

180 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

183 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

184 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

185 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

186 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

187 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

191 
tm¥eg1
 = 
DAC
->
CR
;

193 
tm¥eg1
 &~(
CR_CLEAR_MASK
 << 
DAC_Ch™√l
);

200 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

201 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | DAC_InôSåu˘->
DAC_OuçutBuf„r
);

203 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

205 
DAC
->
CR
 = 
tm¥eg1
;

206 
	}
}

214 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

218 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

220 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

222 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

224 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

225 
	}
}

239 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

242 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

243 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

245 i‡(
NewSèã
 !
DISABLE
)

248 
DAC
->
CR
 |(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

253 
DAC
->
CR
 &(~(
DAC_CR_EN1
 << 
DAC_Ch™√l
));

255 
	}
}

267 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

270 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

271 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

273 i‡(
NewSèã
 !
DISABLE
)

276 
DAC
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4);

281 
DAC
->
SWTRIGR
 &~((
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4));

283 
	}
}

292 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

295 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

297 i‡(
NewSèã
 !
DISABLE
)

300 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_SET
;

305 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_RESET
;

307 
	}
}

324 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

327 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

328 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

329 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

331 i‡(
NewSèã
 !
DISABLE
)

334 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

339 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

341 
	}
}

353 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

355 
__IO
 
uöt32_t
 
tmp
 = 0;

358 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

359 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

361 
tmp
 = (
uöt32_t
)
DAC_BASE
;

362 
tmp
 +
DHR12R1_OFFSET
 + 
DAC_Align
;

365 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

366 
	}
}

378 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

380 
__IO
 
uöt32_t
 
tmp
 = 0;

383 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

384 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

386 
tmp
 = (
uöt32_t
)
DAC_BASE
;

387 
tmp
 +
DHR12R2_OFFSET
 + 
DAC_Align
;

390 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

391 
	}
}

408 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

410 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

413 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

414 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

415 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

418 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

420 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

424 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

427 
tmp
 = (
uöt32_t
)
DAC_BASE
;

428 
tmp
 +
DHR12RD_OFFSET
 + 
DAC_Align
;

431 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

432 
	}
}

442 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

444 
__IO
 
uöt32_t
 
tmp
 = 0;

447 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

449 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

450 
tmp
 +
DOR_OFFSET
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

453  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

454 
	}
}

486 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

489 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

490 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

492 i‡(
NewSèã
 !
DISABLE
)

495 
DAC
->
CR
 |(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

500 
DAC
->
CR
 &(~(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
));

502 
	}
}

535 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

538 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

539 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

540 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

542 i‡(
NewSèã
 !
DISABLE
)

545 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

550 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

552 
	}
}

567 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

569 
FœgSètus
 
bô°©us
 = 
RESET
;

571 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

572 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

575 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

578 
bô°©us
 = 
SET
;

583 
bô°©us
 = 
RESET
;

586  
bô°©us
;

587 
	}
}

600 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

603 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

604 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

607 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

608 
	}
}

623 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

625 
ITSètus
 
bô°©us
 = 
RESET
;

626 
uöt32_t
 
íabÀ°©us
 = 0;

629 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

630 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

633 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

636 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

639 
bô°©us
 = 
SET
;

644 
bô°©us
 = 
RESET
;

647  
bô°©us
;

648 
	}
}

661 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

664 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

665 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

668 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

669 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_dbgmcu.c

29 
	~"°m32l1xx_dbgmcu.h
"

42 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

58 
uöt32_t
 
	$DBGMCU_GëREVID
()

60 (
DBGMCU
->
IDCODE
 >> 16);

61 
	}
}

68 
uöt32_t
 
	$DBGMCU_GëDEVID
()

70 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_MASK
);

71 
	}
}

84 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

87 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

88 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

90 i‡(
NewSèã
 !
DISABLE
)

92 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

96 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

98 
	}
}

126 
	$DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

129 
	`as£π_∑øm
(
	`IS_DBGMCU_APB1PERIPH
(
DBGMCU_Pîùh
));

130 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

132 i‡(
NewSèã
 !
DISABLE
)

134 
DBGMCU
->
APB1FZ
 |
DBGMCU_Pîùh
;

138 
DBGMCU
->
APB1FZ
 &~
DBGMCU_Pîùh
;

140 
	}
}

153 
	$DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

156 
	`as£π_∑øm
(
	`IS_DBGMCU_APB2PERIPH
(
DBGMCU_Pîùh
));

157 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

159 i‡(
NewSèã
 !
DISABLE
)

161 
DBGMCU
->
APB2FZ
 |
DBGMCU_Pîùh
;

165 
DBGMCU
->
APB2FZ
 &~
DBGMCU_Pîùh
;

167 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_dma.c

73 
	~"°m32l1xx_dma.h
"

74 
	~"°m32l1xx_rcc.h
"

89 
	#DMA1_CHANNEL1_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF1
 | 
DMA_ISR_TCIF1
 | 
DMA_ISR_HTIF1
 | 
DMA_ISR_TEIF1
))

	)

90 
	#DMA1_CHANNEL2_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF2
 | 
DMA_ISR_TCIF2
 | 
DMA_ISR_HTIF2
 | 
DMA_ISR_TEIF2
))

	)

91 
	#DMA1_CHANNEL3_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF3
 | 
DMA_ISR_TCIF3
 | 
DMA_ISR_HTIF3
 | 
DMA_ISR_TEIF3
))

	)

92 
	#DMA1_CHANNEL4_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF4
 | 
DMA_ISR_TCIF4
 | 
DMA_ISR_HTIF4
 | 
DMA_ISR_TEIF4
))

	)

93 
	#DMA1_CHANNEL5_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF5
 | 
DMA_ISR_TCIF5
 | 
DMA_ISR_HTIF5
 | 
DMA_ISR_TEIF5
))

	)

94 
	#DMA1_CHANNEL6_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF6
 | 
DMA_ISR_TCIF6
 | 
DMA_ISR_HTIF6
 | 
DMA_ISR_TEIF6
))

	)

95 
	#DMA1_CHANNEL7_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF7
 | 
DMA_ISR_TCIF7
 | 
DMA_ISR_HTIF7
 | 
DMA_ISR_TEIF7
))

	)

98 
	#DMA2_CHANNEL1_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF1
 | 
DMA_ISR_TCIF1
 | 
DMA_ISR_HTIF1
 | 
DMA_ISR_TEIF1
))

	)

99 
	#DMA2_CHANNEL2_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF2
 | 
DMA_ISR_TCIF2
 | 
DMA_ISR_HTIF2
 | 
DMA_ISR_TEIF2
))

	)

100 
	#DMA2_CHANNEL3_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF3
 | 
DMA_ISR_TCIF3
 | 
DMA_ISR_HTIF3
 | 
DMA_ISR_TEIF3
))

	)

101 
	#DMA2_CHANNEL4_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF4
 | 
DMA_ISR_TCIF4
 | 
DMA_ISR_HTIF4
 | 
DMA_ISR_TEIF4
))

	)

102 
	#DMA2_CHANNEL5_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF5
 | 
DMA_ISR_TCIF5
 | 
DMA_ISR_HTIF5
 | 
DMA_ISR_TEIF5
))

	)

105 
	#FLAG_MASK
 ((
uöt32_t
)0x10000000)

	)

108 
	#CCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF800F)

	)

144 
	$DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

147 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

150 
DMAy_Ch™√lx
->
CCR
 &(
uöt16_t
)(~
DMA_CCR1_EN
);

153 
DMAy_Ch™√lx
->
CCR
 = 0;

156 
DMAy_Ch™√lx
->
CNDTR
 = 0;

159 
DMAy_Ch™√lx
->
CPAR
 = 0;

162 
DMAy_Ch™√lx
->
CMAR
 = 0;

164 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l1
)

167 
DMA1
->
IFCR
 |
DMA1_CHANNEL1_IT_MASK
;

169 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l2
)

172 
DMA1
->
IFCR
 |
DMA1_CHANNEL2_IT_MASK
;

174 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l3
)

177 
DMA1
->
IFCR
 |
DMA1_CHANNEL3_IT_MASK
;

179 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l4
)

182 
DMA1
->
IFCR
 |
DMA1_CHANNEL4_IT_MASK
;

184 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l5
)

187 
DMA1
->
IFCR
 |
DMA1_CHANNEL5_IT_MASK
;

189 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l6
)

192 
DMA1
->
IFCR
 |
DMA1_CHANNEL6_IT_MASK
;

194 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l7
)

197 
DMA1
->
IFCR
 |
DMA1_CHANNEL7_IT_MASK
;

199 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l1
)

202 
DMA2
->
IFCR
 |
DMA2_CHANNEL1_IT_MASK
;

204 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l2
)

207 
DMA2
->
IFCR
 |
DMA2_CHANNEL2_IT_MASK
;

209 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l3
)

212 
DMA2
->
IFCR
 |
DMA2_CHANNEL3_IT_MASK
;

214 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l4
)

217 
DMA2
->
IFCR
 |
DMA2_CHANNEL4_IT_MASK
;

221 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l5
)

224 
DMA2
->
IFCR
 |
DMA2_CHANNEL5_IT_MASK
;

227 
	}
}

238 
	$DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

240 
uöt32_t
 
tm¥eg
 = 0;

243 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

244 
	`as£π_∑øm
(
	`IS_DMA_DIR
(
DMA_InôSåu˘
->
DMA_DIR
));

245 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

246 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

247 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

248 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

249 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

250 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

251 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

252 
	`as£π_∑øm
(
	`IS_DMA_M2M_STATE
(
DMA_InôSåu˘
->
DMA_M2M
));

256 
tm¥eg
 = 
DMAy_Ch™√lx
->
CCR
;

258 
tm¥eg
 &
CCR_CLEAR_MASK
;

268 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_DIR
 | DMA_InôSåu˘->
DMA_Mode
 |

269 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

270 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

271 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 | DMA_InôSåu˘->
DMA_M2M
;

274 
DMAy_Ch™√lx
->
CCR
 = 
tm¥eg
;

278 
DMAy_Ch™√lx
->
CNDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

282 
DMAy_Ch™√lx
->
CPAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

286 
DMAy_Ch™√lx
->
CMAR
 = 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
;

287 
	}
}

295 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

299 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

301 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
 = 0;

303 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

305 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

307 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

309 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

311 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

313 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

315 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

317 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

319 
DMA_InôSåu˘
->
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

320 
	}
}

330 
	$DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

333 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

334 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

336 i‡(
NewSèã
 !
DISABLE
)

339 
DMAy_Ch™√lx
->
CCR
 |
DMA_CCR1_EN
;

344 
DMAy_Ch™√lx
->
CCR
 &(
uöt16_t
)(~
DMA_CCR1_EN
);

346 
	}
}

389 
	$DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
)

392 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

396 
DMAy_Ch™√lx
->
CNDTR
 = 
D©aNumbî
;

397 
	}
}

407 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

410 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

412  ((
uöt16_t
)(
DMAy_Ch™√lx
->
CNDTR
));

413 
	}
}

482 
	$DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

485 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

486 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

487 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

489 i‡(
NewSèã
 !
DISABLE
)

492 
DMAy_Ch™√lx
->
CCR
 |
DMA_IT
;

497 
DMAy_Ch™√lx
->
CCR
 &~
DMA_IT
;

499 
	}
}

562 
FœgSètus
 
	$DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
)

564 
FœgSètus
 
bô°©us
 = 
RESET
;

565 
uöt32_t
 
tm¥eg
 = 0;

568 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMAy_FLAG
));

571 i‡((
DMAy_FLAG
 & 
FLAG_MASK
Ë=(
uöt32_t
)
RESET
)

574 
tm¥eg
 = 
DMA1
->
ISR
;

579 
tm¥eg
 = 
DMA2
->
ISR
;

583 i‡((
tm¥eg
 & 
DMAy_FLAG
Ë!(
uöt32_t
)
RESET
)

586 
bô°©us
 = 
SET
;

591 
bô°©us
 = 
RESET
;

595  
bô°©us
;

596 
	}
}

658 
	$DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
)

661 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMAy_FLAG
));

663 i‡((
DMAy_FLAG
 & 
FLAG_MASK
Ë=(
uöt32_t
)
RESET
)

666 
DMA1
->
IFCR
 = 
DMAy_FLAG
;

671 
DMA2
->
IFCR
 = 
DMAy_FLAG
;

673 
	}
}

736 
ITSètus
 
	$DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
)

738 
ITSètus
 
bô°©us
 = 
RESET
;

739 
uöt32_t
 
tm¥eg
 = 0;

742 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMAy_IT
));

745 i‡((
DMAy_IT
 & 
FLAG_MASK
Ë=(
uöt32_t
)
RESET
)

748 
tm¥eg
 = 
DMA1
->
ISR
;

753 
tm¥eg
 = 
DMA2
->
ISR
;

757 i‡((
tm¥eg
 & 
DMAy_IT
Ë!(
uöt32_t
)
RESET
)

760 
bô°©us
 = 
SET
;

765 
bô°©us
 = 
RESET
;

768  
bô°©us
;

769 
	}
}

832 
	$DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
)

835 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMAy_IT
));

838 i‡((
DMAy_IT
 & 
FLAG_MASK
Ë=(
uöt32_t
)
RESET
)

841 
DMA1
->
IFCR
 = 
DMAy_IT
;

846 
DMA2
->
IFCR
 = 
DMAy_IT
;

848 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_exti.c

66 
	~"°m32l1xx_exti.h
"

79 
	#EXTI_LINENONE
 ((
uöt32_t
)0x00000Ë

	)

107 
	$EXTI_DeInô
()

109 
EXTI
->
IMR
 = 0x00000000;

110 
EXTI
->
EMR
 = 0x00000000;

111 
EXTI
->
RTSR
 = 0x00000000;

112 
EXTI
->
FTSR
 = 0x00000000;

113 
EXTI
->
PR
 = 0x00FFFFFF;

114 
	}
}

128 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

130 
uöt32_t
 
tmp
 = 0;

133 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

134 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

135 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

136 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

138 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

140 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

143 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

144 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

146 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

148 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

151 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

152 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

155 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

158 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

159 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

163 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

164 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

166 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

171 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

174 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

176 
	}
}

184 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

186 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LINENONE
;

187 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

188 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

189 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

190 
	}
}

199 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

202 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

204 
EXTI
->
SWIER
 |
EXTI_Löe
;

205 
	}
}

230 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

232 
FœgSètus
 
bô°©us
 = 
RESET
;

234 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

236 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

238 
bô°©us
 = 
SET
;

242 
bô°©us
 = 
RESET
;

244  
bô°©us
;

245 
	}
}

253 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

256 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

258 
EXTI
->
PR
 = 
EXTI_Löe
;

259 
	}
}

268 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

270 
FœgSètus
 
bô°©us
 = 
RESET
;

272 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

274 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

276 
bô°©us
 = 
SET
;

280 
bô°©us
 = 
RESET
;

282  
bô°©us
;

283 
	}
}

291 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

294 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

296 
EXTI
->
PR
 = 
EXTI_Löe
;

297 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_flash.c

96 
	~"°m32l1xx_Êash.h
"

111 
	#WRP01_MASK
 ((
uöt32_t
)0x0000FFFF)

	)

112 
	#WRP23_MASK
 ((
uöt32_t
)0xFFFF0000)

	)

113 
	#WRP45_MASK
 ((
uöt32_t
)0x0000FFFF)

	)

114 
	#WRP67_MASK
 ((
uöt32_t
)0xFFFF0000)

	)

115 
	#WRP89_MASK
 ((
uöt32_t
)0x0000FFFF)

	)

116 
	#WRP1011_MASK
 ((
uöt32_t
)0xFFFF0000)

	)

186 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

188 
uöt32_t
 
tm¥eg
 = 0;

191 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

194 
tm¥eg
 = 
FLASH
->
ACR
;

197 
tm¥eg
 &(
uöt32_t
Ë(~((uöt32_t)
FLASH_ACR_LATENCY
));

198 
tm¥eg
 |
FLASH_L©ícy
;

201 
FLASH
->
ACR
 = 
tm¥eg
;

202 
	}
}

210 
	$FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

213 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

215 if(
NewSèã
 !
DISABLE
)

217 
FLASH
->
ACR
 |
FLASH_ACR_PRFTEN
;

221 
FLASH
->
ACR
 &(
uöt32_t
)(~((uöt32_t)
FLASH_ACR_PRFTEN
));

223 
	}
}

237 
	$FLASH_RódAc˚ss64Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

240 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

242 if(
NewSèã
 !
DISABLE
)

244 
FLASH
->
ACR
 |
FLASH_ACR_ACC64
;

248 
FLASH
->
ACR
 &(
uöt32_t
)(~((uöt32_t)
FLASH_ACR_ACC64
));

250 
	}
}

259 
	$FLASH_SLEEPPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

262 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

264 i‡(
NewSèã
 !
DISABLE
)

267 
FLASH
->
ACR
 |
FLASH_ACR_SLEEP_PD
;

272 
FLASH
->
ACR
 &(
uöt32_t
)(~((uöt32_t)
FLASH_ACR_SLEEP_PD
));

274 
	}
}

310 
	$FLASH_U∆ock
()

312 if((
FLASH
->
PECR
 & 
FLASH_PECR_PRGLOCK
Ë!
RESET
)

315 
	`DATA_EEPROM_U∆ock
();

318 
FLASH
->
PRGKEYR
 = 
FLASH_PRGKEY1
;

319 
FLASH
->
PRGKEYR
 = 
FLASH_PRGKEY2
;

321 
	}
}

328 
	$FLASH_Lock
()

331 
FLASH
->
PECR
 |
FLASH_PECR_PRGLOCK
;

332 
	}
}

346 
FLASH_Sètus
 
	$FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
)

348 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

351 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Page_Addªss
));

354 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

356 if(
°©us
 =
FLASH_COMPLETE
)

361 
FLASH
->
PECR
 |
FLASH_PECR_ERASE
;

364 
FLASH
->
PECR
 |
FLASH_PECR_PROG
;

367 *(
__IO
 
uöt32_t
 *)
Page_Addªss
 = 0x00000000;

370 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

373 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_PROG
);

374 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_ERASE
);

377  
°©us
;

378 
	}
}

391 
FLASH_Sètus
 
	$FLASH_Fa°ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

393 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

396 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Addªss
));

399 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

401 if(
°©us
 =
FLASH_COMPLETE
)

404 *(
__IO
 
uöt32_t
 *)
Addªss
 = 
D©a
;

407 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

410  
°©us
;

411 
	}
}

455 
	$DATA_EEPROM_U∆ock
()

457 if((
FLASH
->
PECR
 & 
FLASH_PECR_PELOCK
Ë!
RESET
)

460 
FLASH
->
PEKEYR
 = 
FLASH_PEKEY1
;

461 
FLASH
->
PEKEYR
 = 
FLASH_PEKEY2
;

463 
	}
}

470 
	$DATA_EEPROM_Lock
()

473 
FLASH
->
PECR
 |
FLASH_PECR_PELOCK
;

474 
	}
}

482 
	$DATA_EEPROM_FixedTimeProgømCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

485 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

487 if(
NewSèã
 !
DISABLE
)

489 
FLASH
->
PECR
 |(
uöt32_t
)
FLASH_PECR_FTDW
;

493 
FLASH
->
PECR
 &(
uöt32_t
)(~((uöt32_t)
FLASH_PECR_FTDW
));

495 
	}
}

510 
FLASH_Sètus
 
	$DATA_EEPROM_Eø£Byã
(
uöt32_t
 
Addªss
)

512 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

515 
	`as£π_∑øm
(
	`IS_FLASH_DATA_ADDRESS
(
Addªss
));

518 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

520 if(
°©us
 =
FLASH_COMPLETE
)

523 *(
__IO
 
uöt8_t
 *Ë
Addªss
 = (uint8_t)0x00;

527  
°©us
;

528 
	}
}

543 
FLASH_Sètus
 
	$DATA_EEPROM_Eø£HÆfW‹d
(
uöt32_t
 
Addªss
)

545 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

548 
	`as£π_∑øm
(
	`IS_FLASH_DATA_ADDRESS
(
Addªss
));

551 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

553 if(
°©us
 =
FLASH_COMPLETE
)

556 *(
__IO
 
uöt16_t
 *Ë
Addªss
 = (uint16_t)0x0000;

560  
°©us
;

561 
	}
}

576 
FLASH_Sètus
 
	$DATA_EEPROM_Eø£W‹d
(
uöt32_t
 
Addªss
)

578 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

581 
	`as£π_∑øm
(
	`IS_FLASH_DATA_ADDRESS
(
Addªss
));

584 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

586 if(
°©us
 =
FLASH_COMPLETE
)

589 *(
__IO
 
uöt32_t
 *Ë
Addªss
 = 0x00000000;

593  
°©us
;

594 
	}
}

609 
FLASH_Sètus
 
	$DATA_EEPROM_Fa°ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

611 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

612 #i‡!
	`deföed
 (
STM32L1XX_HD
Ë&& !deföed (
STM32L1XX_MDP
)

613 
uöt32_t
 
tmp
 = 0, 
tm∑ddr
 = 0;

617 
	`as£π_∑øm
(
	`IS_FLASH_DATA_ADDRESS
(
Addªss
));

620 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

622 if(
°©us
 =
FLASH_COMPLETE
)

625 
FLASH
->
PECR
 &(
uöt32_t
)(~((uöt32_t)
FLASH_PECR_FTDW
));

627 #i‡!
	`deföed
 (
STM32L1XX_HD
Ë&& !deföed (
STM32L1XX_MDP
)

628 if(
D©a
 !(
uöt8_t
)0x00)

631 *(
__IO
 
uöt8_t
 *)
Addªss
 = 
D©a
;

634 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

638 
tm∑ddr
 = 
Addªss
 & 0xFFFFFFFC;

639 
tmp
 = * (
__IO
 
uöt32_t
 *Ë
tm∑ddr
;

640 
tm∑ddr
 = 0xFF << ((
uöt32_t
Ë(0x8 * (
Addªss
 & 0x3)));

641 
tmp
 &~
tm∑ddr
;

642 
°©us
 = 
	`DATA_EEPROM_Eø£W‹d
(
Addªss
 & 0xFFFFFFFC);

643 
°©us
 = 
	`DATA_EEPROM_Fa°ProgømW‹d
((
Addªss
 & 0xFFFFFFFC), 
tmp
);

645 #ñi‡
	`deföed
 (
STM32L1XX_HD
Ë|| deföed (
STM32L1XX_MDP
)

647 *(
__IO
 
uöt8_t
 *)
Addªss
 = 
D©a
;

650 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

654  
°©us
;

655 
	}
}

670 
FLASH_Sètus
 
	$DATA_EEPROM_Fa°ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

672 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

673 #i‡!
	`deföed
 (
STM32L1XX_HD
Ë&& !deföed (
STM32L1XX_MDP
)

674 
uöt32_t
 
tmp
 = 0, 
tm∑ddr
 = 0;

678 
	`as£π_∑øm
(
	`IS_FLASH_DATA_ADDRESS
(
Addªss
));

681 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

683 if(
°©us
 =
FLASH_COMPLETE
)

686 
FLASH
->
PECR
 &(
uöt32_t
)(~((uöt32_t)
FLASH_PECR_FTDW
));

688 #i‡!
	`deföed
 (
STM32L1XX_HD
Ë&& !deföed (
STM32L1XX_MDP
)

689 if(
D©a
 !(
uöt16_t
)0x0000)

692 *(
__IO
 
uöt16_t
 *)
Addªss
 = 
D©a
;

695 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

699 if((
Addªss
 & 0x3) != 0x3)

701 
tm∑ddr
 = 
Addªss
 & 0xFFFFFFFC;

702 
tmp
 = * (
__IO
 
uöt32_t
 *Ë
tm∑ddr
;

703 
tm∑ddr
 = 0xFFFF << ((
uöt32_t
Ë(0x8 * (
Addªss
 & 0x3)));

704 
tmp
 &~
tm∑ddr
;

705 
°©us
 = 
	`DATA_EEPROM_Eø£W‹d
(
Addªss
 & 0xFFFFFFFC);

706 
°©us
 = 
	`DATA_EEPROM_Fa°ProgømW‹d
((
Addªss
 & 0xFFFFFFFC), 
tmp
);

710 
	`DATA_EEPROM_Fa°ProgømByã
(
Addªss
, 0x00);

711 
	`DATA_EEPROM_Fa°ProgømByã
(
Addªss
 + 1, 0x00);

714 #ñi‡
	`deföed
 (
STM32L1XX_HD
Ë|| deföed (
STM32L1XX_MDP
)

716 *(
__IO
 
uöt16_t
 *)
Addªss
 = 
D©a
;

719 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

723  
°©us
;

724 
	}
}

739 
FLASH_Sètus
 
	$DATA_EEPROM_Fa°ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

741 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

744 
	`as£π_∑øm
(
	`IS_FLASH_DATA_ADDRESS
(
Addªss
));

747 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

749 if(
°©us
 =
FLASH_COMPLETE
)

752 
FLASH
->
PECR
 &(
uöt32_t
)(~((uöt32_t)
FLASH_PECR_FTDW
));

755 *(
__IO
 
uöt32_t
 *)
Addªss
 = 
D©a
;

758 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

761  
°©us
;

762 
	}
}

778 
FLASH_Sètus
 
	$DATA_EEPROM_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

780 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

781 #i‡!
	`deföed
 (
STM32L1XX_HD
Ë&& !deföed (
STM32L1XX_MDP
)

782 
uöt32_t
 
tmp
 = 0, 
tm∑ddr
 = 0;

786 
	`as£π_∑øm
(
	`IS_FLASH_DATA_ADDRESS
(
Addªss
));

789 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

791 if(
°©us
 =
FLASH_COMPLETE
)

793 #i‡!
	`deföed
 (
STM32L1XX_HD
Ë&& !deföed (
STM32L1XX_MDP
)

794 if(
D©a
 !(
uöt8_t
) 0x00)

796 *(
__IO
 
uöt8_t
 *)
Addªss
 = 
D©a
;

799 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

804 
tm∑ddr
 = 
Addªss
 & 0xFFFFFFFC;

805 
tmp
 = * (
__IO
 
uöt32_t
 *Ë
tm∑ddr
;

806 
tm∑ddr
 = 0xFF << ((
uöt32_t
Ë(0x8 * (
Addªss
 & 0x3)));

807 
tmp
 &~
tm∑ddr
;

808 
°©us
 = 
	`DATA_EEPROM_Eø£W‹d
(
Addªss
 & 0xFFFFFFFC);

809 
°©us
 = 
	`DATA_EEPROM_Fa°ProgømW‹d
((
Addªss
 & 0xFFFFFFFC), 
tmp
);

811 #ñi‡
	`deföed
 (
STM32L1XX_HD
Ë|| deföed (
STM32L1XX_MDP
)

812 *(
__IO
 
uöt8_t
 *)
Addªss
 = 
D©a
;

815 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

819  
°©us
;

820 
	}
}

836 
FLASH_Sètus
 
	$DATA_EEPROM_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

838 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

839 #i‡!
	`deföed
 (
STM32L1XX_HD
Ë&& !deföed (
STM32L1XX_MDP
)

840 
uöt32_t
 
tmp
 = 0, 
tm∑ddr
 = 0;

844 
	`as£π_∑øm
(
	`IS_FLASH_DATA_ADDRESS
(
Addªss
));

847 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

849 if(
°©us
 =
FLASH_COMPLETE
)

851 #i‡!
	`deföed
 (
STM32L1XX_HD
Ë&& !deföed (
STM32L1XX_MDP
)

852 if(
D©a
 !(
uöt16_t
)0x0000)

854 *(
__IO
 
uöt16_t
 *)
Addªss
 = 
D©a
;

857 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

861 if((
Addªss
 & 0x3) != 0x3)

863 
tm∑ddr
 = 
Addªss
 & 0xFFFFFFFC;

864 
tmp
 = * (
__IO
 
uöt32_t
 *Ë
tm∑ddr
;

865 
tm∑ddr
 = 0xFFFF << ((
uöt32_t
Ë(0x8 * (
Addªss
 & 0x3)));

866 
tmp
 &~
tm∑ddr
;

867 
°©us
 = 
	`DATA_EEPROM_Eø£W‹d
(
Addªss
 & 0xFFFFFFFC);

868 
°©us
 = 
	`DATA_EEPROM_Fa°ProgømW‹d
((
Addªss
 & 0xFFFFFFFC), 
tmp
);

872 
	`DATA_EEPROM_Fa°ProgømByã
(
Addªss
, 0x00);

873 
	`DATA_EEPROM_Fa°ProgømByã
(
Addªss
 + 1, 0x00);

876 #ñi‡
	`deföed
 (
STM32L1XX_HD
Ë|| deföed (
STM32L1XX_MDP
)

877 *(
__IO
 
uöt16_t
 *)
Addªss
 = 
D©a
;

880 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

884  
°©us
;

885 
	}
}

901 
FLASH_Sètus
 
	$DATA_EEPROM_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

903 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

906 
	`as£π_∑øm
(
	`IS_FLASH_DATA_ADDRESS
(
Addªss
));

909 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

911 if(
°©us
 =
FLASH_COMPLETE
)

913 *(
__IO
 
uöt32_t
 *)
Addªss
 = 
D©a
;

916 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

919  
°©us
;

920 
	}
}

996 
	$FLASH_OB_U∆ock
()

998 if((
FLASH
->
PECR
 & 
FLASH_PECR_OPTLOCK
Ë!
RESET
)

1001 
	`DATA_EEPROM_U∆ock
();

1004 
FLASH
->
OPTKEYR
 = 
FLASH_OPTKEY1
;

1005 
FLASH
->
OPTKEYR
 = 
FLASH_OPTKEY2
;

1007 
	}
}

1014 
	$FLASH_OB_Lock
()

1017 
FLASH
->
PECR
 |
FLASH_PECR_OPTLOCK
;

1018 
	}
}

1025 
	$FLASH_OB_Launch
()

1028 
FLASH
->
PECR
 |
FLASH_PECR_OBL_LAUNCH
;

1029 
	}
}

1042 
FLASH_Sètus
 
	$FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1044 
uöt32_t
 
WRP01_D©a
 = 0, 
WRP23_D©a
 = 0;

1046 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1047 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

1050 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

1051 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1054 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1056 if(
°©us
 =
FLASH_COMPLETE
)

1058 i‡(
NewSèã
 !
DISABLE
)

1060 
WRP01_D©a
 = (
uöt16_t
)(((
OB_WRP
 & 
WRP01_MASK
Ë| 
OB
->
WRP01
));

1061 
WRP23_D©a
 = (
uöt16_t
)((((
OB_WRP
 & 
WRP23_MASK
)>>16 | 
OB
->
WRP23
)));

1062 
tmp1
 = (
uöt32_t
)(~(
WRP01_D©a
) << 16)|(WRP01_Data);

1063 
OB
->
WRP01
 = 
tmp1
;

1065 
tmp2
 = (
uöt32_t
)(~(
WRP23_D©a
) << 16)|(WRP23_Data);

1066 
OB
->
WRP23
 = 
tmp2
;

1071 
WRP01_D©a
 = (
uöt16_t
)(~
OB_WRP
 & (
WRP01_MASK
 & 
OB
->
WRP01
));

1072 
WRP23_D©a
 = (
uöt16_t
)((((~
OB_WRP
 & 
WRP23_MASK
)>>16 & 
OB
->
WRP23
)));

1074 
tmp1
 = (
uöt32_t
)((~
WRP01_D©a
) << 16)|(WRP01_Data);

1075 
OB
->
WRP01
 = 
tmp1
;

1077 
tmp2
 = (
uöt32_t
)((~
WRP23_D©a
) << 16)|(WRP23_Data);

1078 
OB
->
WRP23
 = 
tmp2
;

1081 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1085  
°©us
;

1086 
	}
}

1101 
FLASH_Sètus
 
	$FLASH_OB_WRP1C⁄fig
(
uöt32_t
 
OB_WRP1
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1103 
uöt32_t
 
WRP45_D©a
 = 0, 
WRP67_D©a
 = 0;

1105 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1106 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

1109 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP1
));

1110 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1113 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1115 if(
°©us
 =
FLASH_COMPLETE
)

1117 i‡(
NewSèã
 !
DISABLE
)

1119 
WRP45_D©a
 = (
uöt16_t
)(((
OB_WRP1
 & 
WRP45_MASK
Ë| 
OB
->
WRP45
));

1120 
WRP67_D©a
 = (
uöt16_t
)((((
OB_WRP1
 & 
WRP67_MASK
)>>16 | 
OB
->
WRP67
)));

1121 
tmp1
 = (
uöt32_t
)(~(
WRP45_D©a
) << 16)|(WRP45_Data);

1122 
OB
->
WRP45
 = 
tmp1
;

1124 
tmp2
 = (
uöt32_t
)(~(
WRP67_D©a
) << 16)|(WRP67_Data);

1125 
OB
->
WRP67
 = 
tmp2
;

1130 
WRP45_D©a
 = (
uöt16_t
)(~
OB_WRP1
 & (
WRP45_MASK
 & 
OB
->
WRP45
));

1131 
WRP67_D©a
 = (
uöt16_t
)((((~
OB_WRP1
 & 
WRP67_MASK
)>>16 & 
OB
->
WRP67
)));

1133 
tmp1
 = (
uöt32_t
)((~
WRP45_D©a
) << 16)|(WRP45_Data);

1134 
OB
->
WRP45
 = 
tmp1
;

1136 
tmp2
 = (
uöt32_t
)((~
WRP67_D©a
) << 16)|(WRP67_Data);

1137 
OB
->
WRP67
 = 
tmp2
;

1140 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1144  
°©us
;

1145 
	}
}

1159 
FLASH_Sètus
 
	$FLASH_OB_WRP2C⁄fig
(
uöt32_t
 
OB_WRP2
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1161 
uöt32_t
 
WRP89_D©a
 = 0, 
WRP1011_D©a
 = 0;

1163 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1164 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

1167 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP2
));

1168 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1171 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1173 if(
°©us
 =
FLASH_COMPLETE
)

1175 i‡(
NewSèã
 !
DISABLE
)

1177 
WRP89_D©a
 = (
uöt16_t
)(((
OB_WRP2
 & 
WRP89_MASK
Ë| 
OB
->
WRP89
));

1178 
WRP1011_D©a
 = (
uöt16_t
)((((
OB_WRP2
 & 
WRP1011_MASK
)>>16 | 
OB
->
WRP1011
)));

1179 
tmp1
 = (
uöt32_t
)(~(
WRP89_D©a
) << 16)|(WRP89_Data);

1180 
OB
->
WRP89
 = 
tmp1
;

1182 
tmp2
 = (
uöt32_t
)(~(
WRP1011_D©a
) << 16)|(WRP1011_Data);

1183 
OB
->
WRP1011
 = 
tmp2
;

1188 
WRP89_D©a
 = (
uöt16_t
)(~
OB_WRP2
 & (
WRP89_MASK
 & 
OB
->
WRP89
));

1189 
WRP1011_D©a
 = (
uöt16_t
)((((~
OB_WRP2
 & 
WRP1011_MASK
)>>16 & 
OB
->
WRP1011
)));

1191 
tmp1
 = (
uöt32_t
)((~
WRP89_D©a
) << 16)|(WRP89_Data);

1192 
OB
->
WRP89
 = 
tmp1
;

1194 
tmp2
 = (
uöt32_t
)((~
WRP1011_D©a
) << 16)|(WRP1011_Data);

1195 
OB
->
WRP1011
 = 
tmp2
;

1198 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1202  
°©us
;

1203 
	}
}

1220 
FLASH_Sètus
 
	$FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
)

1222 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1223 
uöt8_t
 
tmp1
 = 0;

1224 
uöt32_t
 
tmp2
 = 0;

1227 
	`as£π_∑øm
(
	`IS_OB_RDP
(
OB_RDP
));

1228 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1231 
tmp1
 = (
uöt8_t
)(~(
OB_RDP
 ));

1232 
tmp2
 = (
uöt32_t
)(((uöt32_t)((uöt32_t)(
tmp1
Ë<< 16)Ë| ((uöt32_t)
OB_RDP
));

1234 if(
°©us
 =
FLASH_COMPLETE
)

1237 
OB
->
RDP
 = 
tmp2
;

1241 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1244  
°©us
;

1245 
	}
}

1260 
FLASH_Sètus
 
	$FLASH_OB_PCROPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1262 
uöt32_t
 
WRP01_D©a
 = 0, 
WRP23_D©a
 = 0;

1264 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1265 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

1268 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

1269 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1272 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1274 if(
°©us
 =
FLASH_COMPLETE
)

1276 i‡(
NewSèã
 !
DISABLE
)

1278 
WRP01_D©a
 = (
uöt16_t
)(~
OB_WRP
 & (
WRP01_MASK
 & 
OB
->
WRP01
));

1279 
WRP23_D©a
 = (
uöt16_t
)((((~
OB_WRP
 & 
WRP23_MASK
)>>16 & 
OB
->
WRP23
)));

1281 
tmp1
 = (
uöt32_t
)((~
WRP01_D©a
) << 16)|(WRP01_Data);

1282 
OB
->
WRP01
 = 
tmp1
;

1284 
tmp2
 = (
uöt32_t
)((~
WRP23_D©a
) << 16)|(WRP23_Data);

1285 
OB
->
WRP23
 = 
tmp2
;

1291 
WRP01_D©a
 = (
uöt16_t
)((
OB_WRP
 & 
WRP01_MASK
Ë| 
OB
->
WRP01
);

1292 
WRP23_D©a
 = (
uöt16_t
)(((
OB_WRP
 & 
WRP23_MASK
Ë>> 16Ë| 
OB
->
WRP23
);

1294 
tmp1
 = (
uöt32_t
)(~(
WRP01_D©a
) << 16)|(WRP01_Data);

1295 
OB
->
WRP01
 = 
tmp1
;

1297 
tmp2
 = (
uöt32_t
)(~(
WRP23_D©a
) << 16)|(WRP23_Data);

1298 
OB
->
WRP23
 = 
tmp2
;

1302 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1306  
°©us
;

1307 
	}
}

1322 
FLASH_Sètus
 
	$FLASH_OB_PCROP1C⁄fig
(
uöt32_t
 
OB_WRP1
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1324 
uöt32_t
 
WRP45_D©a
 = 0, 
WRP67_D©a
 = 0;

1326 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1327 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

1330 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP1
));

1331 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1334 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1336 if(
°©us
 =
FLASH_COMPLETE
)

1338 i‡(
NewSèã
 !
DISABLE
)

1340 
WRP45_D©a
 = (
uöt16_t
)(~
OB_WRP1
 & (
WRP45_MASK
 & 
OB
->
WRP45
));

1341 
WRP67_D©a
 = (
uöt16_t
)((((~
OB_WRP1
 & 
WRP67_MASK
)>>16 & 
OB
->
WRP67
)));

1343 
tmp1
 = (
uöt32_t
)((~
WRP45_D©a
) << 16)|(WRP45_Data);

1344 
OB
->
WRP45
 = 
tmp1
;

1346 
tmp2
 = (
uöt32_t
)((~
WRP67_D©a
) << 16)|(WRP67_Data);

1347 
OB
->
WRP67
 = 
tmp2
;

1351 
WRP45_D©a
 = (
uöt16_t
)((
OB_WRP1
 & 
WRP45_MASK
Ë| 
OB
->
WRP45
);

1352 
WRP67_D©a
 = (
uöt16_t
)(((
OB_WRP1
 & 
WRP67_MASK
)>>16Ë| 
OB
->
WRP67
);

1353 
tmp1
 = (
uöt32_t
)(~(
WRP45_D©a
) << 16)|(WRP45_Data);

1354 
OB
->
WRP45
 = 
tmp1
;

1356 
tmp2
 = (
uöt32_t
)(~(
WRP67_D©a
) << 16)|(WRP67_Data);

1357 
OB
->
WRP67
 = 
tmp2
;

1360 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1364  
°©us
;

1365 
	}
}

1379 
FLASH_Sètus
 
	$FLASH_OB_PCROPSñe˘i⁄C⁄fig
(
uöt16_t
 
OB_PcROP
)

1381 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1382 
uöt16_t
 
tmp1
 = 0;

1383 
uöt32_t
 
tmp2
 = 0;

1384 
uöt8_t
 
›ti⁄tmp
 = 0;

1385 
uöt16_t
 
›ti⁄tmp2
 = 0;

1388 
	`as£π_∑øm
(
	`IS_OB_PCROP_SELECT
(
OB_PcROP
));

1389 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1392 
›ti⁄tmp
 = (
uöt8_t
)(*(
__IO
 uöt8_à*)(
OB_BASE
));

1395 
›ti⁄tmp2
 = (
uöt16_t
)(
OB_PcROP
 | 
›ti⁄tmp
);

1399 
tmp1
 = (
uöt16_t
)(~(
›ti⁄tmp2
 ));

1400 
tmp2
 = (
uöt32_t
)(((uöt32_t)((uöt32_t)(
tmp1
Ë<< 16)Ë| ((uöt32_t)
›ti⁄tmp2
));

1402 if(
°©us
 =
FLASH_COMPLETE
)

1405 
OB
->
RDP
 = 
tmp2
;

1409 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1412  
°©us
;

1413 
	}
}

1432 
FLASH_Sètus
 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
)

1434 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1435 
uöt32_t
 
tmp
 = 0, 
tmp1
 = 0;

1438 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1439 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1440 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1443 
tmp1
 = (
FLASH
->
OBR
 & 0x000F0000) >> 16;

1446 
tmp
 = (
uöt32_t
)(((uöt32_t)~((uöt32_t)((uöt32_t)(
OB_IWDG
Ë| (uöt32_t)(
OB_STOP
Ë| (uöt32_t)(
OB_STDBY
Ë| 
tmp1
))) << ((uint32_t)0x10));

1447 
tmp
 |((
uöt32_t
)(
OB_IWDG
Ë| ((uöt32_t)
OB_STOP
Ë| (uöt32_t)(
OB_STDBY
Ë| 
tmp1
);

1450 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1452 if(
°©us
 =
FLASH_COMPLETE
)

1455 
OB
->
USER
 = 
tmp
;

1459 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1462  
°©us
;

1463 
	}
}

1479 
FLASH_Sètus
 
	$FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
)

1481 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1482 
uöt32_t
 
tmp
 = 0, 
tmp1
 = 0;

1485 
	`as£π_∑øm
(
	`IS_OB_BOR_LEVEL
(
OB_BOR
));

1488 
tmp1
 = (
FLASH
->
OBR
 & 0x00F00000) >> 16;

1491 
tmp
 = (
uöt32_t
)~(
OB_BOR
 | 
tmp1
)<<16;

1492 
tmp
 |(
OB_BOR
 | 
tmp1
);

1495 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1497 if(
°©us
 =
FLASH_COMPLETE
)

1500 
OB
->
USER
 = 
tmp
;

1504 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1507  
°©us
;

1508 
	}
}

1528 
FLASH_Sètus
 
	$FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
)

1530 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1531 
uöt32_t
 
tmp
 = 0, 
tmp1
 = 0;

1534 
	`as£π_∑øm
(
	`IS_OB_BOOT_BANK
(
OB_BOOT
));

1537 
tmp1
 = (
FLASH
->
OBR
 & 0x007F0000) >> 16;

1540 
tmp
 = (
uöt32_t
)~(
OB_BOOT
 | 
tmp1
)<<16;

1541 
tmp
 |(
OB_BOOT
 | 
tmp1
);

1544 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1546 if(
°©us
 =
FLASH_COMPLETE
)

1549 
OB
->
USER
 = 
tmp
;

1553 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

1556  
°©us
;

1557 
	}
}

1564 
uöt8_t
 
	$FLASH_OB_GëU£r
()

1567  (
uöt8_t
)(
FLASH
->
OBR
 >> 20);

1568 
	}
}

1575 
uöt32_t
 
	$FLASH_OB_GëWRP
()

1578  (
uöt32_t
)(
FLASH
->
WRPR
);

1579 
	}
}

1588 
uöt32_t
 
	$FLASH_OB_GëWRP1
()

1591  (
uöt32_t
)(
FLASH
->
WRPR1
);

1592 
	}
}

1600 
uöt32_t
 
	$FLASH_OB_GëWRP2
()

1603  (
uöt32_t
)(
FLASH
->
WRPR2
);

1604 
	}
}

1611 
FœgSètus
 
	$FLASH_OB_GëRDP
()

1613 
FœgSètus
 
ªad°©us
 = 
RESET
;

1615 i‡((
uöt8_t
)(
FLASH
->
OBR
Ë!(uöt8_t)
OB_RDP_Levñ_0
)

1617 
ªad°©us
 = 
SET
;

1621 
ªad°©us
 = 
RESET
;

1623  
ªad°©us
;

1624 
	}
}

1632 
FœgSètus
 
	$FLASH_OB_GëSPRMOD
()

1634 
FœgSètus
 
ªad°©us
 = 
RESET
;

1635 
uöt16_t
 
tmp
 = 0;

1638 
tmp
 = (
uöt16_t
)(
FLASH
->
OBR
 & (uint16_t)(0x0100));

1640 i‡(
tmp
 !(
uöt16_t
)0x0000)

1642 
ªad°©us
 = 
SET
;

1646 
ªad°©us
 = 
RESET
;

1648  
ªad°©us
;

1649 
	}
}

1656 
uöt8_t
 
	$FLASH_OB_GëBOR
()

1659  (
uöt8_t
)((
FLASH
->
OBR
 & (
uöt32_t
)0x000F0000) >> 16);

1660 
	}
}

1687 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1690 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1691 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1693 if(
NewSèã
 !
DISABLE
)

1696 
FLASH
->
PECR
 |
FLASH_IT
;

1701 
FLASH
->
PECR
 &~(
uöt32_t
)
FLASH_IT
;

1703 
	}
}

1721 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1723 
FœgSètus
 
bô°©us
 = 
RESET
;

1726 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
));

1728 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1730 
bô°©us
 = 
SET
;

1734 
bô°©us
 = 
RESET
;

1737  
bô°©us
;

1738 
	}
}

1753 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1756 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
));

1759 
FLASH
->
SR
 = 
FLASH_FLAG
;

1760 
	}
}

1768 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1770 
FLASH_Sètus
 
FLASH°©us
 = 
FLASH_COMPLETE
;

1772 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1774 
FLASH°©us
 = 
FLASH_BUSY
;

1778 if((
FLASH
->
SR
 & (
uöt32_t
)
FLASH_FLAG_WRPERR
)!= (uint32_t)0x00)

1780 
FLASH°©us
 = 
FLASH_ERROR_WRP
;

1784 if((
FLASH
->
SR
 & (
uöt32_t
)0x1E00) != (uint32_t)0x00)

1786 
FLASH°©us
 = 
FLASH_ERROR_PROGRAM
;

1790 
FLASH°©us
 = 
FLASH_COMPLETE
;

1795  
FLASH°©us
;

1796 
	}
}

1805 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

1807 
__IO
 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1810 
°©us
 = 
	`FLASH_GëSètus
();

1813 (
°©us
 =
FLASH_BUSY
Ë&& (
Timeout
 != 0x00))

1815 
°©us
 = 
	`FLASH_GëSètus
();

1816 
Timeout
--;

1819 if(
Timeout
 == 0x00 )

1821 
°©us
 = 
FLASH_TIMEOUT
;

1824  
°©us
;

1825 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_flash_ramfunc.c

60 
	~"°m32l1xx_Êash.h
"

76 
__RAM_FUNC
 
GëSètus
();

77 
__RAM_FUNC
 
WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

91 #i‡
deföed
 ( 
__TASKING__
 )

92 #¥agm®
£˘i⁄_code_öô
 
⁄


102 
__RAM_FUNC
 
	$FLASH_RUNPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

104 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

106 i‡(
NewSèã
 !
DISABLE
)

109 
FLASH
->
PDKEYR
 = 
FLASH_PDKEY1
;

110 
FLASH
->
PDKEYR
 = 
FLASH_PDKEY2
;

113 
FLASH
->
ACR
 |(
uöt32_t
)
FLASH_ACR_RUN_PD
;

115 if((
FLASH
->
ACR
 & 
FLASH_ACR_RUN_PD
) != FLASH_ACR_RUN_PD)

117 
°©us
 = 
FLASH_ERROR_PROGRAM
;

123 
FLASH
->
ACR
 &(
uöt32_t
)(~(uöt32_t)
FLASH_ACR_RUN_PD
);

127  
°©us
;

128 
	}
}

159 
FLASH_Sètus
 
	$FLASH_Eø£P¨ÆÀlPage
(
uöt32_t
 
Page_Addªss1
, uöt32_à
Page_Addªss2
)

161 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

164 
°©us
 = 
	`WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

166 if(
°©us
 =
FLASH_COMPLETE
)

171 
FLASH
->
PECR
 |
FLASH_PECR_PARALLBANK
;

174 
FLASH
->
PECR
 |
FLASH_PECR_ERASE
;

177 
FLASH
->
PECR
 |
FLASH_PECR_PROG
;

180 *(
__IO
 
uöt32_t
 *)
Page_Addªss1
 = 0x00000000;

182 *(
__IO
 
uöt32_t
 *)
Page_Addªss2
 = 0x00000000;

185 
°©us
 = 
	`WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

188 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_PROG
);

189 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_ERASE
);

190 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_PARALLBANK
);

193  
°©us
;

194 
	}
}

221 
__RAM_FUNC
 
	$FLASH_ProgømHÆfPage
(
uöt32_t
 
Addªss
, uöt32_t* 
pBuf„r
)

223 
uöt32_t
 
cou¡
 = 0;

225 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

230 
SCnSCB
->
ACTLR
 |
SCnSCB_ACTLR_DISMCYCINT_Msk
;

233 
°©us
 = 
	`WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

235 if(
°©us
 =
FLASH_COMPLETE
)

239 
FLASH
->
PECR
 |
FLASH_PECR_FPRG
;

240 
FLASH
->
PECR
 |
FLASH_PECR_PROG
;

243 
cou¡
 < 32)

245 *(
__IO
 
uöt32_t
*Ë(
Addªss
 + (4 * 
cou¡
)Ë*(
pBuf„r
++);

246 
cou¡
 ++;

249 
°©us
 = 
	`WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

252 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_PROG
);

253 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_FPRG
);

256 
SCnSCB
->
ACTLR
 &~
SCnSCB_ACTLR_DISMCYCINT_Msk
;

259  
°©us
;

260 
	}
}

293 
__RAM_FUNC
 
	$FLASH_ProgømP¨ÆÀlHÆfPage
(
uöt32_t
 
Addªss1
, uöt32_t* 
pBuf„r1
, uöt32_à
Addªss2
, uöt32_t* 
pBuf„r2
)

295 
uöt32_t
 
cou¡
 = 0;

297 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

302 
SCnSCB
->
ACTLR
 |
SCnSCB_ACTLR_DISMCYCINT_Msk
;

305 
°©us
 = 
	`WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

307 if(
°©us
 =
FLASH_COMPLETE
)

311 
FLASH
->
PECR
 |
FLASH_PECR_PARALLBANK
;

312 
FLASH
->
PECR
 |
FLASH_PECR_FPRG
;

313 
FLASH
->
PECR
 |
FLASH_PECR_PROG
;

316 
cou¡
 < 32)

318 *(
__IO
 
uöt32_t
*Ë(
Addªss1
 + (4 * 
cou¡
)Ë*(
pBuf„r1
++);

319 
cou¡
 ++;

321 
cou¡
 = 0;

323 
cou¡
 < 32)

325 *(
__IO
 
uöt32_t
*Ë(
Addªss2
 + (4 * 
cou¡
)Ë*(
pBuf„r2
++);

326 
cou¡
 ++;

329 
°©us
 = 
	`WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

332 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_PROG
);

333 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_FPRG
);

334 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_PARALLBANK
);

337 
SCnSCB
->
ACTLR
 &~
SCnSCB_ACTLR_DISMCYCINT_Msk
;

340  
°©us
;

341 
	}
}

372 
__RAM_FUNC
 
	$DATA_EEPROM_Eø£DoubÀW‹d
(
uöt32_t
 
Addªss
)

374 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

379 
SCnSCB
->
ACTLR
 |
SCnSCB_ACTLR_DISMCYCINT_Msk
;

382 
°©us
 = 
	`WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

384 if(
°©us
 =
FLASH_COMPLETE
)

388 
FLASH
->
PECR
 |
FLASH_PECR_ERASE
;

391 
FLASH
->
PECR
 |
FLASH_PECR_DATA
;

394 *(
__IO
 
uöt32_t
 *)
Addªss
 = 0x00000000;

395 
Addªss
 += 4;

396 *(
__IO
 
uöt32_t
 *)
Addªss
 = 0x00000000;

399 
°©us
 = 
	`WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

402 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_ERASE
);

403 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_DATA
);

406 
SCnSCB
->
ACTLR
 &~
SCnSCB_ACTLR_DISMCYCINT_Msk
;

409  
°©us
;

410 
	}
}

431 
__RAM_FUNC
 
	$DATA_EEPROM_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
)

433 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

438 
SCnSCB
->
ACTLR
 |
SCnSCB_ACTLR_DISMCYCINT_Msk
;

441 
°©us
 = 
	`WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

443 if(
°©us
 =
FLASH_COMPLETE
)

446 
FLASH
->
PECR
 |
FLASH_PECR_FPRG
;

447 
FLASH
->
PECR
 |
FLASH_PECR_DATA
;

450 *(
__IO
 
uöt32_t
 *)
Addªss
 = (uöt32_tË
D©a
;

451 
Addªss
 += 4;

452 *(
__IO
 
uöt32_t
 *)
Addªss
 = (uöt32_tË(
D©a
 >> 32);

455 
°©us
 = 
	`WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

458 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_FPRG
);

459 
FLASH
->
PECR
 &(
uöt32_t
)(~
FLASH_PECR_DATA
);

462 
SCnSCB
->
ACTLR
 &~
SCnSCB_ACTLR_DISMCYCINT_Msk
;

465  
°©us
;

466 
	}
}

478 
__RAM_FUNC
 
	$GëSètus
()

480 
FLASH_Sètus
 
FLASH°©us
 = 
FLASH_COMPLETE
;

482 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

484 
FLASH°©us
 = 
FLASH_BUSY
;

488 if((
FLASH
->
SR
 & (
uöt32_t
)
FLASH_FLAG_WRPERR
)!= (uint32_t)0x00)

490 
FLASH°©us
 = 
FLASH_ERROR_WRP
;

494 if((
FLASH
->
SR
 & (
uöt32_t
)0x1E00) != (uint32_t)0x00)

496 
FLASH°©us
 = 
FLASH_ERROR_PROGRAM
;

500 
FLASH°©us
 = 
FLASH_COMPLETE
;

505  
FLASH°©us
;

506 
	}
}

515 
__RAM_FUNC
 
	$WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

517 
__IO
 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

520 
°©us
 = 
	`GëSètus
();

523 (
°©us
 =
FLASH_BUSY
Ë&& (
Timeout
 != 0x00))

525 
°©us
 = 
	`GëSètus
();

526 
Timeout
--;

529 if(
Timeout
 == 0x00 )

531 
°©us
 = 
FLASH_TIMEOUT
;

534  
°©us
;

535 
	}
}

537 #i‡
deföed
 ( 
__TASKING__
 )

538 #¥agm®
£˘i⁄_code_öô
 
ª°‹e


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_fsmc.c

33 
	~"°m32l1xx_fsmc.h
"

34 
	~"°m32l1xx_rcc.h
"

102 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

105 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

108 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

110 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

115 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

117 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

118 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

119 
	}
}

129 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

132 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

133 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

134 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

135 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

136 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

137 
	`as£π_∑øm
(
	`IS_FSMC_ASYNWAIT
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
));

138 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

139 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

140 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

141 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

142 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

143 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

144 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

145 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

146 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

147 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

148 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

149 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

150 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

151 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

154 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

155 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

156 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

157 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

158 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

159 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 |

160 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

161 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

162 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

163 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

164 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

165 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

166 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

168 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

170 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
FSMC_BCR1_FACCEN
;

174 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

175 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

176 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

177 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

178 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

179 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

180 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

181 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

185 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

187 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

188 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

189 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

190 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

191 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

192 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

193 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

194 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

195 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

196 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

197 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

198 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

199 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

203 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

205 
	}
}

213 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

216 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

217 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

218 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

219 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

220 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

221 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 = 
FSMC_Asynchr⁄ousWaô_DißbÀ
;

222 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

223 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

224 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

225 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

226 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

227 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

228 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

229 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

230 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

231 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

232 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

233 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

234 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

235 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

236 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

237 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

238 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

239 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

240 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

241 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

242 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

243 
	}
}

256 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

258 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

259 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

261 i‡(
NewSèã
 !
DISABLE
)

264 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
FSMC_BCR1_MBKEN
;

269 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &(
uöt32_t
)(~
FSMC_BCR1_MBKEN
);

271 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_gpio.c

76 
	~"°m32l1xx_gpio.h
"

77 
	~"°m32l1xx_rcc.h
"

119 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

122 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

124 if(
GPIOx
 =
GPIOA
)

126 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOA
, 
ENABLE
);

127 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOA
, 
DISABLE
);

129 if(
GPIOx
 =
GPIOB
)

131 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOB
, 
ENABLE
);

132 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOB
, 
DISABLE
);

134 if(
GPIOx
 =
GPIOC
)

136 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOC
, 
ENABLE
);

137 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOC
, 
DISABLE
);

139 if(
GPIOx
 =
GPIOD
)

141 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOD
, 
ENABLE
);

142 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOD
, 
DISABLE
);

144 if(
GPIOx
 =
GPIOE
)

146 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOE
, 
ENABLE
);

147 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOE
, 
DISABLE
);

149 if(
GPIOx
 =
GPIOF
)

151 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOF
, 
ENABLE
);

152 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOF
, 
DISABLE
);

154 if(
GPIOx
 =
GPIOG
)

156 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOG
, 
ENABLE
);

157 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOG
, 
DISABLE
);

161 if(
GPIOx
 =
GPIOH
)

163 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOH
, 
ENABLE
);

164 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOH
, 
DISABLE
);

167 
	}
}

179 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

181 
uöt32_t
 
pöpos
 = 0x00, 
pos
 = 0x00 , 
cuºíçö
 = 0x00;

184 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

185 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

186 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

187 
	`as£π_∑øm
(
	`IS_GPIO_PUPD
(
GPIO_InôSåu˘
->
GPIO_PuPd
));

191 
pöpos
 = 0x00;Öinpos < 0x10;Öinpos++)

193 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

196 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

198 i‡(
cuºíçö
 =
pos
)

200 
GPIOx
->
MODER
 &~(
GPIO_MODER_MODER0
 << (
pöpos
 * 2));

202 
GPIOx
->
MODER
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
Ë<< (
pöpos
 * 2));

204 i‡((
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_OUT
Ë|| (GPIO_InôSåu˘->GPIO_Modê=
GPIO_Mode_AF
))

207 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

210 
GPIOx
->
OSPEEDR
 &~(
GPIO_OSPEEDER_OSPEEDR0
 << (
pöpos
 * 2));

211 
GPIOx
->
OSPEEDR
 |((
uöt32_t
)(
GPIO_InôSåu˘
->
GPIO_S≥ed
Ë<< (
pöpos
 * 2));

214 
	`as£π_∑øm
(
	`IS_GPIO_OTYPE
(
GPIO_InôSåu˘
->
GPIO_OTy≥
));

217 
GPIOx
->
OTYPER
 &~((
GPIO_OTYPER_OT_0
Ë<< ((
uöt16_t
)
pöpos
)) ;

218 
GPIOx
->
OTYPER
 |(
uöt16_t
)(((uöt16_t)
GPIO_InôSåu˘
->
GPIO_OTy≥
Ë<< ((uöt16_t)
pöpos
));

222 
GPIOx
->
PUPDR
 &~(
GPIO_PUPDR_PUPDR0
 << ((
uöt16_t
)
pöpos
 * 2));

223 
GPIOx
->
PUPDR
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_PuPd
Ë<< (
pöpos
 * 2));

226 
	}
}

234 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

237 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

238 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN
;

239 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_400KHz
;

240 
GPIO_InôSåu˘
->
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

241 
GPIO_InôSåu˘
->
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

242 
	}
}

255 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

257 
__IO
 
uöt32_t
 
tmp
 = 0x00010000;

260 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

261 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

263 
tmp
 |
GPIO_Pö
;

265 
GPIOx
->
LCKR
 = 
tmp
;

267 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

269 
GPIOx
->
LCKR
 = 
tmp
;

271 
tmp
 = 
GPIOx
->
LCKR
;

273 
tmp
 = 
GPIOx
->
LCKR
;

274 
	}
}

299 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

301 
uöt8_t
 
bô°©us
 = 0x00;

304 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

305 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

307 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

309 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

313 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

315  
bô°©us
;

316 
	}
}

323 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

326 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

328  ((
uöt16_t
)
GPIOx
->
IDR
);

329 
	}
}

338 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

340 
uöt8_t
 
bô°©us
 = 0x00;

343 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

344 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

346 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

348 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

352 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

354  
bô°©us
;

355 
	}
}

362 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

365 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

367  ((
uöt16_t
)
GPIOx
->
ODR
);

368 
	}
}

380 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

383 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

384 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

386 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

387 
	}
}

399 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

402 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

403 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

405 
GPIOx
->
BSRRH
 = 
GPIO_Pö
;

406 
	}
}

419 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

422 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

423 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

424 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

426 i‡(
BôVÆ
 !
Bô_RESET
)

428 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

432 
GPIOx
->
BSRRH
 = 
GPIO_Pö
 ;

434 
	}
}

443 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

446 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

448 
GPIOx
->
ODR
 = 
P‹tVÆ
;

449 
	}
}

457 
	$GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

460 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

462 
GPIOx
->
ODR
 ^
GPIO_Pö
;

463 
	}
}

526 
	$GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
)

528 
uöt32_t
 
ãmp
 = 0x00;

529 
uöt32_t
 
ãmp_2
 = 0x00;

532 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

533 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

534 
	`as£π_∑øm
(
	`IS_GPIO_AF
(
GPIO_AF
));

536 
ãmp
 = ((
uöt32_t
)(
GPIO_AF
Ë<< ((uöt32_t)((uöt32_t)
GPIO_PöSour˚
 & (uint32_t)0x07) * 4)) ;

537 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] &~((
uöt32_t
)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;

538 
ãmp_2
 = 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] | 
ãmp
;

539 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] = 
ãmp_2
;

540 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_i2c.c

78 
	~"°m32l1xx_i2c.h
"

79 
	~"°m32l1xx_rcc.h
"

94 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0xFBF5Ë

	)

95 
	#FLAG_MASK
 ((
uöt32_t
)0x00FFFFFFË

	)

96 
	#ITEN_MASK
 ((
uöt32_t
)0x07000000Ë

	)

124 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

127 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

129 i‡(
I2Cx
 =
I2C1
)

132 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

134 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

139 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

141 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

143 
	}
}

155 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

157 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

158 
uöt16_t
 
ªsu…
 = 0x04;

159 
uöt32_t
 
p˛k1
 = 8000000;

160 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

162 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

163 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

164 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

165 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

166 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

167 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

168 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

172 
tm¥eg
 = 
I2Cx
->
CR2
;

174 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_FREQ
);

176 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

177 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

179 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

180 
tm¥eg
 |
‰eqønge
;

182 
I2Cx
->
CR2
 = 
tm¥eg
;

186 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PE
);

189 
tm¥eg
 = 0;

192 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

195 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

197 i‡(
ªsu…
 < 0x04)

200 
ªsu…
 = 0x04;

203 
tm¥eg
 |
ªsu…
;

205 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

212 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

215 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

220 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

222 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

226 i‡((
ªsu…
 & 
I2C_CCR_CCR
) == 0)

229 
ªsu…
 |(
uöt16_t
)0x0001;

232 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
I2C_CCR_FS
);

234 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

238 
I2Cx
->
CCR
 = 
tm¥eg
;

240 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

244 
tm¥eg
 = 
I2Cx
->
CR1
;

246 
tm¥eg
 &
CR1_CLEAR_MASK
;

250 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

252 
I2Cx
->
CR1
 = 
tm¥eg
;

256 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

257 
	}
}

264 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

268 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

270 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

272 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

274 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

276 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

278 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

279 
	}
}

288 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

291 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

292 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

293 i‡(
NewSèã
 !
DISABLE
)

296 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

301 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PE
);

303 
	}
}

312 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

315 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

316 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

317 i‡(
NewSèã
 !
DISABLE
)

320 
I2Cx
->
CR1
 |
I2C_CR1_START
;

325 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_START
);

327 
	}
}

336 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

339 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

340 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

341 i‡(
NewSèã
 !
DISABLE
)

344 
I2Cx
->
CR1
 |
I2C_CR1_STOP
;

349 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_STOP
);

351 
	}
}

360 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

363 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

364 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

365 i‡(
NewSèã
 !
DISABLE
)

368 
I2Cx
->
CR1
 |
I2C_CR1_ACK
;

373 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ACK
);

375 
	}
}

383 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

385 
uöt16_t
 
tm¥eg
 = 0;

388 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

391 
tm¥eg
 = 
I2Cx
->
OAR2
;

394 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_OAR2_ADD2
);

397 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

400 
I2Cx
->
OAR2
 = 
tm¥eg
;

401 
	}
}

410 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

413 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

414 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

415 i‡(
NewSèã
 !
DISABLE
)

418 
I2Cx
->
OAR2
 |
I2C_OAR2_ENDUAL
;

423 
I2Cx
->
OAR2
 &(
uöt16_t
)~((uöt16_t)
I2C_OAR2_ENDUAL
);

425 
	}
}

434 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

437 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

438 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

439 i‡(
NewSèã
 !
DISABLE
)

442 
I2Cx
->
CR1
 |
I2C_CR1_ENGC
;

447 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENGC
);

449 
	}
}

458 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

461 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

462 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

463 i‡(
NewSèã
 !
DISABLE
)

466 
I2Cx
->
CR1
 |
I2C_CR1_SWRST
;

471 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_SWRST
);

473 
	}
}

484 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

487 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

488 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

489 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

492 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

497 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

499 
	}
}

508 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

511 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

512 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

513 i‡(
NewSèã
 !
DISABLE
)

516 
I2Cx
->
CR1
 |
I2C_CR1_ENARP
;

521 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENARP
);

523 
	}
}

532 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

535 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

536 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

537 i‡(
NewSèã
 =
DISABLE
)

540 
I2Cx
->
CR1
 |
I2C_CR1_NOSTRETCH
;

545 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_NOSTRETCH
);

547 
	}
}

558 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

561 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

562 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

563 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

566 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

571 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

573 
	}
}

585 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

588 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

589 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

591 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

594 
Addªss
 |
I2C_OAR1_ADD0
;

599 
Addªss
 &(
uöt8_t
)~((uöt8_t)
I2C_OAR1_ADD0
);

602 
I2Cx
->
DR
 = 
Addªss
;

603 
	}
}

627 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

630 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

632 
I2Cx
->
DR
 = 
D©a
;

633 
	}
}

640 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

643 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

645  (
uöt8_t
)
I2Cx
->
DR
;

646 
	}
}

668 
	$I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
)

671 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

672 
	`as£π_∑øm
(
	`IS_I2C_NACK_POSITION
(
I2C_NACKPosôi⁄
));

675 i‡(
I2C_NACKPosôi⁄
 =
I2C_NACKPosôi⁄_Next
)

678 
I2Cx
->
CR1
 |
I2C_NACKPosôi⁄_Next
;

683 
I2Cx
->
CR1
 &
I2C_NACKPosôi⁄_Cuºít
;

685 
	}
}

710 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

713 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

714 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

715 i‡(
NewSèã
 !
DISABLE
)

718 
I2Cx
->
CR1
 |
I2C_CR1_PEC
;

723 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PEC
);

725 
	}
}

739 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

742 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

743 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

744 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

747 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

752 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

754 
	}
}

763 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

766 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

767 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

768 i‡(
NewSèã
 !
DISABLE
)

771 
I2Cx
->
CR1
 |
I2C_CR1_ENPEC
;

776 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENPEC
);

778 
	}
}

785 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

788 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

790  ((
I2Cx
->
SR2
) >> 8);

791 
	}
}

817 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

820 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

821 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

822 i‡(
NewSèã
 !
DISABLE
)

825 
I2Cx
->
CR2
 |
I2C_CR2_DMAEN
;

830 
I2Cx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_DMAEN
);

832 
	}
}

841 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

844 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

845 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

846 i‡(
NewSèã
 !
DISABLE
)

849 
I2Cx
->
CR2
 |
I2C_CR2_LAST
;

854 
I2Cx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_LAST
);

856 
	}
}

974 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

976 
__IO
 
uöt32_t
 
tmp
 = 0;

979 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

980 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

982 
tmp
 = (
uöt32_t
Ë
I2Cx
;

983 
tmp
 +
I2C_Regi°î
;

986  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

987 
	}
}

1001 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1004 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1005 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1006 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

1008 i‡(
NewSèã
 !
DISABLE
)

1011 
I2Cx
->
CR2
 |
I2C_IT
;

1016 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

1018 
	}
}

1058 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

1060 
uöt32_t
 
œ°evít
 = 0;

1061 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1062 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1065 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1066 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

1069 
Êag1
 = 
I2Cx
->
SR1
;

1070 
Êag2
 = 
I2Cx
->
SR2
;

1071 
Êag2
 = flag2 << 16;

1074 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_MASK
;

1077 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1080 
°©us
 = 
SUCCESS
;

1085 
°©us
 = 
ERROR
;

1088  
°©us
;

1089 
	}
}

1106 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1108 
uöt32_t
 
œ°evít
 = 0;

1109 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1112 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1115 
Êag1
 = 
I2Cx
->
SR1
;

1116 
Êag2
 = 
I2Cx
->
SR2
;

1117 
Êag2
 = flag2 << 16;

1120 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_MASK
;

1123  
œ°evít
;

1124 
	}
}

1161 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1163 
FœgSètus
 
bô°©us
 = 
RESET
;

1164 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1167 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1168 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1171 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1174 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1177 
I2C_FLAG
 &
FLAG_MASK
;

1179 if(
i2¸eg
 != 0)

1182 
i2cxba£
 += 0x14;

1187 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1189 
i2cxba£
 += 0x18;

1192 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1195 
bô°©us
 = 
SET
;

1200 
bô°©us
 = 
RESET
;

1204  
bô°©us
;

1205 
	}
}

1238 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1240 
uöt32_t
 
Êagpos
 = 0;

1242 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1243 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1245 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_MASK
;

1247 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1248 
	}
}

1272 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1274 
ITSètus
 
bô°©us
 = 
RESET
;

1275 
uöt32_t
 
íabÀ°©us
 = 0;

1278 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1279 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1282 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_MASK
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1285 
I2C_IT
 &
FLAG_MASK
;

1288 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1291 
bô°©us
 = 
SET
;

1296 
bô°©us
 = 
RESET
;

1299  
bô°©us
;

1300 
	}
}

1333 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1335 
uöt32_t
 
Êagpos
 = 0;

1337 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1338 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1340 
Êagpos
 = 
I2C_IT
 & 
FLAG_MASK
;

1342 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1343 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_iwdg.c

85 
	~"°m32l1xx_iwdg.h
"

100 
	#KR_KEY_RELOAD
 ((
uöt16_t
)0xAAAA)

	)

101 
	#KR_KEY_ENABLE
 ((
uöt16_t
)0xCCCC)

	)

132 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

135 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

136 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

137 
	}
}

152 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

155 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

156 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

157 
	}
}

165 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

168 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

169 
IWDG
->
RLR
 = 
Rñﬂd
;

170 
	}
}

178 
	$IWDG_RñﬂdCou¡î
()

180 
IWDG
->
KR
 = 
KR_KEY_RELOAD
;

181 
	}
}

204 
	$IWDG_E«bÀ
()

206 
IWDG
->
KR
 = 
KR_KEY_ENABLE
;

207 
	}
}

233 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

235 
FœgSètus
 
bô°©us
 = 
RESET
;

237 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

238 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

240 
bô°©us
 = 
SET
;

244 
bô°©us
 = 
RESET
;

247  
bô°©us
;

248 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_lcd.c

82 
	~"°m32l1xx_lcd.h
"

83 
	~"°m32l1xx_rcc.h
"

97 
	#LCD_OFFSET
 (
LCD_BASE
 - 
PERIPH_BASE
)

	)

102 
	#CR_OFFSET
 (
LCD_OFFSET
 + 0x00)

	)

103 
	#LCDEN_BôNumbî
 0x00

	)

104 
	#CR_LCDEN_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
LCDEN_BôNumbî
 * 4))

	)

107 
	#MUX_SEG_BôNumbî
 0x07

	)

108 
	#CR_MUX_SEG_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
MUX_SEG_BôNumbî
 * 4))

	)

114 
	#FCR_OFFSET
 (
LCD_OFFSET
 + 0x04)

	)

115 
	#HD_BôNumbî
 0x00

	)

116 
	#FCR_HD_BB
 (
PERIPH_BB_BASE
 + (
FCR_OFFSET
 * 32Ë+ (
HD_BôNumbî
 * 4))

	)

121 
	#SR_OFFSET
 (
LCD_OFFSET
 + 0x08)

	)

122 
	#UDR_BôNumbî
 0x02

	)

123 
	#SR_UDR_BB
 (
PERIPH_BB_BASE
 + (
SR_OFFSET
 * 32Ë+ (
UDR_BôNumbî
 * 4))

	)

125 
	#FCR_MASK
 ((
uöt32_t
)0xFC03FFFFË

	)

126 
	#CR_MASK
 ((
uöt32_t
)0xFFFFFF81Ë

	)

127 
	#PON_MASK
 ((
uöt32_t
)0xFFFFFF8FË

	)

128 
	#DEAD_MASK
 ((
uöt32_t
)0xFFFFFC7FË

	)

129 
	#BLINK_MASK
 ((
uöt32_t
)0xFFFC1FFFË

	)

130 
	#CONTRAST_MASK
 ((
uöt32_t
)0xFFFFE3FFË

	)

159 
	$LCD_DeInô
()

162 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_LCD
, 
ENABLE
);

164 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_LCD
, 
DISABLE
);

165 
	}
}

175 
	$LCD_Inô
(
LCD_InôTy≥Def
* 
LCD_InôSåu˘
)

178 
	`as£π_∑øm
(
	`IS_LCD_PRESCALER
(
LCD_InôSåu˘
->
LCD_PªsˇÀr
));

179 
	`as£π_∑øm
(
	`IS_LCD_DIVIDER
(
LCD_InôSåu˘
->
LCD_Dividî
));

180 
	`as£π_∑øm
(
	`IS_LCD_DUTY
(
LCD_InôSåu˘
->
LCD_Duty
));

181 
	`as£π_∑øm
(
	`IS_LCD_BIAS
(
LCD_InôSåu˘
->
LCD_Büs
));

182 
	`as£π_∑øm
(
	`IS_LCD_VOLTAGE_SOURCE
(
LCD_InôSåu˘
->
LCD_VﬁègeSour˚
));

184 
LCD
->
FCR
 &(
uöt32_t
)
FCR_MASK
;

185 
LCD
->
FCR
 |(
uöt32_t
)(
LCD_InôSåu˘
->
LCD_PªsˇÀr
 | LCD_InôSåu˘->
LCD_Dividî
);

187 
	`LCD_WaôF‹Synchro
();

189 
LCD
->
CR
 &(
uöt32_t
)
CR_MASK
;

190 
LCD
->
CR
 |(
uöt32_t
)(
LCD_InôSåu˘
->
LCD_Duty
 | LCD_InôSåu˘->
LCD_Büs
 | \

191 
LCD_InôSåu˘
->
LCD_VﬁègeSour˚
);

193 
	}
}

201 
	$LCD_Såu˘Inô
(
LCD_InôTy≥Def
* 
LCD_InôSåu˘
)

204 
LCD_InôSåu˘
->
LCD_PªsˇÀr
 = 
LCD_PªsˇÀr_1
;

206 
LCD_InôSåu˘
->
LCD_Dividî
 = 
LCD_Dividî_16
;

208 
LCD_InôSåu˘
->
LCD_Duty
 = 
LCD_Duty_Sètic
;

210 
LCD_InôSåu˘
->
LCD_Büs
 = 
LCD_Büs_1_4
;

212 
LCD_InôSåu˘
->
LCD_VﬁègeSour˚
 = 
LCD_VﬁègeSour˚_I¡î«l
;

213 
	}
}

221 
	$LCD_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

223 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

226 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

228 *(
__IO
 
uöt32_t
 *Ë
CR_LCDEN_BB
 = (uöt32_t)
NewSèã
;

229 
	}
}

237 
	$LCD_WaôF‹Synchro
()

240 (
LCD
->
SR
 & 
LCD_FLAG_FCRSF
Ë=(
uöt32_t
)
RESET
)

243 
	}
}

256 
	$LCD_HighDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

259 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

261 *(
__IO
 
uöt32_t
 *Ë
FCR_HD_BB
 = (uöt32_t)
NewSèã
;

262 
	}
}

271 
	$LCD_MuxSegmítCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

274 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

276 *(
__IO
 
uöt32_t
 *Ë
CR_MUX_SEG_BB
 = (uöt32_t)
NewSèã
;

277 
	}
}

294 
	$LCD_Pul£OnDuøti⁄C⁄fig
(
uöt32_t
 
LCD_Pul£OnDuøti⁄
)

297 
	`as£π_∑øm
(
	`IS_LCD_PULSE_ON_DURATION
(
LCD_Pul£OnDuøti⁄
));

299 
LCD
->
FCR
 &(
uöt32_t
)
PON_MASK
;

300 
LCD
->
FCR
 |(
uöt32_t
)(
LCD_Pul£OnDuøti⁄
);

301 
	}
}

317 
	$LCD_DódTimeC⁄fig
(
uöt32_t
 
LCD_DódTime
)

320 
	`as£π_∑øm
(
	`IS_LCD_DEAD_TIME
(
LCD_DódTime
));

322 
LCD
->
FCR
 &(
uöt32_t
)
DEAD_MASK
;

323 
LCD
->
FCR
 |(
uöt32_t
)(
LCD_DódTime
);

324 
	}
}

348 
	$LCD_BlökC⁄fig
(
uöt32_t
 
LCD_BlökMode
, uöt32_à
LCD_BlökFªquícy
)

351 
	`as£π_∑øm
(
	`IS_LCD_BLINK_MODE
(
LCD_BlökMode
));

352 
	`as£π_∑øm
(
	`IS_LCD_BLINK_FREQUENCY
(
LCD_BlökFªquícy
));

354 
LCD
->
FCR
 &(
uöt32_t
)
BLINK_MASK
;

355 
LCD
->
FCR
 |(
uöt32_t
)(
LCD_BlökMode
 | 
LCD_BlökFªquícy
);

356 
	}
}

372 
	$LCD_C⁄åa°C⁄fig
(
uöt32_t
 
LCD_C⁄åa°
)

375 
	`as£π_∑øm
(
	`IS_LCD_CONTRAST
(
LCD_C⁄åa°
));

377 
LCD
->
FCR
 &(
uöt32_t
)
CONTRAST_MASK
;

378 
LCD
->
FCR
 |(
uöt32_t
)(
LCD_C⁄åa°
);

379 
	}
}

444 
	$LCD_Wrôe
(
uöt32_t
 
LCD_RAMRegi°î
, uöt32_à
LCD_D©a
)

447 
	`as£π_∑øm
(
	`IS_LCD_RAM_REGISTER
(
LCD_RAMRegi°î
));

450 
LCD
->
RAM
[
LCD_RAMRegi°î
] = (
uöt32_t
)
LCD_D©a
;

451 
	}
}

467 
	$LCD_Upd©eDi•œyReque°
()

469 *(
__IO
 
uöt32_t
 *Ë
SR_UDR_BB
 = (uint32_t)0x01;

470 
	}
}

498 
	$LCD_ITC⁄fig
(
uöt32_t
 
LCD_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

501 
	`as£π_∑øm
(
	`IS_LCD_IT
(
LCD_IT
));

502 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

504 i‡(
NewSèã
 !
DISABLE
)

506 
LCD
->
FCR
 |
LCD_IT
;

510 
LCD
->
FCR
 &(
uöt32_t
)~
LCD_IT
;

512 
	}
}

534 
FœgSètus
 
	$LCD_GëFœgSètus
(
uöt32_t
 
LCD_FLAG
)

536 
FœgSètus
 
bô°©us
 = 
RESET
;

539 
	`as£π_∑øm
(
	`IS_LCD_GET_FLAG
(
LCD_FLAG
));

541 i‡((
LCD
->
SR
 & 
LCD_FLAG
Ë!(
uöt32_t
)
RESET
)

543 
bô°©us
 = 
SET
;

547 
bô°©us
 = 
RESET
;

549  
bô°©us
;

550 
	}
}

560 
	$LCD_CÀ¨Fœg
(
uöt32_t
 
LCD_FLAG
)

563 
	`as£π_∑øm
(
	`IS_LCD_CLEAR_FLAG
(
LCD_FLAG
));

566 
LCD
->
CLR
 = (
uöt32_t
)
LCD_FLAG
;

567 
	}
}

580 
ITSètus
 
	$LCD_GëITSètus
(
uöt32_t
 
LCD_IT
)

582 
ITSètus
 
bô°©us
 = 
RESET
;

585 
	`as£π_∑øm
(
	`IS_LCD_GET_IT
(
LCD_IT
));

587 i‡((
LCD
->
SR
 & 
LCD_IT
Ë!(
uöt16_t
)
RESET
)

589 
bô°©us
 = 
SET
;

593 
bô°©us
 = 
RESET
;

596 i‡(((
LCD
->
FCR
 & 
LCD_IT
Ë!(
uöt16_t
)
RESET
Ë&& (
bô°©us
 !(
uöt32_t
)RESET))

598 
bô°©us
 = 
SET
;

602 
bô°©us
 = 
RESET
;

604  
bô°©us
;

605 
	}
}

615 
	$LCD_CÀ¨ITPídögBô
(
uöt32_t
 
LCD_IT
)

618 
	`as£π_∑øm
(
	`IS_LCD_IT
(
LCD_IT
));

621 
LCD
->
CLR
 = (
uöt32_t
)
LCD_IT
;

622 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_opamp.c

65 
	~"°m32l1xx_›amp.h
"

106 
	$OPAMP_DeInô
()

109 
OPAMP
->
CSR
 = 0x00010101;

111 
OPAMP
->
OTR
 = (
uöt32_t
)(* (uöt32_t*)
FLASH_R_BASE
 + 0x00000038);

113 
OPAMP
->
LPOTR
 = (
uöt32_t
)(* (uöt32_t*)
FLASH_R_BASE
 + 0x0000003C);

114 
	}
}

147 
	$OPAMP_SwôchCmd
(
uöt32_t
 
OPAMP_OPAMPxSwôchy
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

150 
	`as£π_∑øm
(
	`IS_OPAMP_SWITCH
(
OPAMP_OPAMPxSwôchy
));

151 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

153 i‡(
NewSèã
 !
DISABLE
)

156 
OPAMP
->
CSR
 |(
uöt32_t
Ë
OPAMP_OPAMPxSwôchy
;

161 
OPAMP
->
CSR
 &(~(
uöt32_t
)
OPAMP_OPAMPxSwôchy
);

163 
	}
}

176 
	$OPAMP_Cmd
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

179 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

180 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

182 i‡(
NewSèã
 !
DISABLE
)

185 
OPAMP
->
CSR
 &(~(
uöt32_t
Ë
OPAMP_Sñe˘i⁄
);

190 
OPAMP
->
CSR
 |(
uöt32_t
Ë
OPAMP_Sñe˘i⁄
;

192 
	}
}

205 
	$OPAMP_LowPowîCmd
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

208 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

209 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

211 i‡(
NewSèã
 !
DISABLE
)

214 
OPAMP
->
CSR
 |(
uöt32_t
Ë(
OPAMP_Sñe˘i⁄
 << 7);

219 
OPAMP
->
CSR
 &(~(
uöt32_t
Ë(
OPAMP_Sñe˘i⁄
 << 7));

221 
	}
}

232 
	$OPAMP_PowîR™geSñe˘
(
uöt32_t
 
OPAMP_PowîR™ge
)

235 
	`as£π_∑øm
(
	`IS_OPAMP_RANGE
(
OPAMP_PowîR™ge
));

238 
OPAMP
->
CSR
 &(~(
uöt32_t
Ë(
OPAMP_CSR_AOP_RANGE
));

241 
OPAMP
->
CSR
 |
OPAMP_PowîR™ge
;

242 
	}
}

273 
	$OPAMP_Off£tTrimmögModeSñe˘
(
uöt32_t
 
OPAMP_Trimmög
)

276 
	`as£π_∑øm
(
	`IS_OPAMP_TRIMMING
(
OPAMP_Trimmög
));

279 
OPAMP
->
CSR
 &(~(
uöt32_t
Ë(
OPAMP_OTR_OT_USER
));

282 
OPAMP
->
CSR
 |
OPAMP_Trimmög
;

284 
	}
}

301 
	$OPAMP_Off£tTrimC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, uöt32_à
OPAMP_I≈ut
, uöt32_à
OPAMP_TrimVÆue
)

303 
uöt32_t
 
tm¥eg
 = 0;

306 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

307 
	`as£π_∑øm
(
	`IS_OPAMP_INPUT
(
OPAMP_I≈ut
));

308 
	`as£π_∑øm
(
	`IS_OPAMP_TRIMMINGVALUE
(
OPAMP_TrimVÆue
));

311 
tm¥eg
 = 
OPAMP
->
OTR
;

313 if(
OPAMP_Sñe˘i⁄
 =
OPAMP_Sñe˘i⁄_OPAMP1
)

316 
tm¥eg
 &(
uöt32_t
)~(
OPAMP_CSR_OPA1CAL_L
 | 
OPAMP_CSR_OPA1CAL_H
);

318 
tm¥eg
 |
OPAMP_I≈ut
;

320 if(
OPAMP_I≈ut
 =
OPAMP_I≈ut_PMOS
)

323 
tm¥eg
 &= (0xFFFFFFE0);

325 
tm¥eg
 |(
OPAMP_TrimVÆue
);

330 
tm¥eg
 &= (0xFFFFFC1F);

332 
tm¥eg
 |(
OPAMP_TrimVÆue
<<5);

335 i‡(
OPAMP_Sñe˘i⁄
 =
OPAMP_Sñe˘i⁄_OPAMP2
)

338 
tm¥eg
 &(
uöt32_t
)~(
OPAMP_CSR_OPA2CAL_L
 | 
OPAMP_CSR_OPA2CAL_H
);

340 
tm¥eg
 |(
uöt32_t
)(
OPAMP_I≈ut
<<8);

342 if(
OPAMP_I≈ut
 =
OPAMP_I≈ut_PMOS
)

345 
tm¥eg
 &= (0xFFFF83FF);

347 
tm¥eg
 |(
OPAMP_TrimVÆue
<<10);

352 
tm¥eg
 &= (0xFFF07FFF);

354 
tm¥eg
 |(
OPAMP_TrimVÆue
<<15);

360 
tm¥eg
 &(
uöt32_t
)~(
OPAMP_CSR_OPA3CAL_L
 | 
OPAMP_CSR_OPA3CAL_H
);

362 
tm¥eg
 |(
uöt32_t
)(
OPAMP_I≈ut
<<16);

364 if(
OPAMP_I≈ut
 =
OPAMP_I≈ut_PMOS
)

367 
tm¥eg
 &= (0xFE0FFFFF);

369 
tm¥eg
 |(
OPAMP_TrimVÆue
<<20);

374 
tm¥eg
 &= (0xC1FFFFFF);

376 
tm¥eg
 |(
OPAMP_TrimVÆue
<<25);

381 
OPAMP
->
OTR
 = 
tm¥eg
;

382 
	}
}

399 
	$OPAMP_Off£tTrimLowPowîC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, uöt32_à
OPAMP_I≈ut
, uöt32_à
OPAMP_TrimVÆue
)

401 
uöt32_t
 
tm¥eg
 = 0;

404 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

405 
	`as£π_∑øm
(
	`IS_OPAMP_INPUT
(
OPAMP_I≈ut
));

406 
	`as£π_∑øm
(
	`IS_OPAMP_TRIMMINGVALUE
(
OPAMP_TrimVÆue
));

409 
tm¥eg
 = 
OPAMP
->
LPOTR
;

411 if(
OPAMP_Sñe˘i⁄
 =
OPAMP_Sñe˘i⁄_OPAMP1
)

414 
tm¥eg
 &(
uöt32_t
)~(
OPAMP_CSR_OPA1CAL_L
 | 
OPAMP_CSR_OPA1CAL_H
);

416 
tm¥eg
 |
OPAMP_I≈ut
;

418 if(
OPAMP_I≈ut
 =
OPAMP_I≈ut_PMOS
)

421 
tm¥eg
 &= (0xFFFFFFE0);

423 
tm¥eg
 |(
OPAMP_TrimVÆue
);

428 
tm¥eg
 &= (0xFFFFFC1F);

430 
tm¥eg
 |(
OPAMP_TrimVÆue
<<5);

433 i‡(
OPAMP_Sñe˘i⁄
 =
OPAMP_Sñe˘i⁄_OPAMP2
)

436 
tm¥eg
 &(
uöt32_t
)~(
OPAMP_CSR_OPA2CAL_L
 | 
OPAMP_CSR_OPA2CAL_H
);

438 
tm¥eg
 |(
uöt32_t
)(
OPAMP_I≈ut
<<8);

440 if(
OPAMP_I≈ut
 =
OPAMP_I≈ut_PMOS
)

443 
tm¥eg
 &= (0xFFFF83FF);

445 
tm¥eg
 |(
OPAMP_TrimVÆue
<<10);

450 
tm¥eg
 &= (0xFFF07FFF);

452 
tm¥eg
 |(
OPAMP_TrimVÆue
<<15);

458 
tm¥eg
 &(
uöt32_t
)~(
OPAMP_CSR_OPA3CAL_L
 | 
OPAMP_CSR_OPA3CAL_H
);

460 
tm¥eg
 |(
uöt32_t
)(
OPAMP_I≈ut
<<16);

462 if(
OPAMP_I≈ut
 =
OPAMP_I≈ut_PMOS
)

465 
tm¥eg
 &= (0xFE0FFFFF);

467 
tm¥eg
 |(
OPAMP_TrimVÆue
<<20);

472 
tm¥eg
 &= (0xC1FFFFFF);

474 
tm¥eg
 |(
OPAMP_TrimVÆue
<<25);

479 
OPAMP
->
LPOTR
 = 
tm¥eg
;

480 
	}
}

493 
FœgSètus
 
	$OPAMP_GëFœgSètus
(
uöt32_t
 
OPAMP_Sñe˘i⁄
)

495 
FœgSètus
 
bô°©us
 = 
RESET
;

496 
uöt32_t
 
tm¥eg
 = 0;

499 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

502 
tm¥eg
 = 
OPAMP
->
CSR
;

505 if(
OPAMP_Sñe˘i⁄
 =
OPAMP_Sñe˘i⁄_OPAMP1
)

508 i‡((
tm¥eg
 & 
OPAMP_CSR_OPA1CALOUT
Ë!(
uöt32_t
)
RESET
)

510 
bô°©us
 = 
SET
;

514 
bô°©us
 = 
RESET
;

518 if(
OPAMP_Sñe˘i⁄
 =
OPAMP_Sñe˘i⁄_OPAMP2
)

521 i‡((
tm¥eg
 & 
OPAMP_CSR_OPA2CALOUT
Ë!(
uöt32_t
)
RESET
)

523 
bô°©us
 = 
SET
;

527 
bô°©us
 = 
RESET
;

533 i‡((
tm¥eg
 & 
OPAMP_CSR_OPA3CALOUT
Ë!(
uöt32_t
)
RESET
)

535 
bô°©us
 = 
SET
;

539 
bô°©us
 = 
RESET
;

542  
bô°©us
;

543 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_pwr.c

38 
	~"°m32l1xx_pwr.h
"

39 
	~"°m32l1xx_rcc.h
"

53 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

58 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

59 
	#DBP_BôNumbî
 0x08

	)

60 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

63 
	#PVDE_BôNumbî
 0x04

	)

64 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

67 
	#ULP_BôNumbî
 0x09

	)

68 
	#CR_ULP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
ULP_BôNumbî
 * 4))

	)

71 
	#FWU_BôNumbî
 0x0A

	)

72 
	#CR_FWU_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
FWU_BôNumbî
 * 4))

	)

77 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

78 
	#EWUP_BôNumbî
 0x08

	)

79 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

84 
	#CR_DS_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

85 
	#CR_PLS_MASK
 ((
uöt32_t
)0xFFFFFF1F)

	)

86 
	#CR_VOS_MASK
 ((
uöt32_t
)0xFFFFE7FF)

	)

123 
	$PWR_DeInô
()

125 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

126 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

127 
	}
}

137 
	$PWR_RTCAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

140 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

142 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

143 
	}
}

185 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

187 
uöt32_t
 
tm¥eg
 = 0;

190 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

192 
tm¥eg
 = 
PWR
->
CR
;

195 
tm¥eg
 &
CR_PLS_MASK
;

198 
tm¥eg
 |
PWR_PVDLevñ
;

201 
PWR
->
CR
 = 
tm¥eg
;

202 
	}
}

210 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

213 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

215 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

216 
	}
}

247 
	$PWR_WakeUpPöCmd
(
uöt32_t
 
PWR_WakeUpPö
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

249 
__IO
 
uöt32_t
 
tmp
 = 0;

252 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
PWR_WakeUpPö
));

254 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

256 
tmp
 = 
CSR_EWUP_BB
 + 
PWR_WakeUpPö
;

258 *(
__IO
 
uöt32_t
 *Ë(
tmp
Ë(uöt32_t)
NewSèã
;

259 
	}
}

294 
	$PWR_Fa°WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

297 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

299 *(
__IO
 
uöt32_t
 *Ë
CR_FWU_BB
 = (uöt32_t)
NewSèã
;

300 
	}
}

308 
	$PWR_U…øLowPowîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

311 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

313 *(
__IO
 
uöt32_t
 *Ë
CR_ULP_BB
 = (uöt32_t)
NewSèã
;

314 
	}
}

405 
	$PWR_VﬁègeSˇlögC⁄fig
(
uöt32_t
 
PWR_VﬁègeSˇlög
)

407 
uöt32_t
 
tmp
 = 0;

410 
	`as£π_∑øm
(
	`IS_PWR_VOLTAGE_SCALING_RANGE
(
PWR_VﬁègeSˇlög
));

412 
tmp
 = 
PWR
->
CR
;

414 
tmp
 &
CR_VOS_MASK
;

415 
tmp
 |
PWR_VﬁègeSˇlög
;

417 
PWR
->
CR
 = 
tmp
 & 0xFFFFFFF3;

419 
	}
}

587 
	$PWR_E¡îLowPowîRunMode
(
Fun˘i⁄ÆSèã
 
NewSèã
)

590 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

592 i‡(
NewSèã
 !
DISABLE
)

594 
PWR
->
CR
 |
PWR_CR_LPSDSR
;

595 
PWR
->
CR
 |
PWR_CR_LPRUN
;

599 
PWR
->
CR
 &(
uöt32_t
)~((uöt32_t)
PWR_CR_LPRUN
);

600 
PWR
->
CR
 &(
uöt32_t
)~((uöt32_t)
PWR_CR_LPSDSR
);

602 
	}
}

620 
	$PWR_E¡îSÀïMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_SLEEPE¡ry
)

622 
uöt32_t
 
tm¥eg
 = 0;

625 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

627 
	`as£π_∑øm
(
	`IS_PWR_SLEEP_ENTRY
(
PWR_SLEEPE¡ry
));

630 
tm¥eg
 = 
PWR
->
CR
;

633 
tm¥eg
 &
CR_DS_MASK
;

636 
tm¥eg
 |
PWR_Reguœt‹
;

639 
PWR
->
CR
 = 
tm¥eg
;

642 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP
);

645 if(
PWR_SLEEPE¡ry
 =
PWR_SLEEPE¡ry_WFI
)

648 
	`__WFI
();

653 
	`__WFE
();

655 
	}
}

676 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

678 
uöt32_t
 
tm¥eg
 = 0;

681 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

682 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

685 
tm¥eg
 = 
PWR
->
CR
;

687 
tm¥eg
 &
CR_DS_MASK
;

690 
tm¥eg
 |
PWR_Reguœt‹
;

693 
PWR
->
CR
 = 
tm¥eg
;

696 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP
;

699 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

702 
	`__WFI
();

707 
	`__WFE
();

710 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP
);

711 
	}
}

723 
	$PWR_E¡îSTANDBYMode
()

726 
PWR
->
CR
 |
PWR_CR_CWUF
;

729 
PWR
->
CR
 |
PWR_CR_PDDS
;

732 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP
;

735 #i‡
	`deföed
 ( 
__CC_ARM
 )

736 
	`__f‹˚_°‹es
();

739 
	`__WFI
();

740 
	}
}

783 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

785 
FœgSètus
 
bô°©us
 = 
RESET
;

787 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

789 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

791 
bô°©us
 = 
SET
;

795 
bô°©us
 = 
RESET
;

798  
bô°©us
;

799 
	}
}

809 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

812 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

814 
PWR
->
CR
 |
PWR_FLAG
 << 2;

815 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_rcc.c

59 
	~"°m32l1xx_rcc.h
"

74 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

79 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

80 
	#HSION_BôNumbî
 0x00

	)

81 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

84 
	#MSION_BôNumbî
 0x08

	)

85 
	#CR_MSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
MSION_BôNumbî
 * 4))

	)

88 
	#PLLON_BôNumbî
 0x18

	)

89 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

92 
	#CSSON_BôNumbî
 0x1C

	)

93 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

98 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x34)

	)

99 
	#LSION_BôNumbî
 0x00

	)

100 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

103 
	#LSECSSON_BôNumbî
 0x0B

	)

104 
	#CSR_LSECSSON_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSECSSON_BôNumbî
 * 4))

	)

107 
	#RTCEN_BôNumbî
 0x16

	)

108 
	#CSR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

111 
	#RTCRST_BôNumbî
 0x17

	)

112 
	#CSR_RTCRST_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
RTCRST_BôNumbî
 * 4))

	)

117 
	#FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

120 
	#CR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023802)

	)

123 
	#ICSCR_BYTE4_ADDRESS
 ((
uöt32_t
)0x40023807)

	)

126 
	#CFGR_BYTE3_ADDRESS
 ((
uöt32_t
)0x4002380A)

	)

129 
	#CFGR_BYTE4_ADDRESS
 ((
uöt32_t
)0x4002380B)

	)

132 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)0x4002380D)

	)

135 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)0x4002380E)

	)

138 
	#CSR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023835)

	)

143 
__I
 
uöt8_t
 
	gPLLMulTabÀ
[9] = {3, 4, 6, 8, 12, 16, 24, 32, 48};

144 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

202 
	$RCC_DeInô
()

206 
RCC
->
CR
 |(
uöt32_t
)0x00000100;

209 
RCC
->
CFGR
 &(
uöt32_t
)0x88FFC00C;

212 
RCC
->
CR
 &(
uöt32_t
)0xEEFEFFFE;

215 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

218 
RCC
->
CFGR
 &(
uöt32_t
)0xFF02FFFF;

221 
RCC
->
CIR
 = 0x00000000;

222 
	}
}

244 
	$RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
)

247 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

250 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE_OFF
;

253 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE
;

255 
	}
}

269 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

271 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0;

272 
Eº‹Sètus
 
°©us
 = 
ERROR
;

273 
FœgSètus
 
HSESètus
 = 
RESET
;

278 
HSESètus
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

279 
SèπUpCou¡î
++;

280 } (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
Ë&& (
HSESètus
 =
RESET
));

282 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

284 
°©us
 = 
SUCCESS
;

288 
°©us
 = 
ERROR
;

290  (
°©us
);

291 
	}
}

303 
	$RCC_Adju°MSICÆibøti⁄VÆue
(
uöt8_t
 
MSICÆibøti⁄VÆue
)

307 
	`as£π_∑øm
(
	`IS_RCC_MSI_CALIBRATION_VALUE
(
MSICÆibøti⁄VÆue
));

309 *(
__IO
 
uöt8_t
 *Ë
ICSCR_BYTE4_ADDRESS
 = 
MSICÆibøti⁄VÆue
;

310 
	}
}

330 
	$RCC_MSIR™geC⁄fig
(
uöt32_t
 
RCC_MSIR™ge
)

332 
uöt32_t
 
tm¥eg
 = 0;

335 
	`as£π_∑øm
(
	`IS_RCC_MSI_CLOCK_RANGE
(
RCC_MSIR™ge
));

337 
tm¥eg
 = 
RCC
->
ICSCR
;

340 
tm¥eg
 &~
RCC_ICSCR_MSIRANGE
;

343 
tm¥eg
 |(
uöt32_t
)
RCC_MSIR™ge
;

346 
RCC
->
ICSCR
 = 
tm¥eg
;

347 
	}
}

368 
	$RCC_MSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

371 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

373 *(
__IO
 
uöt32_t
 *Ë
CR_MSION_BB
 = (uöt32_t)
NewSèã
;

374 
	}
}

386 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

388 
uöt32_t
 
tm¥eg
 = 0;

391 
	`as£π_∑øm
(
	`IS_RCC_HSI_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

393 
tm¥eg
 = 
RCC
->
ICSCR
;

396 
tm¥eg
 &~
RCC_ICSCR_HSITRIM
;

399 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 8;

402 
RCC
->
ICSCR
 = 
tm¥eg
;

403 
	}
}

420 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

423 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

425 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

426 
	}
}

445 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

448 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

451 *(
__IO
 
uöt8_t
 *Ë
CSR_BYTE2_ADDRESS
 = 
RCC_LSE_OFF
;

454 *(
__IO
 
uöt8_t
 *Ë
CSR_BYTE2_ADDRESS
 = 
RCC_LSE
;

455 
	}
}

469 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

472 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

474 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

475 
	}
}

516 
	$RCC_PLLC⁄fig
(
uöt8_t
 
RCC_PLLSour˚
, uöt8_à
RCC_PLLMul
, uöt8_à
RCC_PLLDiv
)

519 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

520 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_PLLMul
));

521 
	`as£π_∑øm
(
	`IS_RCC_PLL_DIV
(
RCC_PLLDiv
));

523 *(
__IO
 
uöt8_t
 *Ë
CFGR_BYTE3_ADDRESS
 = (uöt8_t)(
RCC_PLLSour˚
 | ((uöt8_t)(
RCC_PLLMul
 | (uöt8_t)(
RCC_PLLDiv
))));

524 
	}
}

537 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

540 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

542 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

543 
	}
}

556 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

559 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

561 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

562 
	}
}

570 
	$RCC_LSEClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

573 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

575 *(
__IO
 
uöt32_t
 *Ë
CSR_LSECSSON_BB
 = (uöt32_t)
NewSèã
;

576 
	}
}

600 
	$RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCOSour˚
, uöt8_à
RCC_MCODiv
)

603 
	`as£π_∑øm
(
	`IS_RCC_MCO_SOURCE
(
RCC_MCOSour˚
));

604 
	`as£π_∑øm
(
	`IS_RCC_MCO_DIV
(
RCC_MCODiv
));

607 *(
__IO
 
uöt8_t
 *Ë
CFGR_BYTE4_ADDRESS
 = 
RCC_MCOSour˚
 | 
RCC_MCODiv
;

608 
	}
}

717 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

719 
uöt32_t
 
tm¥eg
 = 0;

722 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

724 
tm¥eg
 = 
RCC
->
CFGR
;

727 
tm¥eg
 &~
RCC_CFGR_SW
;

730 
tm¥eg
 |
RCC_SYSCLKSour˚
;

733 
RCC
->
CFGR
 = 
tm¥eg
;

734 
	}
}

746 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

748  ((
uöt8_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SWS
));

749 
	}
}

771 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

773 
uöt32_t
 
tm¥eg
 = 0;

776 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

778 
tm¥eg
 = 
RCC
->
CFGR
;

781 
tm¥eg
 &~
RCC_CFGR_HPRE
;

784 
tm¥eg
 |
RCC_SYSCLK
;

787 
RCC
->
CFGR
 = 
tm¥eg
;

788 
	}
}

802 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

804 
uöt32_t
 
tm¥eg
 = 0;

807 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

809 
tm¥eg
 = 
RCC
->
CFGR
;

812 
tm¥eg
 &~
RCC_CFGR_PPRE1
;

815 
tm¥eg
 |
RCC_HCLK
;

818 
RCC
->
CFGR
 = 
tm¥eg
;

819 
	}
}

833 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

835 
uöt32_t
 
tm¥eg
 = 0;

838 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

840 
tm¥eg
 = 
RCC
->
CFGR
;

843 
tm¥eg
 &~
RCC_CFGR_PPRE2
;

846 
tm¥eg
 |
RCC_HCLK
 << 3;

849 
RCC
->
CFGR
 = 
tm¥eg
;

850 
	}
}

891 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

893 
uöt32_t
 
tmp
 = 0, 
∂lmul
 = 0, 
∂ldiv
 = 0, 
∂lsour˚
 = 0, 
¥esc
 = 0, 
msú™ge
 = 0;

896 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

898 
tmp
)

901 
msú™ge
 = (
RCC
->
ICSCR
 & 
RCC_ICSCR_MSIRANGE
 ) >> 13;

902 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (32768 * (1 << (
msú™ge
 + 1)));

905 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

908 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
;

912 
∂lmul
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMUL
;

913 
∂ldiv
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLDIV
;

914 
∂lmul
 = 
PLLMulTabÀ
[(pllmul >> 18)];

915 
∂ldiv
 = (plldiv >> 22) + 1;

917 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

919 i‡(
∂lsour˚
 == 0x00)

922 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (((
HSI_VALUE
Ë* 
∂lmul
Ë/ 
∂ldiv
);

927 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (((
HSE_VALUE
Ë* 
∂lmul
Ë/ 
∂ldiv
);

931 
msú™ge
 = (
RCC
->
ICSCR
 & 
RCC_ICSCR_MSIRANGE
 ) >> 13;

932 
RCC_Clocks
->
SYSCLK_Fªquícy
 = (32768 * (1 << (
msú™ge
 + 1)));

937 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
;

938 
tmp
 =Åmp >> 4;

939 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

941 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

944 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
;

945 
tmp
 =Åmp >> 8;

946 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

948 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

951 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
;

952 
tmp
 =Åmp >> 11;

953 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

955 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

956 
	}
}

1020 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

1022 
uöt32_t
 
tm¥eg
 = 0;

1025 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

1027 i‡((
RCC_RTCCLKSour˚
 & 
RCC_CSR_RTCSEL_HSE
) == RCC_CSR_RTCSEL_HSE)

1030 
tm¥eg
 = 
RCC
->
CR
;

1033 
tm¥eg
 &~
RCC_CR_RTCPRE
;

1036 
tm¥eg
 |(
RCC_RTCCLKSour˚
 & 
RCC_CR_RTCPRE
);

1039 
RCC
->
CR
 = 
tm¥eg
;

1042 
RCC
->
CSR
 &~
RCC_CSR_RTCSEL
;

1045 
RCC
->
CSR
 |(
RCC_RTCCLKSour˚
 & 
RCC_CSR_RTCSEL
);

1046 
	}
}

1056 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1059 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1061 *(
__IO
 
uöt32_t
 *Ë
CSR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

1062 
	}
}

1072 
	$RCC_RTCRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1075 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1077 *(
__IO
 
uöt32_t
 *Ë
CSR_RTCRST_BB
 = (uöt32_t)
NewSèã
;

1078 
	}
}

1105 
	$RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1108 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH
(
RCC_AHBPîùh
));

1109 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1111 i‡(
NewSèã
 !
DISABLE
)

1113 
RCC
->
AHBENR
 |
RCC_AHBPîùh
;

1117 
RCC
->
AHBENR
 &~
RCC_AHBPîùh
;

1119 
	}
}

1140 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1143 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1144 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1146 i‡(
NewSèã
 !
DISABLE
)

1148 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1152 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1154 
	}
}

1187 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1190 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1191 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1193 i‡(
NewSèã
 !
DISABLE
)

1195 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1199 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1201 
	}
}

1225 
	$RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1228 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH
(
RCC_AHBPîùh
));

1229 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1231 i‡(
NewSèã
 !
DISABLE
)

1233 
RCC
->
AHBRSTR
 |
RCC_AHBPîùh
;

1237 
RCC
->
AHBRSTR
 &~
RCC_AHBPîùh
;

1239 
	}
}

1257 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1260 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1261 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1263 i‡(
NewSèã
 !
DISABLE
)

1265 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1269 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1271 
	}
}

1301 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1304 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1305 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1307 i‡(
NewSèã
 !
DISABLE
)

1309 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1313 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1315 
	}
}

1344 
	$RCC_AHBPîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1347 
	`as£π_∑øm
(
	`IS_RCC_AHB_LPMODE_PERIPH
(
RCC_AHBPîùh
));

1348 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1350 i‡(
NewSèã
 !
DISABLE
)

1352 
RCC
->
AHBLPENR
 |
RCC_AHBPîùh
;

1356 
RCC
->
AHBLPENR
 &~
RCC_AHBPîùh
;

1358 
	}
}

1380 
	$RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1383 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1384 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1386 i‡(
NewSèã
 !
DISABLE
)

1388 
RCC
->
APB2LPENR
 |
RCC_APB2Pîùh
;

1392 
RCC
->
APB2LPENR
 &~
RCC_APB2Pîùh
;

1394 
	}
}

1429 
	$RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1432 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1433 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1435 i‡(
NewSèã
 !
DISABLE
)

1437 
RCC
->
APB1LPENR
 |
RCC_APB1Pîùh
;

1441 
RCC
->
APB1LPENR
 &~
RCC_APB1Pîùh
;

1443 
	}
}

1482 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1485 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

1486 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1488 i‡(
NewSèã
 !
DISABLE
)

1491 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

1496 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

1498 
	}
}

1520 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

1522 
uöt32_t
 
tmp
 = 0;

1523 
uöt32_t
 
°©u§eg
 = 0;

1524 
FœgSètus
 
bô°©us
 = 
RESET
;

1527 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

1530 
tmp
 = 
RCC_FLAG
 >> 5;

1532 i‡(
tmp
 == 1)

1534 
°©u§eg
 = 
RCC
->
CR
;

1538 
°©u§eg
 = 
RCC
->
CSR
;

1542 
tmp
 = 
RCC_FLAG
 & 
FLAG_MASK
;

1544 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

1546 
bô°©us
 = 
SET
;

1550 
bô°©us
 = 
RESET
;

1553  
bô°©us
;

1554 
	}
}

1563 
	$RCC_CÀ¨Fœg
()

1566 
RCC
->
CSR
 |
RCC_CSR_RMVF
;

1567 
	}
}

1583 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

1585 
ITSètus
 
bô°©us
 = 
RESET
;

1587 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

1590 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

1592 
bô°©us
 = 
SET
;

1596 
bô°©us
 = 
RESET
;

1599  
bô°©us
;

1600 
	}
}

1616 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1619 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1623 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1624 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_rtc.c

225 
	~"°m32l1xx_πc.h
"

226 
	~"°m32l1xx_rcc.h
"

241 
	#RTC_TR_RESERVED_MASK
 ((
uöt32_t
)0x007F7F7F)

	)

242 
	#RTC_DR_RESERVED_MASK
 ((
uöt32_t
)0x00FFFF3F)

	)

243 
	#RTC_INIT_MASK
 ((
uöt32_t
)0xFFFFFFFF)

	)

244 
	#RTC_RSF_MASK
 ((
uöt32_t
)0xFFFFFF5F)

	)

245 
	#RTC_FLAGS_MASK
 ((
uöt32_t
)(
RTC_FLAG_TSOVF
 | 
RTC_FLAG_TSF
 | 
RTC_FLAG_WUTF
 | \

246 
RTC_FLAG_ALRBF
 | 
RTC_FLAG_ALRAF
 | 
RTC_FLAG_INITF
 | \

247 
RTC_FLAG_RSF
 | 
RTC_FLAG_INITS
 | 
RTC_FLAG_WUTWF
 | \

248 
RTC_FLAG_ALRBWF
 | 
RTC_FLAG_ALRAWF
 | 
RTC_FLAG_TAMP1F
 | \

249 
RTC_FLAG_TAMP2F
 | 
RTC_FLAG_TAMP3F
 | 
RTC_FLAG_RECALPF
 | \

250 
RTC_FLAG_SHPF
))

	)

252 
	#INITMODE_TIMEOUT
 ((
uöt32_t
Ë0x00002000)

	)

253 
	#SYNCHRO_TIMEOUT
 ((
uöt32_t
Ë0x00008000)

	)

254 
	#RECALPF_TIMEOUT
 ((
uöt32_t
Ë0x00001000)

	)

255 
	#SHPF_TIMEOUT
 ((
uöt32_t
Ë0x00002000)

	)

260 
uöt8_t
 
RTC_ByãToBcd2
(uöt8_à
VÆue
);

261 
uöt8_t
 
RTC_Bcd2ToByã
(uöt8_à
VÆue
);

312 
Eº‹Sètus
 
	$RTC_DeInô
()

314 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

315 
uöt32_t
 
wutwf°©us
 = 0x00;

316 
Eº‹Sètus
 
°©us
 = 
ERROR
;

319 
RTC
->
WPR
 = 0xCA;

320 
RTC
->
WPR
 = 0x53;

323 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

325 
°©us
 = 
ERROR
;

330 
RTC
->
TR
 = (
uöt32_t
)0x00000000;

331 
RTC
->
DR
 = (
uöt32_t
)0x00002101;

334 
RTC
->
CR
 &(
uöt32_t
)0x00000007;

339 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

340 
wutcou¡î
++;

341 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

343 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

345 
°©us
 = 
ERROR
;

350 
RTC
->
CR
 &(
uöt32_t
)0x00000000;

351 
RTC
->
WUTR
 = (
uöt32_t
)0x0000FFFF;

352 
RTC
->
PRER
 = (
uöt32_t
)0x007F00FF;

353 
RTC
->
CALIBR
 = (
uöt32_t
)0x00000000;

354 
RTC
->
ALRMAR
 = (
uöt32_t
)0x00000000;

355 
RTC
->
ALRMBR
 = (
uöt32_t
)0x00000000;

356 
RTC
->
SHIFTR
 = (
uöt32_t
)0x00000000;

357 
RTC
->
CALR
 = (
uöt32_t
)0x00000000;

358 
RTC
->
ALRMASSR
 = (
uöt32_t
)0x00000000;

359 
RTC
->
ALRMBSSR
 = (
uöt32_t
)0x00000000;

362 
RTC
->
ISR
 = (
uöt32_t
)0x00000000;

365 
RTC
->
TAFCR
 = 0x00000000;

368 i‡(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

370 
°©us
 = 
ERROR
;

374 
°©us
 = 
SUCCESS
;

380 
RTC
->
WPR
 = 0xFF;

382  
°©us
;

383 
	}
}

396 
Eº‹Sètus
 
	$RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

398 
Eº‹Sètus
 
°©us
 = 
ERROR
;

401 
	`as£π_∑øm
(
	`IS_RTC_HOUR_FORMAT
(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

402 
	`as£π_∑øm
(
	`IS_RTC_ASYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
));

403 
	`as£π_∑øm
(
	`IS_RTC_SYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_SynchPªdiv
));

406 
RTC
->
WPR
 = 0xCA;

407 
RTC
->
WPR
 = 0x53;

410 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

412 
°©us
 = 
ERROR
;

417 
RTC
->
CR
 &((
uöt32_t
)~(
RTC_CR_FMT
));

419 
RTC
->
CR
 |((
uöt32_t
)(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

422 
RTC
->
PRER
 = (
uöt32_t
)(
RTC_InôSåu˘
->
RTC_SynchPªdiv
);

423 
RTC
->
PRER
 |(
uöt32_t
)(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 << 16);

426 
	`RTC_ExôInôMode
();

428 
°©us
 = 
SUCCESS
;

431 
RTC
->
WPR
 = 0xFF;

433  
°©us
;

434 
	}
}

442 
	$RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

445 
RTC_InôSåu˘
->
RTC_HourF‹m©
 = 
RTC_HourF‹m©_24
;

448 
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 = (
uöt32_t
)0x7F;

451 
RTC_InôSåu˘
->
RTC_SynchPªdiv
 = (
uöt32_t
)0xFF;

452 
	}
}

464 
	$RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

467 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

469 i‡(
NewSèã
 !
DISABLE
)

472 
RTC
->
WPR
 = 0xFF;

477 
RTC
->
WPR
 = 0xCA;

478 
RTC
->
WPR
 = 0x53;

480 
	}
}

491 
Eº‹Sètus
 
	$RTC_E¡îInôMode
()

493 
__IO
 
uöt32_t
 
öôcou¡î
 = 0x00;

494 
Eº‹Sètus
 
°©us
 = 
ERROR
;

495 
uöt32_t
 
öô°©us
 = 0x00;

498 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë=(
uöt32_t
)
RESET
)

501 
RTC
->
ISR
 = (
uöt32_t
)
RTC_INIT_MASK
;

506 
öô°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_INITF
;

507 
öôcou¡î
++;

508 } (
öôcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
öô°©us
 == 0x00));

510 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë!
RESET
)

512 
°©us
 = 
SUCCESS
;

516 
°©us
 = 
ERROR
;

521 
°©us
 = 
SUCCESS
;

524  (
°©us
);

525 
	}
}

536 
	$RTC_ExôInôMode
()

539 
RTC
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

540 
	}
}

558 
Eº‹Sètus
 
	$RTC_WaôF‹Synchro
()

560 
__IO
 
uöt32_t
 
synchrocou¡î
 = 0;

561 
Eº‹Sètus
 
°©us
 = 
ERROR
;

562 
uöt32_t
 
synchro°©us
 = 0x00;

565 
RTC
->
WPR
 = 0xCA;

566 
RTC
->
WPR
 = 0x53;

569 
RTC
->
ISR
 &(
uöt32_t
)
RTC_RSF_MASK
;

574 
synchro°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_RSF
;

575 
synchrocou¡î
++;

576 } (
synchrocou¡î
 !
SYNCHRO_TIMEOUT
Ë&& (
synchro°©us
 == 0x00));

578 i‡((
RTC
->
ISR
 & 
RTC_ISR_RSF
Ë!
RESET
)

580 
°©us
 = 
SUCCESS
;

584 
°©us
 = 
ERROR
;

588 
RTC
->
WPR
 = 0xFF;

590  (
°©us
);

591 
	}
}

601 
Eº‹Sètus
 
	$RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

603 
Eº‹Sètus
 
°©us
 = 
ERROR
;

606 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

609 
RTC
->
WPR
 = 0xCA;

610 
RTC
->
WPR
 = 0x53;

613 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

615 
°©us
 = 
ERROR
;

619 i‡(
NewSèã
 !
DISABLE
)

622 
RTC
->
CR
 |
RTC_CR_REFCKON
;

627 
RTC
->
CR
 &~
RTC_CR_REFCKON
;

630 
	`RTC_ExôInôMode
();

632 
°©us
 = 
SUCCESS
;

636 
RTC
->
WPR
 = 0xFF;

638  
°©us
;

639 
	}
}

649 
	$RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

652 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

655 
RTC
->
WPR
 = 0xCA;

656 
RTC
->
WPR
 = 0x53;

658 i‡(
NewSèã
 !
DISABLE
)

661 
RTC
->
CR
 |(
uöt8_t
)
RTC_CR_BYPSHAD
;

666 
RTC
->
CR
 &(
uöt8_t
)~
RTC_CR_BYPSHAD
;

670 
RTC
->
WPR
 = 0xFF;

671 
	}
}

703 
Eº‹Sètus
 
	$RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

705 
uöt32_t
 
tm¥eg
 = 0;

706 
Eº‹Sètus
 
°©us
 = 
ERROR
;

709 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

711 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

713 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

715 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_TimeSåu˘
->
RTC_Hours
));

716 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

720 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

721 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_TimeSåu˘
->
RTC_Hours
));

723 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_TimeSåu˘
->
RTC_Möuãs
));

724 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
));

728 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

730 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
);

731 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

732 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

736 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

737 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
)));

739 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Möuãs
)));

740 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)));

744 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

746 
tm¥eg
 = (((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

747 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

748 ((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_Sec⁄ds
) | \

749 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_H12
) << 16));

753 
tm¥eg
 = (
uöt32_t
)(((uöt32_t)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

754 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

755 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)) | \

756 (((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_H12
) << 16));

760 
RTC
->
WPR
 = 0xCA;

761 
RTC
->
WPR
 = 0x53;

764 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

766 
°©us
 = 
ERROR
;

771 
RTC
->
TR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_TR_RESERVED_MASK
);

774 
	`RTC_ExôInôMode
();

777 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

779 i‡(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

781 
°©us
 = 
ERROR
;

785 
°©us
 = 
SUCCESS
;

790 
°©us
 = 
SUCCESS
;

795 
RTC
->
WPR
 = 0xFF;

797  
°©us
;

798 
	}
}

807 
	$RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

810 
RTC_TimeSåu˘
->
RTC_H12
 = 
RTC_H12_AM
;

811 
RTC_TimeSåu˘
->
RTC_Hours
 = 0;

812 
RTC_TimeSåu˘
->
RTC_Möuãs
 = 0;

813 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = 0;

814 
	}
}

826 
	$RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

828 
uöt32_t
 
tm¥eg
 = 0;

831 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

834 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TR
 & 
RTC_TR_RESERVED_MASK
);

837 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

838 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >>8);

839 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

840 
RTC_TimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_PM
)) >> 16);

843 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

846 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Hours);

847 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Minutes);

848 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Seconds);

850 
	}
}

859 
uöt32_t
 
	$RTC_GëSubSec⁄d
()

861 
uöt32_t
 
tm¥eg
 = 0;

864 
tm¥eg
 = (
uöt32_t
)(
RTC
->
SSR
);

867 (Ë(
RTC
->
DR
);

869  (
tm¥eg
);

870 
	}
}

884 
Eº‹Sètus
 
	$RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

886 
uöt32_t
 
tm¥eg
 = 0;

887 
Eº‹Sètus
 
°©us
 = 
ERROR
;

890 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

892 i‡((
RTC_F‹m©
 =
RTC_F‹m©_BIN
Ë&& ((
RTC_D©eSåu˘
->
RTC_M⁄th
 & 0x10) == 0x10))

894 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (RTC_D©eSåu˘->RTC_M⁄th & (
uöt32_t
)~(0x10)) + 0x0A;

896 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

898 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
RTC_D©eSåu˘
->
RTC_Yór
));

899 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
RTC_D©eSåu˘
->
RTC_M⁄th
));

900 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
RTC_D©eSåu˘
->
RTC_D©e
));

904 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_Yór
)));

905 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_M⁄th
);

906 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
tm¥eg
));

907 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_D©e
);

908 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
tm¥eg
));

910 
	`as£π_∑øm
(
	`IS_RTC_WEEKDAY
(
RTC_D©eSåu˘
->
RTC_WìkDay
));

913 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

915 
tm¥eg
 = ((((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

916 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

917 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_D©e
) | \

918 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
) << 13));

922 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

923 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

924 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_D©e
)) | \

925 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
 << 13));

929 
RTC
->
WPR
 = 0xCA;

930 
RTC
->
WPR
 = 0x53;

933 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

935 
°©us
 = 
ERROR
;

940 
RTC
->
DR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_DR_RESERVED_MASK
);

943 
	`RTC_ExôInôMode
();

946 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

948 i‡(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

950 
°©us
 = 
ERROR
;

954 
°©us
 = 
SUCCESS
;

959 
°©us
 = 
SUCCESS
;

963 
RTC
->
WPR
 = 0xFF;

965  
°©us
;

966 
	}
}

975 
	$RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

978 
RTC_D©eSåu˘
->
RTC_WìkDay
 = 
RTC_Wìkday_M⁄day
;

979 
RTC_D©eSåu˘
->
RTC_D©e
 = 1;

980 
RTC_D©eSåu˘
->
RTC_M⁄th
 = 
RTC_M⁄th_J™u¨y
;

981 
RTC_D©eSåu˘
->
RTC_Yór
 = 0;

982 
	}
}

994 
	$RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

996 
uöt32_t
 
tm¥eg
 = 0;

999 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1002 
tm¥eg
 = (
uöt32_t
)(
RTC
->
DR
 & 
RTC_DR_RESERVED_MASK
);

1005 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_YT
 | 
RTC_DR_YU
)) >> 16);

1006 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

1007 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

1008 
RTC_D©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_WDU
)) >> 13);

1011 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1014 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Year);

1015 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Month);

1016 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Date);

1018 
	}
}

1054 
	$RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1056 
uöt32_t
 
tm¥eg
 = 0;

1059 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1060 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1061 
	`as£π_∑øm
(
	`IS_ALARM_MASK
(
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1062 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
));

1064 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1066 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1068 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1069 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1073 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1074 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1076 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
));

1077 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
));

1079 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1081 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1085 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1090 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1092 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
);

1093 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

1094 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1098 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1099 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
)));

1102 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
)));

1103 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)));

1105 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1107 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1108 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
tm¥eg
));

1112 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1113 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
tm¥eg
));

1118 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

1120 
tm¥eg
 = (((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1121 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1122 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
) | \

1123 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1124 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1125 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1126 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1130 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1131 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1132 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)) | \

1133 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1134 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1135 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1136 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1140 
RTC
->
WPR
 = 0xCA;

1141 
RTC
->
WPR
 = 0x53;

1144 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1146 
RTC
->
ALRMAR
 = (
uöt32_t
)
tm¥eg
;

1150 
RTC
->
ALRMBR
 = (
uöt32_t
)
tm¥eg
;

1154 
RTC
->
WPR
 = 0xFF;

1155 
	}
}

1165 
	$RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1168 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 
RTC_H12_AM
;

1169 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 0;

1170 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 0;

1171 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 0;

1174 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = 
RTC_AœrmD©eWìkDaySñ_D©e
;

1175 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 1;

1178 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = 
RTC_AœrmMask_N⁄e
;

1179 
	}
}

1195 
	$RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1197 
uöt32_t
 
tm¥eg
 = 0;

1200 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1201 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1204 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1206 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMAR
);

1210 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMBR
);

1214 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_HT
 | \

1215 
RTC_ALRMAR_HU
)) >> 16);

1216 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_MNT
 | \

1217 
RTC_ALRMAR_MNU
)) >> 8);

1218 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = (
uöt32_t
)(
tm¥eg
 & (
RTC_ALRMAR_ST
 | \

1219 
RTC_ALRMAR_SU
));

1220 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = (
uöt32_t
)((
tm¥eg
 & 
RTC_ALRMAR_PM
) >> 16);

1221 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_DT
 | 
RTC_ALRMAR_DU
)) >> 24);

1222 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_ALRMAR_WDSEL
);

1223 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_AœrmMask_AŒ
);

1225 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1227 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1228 
RTC_AœrmTime
.
RTC_Hours
);

1229 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1230 
RTC_AœrmTime
.
RTC_Möuãs
);

1231 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1232 
RTC_AœrmTime
.
RTC_Sec⁄ds
);

1233 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct->RTC_AlarmDateWeekDay);

1235 
	}
}

1249 
Eº‹Sètus
 
	$RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1251 
__IO
 
uöt32_t
 
Æ¨mcou¡î
 = 0x00;

1252 
uöt32_t
 
Æ¨m°©us
 = 0x00;

1253 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1256 
	`as£π_∑øm
(
	`IS_RTC_CMD_ALARM
(
RTC_Aœrm
));

1257 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1260 
RTC
->
WPR
 = 0xCA;

1261 
RTC
->
WPR
 = 0x53;

1264 i‡(
NewSèã
 !
DISABLE
)

1266 
RTC
->
CR
 |(
uöt32_t
)
RTC_Aœrm
;

1268 
°©us
 = 
SUCCESS
;

1273 
RTC
->
CR
 &(
uöt32_t
)~
RTC_Aœrm
;

1278 
Æ¨m°©us
 = 
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8);

1279 
Æ¨mcou¡î
++;

1280 } (
Æ¨mcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
Æ¨m°©us
 == 0x00));

1282 i‡((
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8)Ë=
RESET
)

1284 
°©us
 = 
ERROR
;

1288 
°©us
 = 
SUCCESS
;

1293 
RTC
->
WPR
 = 0xFF;

1295  
°©us
;

1296 
	}
}

1343 
	$RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
)

1345 
uöt32_t
 
tm¥eg
 = 0;

1348 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1349 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_VALUE
(
RTC_AœrmSubSec⁄dVÆue
));

1350 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_MASK
(
RTC_AœrmSubSec⁄dMask
));

1353 
RTC
->
WPR
 = 0xCA;

1354 
RTC
->
WPR
 = 0x53;

1357 
tm¥eg
 = (
uöt32_t
Ë(uöt32_t)(
RTC_AœrmSubSec⁄dVÆue
Ë| (uöt32_t)(
RTC_AœrmSubSec⁄dMask
);

1359 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1362 
RTC
->
ALRMASSR
 = 
tm¥eg
;

1367 
RTC
->
ALRMBSSR
 = 
tm¥eg
;

1371 
RTC
->
WPR
 = 0xFF;

1373 
	}
}

1384 
uöt32_t
 
	$RTC_GëAœrmSubSec⁄d
(
uöt32_t
 
RTC_Aœrm
)

1386 
uöt32_t
 
tm¥eg
 = 0;

1389 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1391 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMASSR
Ë& 
RTC_ALRMASSR_SS
);

1395 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMBSSR
Ë& 
RTC_ALRMBSSR_SS
);

1398  (
tm¥eg
);

1399 
	}
}

1432 
	$RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
)

1435 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_CLOCK
(
RTC_WakeUpClock
));

1438 
RTC
->
WPR
 = 0xCA;

1439 
RTC
->
WPR
 = 0x53;

1442 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUCKSEL
;

1445 
RTC
->
CR
 |(
uöt32_t
)
RTC_WakeUpClock
;

1448 
RTC
->
WPR
 = 0xFF;

1449 
	}
}

1459 
	$RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
)

1462 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_COUNTER
(
RTC_WakeUpCou¡î
));

1465 
RTC
->
WPR
 = 0xCA;

1466 
RTC
->
WPR
 = 0x53;

1469 
RTC
->
WUTR
 = (
uöt32_t
)
RTC_WakeUpCou¡î
;

1472 
RTC
->
WPR
 = 0xFF;

1473 
	}
}

1480 
uöt32_t
 
	$RTC_GëWakeUpCou¡î
()

1483  ((
uöt32_t
)(
RTC
->
WUTR
 & 
RTC_WUTR_WUT
));

1484 
	}
}

1492 
Eº‹Sètus
 
	$RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1494 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

1495 
uöt32_t
 
wutwf°©us
 = 0x00;

1496 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1499 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1502 
RTC
->
WPR
 = 0xCA;

1503 
RTC
->
WPR
 = 0x53;

1505 i‡(
NewSèã
 !
DISABLE
)

1508 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_WUTE
;

1509 
°©us
 = 
SUCCESS
;

1514 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUTE
;

1518 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

1519 
wutcou¡î
++;

1520 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

1522 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

1524 
°©us
 = 
ERROR
;

1528 
°©us
 = 
SUCCESS
;

1533 
RTC
->
WPR
 = 0xFF;

1535  
°©us
;

1536 
	}
}

1568 
	$RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
)

1571 
	`as£π_∑øm
(
	`IS_RTC_DAYLIGHT_SAVING
(
RTC_DayLightSavög
));

1572 
	`as£π_∑øm
(
	`IS_RTC_STORE_OPERATION
(
RTC_St‹eO≥øti⁄
));

1575 
RTC
->
WPR
 = 0xCA;

1576 
RTC
->
WPR
 = 0x53;

1579 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_BCK
);

1582 
RTC
->
CR
 |(
uöt32_t
)(
RTC_DayLightSavög
 | 
RTC_St‹eO≥øti⁄
);

1585 
RTC
->
WPR
 = 0xFF;

1586 
	}
}

1595 
uöt32_t
 
	$RTC_GëSt‹eO≥øti⁄
()

1597  (
RTC
->
CR
 & 
RTC_CR_BCK
);

1598 
	}
}

1633 
	$RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
)

1636 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT
(
RTC_Ouçut
));

1637 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_POL
(
RTC_OuçutPﬁ¨ôy
));

1640 
RTC
->
WPR
 = 0xCA;

1641 
RTC
->
WPR
 = 0x53;

1644 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_OSEL
 | 
RTC_CR_POL
);

1647 
RTC
->
CR
 |(
uöt32_t
)(
RTC_Ouçut
 | 
RTC_OuçutPﬁ¨ôy
);

1650 
RTC
->
WPR
 = 0xFF;

1651 
	}
}

1684 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
)

1686 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1689 
	`as£π_∑øm
(
	`IS_RTC_CALIB_SIGN
(
RTC_CÆibSign
));

1690 
	`as£π_∑øm
(
	`IS_RTC_CALIB_VALUE
(
VÆue
));

1693 
RTC
->
WPR
 = 0xCA;

1694 
RTC
->
WPR
 = 0x53;

1697 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1699 
°©us
 = 
ERROR
;

1704 
RTC
->
CALIBR
 = (
uöt32_t
)(
RTC_CÆibSign
 | 
VÆue
);

1706 
	`RTC_ExôInôMode
();

1708 
°©us
 = 
SUCCESS
;

1712 
RTC
->
WPR
 = 0xFF;

1714  
°©us
;

1715 
	}
}

1725 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1727 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1730 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1733 
RTC
->
WPR
 = 0xCA;

1734 
RTC
->
WPR
 = 0x53;

1737 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1739 
°©us
 = 
ERROR
;

1743 i‡(
NewSèã
 !
DISABLE
)

1746 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_DCE
;

1751 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_DCE
;

1754 
	`RTC_ExôInôMode
();

1756 
°©us
 = 
SUCCESS
;

1760 
RTC
->
WPR
 = 0xFF;

1762  
°©us
;

1763 
	}
}

1772 
	$RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1775 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1778 
RTC
->
WPR
 = 0xCA;

1779 
RTC
->
WPR
 = 0x53;

1781 i‡(
NewSèã
 !
DISABLE
)

1784 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_COE
;

1789 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_COE
;

1793 
RTC
->
WPR
 = 0xFF;

1794 
	}
}

1804 
	$RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
)

1807 
	`as£π_∑øm
(
	`IS_RTC_CALIB_OUTPUT
(
RTC_CÆibOuçut
));

1810 
RTC
->
WPR
 = 0xCA;

1811 
RTC
->
WPR
 = 0x53;

1814 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_COSEL
);

1817 
RTC
->
CR
 |(
uöt32_t
)
RTC_CÆibOuçut
;

1820 
RTC
->
WPR
 = 0xFF;

1821 
	}
}

1840 
Eº‹Sètus
 
	$RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

1841 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

1842 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
)

1844 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1845 
uöt32_t
 
ªˇÕfcou¡
 = 0;

1848 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PERIOD
(
RTC_SmoŸhCÆibPîiod
));

1849 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PLUS
(
RTC_SmoŸhCÆibPlusPul£s
));

1850 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_MINUS
(
RTC_SmouthCÆibMöusPul£sVÆue
));

1853 
RTC
->
WPR
 = 0xCA;

1854 
RTC
->
WPR
 = 0x53;

1857 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
)

1860 ((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
Ë&& (
ªˇÕfcou¡
 !
RECALPF_TIMEOUT
))

1862 
ªˇÕfcou¡
++;

1867 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë=
RESET
)

1870 
RTC
->
CALR
 = (
uöt32_t
)((uöt32_t)
RTC_SmoŸhCÆibPîiod
 | (uöt32_t)
RTC_SmoŸhCÆibPlusPul£s
 | (uöt32_t)
RTC_SmouthCÆibMöusPul£sVÆue
);

1872 
°©us
 = 
SUCCESS
;

1876 
°©us
 = 
ERROR
;

1880 
RTC
->
WPR
 = 0xFF;

1882  (
Eº‹Sètus
)(
°©us
);

1883 
	}
}

1916 
	$RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1918 
uöt32_t
 
tm¥eg
 = 0;

1921 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_EDGE
(
RTC_TimeSèmpEdge
));

1922 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1925 
tm¥eg
 = (
uöt32_t
)(
RTC
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

1928 i‡(
NewSèã
 !
DISABLE
)

1930 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
 | 
RTC_CR_TSE
);

1934 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
);

1938 
RTC
->
WPR
 = 0xCA;

1939 
RTC
->
WPR
 = 0x53;

1942 
RTC
->
CR
 = (
uöt32_t
)
tm¥eg
;

1945 
RTC
->
WPR
 = 0xFF;

1946 
	}
}

1960 
	$RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

1961 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
)

1963 
uöt32_t
 
tm±ime
 = 0, 
tmpd©e
 = 0;

1966 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1969 
tm±ime
 = (
uöt32_t
)(
RTC
->
TSTR
 & 
RTC_TR_RESERVED_MASK
);

1970 
tmpd©e
 = (
uöt32_t
)(
RTC
->
TSDR
 & 
RTC_DR_RESERVED_MASK
);

1973 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

1974 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >> 8);

1975 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm±ime
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

1976 
RTC_SèmpTimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_PM
)) >> 16);

1979 
RTC_SèmpD©eSåu˘
->
RTC_Yór
 = 0;

1980 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

1981 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tmpd©e
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

1982 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_WDU
)) >> 13);

1985 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1988 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Hours);

1989 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Minutes);

1990 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Seconds);

1993 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Month);

1994 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Date);

1995 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_WeekDay);

1997 
	}
}

2004 
uöt32_t
 
	$RTC_GëTimeSèmpSubSec⁄d
()

2007  (
uöt32_t
)(
RTC
->
TSSSR
);

2008 
	}
}

2042 
	$RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
)

2045 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2046 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
RTC_Tam≥rTriggî
));

2049 i‡(
RTC_Tam≥rTriggî
 =
RTC_Tam≥rTriggî_RisögEdge
)

2052 
RTC
->
TAFCR
 &(
uöt32_t
)((uöt32_t)~(
RTC_Tam≥r
 << 1));

2057 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥r
 << 1);

2059 
	}
}

2072 
	$RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2075 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2076 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2078 i‡(
NewSèã
 !
DISABLE
)

2081 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥r
;

2086 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_Tam≥r
;

2088 
	}
}

2103 
	$RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
)

2106 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_FILTER
(
RTC_Tam≥rFûãr
));

2109 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFLT
);

2112 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rFûãr
;

2113 
	}
}

2137 
	$RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
)

2140 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_SAMPLING_FREQ
(
RTC_Tam≥rSam∂ögFªq
));

2143 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFREQ
);

2146 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rSam∂ögFªq
;

2147 
	}
}

2160 
	$RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
)

2163 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PRECHARGE_DURATION
(
RTC_Tam≥rPªch¨geDuøti⁄
));

2166 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPPRCH
);

2169 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rPªch¨geDuøti⁄
;

2170 
	}
}

2180 
	$RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2183 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2185 i‡(
NewSèã
 !
DISABLE
)

2188 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPTS
;

2193 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPTS
;

2195 
	}
}

2203 
	$RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2206 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2208 i‡(
NewSèã
 !
DISABLE
)

2211 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPPUDIS
;

2216 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
;

2218 
	}
}

2244 
	$RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
)

2246 
__IO
 
uöt32_t
 
tmp
 = 0;

2249 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2251 
tmp
 = 
RTC_BASE
 + 0x50;

2252 
tmp
 +(
RTC_BKP_DR
 * 4);

2255 *(
__IO
 
uöt32_t
 *)
tmp
 = (uöt32_t)
D©a
;

2256 
	}
}

2265 
uöt32_t
 
	$RTC_RódBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
)

2267 
__IO
 
uöt32_t
 
tmp
 = 0;

2270 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2272 
tmp
 = 
RTC_BASE
 + 0x50;

2273 
tmp
 +(
RTC_BKP_DR
 * 4);

2276  (*(
__IO
 
uöt32_t
 *)
tmp
);

2277 
	}
}

2305 
	$RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
)

2308 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_TYPE
(
RTC_OuçutTy≥
));

2310 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_ALARMOUTTYPE
);

2311 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_OuçutTy≥
);

2312 
	}
}

2343 
Eº‹Sètus
 
	$RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
)

2345 
Eº‹Sètus
 
°©us
 = 
ERROR
;

2346 
uöt32_t
 
shpfcou¡
 = 0;

2349 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_ADD1S
(
RTC_Shi·Add1S
));

2350 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_SUBFS
(
RTC_Shi·SubFS
));

2353 
RTC
->
WPR
 = 0xCA;

2354 
RTC
->
WPR
 = 0x53;

2357 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
)

2360 ((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
Ë&& (
shpfcou¡
 !
SHPF_TIMEOUT
))

2362 
shpfcou¡
++;

2367 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë=
RESET
)

2370 if((
RTC
->
CR
 & 
RTC_CR_REFCKON
Ë=
RESET
)

2373 
RTC
->
SHIFTR
 = (
uöt32_t
)(uöt32_t)(
RTC_Shi·SubFS
Ë| (uöt32_t)(
RTC_Shi·Add1S
);

2375 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

2377 
°©us
 = 
ERROR
;

2381 
°©us
 = 
SUCCESS
;

2386 
°©us
 = 
ERROR
;

2391 
°©us
 = 
ERROR
;

2395 
RTC
->
WPR
 = 0xFF;

2397  (
Eº‹Sètus
)(
°©us
);

2398 
	}
}

2463 
	$RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2466 
	`as£π_∑øm
(
	`IS_RTC_CONFIG_IT
(
RTC_IT
));

2467 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2470 
RTC
->
WPR
 = 0xCA;

2471 
RTC
->
WPR
 = 0x53;

2473 i‡(
NewSèã
 !
DISABLE
)

2476 
RTC
->
CR
 |(
uöt32_t
)(
RTC_IT
 & ~
RTC_TAFCR_TAMPIE
);

2478 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2483 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_IT
 & (uöt32_t)~
RTC_TAFCR_TAMPIE
);

2485 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2488 
RTC
->
WPR
 = 0xFF;

2489 
	}
}

2513 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
)

2515 
FœgSètus
 
bô°©us
 = 
RESET
;

2516 
uöt32_t
 
tm¥eg
 = 0;

2519 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

2522 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ISR
 & 
RTC_FLAGS_MASK
);

2525 i‡((
tm¥eg
 & 
RTC_FLAG
Ë!(
uöt32_t
)
RESET
)

2527 
bô°©us
 = 
SET
;

2531 
bô°©us
 = 
RESET
;

2533  
bô°©us
;

2534 
	}
}

2551 
	$RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
)

2554 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

2557 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
RTC_FLAG
 | 
RTC_ISR_INIT
)& 0x0001FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2558 
	}
}

2573 
ITSètus
 
	$RTC_GëITSètus
(
uöt32_t
 
RTC_IT
)

2575 
ITSètus
 
bô°©us
 = 
RESET
;

2576 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

2579 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

2582 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TAFCR
 & (
RTC_TAFCR_TAMPIE
));

2585 
íabÀ°©us
 = (
uöt32_t
)((
RTC
->
CR
 & 
RTC_IT
Ë| (
tm¥eg
 & ((RTC_IT >> (RTC_IT >> 18)) >> 15)));

2588 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ISR
 & (uöt32_t)(
RTC_IT
 >> 4)));

2591 i‡((
íabÀ°©us
 !(
uöt32_t
)
RESET
Ë&& ((
tm¥eg
 & 0x0000FFFF) != (uint32_t)RESET))

2593 
bô°©us
 = 
SET
;

2597 
bô°©us
 = 
RESET
;

2599  
bô°©us
;

2600 
	}
}

2615 
	$RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
)

2617 
uöt32_t
 
tm¥eg
 = 0;

2620 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_IT
(
RTC_IT
));

2623 
tm¥eg
 = (
uöt32_t
)(
RTC_IT
 >> 4);

2626 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
tm¥eg
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2627 
	}
}

2638 
uöt8_t
 
	$RTC_ByãToBcd2
(
uöt8_t
 
VÆue
)

2640 
uöt8_t
 
bcdhigh
 = 0;

2642 
VÆue
 >= 10)

2644 
bcdhigh
++;

2645 
VÆue
 -= 10;

2648  ((
uöt8_t
)(
bcdhigh
 << 4Ë| 
VÆue
);

2649 
	}
}

2656 
uöt8_t
 
	$RTC_Bcd2ToByã
(
uöt8_t
 
VÆue
)

2658 
uöt8_t
 
tmp
 = 0;

2659 
tmp
 = ((
uöt8_t
)(
VÆue
 & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;

2660  (
tmp
 + (
VÆue
 & (
uöt8_t
)0x0F));

2661 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_sdio.c

130 
	~"°m32l1xx_sdio.h
"

131 
	~"°m32l1xx_rcc.h
"

146 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

151 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

152 
	#CLKEN_BôNumbî
 0x08

	)

153 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

158 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

159 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

160 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

163 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

164 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

167 
	#NIEN_BôNumbî
 0x0D

	)

168 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

171 
	#ATACMD_BôNumbî
 0x0E

	)

172 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

177 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

178 
	#DMAEN_BôNumbî
 0x03

	)

179 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

182 
	#RWSTART_BôNumbî
 0x08

	)

183 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

186 
	#RWSTOP_BôNumbî
 0x09

	)

187 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

190 
	#RWMOD_BôNumbî
 0x0A

	)

191 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

194 
	#SDIOEN_BôNumbî
 0x0B

	)

195 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

202 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

207 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

212 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

217 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

220 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

248 
	$SDIO_DeInô
()

250 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SDIO
, 
ENABLE
);

251 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SDIO
, 
DISABLE
);

252 
	}
}

261 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

263 
uöt32_t
 
tm¥eg
 = 0;

266 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

267 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

268 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

269 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

270 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

274 
tm¥eg
 = 
SDIO
->
CLKCR
;

277 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

285 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

286 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

287 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

290 
SDIO
->
CLKCR
 = 
tm¥eg
;

291 
	}
}

299 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

302 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

303 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

304 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

305 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

306 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

307 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

308 
	}
}

315 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

318 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

320 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

321 
	}
}

331 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

334 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

336 
SDIO
->
POWER
 = 
SDIO_PowîSèã
;

337 
	}
}

348 
uöt32_t
 
	$SDIO_GëPowîSèã
()

350  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

351 
	}
}

376 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

379 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

381 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

382 
	}
}

409 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

411 
uöt32_t
 
tm¥eg
 = 0;

414 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

415 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

416 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

417 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

421 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

425 
tm¥eg
 = 
SDIO
->
CMD
;

427 
tm¥eg
 &
CMD_CLEAR_MASK
;

432 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


433 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

436 
SDIO
->
CMD
 = 
tm¥eg
;

437 
	}
}

445 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

448 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

449 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

450 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

451 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

452 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

453 
	}
}

460 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

462  (
uöt8_t
)(
SDIO
->
RESPCMD
);

463 
	}
}

475 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

477 
__IO
 
uöt32_t
 
tmp
 = 0;

480 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

482 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

484  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

485 
	}
}

512 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

514 
uöt32_t
 
tm¥eg
 = 0;

517 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

518 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

519 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

520 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

521 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

525 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

529 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

533 
tm¥eg
 = 
SDIO
->
DCTRL
;

535 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

540 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


541 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

544 
SDIO
->
DCTRL
 = 
tm¥eg
;

545 
	}
}

553 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

556 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

557 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

558 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

559 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

560 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

561 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

562 
	}
}

569 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

571  
SDIO
->
DCOUNT
;

572 
	}
}

579 
uöt32_t
 
	$SDIO_RódD©a
()

581  
SDIO
->
FIFO
;

582 
	}
}

589 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

591 
SDIO
->
FIFO
 = 
D©a
;

592 
	}
}

599 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

601  
SDIO
->
FIFOCNT
;

602 
	}
}

628 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

631 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

633 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

634 
	}
}

642 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

645 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

647 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

648 
	}
}

658 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

661 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

663 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

664 
	}
}

672 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

675 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

677 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

678 
	}
}

686 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

689 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

691 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

692 
	}
}

718 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

721 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

723 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

724 
	}
}

731 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

734 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

736 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

737 
	}
}

744 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

747 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

749 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

750 
	}
}

802 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

805 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

806 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

808 i‡(
NewSèã
 !
DISABLE
)

811 
SDIO
->
MASK
 |
SDIO_IT
;

816 
SDIO
->
MASK
 &~
SDIO_IT
;

818 
	}
}

851 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

853 
FœgSètus
 
bô°©us
 = 
RESET
;

856 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

858 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

860 
bô°©us
 = 
SET
;

864 
bô°©us
 = 
RESET
;

866  
bô°©us
;

867 
	}
}

889 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

892 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

894 
SDIO
->
ICR
 = 
SDIO_FLAG
;

895 
	}
}

928 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

930 
ITSètus
 
bô°©us
 = 
RESET
;

933 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

934 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

936 
bô°©us
 = 
SET
;

940 
bô°©us
 = 
RESET
;

942  
bô°©us
;

943 
	}
}

964 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

967 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

969 
SDIO
->
ICR
 = 
SDIO_IT
;

970 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_spi.c

96 
	~"°m32l1xx_•i.h
"

97 
	~"°m32l1xx_rcc.h
"

111 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0x3040)

	)

112 
	#I2SCFGR_CLEAR_Mask
 ((
uöt16_t
)0xF040)

	)

148 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

151 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

153 i‡(
SPIx
 =
SPI1
)

156 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

158 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

160 i‡(
SPIx
 =
SPI2
)

163 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

165 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

169 i‡(
SPIx
 =
SPI3
)

172 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

174 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

177 
	}
}

187 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

189 
uöt16_t
 
tm¥eg
 = 0;

192 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

195 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

196 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

197 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

198 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

199 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

200 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

201 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

202 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

203 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

207 
tm¥eg
 = 
SPIx
->
CR1
;

209 
tm¥eg
 &
CR1_CLEAR_MASK
;

218 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

219 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

220 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

221 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

223 
SPIx
->
CR1
 = 
tm¥eg
;

226 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SMOD
);

229 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

230 
	}
}

247 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

249 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

250 
uöt32_t
 
tmp
 = 0;

251 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

252 
uöt32_t
 
sour˚˛ock
 = 0;

255 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

256 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

257 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

258 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

259 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

260 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

261 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

265 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_Mask
;

266 
SPIx
->
I2SPR
 = 0x0002;

269 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

272 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

274 
i2sodd
 = (
uöt16_t
)0;

275 
i2sdiv
 = (
uöt16_t
)2;

281 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

284 
∑ckëÀngth
 = 1;

289 
∑ckëÀngth
 = 2;

293 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

296 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

299 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

302 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

307 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

311 
tmp
 =Åmp / 10;

314 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

317 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

320 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

324 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

327 
i2sdiv
 = 2;

328 
i2sodd
 = 0;

332 
SPIx
->
I2SPR
 = (
uöt16_t
)(
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

335 
tm¥eg
 |(
uöt16_t
)(
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

336 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

337 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

340 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

341 
	}
}

348 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

352 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

354 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

356 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

358 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

360 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

362 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

364 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

366 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

368 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

369 
	}
}

376 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

380 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

383 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

386 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

389 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

392 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

395 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

396 
	}
}

405 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

408 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

409 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

410 i‡(
NewSèã
 !
DISABLE
)

413 
SPIx
->
CR1
 |
SPI_CR1_SPE
;

418 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_SPE
);

420 
	}
}

429 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

432 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

433 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

435 i‡(
NewSèã
 !
DISABLE
)

438 
SPIx
->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

443 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SE
);

445 
	}
}

456 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

459 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

460 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

462 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

464 
SPIx
->
CR1
 |
SPI_D©aSize
;

465 
	}
}

476 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

479 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

480 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

481 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

484 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

489 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

491 
	}
}

502 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

505 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

506 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

507 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

510 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

515 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

517 
	}
}

526 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

529 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

530 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

531 i‡(
NewSèã
 !
DISABLE
)

534 
SPIx
->
CR2
 |(
uöt16_t
)
SPI_CR2_SSOE
;

539 
SPIx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
SPI_CR2_SSOE
);

541 
	}
}

574 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

577 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

580  
SPIx
->
DR
;

581 
	}
}

590 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

593 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

596 
SPIx
->
DR
 = 
D©a
;

597 
	}
}

670 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

673 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

674 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

675 i‡(
NewSèã
 !
DISABLE
)

678 
SPIx
->
CR1
 |
SPI_CR1_CRCEN
;

683 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_CRCEN
);

685 
	}
}

692 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

695 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

698 
SPIx
->
CR1
 |
SPI_CR1_CRCNEXT
;

699 
	}
}

710 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

712 
uöt16_t
 
¸¸eg
 = 0;

714 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

715 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

716 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

719 
¸¸eg
 = 
SPIx
->
TXCRCR
;

724 
¸¸eg
 = 
SPIx
->
RXCRCR
;

727  
¸¸eg
;

728 
	}
}

735 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

738 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

741  
SPIx
->
CRCPR
;

742 
	}
}

772 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

775 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

776 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

777 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

779 i‡(
NewSèã
 !
DISABLE
)

782 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

787 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

789 
	}
}

880 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

882 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

885 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

886 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

887 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

890 
ôpos
 = 
SPI_I2S_IT
 >> 4;

893 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

895 i‡(
NewSèã
 !
DISABLE
)

898 
SPIx
->
CR2
 |
ômask
;

903 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

905 
	}
}

925 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

927 
FœgSètus
 
bô°©us
 = 
RESET
;

929 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

930 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

933 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

936 
bô°©us
 = 
SET
;

941 
bô°©us
 = 
RESET
;

944  
bô°©us
;

945 
	}
}

965 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

968 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

969 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

972 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

973 
	}
}

991 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

993 
ITSètus
 
bô°©us
 = 
RESET
;

994 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

997 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

998 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

1001 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1004 
ômask
 = 
SPI_I2S_IT
 >> 4;

1007 
ômask
 = 0x01 << itmask;

1010 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

1013 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

1016 
bô°©us
 = 
SET
;

1021 
bô°©us
 = 
RESET
;

1024  
bô°©us
;

1025 
	}
}

1046 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1048 
uöt16_t
 
ôpos
 = 0;

1050 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

1051 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

1054 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1057 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

1058 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_syscfg.c

70 
	~"°m32l1xx_syscfg.h
"

71 
	~"°m32l1xx_rcc.h
"

84 
	#TIM_SELECT_MASK
 ((
uöt32_t
)0xFFFCFFFFË

	)

85 
	#IC_ROUTING_MASK
 ((
uöt32_t
)0x0000000FË

	)

114 
	$SYSCFG_DeInô
()

116 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
ENABLE
);

117 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
DISABLE
);

118 
	}
}

125 
	$SYSCFG_RIDeInô
()

127 
RI
->
ICR
 = ((
uöt32_t
)0x00000000);

128 
RI
->
ASCR1
 = ((
uöt32_t
)0x00000000);

129 
RI
->
ASCR2
 = ((
uöt32_t
)0x00000000);

130 
RI
->
HYSCR1
 = ((
uöt32_t
)0x00000000);

131 
RI
->
HYSCR2
 = ((
uöt32_t
)0x00000000);

132 
RI
->
HYSCR3
 = ((
uöt32_t
)0x00000000);

133 
RI
->
HYSCR4
 = ((
uöt32_t
)0x00000000);

134 
	}
}

146 
	$SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
)

149 
	`as£π_∑øm
(
	`IS_SYSCFG_MEMORY_REMAP_CONFING
(
SYSCFG_Mem‹yRem≠
));

150 
SYSCFG
->
MEMRMP
 = 
SYSCFG_Mem‹yRem≠
;

151 
	}
}

163 
uöt32_t
 
	$SYSCFG_GëBoŸMode
()

165  (
SYSCFG
->
MEMRMP
 & 
SYSCFG_MEMRMP_BOOT_MODE
);

166 
	}
}

175 
	$SYSCFG_USBPuCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

178 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

180 i‡(
NewSèã
 !
DISABLE
)

183 
SYSCFG
->
PMC
 |(
uöt32_t
Ë
SYSCFG_PMC_USB_PU
;

188 
SYSCFG
->
PMC
 &(
uöt32_t
)(~
SYSCFG_PMC_USB_PU
);

190 
	}
}

200 
	$SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
)

202 
uöt32_t
 
tmp
 = 0x00;

205 
	`as£π_∑øm
(
	`IS_EXTI_PORT_SOURCE
(
EXTI_P‹tSour˚GPIOx
));

206 
	`as£π_∑øm
(
	`IS_EXTI_PIN_SOURCE
(
EXTI_PöSour˚x
));

208 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
EXTI_PöSour˚x
 & (
uöt8_t
)0x03));

209 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] &~
tmp
;

210 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] |(((
uöt32_t
)
EXTI_P‹tSour˚GPIOx
Ë<< (0x04 * (EXTI_PöSour˚x & (
uöt8_t
)0x03)));

211 
	}
}

241 
	$SYSCFG_RITIMSñe˘
(
uöt32_t
 
TIM_Sñe˘
)

243 
uöt32_t
 
tm¥eg
 = 0;

246 
	`as£π_∑øm
(
	`IS_RI_TIM
(
TIM_Sñe˘
));

249 
tm¥eg
 = 
RI
->
ICR
;

252 
tm¥eg
 &
TIM_SELECT_MASK
;

255 
tm¥eg
 |(
TIM_Sñe˘
);

258 
RI
->
ICR
 = 
tm¥eg
;

259 
	}
}

286 
	$SYSCFG_RITIMI≈utC≠tuªC⁄fig
(
uöt32_t
 
RI_I≈utC≠tuª
, uöt32_à
RI_I≈utC≠tuªRoutög
)

288 
uöt32_t
 
tm¥eg
 = 0;

291 
	`as£π_∑øm
(
	`IS_RI_INPUTCAPTURE
(
RI_I≈utC≠tuª
));

292 
	`as£π_∑øm
(
	`IS_RI_INPUTCAPTURE_ROUTING
(
RI_I≈utC≠tuªRoutög
));

295 
tm¥eg
 = 
RI
->
ICR
;

298 
tm¥eg
 |(
RI_I≈utC≠tuª
);

300 if((
RI_I≈utC≠tuª
 & 
RI_I≈utC≠tuª_IC1
) == RI_InputCapture_IC1)

303 
tm¥eg
 &(
uöt32_t
)(~
IC_ROUTING_MASK
);

306 
tm¥eg
 |(
uöt32_t
)–
RI_I≈utC≠tuªRoutög
);

309 if((
RI_I≈utC≠tuª
 & 
RI_I≈utC≠tuª_IC2
) == RI_InputCapture_IC2)

312 
tm¥eg
 &(
uöt32_t
)(~(
IC_ROUTING_MASK
 << 4));

315 
tm¥eg
 |(
uöt32_t
)–(
RI_I≈utC≠tuªRoutög
 << 4));

318 if((
RI_I≈utC≠tuª
 & 
RI_I≈utC≠tuª_IC3
) == RI_InputCapture_IC3)

321 
tm¥eg
 &(
uöt32_t
)(~(
IC_ROUTING_MASK
 << 8));

324 
tm¥eg
 |(
uöt32_t
)–(
RI_I≈utC≠tuªRoutög
 << 8));

327 if((
RI_I≈utC≠tuª
 & 
RI_I≈utC≠tuª_IC4
) == RI_InputCapture_IC4)

330 
tm¥eg
 &(
uöt32_t
)(~(
IC_ROUTING_MASK
 << 12));

333 
tm¥eg
 |(
uöt32_t
)–(
RI_I≈utC≠tuªRoutög
 << 12));

337 
RI
->
ICR
 = 
tm¥eg
;

338 
	}
}

357 
	$SYSCFG_RIResi°‹C⁄fig
(
uöt32_t
 
RI_Resi°‹
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

360 
	`as£π_∑øm
(
	`IS_RI_RESISTOR
(
RI_Resi°‹
));

361 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

363 i‡(
NewSèã
 !
DISABLE
)

366 
COMP
->
CSR
 |(
uöt32_t
Ë
RI_Resi°‹
;

371 
COMP
->
CSR
 &(
uöt32_t
Ë(~
RI_Resi°‹
);

373 
	}
}

388 
	$SYSCFG_RICh™√lS≥edC⁄fig
(
uöt32_t
 
RI_Ch™√l
, uöt32_à
RI_Ch™√lS≥ed
)

391 
	`as£π_∑øm
(
	`IS_RI_CHANNEL
(
RI_Ch™√l
));

392 
	`as£π_∑øm
(
	`IS_RI_CHANNELSPEED
(
RI_Ch™√lS≥ed
));

394 if(
RI_Ch™√lS≥ed
 !
RI_Ch™√lS≥ed_Fa°
)

397 
COMP
->
CSR
 &(
uöt32_t
Ë(~
RI_Ch™√l
);

402 
COMP
->
CSR
 |(
uöt32_t
Ë(
RI_Ch™√l
);

404 
	}
}

436 
	$SYSCFG_RIIOSwôchC⁄fig
(
uöt32_t
 
RI_IOSwôch
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

438 
uöt32_t
 
ioswôchmask
 = 0;

441 
	`as£π_∑øm
(
	`IS_RI_IOSWITCH
(
RI_IOSwôch
));

444 
ioswôchmask
 = 
RI_IOSwôch
 >> 31;

447 
RI_IOSwôch
 &= 0x7FFFFFFF;

450 i‡(
NewSèã
 !
DISABLE
)

452 i‡(
ioswôchmask
 != 0)

455 
RI
->
ASCR1
 |
RI_IOSwôch
;

460 
RI
->
ASCR2
 |
RI_IOSwôch
;

465 i‡(
ioswôchmask
 != 0)

468 
RI
->
ASCR1
 &(~ (
uöt32_t
)
RI_IOSwôch
);

473 
RI
->
ASCR2
 &(~ (
uöt32_t
)
RI_IOSwôch
);

476 
	}
}

491 
	$SYSCFG_RISwôchC⁄åﬁModeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

494 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

496 i‡(
NewSèã
 !
DISABLE
)

499 
RI
->
ASCR1
 |(
uöt32_t
Ë
RI_ASCR1_SCM
;

504 
RI
->
ASCR1
 &(
uöt32_t
)(~
RI_ASCR1_SCM
);

506 
	}
}

531 
	$SYSCFG_RIHy°îesisC⁄fig
(
uöt8_t
 
RI_P‹t
, 
uöt16_t
 
RI_Pö
,

532 
Fun˘i⁄ÆSèã
 
NewSèã
)

535 
	`as£π_∑øm
(
	`IS_RI_PORT
(
RI_P‹t
));

536 
	`as£π_∑øm
(
	`IS_RI_PIN
(
RI_Pö
));

537 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

539 if(
RI_P‹t
 =
RI_P‹tA
)

541 i‡(
NewSèã
 !
DISABLE
)

544 
RI
->
HYSCR1
 &(
uöt32_t
)~((uöt32_t)
RI_Pö
);

549 
RI
->
HYSCR1
 |(
uöt32_t
Ë
RI_Pö
;

553 if(
RI_P‹t
 =
RI_P‹tB
)

556 i‡(
NewSèã
 !
DISABLE
)

559 
RI
->
HYSCR1
 &(
uöt32_t
Ë(~((uöt32_t)
RI_Pö
) << 16);

564 
RI
->
HYSCR1
 |(
uöt32_t
Ë((uöt32_t)(
RI_Pö
) << 16);

568 if(
RI_P‹t
 =
RI_P‹tC
)

571 i‡(
NewSèã
 !
DISABLE
)

574 
RI
->
HYSCR2
 &(
uöt32_t
Ë(~((uöt32_t)
RI_Pö
));

579 
RI
->
HYSCR2
 |(
uöt32_t
Ë(
RI_Pö
 );

582 if(
RI_P‹t
 =
RI_P‹tD
)

584 i‡(
NewSèã
 !
DISABLE
)

587 
RI
->
HYSCR2
 &(
uöt32_t
Ë(~((uöt32_t)
RI_Pö
) << 16);

592 
RI
->
HYSCR2
 |(
uöt32_t
Ë((uöt32_t)(
RI_Pö
) << 16);

596 if(
RI_P‹t
 =
RI_P‹tE
)

598 i‡(
NewSèã
 !
DISABLE
)

601 
RI
->
HYSCR3
 &(
uöt32_t
Ë(~((uöt32_t)
RI_Pö
));

606 
RI
->
HYSCR3
 |(
uöt32_t
Ë(
RI_Pö
 );

609 if(
RI_P‹t
 =
RI_P‹tF
)

611 i‡(
NewSèã
 !
DISABLE
)

614 
RI
->
HYSCR3
 &(
uöt32_t
Ë(~((uöt32_t)
RI_Pö
) << 16);

619 
RI
->
HYSCR3
 |(
uöt32_t
Ë((uöt32_t)(
RI_Pö
) << 16);

624 i‡(
NewSèã
 !
DISABLE
)

627 
RI
->
HYSCR4
 &(
uöt32_t
Ë(~((uöt32_t)
RI_Pö
));

632 
RI
->
HYSCR4
 |(
uöt32_t
Ë(
RI_Pö
);

635 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_tim.c

110 
	~"°m32l1xx_tim.h
"

111 
	~"°m32l1xx_rcc.h
"

126 
	#SMCR_ETR_MASK
 ((
uöt16_t
)0x00FF)

	)

127 
	#CCMR_OFFSET
 ((
uöt16_t
)0x0018)

	)

128 
	#CCER_CCE_SET
 ((
uöt16_t
)0x0001)

	)

134 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

135 
uöt16_t
 
TIM_ICFûãr
);

136 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

137 
uöt16_t
 
TIM_ICFûãr
);

138 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

139 
uöt16_t
 
TIM_ICFûãr
);

140 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

141 
uöt16_t
 
TIM_ICFûãr
);

183 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

186 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

188 i‡(
TIMx
 =
TIM2
)

190 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

191 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

193 i‡(
TIMx
 =
TIM3
)

195 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

196 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

198 i‡(
TIMx
 =
TIM4
)

200 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

201 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

203 i‡(
TIMx
 =
TIM5
)

205 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

206 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

208 i‡(
TIMx
 =
TIM6
)

210 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

211 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

213 i‡(
TIMx
 =
TIM7
)

215 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

216 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

219 i‡(
TIMx
 =
TIM9
)

221 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

222 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

224 i‡(
TIMx
 =
TIM10
)

226 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

227 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

231 i‡(
TIMx
 =
TIM11
)

233 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

234 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

238 
	}
}

249 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

251 
uöt16_t
 
tmp¸1
 = 0;

254 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

255 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

256 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

258 
tmp¸1
 = 
TIMx
->
CR1
;

260 if(((
TIMx
Ë=
TIM2
Ë|| ((TIMxË=
TIM3
Ë|| ((TIMxË=
TIM4
Ë|| ((TIMxË=
TIM5
))

263 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

264 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

267 if(((
TIMx
Ë!
TIM6
Ë&& ((TIMxË!
TIM7
))

270 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CKD
));

271 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

274 
TIMx
->
CR1
 = 
tmp¸1
;

277 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

280 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

283 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

284 
	}
}

292 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

295 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFFFFFF;

296 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

297 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

298 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

299 
	}
}

311 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

314 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

315 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

318 
TIMx
->
PSC
 = 
PªsˇÀr
;

320 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

321 
	}
}

335 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

337 
uöt16_t
 
tmp¸1
 = 0;

340 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

341 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

343 
tmp¸1
 = 
TIMx
->
CR1
;

345 
tmp¸1
 &(
uöt16_t
)(~((uöt16_t)(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
)));

347 
tmp¸1
 |
TIM_Cou¡îMode
;

349 
TIMx
->
CR1
 = 
tmp¸1
;

350 
	}
}

358 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
)

361 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

364 
TIMx
->
CNT
 = 
Cou¡î
;

365 
	}
}

373 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
)

376 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

379 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

380 
	}
}

387 
uöt32_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

390 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

393  
TIMx
->
CNT
;

394 
	}
}

401 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

404 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

407  
TIMx
->
PSC
;

408 
	}
}

417 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

420 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

421 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

423 i‡(
NewSèã
 !
DISABLE
)

426 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

431 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_UDIS
);

433 
	}
}

446 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

449 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

450 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

452 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

455 
TIMx
->
CR1
 |
TIM_CR1_URS
;

460 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_URS
);

462 
	}
}

471 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

474 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

475 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

477 i‡(
NewSèã
 !
DISABLE
)

480 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

485 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_ARPE
);

487 
	}
}

500 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

503 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

504 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

507 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_OPM
);

509 
TIMx
->
CR1
 |
TIM_OPMode
;

510 
	}
}

522 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

525 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

526 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

529 
TIMx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CR1_CKD
);

531 
TIMx
->
CR1
 |
TIM_CKD
;

532 
	}
}

541 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

544 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

545 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

547 i‡(
NewSèã
 !
DISABLE
)

550 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

555 
TIMx
->
CR1
 &(
uöt16_t
)(~((uöt16_t)
TIM_CR1_CEN
));

557 
	}
}

614 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

616 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0;

619 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

620 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

621 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

622 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

624 
TIMx
->
CCER
 &(
uöt16_t
)(~(uöt16_t)
TIM_CCER_CC1E
);

627 
tmpc˚r
 = 
TIMx
->
CCER
;

630 
tmpccmrx
 = 
TIMx
->
CCMR1
;

633 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC1M
));

634 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_CC1S
));

637 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

640 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC1P
));

642 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

645 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

648 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

651 
TIMx
->
CCMR1
 = 
tmpccmrx
;

654 
TIMx
->
CCER
 = 
tmpc˚r
;

655 
	}
}

666 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

668 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0;

671 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

672 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

673 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

674 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

676 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2E
));

679 
tmpc˚r
 = 
TIMx
->
CCER
;

682 
tmpccmrx
 = 
TIMx
->
CCMR1
;

685 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR1_OC2M
));

688 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

691 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC2P
));

693 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

696 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

699 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

702 
TIMx
->
CCMR1
 = 
tmpccmrx
;

705 
TIMx
->
CCER
 = 
tmpc˚r
;

706 
	}
}

717 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

719 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0;

722 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

723 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

724 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

725 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

728 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3E
));

731 
tmpc˚r
 = 
TIMx
->
CCER
;

734 
tmpccmrx
 = 
TIMx
->
CCMR2
;

737 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC3M
));

740 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

743 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC3P
));

745 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

748 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

751 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

754 
TIMx
->
CCMR2
 = 
tmpccmrx
;

757 
TIMx
->
CCER
 = 
tmpc˚r
;

758 
	}
}

769 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

771 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0;

774 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

775 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

776 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

777 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

780 
TIMx
->
CCER
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4E
));

783 
tmpc˚r
 = 
TIMx
->
CCER
;

786 
tmpccmrx
 = 
TIMx
->
CCMR2
;

789 
tmpccmrx
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCMR2_OC4M
));

792 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

795 
tmpc˚r
 &(
uöt16_t
)(~((uöt16_t)
TIM_CCER_CC4P
));

797 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

800 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

803 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

806 
TIMx
->
CCMR2
 = 
tmpccmrx
;

809 
TIMx
->
CCER
 = 
tmpc˚r
;

810 
	}
}

818 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

821 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

822 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

823 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x0000;

824 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

825 
	}
}

851 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

853 
uöt32_t
 
tmp
 = 0;

854 
uöt16_t
 
tmp1
 = 0;

857 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

858 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

860 
tmp
 = (
uöt32_t
Ë
TIMx
;

861 
tmp
 +
CCMR_OFFSET
;

863 
tmp1
 = 
CCER_CCE_SET
 << (
uöt16_t
)
TIM_Ch™√l
;

866 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

868 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

870 
tmp
 +(
TIM_Ch™√l
>>1);

873 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC1M
);

876 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

880 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

883 *(
__IO
 
uöt32_t
 *Ë
tmp
 &(uöt32_t)~((uöt32_t)
TIM_CCMR1_OC2M
);

886 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

888 
	}
}

896 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
)

899 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

902 
TIMx
->
CCR1
 = 
Com∑ª1
;

903 
	}
}

911 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
)

914 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

917 
TIMx
->
CCR2
 = 
Com∑ª2
;

918 
	}
}

926 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
)

929 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

932 
TIMx
->
CCR3
 = 
Com∑ª3
;

933 
	}
}

941 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
)

944 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

947 
TIMx
->
CCR4
 = 
Com∑ª4
;

948 
	}
}

959 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

961 
uöt16_t
 
tmpccmr1
 = 0;

963 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

964 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

965 
tmpccmr1
 = 
TIMx
->
CCMR1
;

967 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1M
);

969 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

971 
TIMx
->
CCMR1
 = 
tmpccmr1
;

972 
	}
}

984 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

986 
uöt16_t
 
tmpccmr1
 = 0;

989 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

990 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

992 
tmpccmr1
 = 
TIMx
->
CCMR1
;

994 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2M
);

996 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

998 
TIMx
->
CCMR1
 = 
tmpccmr1
;

999 
	}
}

1010 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1012 
uöt16_t
 
tmpccmr2
 = 0;

1015 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1016 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1018 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1020 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3M
);

1022 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1024 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1025 
	}
}

1036 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1038 
uöt16_t
 
tmpccmr2
 = 0;

1040 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1041 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1043 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1045 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4M
);

1047 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1049 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1050 
	}
}

1061 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1063 
uöt16_t
 
tmpccmr1
 = 0;

1065 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1066 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1068 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1070 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1PE
);

1072 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1074 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1075 
	}
}

1086 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1088 
uöt16_t
 
tmpccmr1
 = 0;

1090 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1091 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1093 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1095 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2PE
);

1097 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1099 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1100 
	}
}

1111 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1113 
uöt16_t
 
tmpccmr2
 = 0;

1116 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1117 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1119 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1121 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3PE
);

1123 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1125 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1126 
	}
}

1137 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1139 
uöt16_t
 
tmpccmr2
 = 0;

1142 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1143 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1145 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1147 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4PE
);

1149 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1151 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1152 
	}
}

1163 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1165 
uöt16_t
 
tmpccmr1
 = 0;

1168 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1169 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1172 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1174 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1FE
);

1176 
tmpccmr1
 |
TIM_OCFa°
;

1178 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1179 
	}
}

1190 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1192 
uöt16_t
 
tmpccmr1
 = 0;

1195 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1196 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1199 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1201 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2FE
);

1203 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1205 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1206 
	}
}

1217 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1219 
uöt16_t
 
tmpccmr2
 = 0;

1222 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1223 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1226 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1228 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3FE
);

1230 
tmpccmr2
 |
TIM_OCFa°
;

1232 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1233 
	}
}

1244 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1246 
uöt16_t
 
tmpccmr2
 = 0;

1249 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1250 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1253 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1255 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4FE
);

1257 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1259 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1260 
	}
}

1271 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1273 
uöt16_t
 
tmpccmr1
 = 0;

1276 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1277 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1279 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1281 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC1CE
);

1283 
tmpccmr1
 |
TIM_OCCÀ¨
;

1285 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1286 
	}
}

1298 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1300 
uöt16_t
 
tmpccmr1
 = 0;

1303 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1304 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1306 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1308 
tmpccmr1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_OC2CE
);

1310 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1312 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1313 
	}
}

1324 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1326 
uöt16_t
 
tmpccmr2
 = 0;

1329 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1330 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1332 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1334 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC3CE
);

1336 
tmpccmr2
 |
TIM_OCCÀ¨
;

1338 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1339 
	}
}

1350 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1352 
uöt16_t
 
tmpccmr2
 = 0;

1355 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1356 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1358 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1360 
tmpccmr2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_OC4CE
);

1362 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1364 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1365 
	}
}

1376 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1378 
uöt16_t
 
tmpc˚r
 = 0;

1381 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1382 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1384 
tmpc˚r
 = 
TIMx
->
CCER
;

1386 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1P
);

1387 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1389 
TIMx
->
CCER
 = 
tmpc˚r
;

1390 
	}
}

1401 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1403 
uöt16_t
 
tmpc˚r
 = 0;

1406 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1407 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1409 
tmpc˚r
 = 
TIMx
->
CCER
;

1411 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2P
);

1412 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1414 
TIMx
->
CCER
 = 
tmpc˚r
;

1415 
	}
}

1426 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1428 
uöt16_t
 
tmpc˚r
 = 0;

1431 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1432 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1434 
tmpc˚r
 = 
TIMx
->
CCER
;

1436 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3P
);

1437 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1439 
TIMx
->
CCER
 = 
tmpc˚r
;

1440 
	}
}

1451 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1453 
uöt16_t
 
tmpc˚r
 = 0;

1456 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1457 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1459 
tmpc˚r
 = 
TIMx
->
CCER
;

1461 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4P
);

1462 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1464 
TIMx
->
CCER
 = 
tmpc˚r
;

1465 
	}
}

1476 
	$TIM_Sñe˘OCREFCÀ¨
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCRe„ªn˚CÀ¨
)

1479 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1480 
	`as£π_∑øm
(
	`TIM_OCREFERENCECECLEAR_SOURCE
(
TIM_OCRe„ªn˚CÀ¨
));

1483 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_OCCS
);

1484 
TIMx
->
SMCR
 |
TIM_OCRe„ªn˚CÀ¨
;

1485 
	}
}

1500 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1502 
uöt16_t
 
tmp
 = 0;

1505 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1506 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1508 
tmp
 = 
CCER_CCE_SET
 << 
TIM_Ch™√l
;

1511 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1514 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1515 
	}
}

1576 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1579 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1580 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

1581 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

1582 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

1583 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

1585 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

1588 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1589 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1590 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1592 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1594 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

1597 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1598 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1599 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1600 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1602 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1604 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

1607 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1608 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1609 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1610 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1612 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1617 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1618 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1619 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1620 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1622 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1624 
	}
}

1632 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1635 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

1636 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1637 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1638 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

1639 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

1640 
	}
}

1651 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1653 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1654 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1656 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1658 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

1660 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

1664 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1667 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

1669 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

1673 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1675 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

1678 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

1679 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1681 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1683 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1685 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1690 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

1691 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1693 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1695 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1697 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1699 
	}
}

1706 
uöt32_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

1709 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1712  
TIMx
->
CCR1
;

1713 
	}
}

1720 
uöt32_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

1723 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1726  
TIMx
->
CCR2
;

1727 
	}
}

1734 
uöt32_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

1737 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1740  
TIMx
->
CCR3
;

1741 
	}
}

1748 
uöt32_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

1751 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1754  
TIMx
->
CCR4
;

1755 
	}
}

1768 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

1771 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1772 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

1775 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC1PSC
);

1777 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

1778 
	}
}

1791 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

1794 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1795 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

1798 
TIMx
->
CCMR1
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR1_IC2PSC
);

1800 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

1801 
	}
}

1814 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

1817 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1818 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

1821 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC3PSC
);

1823 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

1824 
	}
}

1837 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

1840 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1841 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

1844 
TIMx
->
CCMR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CCMR2_IC4PSC
);

1846 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

1847 
	}
}

1883 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1886 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1887 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

1888 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1890 i‡(
NewSèã
 !
DISABLE
)

1893 
TIMx
->
DIER
 |
TIM_IT
;

1898 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

1900 
	}
}

1919 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

1922 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1923 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

1925 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

1926 
	}
}

1950 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

1952 
ITSètus
 
bô°©us
 = 
RESET
;

1955 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1956 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

1958 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

1960 
bô°©us
 = 
SET
;

1964 
bô°©us
 = 
RESET
;

1966  
bô°©us
;

1967 
	}
}

1991 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

1994 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

1995 
	`as£π_∑øm
(
	`IS_TIM_CLEAR_FLAG
(
TIM_FLAG
));

1998 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

1999 
	}
}

2020 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2022 
ITSètus
 
bô°©us
 = 
RESET
;

2023 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2026 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2027 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2029 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2031 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2032 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2034 
bô°©us
 = 
SET
;

2038 
bô°©us
 = 
RESET
;

2040  
bô°©us
;

2041 
	}
}

2062 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2065 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2066 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2069 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2070 
	}
}

2100 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

2103 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2104 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

2105 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

2107 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

2108 
	}
}

2125 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2128 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2129 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

2130 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2132 i‡(
NewSèã
 !
DISABLE
)

2135 
TIMx
->
DIER
 |
TIM_DMASour˚
;

2140 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

2142 
	}
}

2151 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2154 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2155 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2157 i‡(
NewSèã
 !
DISABLE
)

2160 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

2165 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_CCDS
);

2167 
	}
}

2190 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

2193 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2195 
TIMx
->
SMCR
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

2196 
	}
}

2209 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2212 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2213 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2215 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

2217 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2218 
	}
}

2236 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

2237 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

2240 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2241 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

2242 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

2245 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

2247 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2251 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2254 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

2256 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2257 
	}
}

2276 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

2277 
uöt16_t
 
ExtTRGFûãr
)

2279 
uöt16_t
 
tmpsm¸
 = 0;

2282 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2283 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2284 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2285 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2288 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2291 
tmpsm¸
 = 
TIMx
->
SMCR
;

2293 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

2295 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

2297 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

2298 
tmpsm¸
 |
TIM_TS_ETRF
;

2300 
TIMx
->
SMCR
 = 
tmpsm¸
;

2301 
	}
}

2320 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2321 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2324 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2325 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2326 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2327 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2330 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2332 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

2333 
	}
}

2386 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2388 
uöt16_t
 
tmpsm¸
 = 0;

2391 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2392 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2395 
tmpsm¸
 = 
TIMx
->
SMCR
;

2397 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_TS
));

2399 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

2401 
TIMx
->
SMCR
 = 
tmpsm¸
;

2402 
	}
}

2429 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2432 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2433 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2436 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_MMS
);

2438 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2439 
	}
}

2453 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2456 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2457 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2460 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_SMS
);

2462 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2463 
	}
}

2475 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2478 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2479 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2482 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_MSM
);

2485 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2486 
	}
}

2505 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

2506 
uöt16_t
 
ExtTRGFûãr
)

2508 
uöt16_t
 
tmpsm¸
 = 0;

2511 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2512 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2513 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2514 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2516 
tmpsm¸
 = 
TIMx
->
SMCR
;

2518 
tmpsm¸
 &
SMCR_ETR_MASK
;

2520 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

2522 
TIMx
->
SMCR
 = 
tmpsm¸
;

2523 
	}
}

2560 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

2561 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

2563 
uöt16_t
 
tmpsm¸
 = 0;

2564 
uöt16_t
 
tmpccmr1
 = 0;

2565 
uöt16_t
 
tmpc˚r
 = 0;

2568 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2569 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

2570 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

2571 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

2574 
tmpsm¸
 = 
TIMx
->
SMCR
;

2576 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2578 
tmpc˚r
 = 
TIMx
->
CCER
;

2580 
tmpsm¸
 &(
uöt16_t
)(~((uöt16_t)
TIM_SMCR_SMS
));

2581 
tmpsm¸
 |
TIM_EncodîMode
;

2583 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& (uöt16_t)(~((uöt16_t)
TIM_CCMR1_CC2S
)));

2584 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

2586 
tmpc˚r
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCER_CC1P
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCER_CC2P
)));

2587 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

2589 
TIMx
->
SMCR
 = 
tmpsm¸
;

2591 
TIMx
->
CCMR1
 = 
tmpccmr1
;

2593 
TIMx
->
CCER
 = 
tmpc˚r
;

2594 
	}
}

2603 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2606 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2607 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2609 i‡(
NewSèã
 !
DISABLE
)

2612 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

2617 
TIMx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
TIM_CR2_TI1S
);

2619 
	}
}

2666 
	$TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_Rem≠
)

2669 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2670 
	`as£π_∑øm
(
	`IS_TIM_REMAP
(
TIM_Rem≠
));

2673 
TIMx
->
OR
 &(
uöt16_t
)(
TIM_Rem≠
 >> 16);

2674 
TIMx
->
OR
 |(
uöt16_t
)
TIM_Rem≠
;

2675 
	}
}

2697 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2698 
uöt16_t
 
TIM_ICFûãr
)

2700 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

2703 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC1E
);

2704 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2705 
tmpc˚r
 = 
TIMx
->
CCER
;

2707 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC1S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC1F
)));

2708 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2710 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
));

2711 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

2713 
TIMx
->
CCMR1
 = 
tmpccmr1
;

2714 
TIMx
->
CCER
 = 
tmpc˚r
;

2715 
	}
}

2733 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2734 
uöt16_t
 
TIM_ICFûãr
)

2736 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2739 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC2E
);

2740 
tmpccmr1
 = 
TIMx
->
CCMR1
;

2741 
tmpc˚r
 = 
TIMx
->
CCER
;

2742 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

2744 
tmpccmr1
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR1_CC2S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR1_IC2F
)));

2745 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2746 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2748 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
));

2749 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

2751 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

2752 
TIMx
->
CCER
 = 
tmpc˚r
;

2753 
	}
}

2771 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2772 
uöt16_t
 
TIM_ICFûãr
)

2774 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2777 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC3E
);

2778 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2779 
tmpc˚r
 = 
TIMx
->
CCER
;

2780 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

2782 
tmpccmr2
 &(
uöt16_t
)(((uöt16_t)~((uöt16_t)
TIM_CCMR2_CC3S
)Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC3F
)));

2783 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

2785 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
));

2786 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

2788 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2789 
TIMx
->
CCER
 = 
tmpc˚r
;

2790 
	}
}

2808 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

2809 
uöt16_t
 
TIM_ICFûãr
)

2811 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

2814 
TIMx
->
CCER
 &(
uöt16_t
)~((uöt16_t)
TIM_CCER_CC4E
);

2815 
tmpccmr2
 = 
TIMx
->
CCMR2
;

2816 
tmpc˚r
 = 
TIMx
->
CCER
;

2817 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

2819 
tmpccmr2
 &(
uöt16_t
)((uöt16_t)(~(uöt16_t)
TIM_CCMR2_CC4S
Ë& ((uöt16_t)~((uöt16_t)
TIM_CCMR2_IC4F
)));

2820 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

2821 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

2824 
tmpc˚r
 &(
uöt16_t
)~((uöt16_t)(
TIM_CCER_CC4P
 | 
TIM_CCER_CC4NP
));

2825 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

2827 
TIMx
->
CCMR2
 = 
tmpccmr2
;

2828 
TIMx
->
CCER
 = 
tmpc˚r
 ;

2829 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_usart.c

79 
	~"°m32l1xx_ußπ.h
"

80 
	~"°m32l1xx_rcc.h
"

95 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | \

96 
USART_CR1_PS
 | 
USART_CR1_TE
 | \

97 
USART_CR1_RE
))

	)

100 
	#CR2_CLOCK_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR2_CLKEN
 | 
USART_CR2_CPOL
 | \

101 
USART_CR2_CPHA
 | 
USART_CR2_LBCL
))

	)

104 
	#CR3_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
))

	)

107 
	#IT_MASK
 ((
uöt16_t
)0x001F)

	)

173 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

176 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

178 i‡(
USARTx
 =
USART1
)

180 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

181 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

183 i‡(
USARTx
 =
USART2
)

185 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

186 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

188 i‡(
USARTx
 =
USART3
)

190 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

191 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

193 i‡(
USARTx
 =
UART4
)

195 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

196 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

200 i‡(
USARTx
 =
UART5
)

202 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

203 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

206 
	}
}

218 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

220 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

221 
uöt32_t
 
öãgîdividî
 = 0x00;

222 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

223 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

226 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

227 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

228 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

229 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

230 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

231 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

232 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

235 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

237 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

241 
tm¥eg
 = 
USARTx
->
CR2
;

243 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_STOP
);

247 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

250 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

253 
tm¥eg
 = 
USARTx
->
CR1
;

255 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR1_CLEAR_MASK
);

261 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

262 
USART_InôSåu˘
->
USART_Mode
;

265 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

268 
tm¥eg
 = 
USARTx
->
CR3
;

270 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR3_CLEAR_MASK
);

274 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

277 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

281 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

282 i‡(
USARTx
 =
USART1
)

284 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

288 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

292 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

295 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

300 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

302 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

305 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

308 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

310 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

314 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

318 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

319 
	}
}

327 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

330 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

331 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

332 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

333 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

334 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

335 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

336 
	}
}

348 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

350 
uöt32_t
 
tm¥eg
 = 0x00;

352 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

353 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

354 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

355 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

356 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

359 
tm¥eg
 = 
USARTx
->
CR2
;

361 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR2_CLOCK_CLEAR_MASK
);

367 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

368 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

370 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

371 
	}
}

379 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

382 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

383 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

384 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

385 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

386 
	}
}

397 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

400 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

401 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

403 i‡(
NewSèã
 !
DISABLE
)

406 
USARTx
->
CR1
 |
USART_CR1_UE
;

411 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_UE
);

413 
	}
}

424 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

427 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

430 
USARTx
->
GTPR
 &
USART_GTPR_GT
;

432 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

433 
	}
}

448 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

451 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

452 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

454 i‡(
NewSèã
 !
DISABLE
)

457 
USARTx
->
CR1
 |
USART_CR1_OVER8
;

462 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_OVER8
);

464 
	}
}

475 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

478 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

479 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

481 i‡(
NewSèã
 !
DISABLE
)

484 
USARTx
->
CR3
 |
USART_CR3_ONEBIT
;

489 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
);

491 
	}
}

529 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

532 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

533 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

536 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

537 
	}
}

546 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

549 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

552  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

553 
	}
}

598 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

601 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

602 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

605 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_ADD
);

607 
USARTx
->
CR2
 |
USART_Addªss
;

608 
	}
}

619 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

622 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

623 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

625 i‡(
NewSèã
 !
DISABLE
)

628 
USARTx
->
CR1
 |
USART_CR1_RWU
;

633 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_RWU
);

635 
	}
}

647 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

650 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

651 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

653 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_WAKE
);

654 
USARTx
->
CR1
 |
USART_WakeUp
;

655 
	}
}

712 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

715 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

716 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

718 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LBDL
);

719 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

720 
	}
}

731 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

734 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

735 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

737 i‡(
NewSèã
 !
DISABLE
)

740 
USARTx
->
CR2
 |
USART_CR2_LINEN
;

745 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LINEN
);

747 
	}
}

756 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

759 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

762 
USARTx
->
CR1
 |
USART_CR1_SBK
;

763 
	}
}

805 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

808 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

809 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

811 i‡(
NewSèã
 !
DISABLE
)

814 
USARTx
->
CR3
 |
USART_CR3_HDSEL
;

819 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_HDSEL
);

821 
	}
}

887 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

890 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

893 
USARTx
->
GTPR
 &
USART_GTPR_PSC
;

895 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

896 
	}
}

907 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

910 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

911 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

912 i‡(
NewSèã
 !
DISABLE
)

915 
USARTx
->
CR3
 |
USART_CR3_SCEN
;

920 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_SCEN
);

922 
	}
}

933 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

936 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

937 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

938 i‡(
NewSèã
 !
DISABLE
)

941 
USARTx
->
CR3
 |
USART_CR3_NACK
;

946 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_NACK
);

948 
	}
}

1005 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

1008 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1009 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

1011 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IRLP
);

1012 
USARTx
->
CR3
 |
USART_IrDAMode
;

1013 
	}
}

1024 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1027 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1028 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1030 i‡(
NewSèã
 !
DISABLE
)

1033 
USARTx
->
CR3
 |
USART_CR3_IREN
;

1038 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IREN
);

1040 
	}
}

1071 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1074 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1075 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

1076 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1078 i‡(
NewSèã
 !
DISABLE
)

1082 
USARTx
->
CR3
 |
USART_DMAReq
;

1088 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

1090 
	}
}

1200 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1202 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

1203 
uöt32_t
 
ußπxba£
 = 0x00;

1205 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1206 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

1207 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1210 i‡(
USART_IT
 =
USART_IT_CTS
)

1212 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1215 
ußπxba£
 = (
uöt32_t
)
USARTx
;

1218 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1221 
ôpos
 = 
USART_IT
 & 
IT_MASK
;

1222 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

1224 i‡(
ußπªg
 == 0x01)

1226 
ußπxba£
 += 0x0C;

1228 i‡(
ußπªg
 == 0x02)

1230 
ußπxba£
 += 0x10;

1234 
ußπxba£
 += 0x14;

1236 i‡(
NewSèã
 !
DISABLE
)

1238 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

1242 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

1244 
	}
}

1265 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1267 
FœgSètus
 
bô°©us
 = 
RESET
;

1269 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1270 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

1273 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

1275 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1278 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

1280 
bô°©us
 = 
SET
;

1284 
bô°©us
 = 
RESET
;

1286  
bô°©us
;

1287 
	}
}

1315 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1318 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1319 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

1322 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

1324 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1327 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

1328 
	}
}

1350 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1352 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

1353 
ITSètus
 
bô°©us
 = 
RESET
;

1355 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1356 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

1359 i‡(
USART_IT
 =
USART_IT_CTS
)

1361 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1365 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1367 
ômask
 = 
USART_IT
 & 
IT_MASK
;

1368 
ômask
 = (
uöt32_t
)0x01 << itmask;

1370 i‡(
ußπªg
 == 0x01)

1372 
ômask
 &
USARTx
->
CR1
;

1374 i‡(
ußπªg
 == 0x02)

1376 
ômask
 &
USARTx
->
CR2
;

1380 
ômask
 &
USARTx
->
CR3
;

1383 
bôpos
 = 
USART_IT
 >> 0x08;

1384 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

1385 
bôpos
 &
USARTx
->
SR
;

1386 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

1388 
bô°©us
 = 
SET
;

1392 
bô°©us
 = 
RESET
;

1395  
bô°©us
;

1396 
	}
}

1425 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1427 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1429 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1430 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1433 i‡(
USART_IT
 =
USART_IT_CTS
)

1435 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1438 
bôpos
 = 
USART_IT
 >> 0x08;

1439 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1440 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1441 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_wwdg.c

86 
	~"°m32l1xx_wwdg.h
"

87 
	~"°m32l1xx_rcc.h
"

102 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

105 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

106 
	#EWI_BôNumbî
 0x09

	)

107 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

112 
	#CFR_WDGTB_MASK
 ((
uöt32_t
)0xFFFFFE7F)

	)

113 
	#CFR_W_MASK
 ((
uöt32_t
)0xFFFFFF80)

	)

114 
	#BIT_MASK
 ((
uöt8_t
)0x7F)

	)

142 
	$WWDG_DeInô
()

144 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

146 
	}
}

158 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

160 
uöt32_t
 
tm¥eg
 = 0;

162 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

164 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_MASK
;

166 
tm¥eg
 |
WWDG_PªsˇÀr
;

168 
WWDG
->
CFR
 = 
tm¥eg
;

169 
	}
}

177 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

179 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

182 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

185 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_MASK
;

188 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_MASK
;

191 
WWDG
->
CFR
 = 
tm¥eg
;

192 
	}
}

200 
	$WWDG_E«bÀIT
()

202 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

203 
	}
}

212 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

215 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

218 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_MASK
;

219 
	}
}

244 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

247 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

248 
WWDG
->
CR
 = 
WWDG_CR_WDGA
 | 
Cou¡î
;

249 
	}
}

272 
FœgSètus
 
	$WWDG_GëFœgSètus
()

274 
FœgSètus
 
bô°©us
 = 
RESET
;

276 i‡((
WWDG
->
SR
Ë!(
uöt32_t
)
RESET
)

278 
bô°©us
 = 
SET
;

282 
bô°©us
 = 
RESET
;

284  
bô°©us
;

285 
	}
}

292 
	$WWDG_CÀ¨Fœg
()

294 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

295 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\cmsis\core_cm3.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_CM3_H_GENERIC


32 
	#__CORE_CM3_H_GENERIC


	)

56 
	#__CM3_CMSIS_VERSION_MAIN
 (0x03Ë

	)

57 
	#__CM3_CMSIS_VERSION_SUB
 (0x00Ë

	)

58 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16) | \

59 
__CM3_CMSIS_VERSION_SUB
 )

	)

61 
	#__CORTEX_M
 (0x03Ë

	)

64 #i‡ 
deföed
 ( 
__CC_ARM
 )

65 
	#__ASM
 
__asm


	)

66 
	#__INLINE
 
__ölöe


	)

67 
	#__STATIC_INLINE
 
__ölöe


	)

69 #ñi‡
deföed
 ( 
__ICCARM__
 )

70 
	#__ASM
 
__asm


	)

71 
	#__INLINE
 
ölöe


	)

72 
	#__STATIC_INLINE
 
ölöe


	)

74 #ñi‡
deföed
 ( 
__TMS470__
 )

75 
	#__ASM
 
__asm


	)

76 
	#__STATIC_INLINE
 
ölöe


	)

78 #ñi‡
deföed
 ( 
__GNUC__
 )

79 
	#__ASM
 
__asm


	)

80 
	#__INLINE
 
ölöe


	)

81 
	#__STATIC_INLINE
 
ölöe


	)

83 #ñi‡
deföed
 ( 
__TASKING__
 )

84 
	#__ASM
 
__asm


	)

85 
	#__INLINE
 
ölöe


	)

86 
	#__STATIC_INLINE
 
ölöe


	)

92 
	#__FPU_USED
 0

	)

94 #i‡
deföed
 ( 
__CC_ARM
 )

95 #i‡
deföed
 
__TARGET_FPU_VFP


99 #ñi‡
deföed
 ( 
__ICCARM__
 )

100 #i‡
deföed
 
__ARMVFP__


104 #ñi‡
deföed
 ( 
__TMS470__
 )

105 #i‡
deföed
 
__TI__VFP_SUPPORT____


109 #ñi‡
deföed
 ( 
__GNUC__
 )

110 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

114 #ñi‡
deföed
 ( 
__TASKING__
 )

118 
	~<°döt.h
>

119 
	~<c‹e_cmIn°r.h
>

120 
	~<c‹e_cmFunc.h
>

124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_CM3_H_DEPENDANT


127 
	#__CORE_CM3_H_DEPENDANT


	)

130 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


131 #i‚de‡
__CM3_REV


132 
	#__CM3_REV
 0x0200

	)

136 #i‚de‡
__MPU_PRESENT


137 
	#__MPU_PRESENT
 0

	)

141 #i‚de‡
__NVIC_PRIO_BITS


142 
	#__NVIC_PRIO_BITS
 4

	)

146 #i‚de‡
__Víd‹_SysTickC⁄fig


147 
	#__Víd‹_SysTickC⁄fig
 0

	)

160 #ifde‡
__˝lu•lus


161 
	#__I
 vﬁ©ûê

	)

163 
	#__I
 vﬁ©ûêc⁄°

	)

165 
	#__O
 vﬁ©ûê

	)

166 
	#__IO
 vﬁ©ûê

	)

198 #i‡(
__CORTEX_M
 != 0x04)

199 
uöt32_t
 
_ª£rved0
:27;

201 
uöt32_t
 
_ª£rved0
:16;

202 
uöt32_t
 
GE
:4;

203 
uöt32_t
 
_ª£rved1
:7;

205 
uöt32_t
 
Q
:1;

206 
uöt32_t
 
V
:1;

207 
uöt32_t
 
C
:1;

208 
uöt32_t
 
Z
:1;

209 
uöt32_t
 
N
:1;

210 } 
b
;

211 
uöt32_t
 
w
;

212 } 
	tAPSR_Ty≥
;

221 
uöt32_t
 
	mISR
:9;

222 
uöt32_t
 
	m_ª£rved0
:23;

223 } 
	mb
;

224 
uöt32_t
 
	mw
;

225 } 
	tIPSR_Ty≥
;

234 
uöt32_t
 
	mISR
:9;

235 #i‡(
__CORTEX_M
 != 0x04)

236 
uöt32_t
 
	m_ª£rved0
:15;

238 
uöt32_t
 
	m_ª£rved0
:7;

239 
uöt32_t
 
	mGE
:4;

240 
uöt32_t
 
	m_ª£rved1
:4;

242 
uöt32_t
 
	mT
:1;

243 
uöt32_t
 
	mIT
:2;

244 
uöt32_t
 
	mQ
:1;

245 
uöt32_t
 
	mV
:1;

246 
uöt32_t
 
	mC
:1;

247 
uöt32_t
 
	mZ
:1;

248 
uöt32_t
 
	mN
:1;

249 } 
	mb
;

250 
uöt32_t
 
	mw
;

251 } 
	txPSR_Ty≥
;

260 
uöt32_t
 
	mnPRIV
:1;

261 
uöt32_t
 
	mSPSEL
:1;

262 
uöt32_t
 
	mFPCA
:1;

263 
uöt32_t
 
	m_ª£rved0
:29;

264 } 
	mb
;

265 
uöt32_t
 
	mw
;

266 } 
	tCONTROL_Ty≥
;

281 
__IO
 
uöt32_t
 
	mISER
[8];

282 
uöt32_t
 
	mRESERVED0
[24];

283 
__IO
 
uöt32_t
 
	mICER
[8];

284 
uöt32_t
 
	mRSERVED1
[24];

285 
__IO
 
uöt32_t
 
	mISPR
[8];

286 
uöt32_t
 
	mRESERVED2
[24];

287 
__IO
 
uöt32_t
 
	mICPR
[8];

288 
uöt32_t
 
	mRESERVED3
[24];

289 
__IO
 
uöt32_t
 
	mIABR
[8];

290 
uöt32_t
 
	mRESERVED4
[56];

291 
__IO
 
uöt8_t
 
	mIP
[240];

292 
uöt32_t
 
	mRESERVED5
[644];

293 
__O
 
uöt32_t
 
	mSTIR
;

294 } 
	tNVIC_Ty≥
;

297 
	#NVIC_STIR_INTID_Pos
 0

	)

298 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

313 
__I
 
uöt32_t
 
	mCPUID
;

314 
__IO
 
uöt32_t
 
	mICSR
;

315 
__IO
 
uöt32_t
 
	mVTOR
;

316 
__IO
 
uöt32_t
 
	mAIRCR
;

317 
__IO
 
uöt32_t
 
	mSCR
;

318 
__IO
 
uöt32_t
 
	mCCR
;

319 
__IO
 
uöt8_t
 
	mSHP
[12];

320 
__IO
 
uöt32_t
 
	mSHCSR
;

321 
__IO
 
uöt32_t
 
	mCFSR
;

322 
__IO
 
uöt32_t
 
	mHFSR
;

323 
__IO
 
uöt32_t
 
	mDFSR
;

324 
__IO
 
uöt32_t
 
	mMMFAR
;

325 
__IO
 
uöt32_t
 
	mBFAR
;

326 
__IO
 
uöt32_t
 
	mAFSR
;

327 
__I
 
uöt32_t
 
	mPFR
[2];

328 
__I
 
uöt32_t
 
	mDFR
;

329 
__I
 
uöt32_t
 
	mADR
;

330 
__I
 
uöt32_t
 
	mMMFR
[4];

331 
__I
 
uöt32_t
 
	mISAR
[5];

332 
uöt32_t
 
	mRESERVED0
[5];

333 
__IO
 
uöt32_t
 
	mCPACR
;

334 } 
	tSCB_Ty≥
;

337 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

338 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

340 
	#SCB_CPUID_VARIANT_Pos
 20

	)

341 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

343 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

344 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

346 
	#SCB_CPUID_PARTNO_Pos
 4

	)

347 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

349 
	#SCB_CPUID_REVISION_Pos
 0

	)

350 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

353 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

354 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

356 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

357 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

359 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

360 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

362 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

363 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

365 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

366 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

368 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

369 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

371 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

372 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

374 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

375 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

377 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

378 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

380 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

381 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

384 #i‡(
__CM3_REV
 < 0x0201)

385 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

386 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

388 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

389 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

391 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

392 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

396 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

397 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

399 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

400 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

402 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

403 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

405 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

406 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

408 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

409 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

411 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

412 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

414 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

415 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

418 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

419 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

421 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

422 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

424 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

425 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

428 
	#SCB_CCR_STKALIGN_Pos
 9

	)

429 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

431 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

432 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

434 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

435 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

437 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

438 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

440 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

441 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

443 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

444 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

447 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

448 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

450 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

451 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

453 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

454 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

456 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

457 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

459 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

460 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

462 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

463 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

465 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

466 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

468 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

469 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

471 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

472 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

474 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

475 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

477 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

478 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

480 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

481 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

483 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

484 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

486 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

487 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

490 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

491 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

493 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

494 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

496 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

497 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

500 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

501 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

503 
	#SCB_HFSR_FORCED_Pos
 30

	)

504 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

506 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

507 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

510 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

511 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

513 
	#SCB_DFSR_VCATCH_Pos
 3

	)

514 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

516 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

517 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

519 
	#SCB_DFSR_BKPT_Pos
 1

	)

520 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

522 
	#SCB_DFSR_HALTED_Pos
 0

	)

523 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

538 
uöt32_t
 
	mRESERVED0
[1];

539 
__I
 
uöt32_t
 
	mICTR
;

540 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

541 
__IO
 
uöt32_t
 
	mACTLR
;

543 
uöt32_t
 
	mRESERVED1
[1];

545 } 
	tSCnSCB_Ty≥
;

548 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

549 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

553 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

554 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

556 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

557 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

559 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

560 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

575 
__IO
 
uöt32_t
 
	mCTRL
;

576 
__IO
 
uöt32_t
 
	mLOAD
;

577 
__IO
 
uöt32_t
 
	mVAL
;

578 
__I
 
uöt32_t
 
	mCALIB
;

579 } 
	tSysTick_Ty≥
;

582 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

583 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

585 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

586 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

588 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

589 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

591 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

592 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

595 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

596 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

599 
	#SysTick_VAL_CURRENT_Pos
 0

	)

600 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

603 
	#SysTick_CALIB_NOREF_Pos
 31

	)

604 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

606 
	#SysTick_CALIB_SKEW_Pos
 30

	)

607 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

609 
	#SysTick_CALIB_TENMS_Pos
 0

	)

610 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

625 
__O
 union

627 
__O
 
uöt8_t
 
	mu8
;

628 
__O
 
uöt16_t
 
	mu16
;

629 
__O
 
uöt32_t
 
	mu32
;

630 } 
	mPORT
 [32];

631 
uöt32_t
 
	mRESERVED0
[864];

632 
__IO
 
uöt32_t
 
	mTER
;

633 
uöt32_t
 
	mRESERVED1
[15];

634 
__IO
 
uöt32_t
 
	mTPR
;

635 
uöt32_t
 
	mRESERVED2
[15];

636 
__IO
 
uöt32_t
 
	mTCR
;

637 } 
	tITM_Ty≥
;

640 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

641 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

644 
	#ITM_TCR_BUSY_Pos
 23

	)

645 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

647 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

648 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

650 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

651 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

653 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

654 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

656 
	#ITM_TCR_SWOENA_Pos
 4

	)

657 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

659 
	#ITM_TCR_TXENA_Pos
 3

	)

660 
	#ITM_TCR_TXENA_Msk
 (1UL << 
ITM_TCR_TXENA_Pos
Ë

	)

662 
	#ITM_TCR_SYNCENA_Pos
 2

	)

663 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

665 
	#ITM_TCR_TSENA_Pos
 1

	)

666 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

668 
	#ITM_TCR_ITMENA_Pos
 0

	)

669 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

684 
__IO
 
uöt32_t
 
	mCTRL
;

685 
__IO
 
uöt32_t
 
	mCYCCNT
;

686 
__IO
 
uöt32_t
 
	mCPICNT
;

687 
__IO
 
uöt32_t
 
	mEXCCNT
;

688 
__IO
 
uöt32_t
 
	mSLEEPCNT
;

689 
__IO
 
uöt32_t
 
	mLSUCNT
;

690 
__IO
 
uöt32_t
 
	mFOLDCNT
;

691 
__I
 
uöt32_t
 
	mPCSR
;

692 
__IO
 
uöt32_t
 
	mCOMP0
;

693 
__IO
 
uöt32_t
 
	mMASK0
;

694 
__IO
 
uöt32_t
 
	mFUNCTION0
;

695 
uöt32_t
 
	mRESERVED0
[1];

696 
__IO
 
uöt32_t
 
	mCOMP1
;

697 
__IO
 
uöt32_t
 
	mMASK1
;

698 
__IO
 
uöt32_t
 
	mFUNCTION1
;

699 
uöt32_t
 
	mRESERVED1
[1];

700 
__IO
 
uöt32_t
 
	mCOMP2
;

701 
__IO
 
uöt32_t
 
	mMASK2
;

702 
__IO
 
uöt32_t
 
	mFUNCTION2
;

703 
uöt32_t
 
	mRESERVED2
[1];

704 
__IO
 
uöt32_t
 
	mCOMP3
;

705 
__IO
 
uöt32_t
 
	mMASK3
;

706 
__IO
 
uöt32_t
 
	mFUNCTION3
;

707 } 
	tDWT_Ty≥
;

710 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

711 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

713 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

714 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

716 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

717 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

719 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

720 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

722 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

723 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

725 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

726 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

728 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

729 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

731 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

732 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

734 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

735 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

737 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

738 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

740 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

741 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

743 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

744 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

746 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

747 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

749 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

750 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

752 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

753 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

755 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

756 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

758 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

759 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

761 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

762 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

765 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

766 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

769 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

770 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

773 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

774 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

777 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

778 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

781 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

782 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

785 
	#DWT_MASK_MASK_Pos
 0

	)

786 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

789 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

790 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

792 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

793 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

795 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

796 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

798 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

799 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

801 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

802 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

804 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

805 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

807 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

808 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

810 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

811 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

813 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

814 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

829 
__IO
 
uöt32_t
 
	mSSPSR
;

830 
__IO
 
uöt32_t
 
	mCSPSR
;

831 
uöt32_t
 
	mRESERVED0
[2];

832 
__IO
 
uöt32_t
 
	mACPR
;

833 
uöt32_t
 
	mRESERVED1
[55];

834 
__IO
 
uöt32_t
 
	mSPPR
;

835 
uöt32_t
 
	mRESERVED2
[131];

836 
__I
 
uöt32_t
 
	mFFSR
;

837 
__IO
 
uöt32_t
 
	mFFCR
;

838 
__I
 
uöt32_t
 
	mFSCR
;

839 
uöt32_t
 
	mRESERVED3
[759];

840 
__I
 
uöt32_t
 
	mTRIGGER
;

841 
__I
 
uöt32_t
 
	mFIFO0
;

842 
__I
 
uöt32_t
 
	mITATBCTR2
;

843 
uöt32_t
 
	mRESERVED4
[1];

844 
__I
 
uöt32_t
 
	mITATBCTR0
;

845 
__I
 
uöt32_t
 
	mFIFO1
;

846 
__IO
 
uöt32_t
 
	mITCTRL
;

847 
uöt32_t
 
	mRESERVED5
[39];

848 
__IO
 
uöt32_t
 
	mCLAIMSET
;

849 
__IO
 
uöt32_t
 
	mCLAIMCLR
;

850 
uöt32_t
 
	mRESERVED7
[8];

851 
__I
 
uöt32_t
 
	mDEVID
;

852 
__I
 
uöt32_t
 
	mDEVTYPE
;

853 } 
	tTPI_Ty≥
;

856 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

857 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

860 
	#TPI_SPPR_TXMODE_Pos
 0

	)

861 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

864 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

865 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

867 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

868 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

870 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

871 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

873 
	#TPI_FFSR_FlInProg_Pos
 0

	)

874 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

877 
	#TPI_FFCR_TrigIn_Pos
 8

	)

878 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

880 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

881 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

884 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

885 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

888 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

889 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

891 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

892 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

894 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

895 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

897 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

898 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

900 
	#TPI_FIFO0_ETM2_Pos
 16

	)

901 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

903 
	#TPI_FIFO0_ETM1_Pos
 8

	)

904 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

906 
	#TPI_FIFO0_ETM0_Pos
 0

	)

907 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

910 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

911 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

914 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

915 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

917 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

918 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

920 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

921 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

923 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

924 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

926 
	#TPI_FIFO1_ITM2_Pos
 16

	)

927 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

929 
	#TPI_FIFO1_ITM1_Pos
 8

	)

930 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

932 
	#TPI_FIFO1_ITM0_Pos
 0

	)

933 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

936 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

937 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

940 
	#TPI_ITCTRL_Mode_Pos
 0

	)

941 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

944 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

945 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

947 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

948 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

950 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

951 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

953 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

954 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

956 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

957 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

959 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

960 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

963 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

964 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

966 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

967 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

972 #i‡(
__MPU_PRESENT
 == 1)

983 
__I
 
uöt32_t
 
	mTYPE
;

984 
__IO
 
uöt32_t
 
	mCTRL
;

985 
__IO
 
uöt32_t
 
	mRNR
;

986 
__IO
 
uöt32_t
 
	mRBAR
;

987 
__IO
 
uöt32_t
 
	mRASR
;

988 
__IO
 
uöt32_t
 
	mRBAR_A1
;

989 
__IO
 
uöt32_t
 
	mRASR_A1
;

990 
__IO
 
uöt32_t
 
	mRBAR_A2
;

991 
__IO
 
uöt32_t
 
	mRASR_A2
;

992 
__IO
 
uöt32_t
 
	mRBAR_A3
;

993 
__IO
 
uöt32_t
 
	mRASR_A3
;

994 } 
	tMPU_Ty≥
;

997 
	#MPU_TYPE_IREGION_Pos
 16

	)

998 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1000 
	#MPU_TYPE_DREGION_Pos
 8

	)

1001 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1003 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1004 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1007 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1008 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1010 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1011 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1013 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1014 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1017 
	#MPU_RNR_REGION_Pos
 0

	)

1018 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1021 
	#MPU_RBAR_ADDR_Pos
 5

	)

1022 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1024 
	#MPU_RBAR_VALID_Pos
 4

	)

1025 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1027 
	#MPU_RBAR_REGION_Pos
 0

	)

1028 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1031 
	#MPU_RASR_ATTRS_Pos
 16

	)

1032 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1034 
	#MPU_RASR_SRD_Pos
 8

	)

1035 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1037 
	#MPU_RASR_SIZE_Pos
 1

	)

1038 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1040 
	#MPU_RASR_ENABLE_Pos
 0

	)

1041 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1057 
__IO
 
uöt32_t
 
	mDHCSR
;

1058 
__O
 
uöt32_t
 
	mDCRSR
;

1059 
__IO
 
uöt32_t
 
	mDCRDR
;

1060 
__IO
 
uöt32_t
 
	mDEMCR
;

1061 } 
	tC‹eDebug_Ty≥
;

1064 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1065 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1067 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1068 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1070 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1071 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1073 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1074 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1076 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1077 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1079 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1080 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1082 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1083 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1085 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1086 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1088 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1089 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1091 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1092 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1094 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1095 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1097 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1098 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1101 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1102 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1104 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1105 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1108 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1109 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1111 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1112 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1114 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1115 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1117 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1118 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1120 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1121 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1123 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1124 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1126 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1127 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1129 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1130 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1132 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1133 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1135 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1136 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1138 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1139 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1141 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1142 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1144 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1145 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1157 
	#SCS_BASE
 (0xE000E000ULË

	)

1158 
	#ITM_BASE
 (0xE0000000ULË

	)

1159 
	#DWT_BASE
 (0xE0001000ULË

	)

1160 
	#TPI_BASE
 (0xE0040000ULË

	)

1161 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1162 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1163 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1164 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1166 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1167 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1168 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1169 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1170 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1171 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1172 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1173 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1175 #i‡(
__MPU_PRESENT
 == 1)

1176 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1177 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1214 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1216 
uöt32_t
 
ªg_vÆue
;

1217 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1219 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1220 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1221 
ªg_vÆue
 = (reg_value |

1222 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1223 (
Pri‹ôyGroupTmp
 << 8));

1224 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1225 
	}
}

1234 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôyGroupög
()

1236  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1237 
	}
}

1246 
__STATIC_INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1248 
NVIC
->
ISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1249 
	}
}

1258 
__STATIC_INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1260 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1261 
	}
}

1274 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1276 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1277 
	}
}

1286 
__STATIC_INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1288 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1289 
	}
}

1298 
__STATIC_INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1300 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1301 
	}
}

1313 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1315 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1316 
	}
}

1328 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1330 if(
IRQn
 < 0) {

1331 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1333 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1334 
	}
}

1348 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1351 if(
IRQn
 < 0) {

1352 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1354 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1355 
	}
}

1370 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_EncodePri‹ôy
 (
uöt32_t
 
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1372 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1373 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1374 
uöt32_t
 
SubPri‹ôyBôs
;

1376 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1377 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1380 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1381 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1383 
	}
}

1398 
__STATIC_INLINE
 
	$NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1400 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1401 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1402 
uöt32_t
 
SubPri‹ôyBôs
;

1404 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1405 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1407 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1408 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1409 
	}
}

1416 
__STATIC_INLINE
 
	$NVIC_Sy°emRe£t
()

1418 
	`__DSB
();

1420 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1421 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1422 
SCB_AIRCR_SYSRESETREQ_Msk
);

1423 
	`__DSB
();

1425 
	}
}

1438 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1455 
__STATIC_INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

1457 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

1459 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1460 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1461 
SysTick
->
VAL
 = 0;

1462 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1463 
SysTick_CTRL_TICKINT_Msk
 |

1464 
SysTick_CTRL_ENABLE_Msk
;

1466 
	}
}

1481 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1482 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1495 
__STATIC_INLINE
 
uöt32_t
 
	$ITM_SídCh¨
 (
uöt32_t
 
ch
)

1497 i‡((
ITM
->
TCR
 & 
ITM_TCR_ITMENA_Msk
) &&

1498 (
ITM
->
TER
 & (1UL << 0) ) )

1500 
ITM
->
PORT
[0].
u32
 == 0);

1501 
ITM
->
PORT
[0].
u8
 = (
uöt8_t
Ë
ch
;

1503  (
ch
);

1504 
	}
}

1514 
__STATIC_INLINE
 
öt32_t
 
	$ITM_Re˚iveCh¨
 () {

1515 
öt32_t
 
ch
 = -1;

1517 i‡(
ITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1518 
ch
 = 
ITM_RxBuf„r
;

1519 
ITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1522  (
ch
);

1523 
	}
}

1533 
__STATIC_INLINE
 
öt32_t
 
	$ITM_CheckCh¨
 () {

1535 i‡(
ITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1540 
	}
}

1548 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\cmsis\core_cmFunc.h

24 #i‚de‡
__CORE_CMFUNC_H


25 
	#__CORE_CMFUNC_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

50 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

52 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

53 (
__ªgC⁄åﬁ
);

54 
	}
}

63 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

65 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

66 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

67 
	}
}

76 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

78 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

79 (
__ªgIPSR
);

80 
	}
}

89 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

91 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

92 (
__ªgAPSR
);

93 
	}
}

102 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

104 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

105 (
__ªgXPSR
);

106 
	}
}

115 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

117 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

118 (
__ªgPro˚ssSèckPoöãr
);

119 
	}
}

128 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

130 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

131 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

132 
	}
}

141 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

143 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

144 (
__ªgMaöSèckPoöãr
);

145 
	}
}

154 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

156 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

157 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

158 
	}
}

167 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

169 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

170 (
__ªgPriMask
);

171 
	}
}

180 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

182 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

183 
__ªgPriMask
 = (
¥iMask
);

184 
	}
}

187 #i‡ (
__CORTEX_M
 >= 0x03)

194 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

202 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

211 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

213 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

214 (
__ªgBa£Pri
);

215 
	}
}

224 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

226 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

227 
__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

228 
	}
}

237 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

239 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

240 (
__ªgFau…Mask
);

241 
	}
}

250 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

252 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

253 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

254 
	}
}

259 #i‡ (
__CORTEX_M
 == 0x04)

267 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

269 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

270 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

271 (
__ªgÂs¸
);

275 
	}
}

284 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

286 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

287 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

288 
__ªgÂs¸
 = (
Âs¸
);

290 
	}
}

295 #ñi‡
deföed
 ( 
__ICCARM__
 )

298 
	~<cmsis_ür.h
>

301 #ñi‡
deföed
 ( 
__TMS470__
 )

304 
	~<cmsis_ccs.h
>

307 #ñi‡
deföed
 ( 
__GNUC__
 )

315 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_úq
()

317 
__ASM
 volatile ("cpsie i");

318 
	}
}

326 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_úq
()

328 
__ASM
 volatile ("cpsid i");

329 
	}
}

338 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

340 
uöt32_t
 
ªsu…
;

342 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

343 (
ªsu…
);

344 
	}
}

353 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

355 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

356 
	}
}

365 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

367 
uöt32_t
 
ªsu…
;

369 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

370 (
ªsu…
);

371 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

385 (
ªsu…
);

386 
	}
}

395 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

397 
uöt32_t
 
ªsu…
;

399 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

400 (
ªsu…
);

401 
	}
}

410 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

412 
uöt32_t
 
ªsu…
;

414 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

415 (
ªsu…
);

416 
	}
}

425 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

427 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) );

428 
	}
}

437 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

439 
uöt32_t
 
ªsu…
;

441 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

442 (
ªsu…
);

443 
	}
}

452 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

454 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) );

455 
	}
}

464 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

466 
uöt32_t
 
ªsu…
;

468 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

469 (
ªsu…
);

470 
	}
}

479 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

481 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

482 
	}
}

485 #i‡ (
__CORTEX_M
 >= 0x03)

492 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_Áu…_úq
()

494 
__ASM
 volatile ("cpsie f");

495 
	}
}

503 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_Áu…_úq
()

505 
__ASM
 volatile ("cpsid f");

506 
	}
}

515 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

517 
uöt32_t
 
ªsu…
;

519 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

520 (
ªsu…
);

521 
	}
}

530 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

532 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

533 
	}
}

542 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

544 
uöt32_t
 
ªsu…
;

546 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

547 (
ªsu…
);

548 
	}
}

557 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

559 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

560 
	}
}

565 #i‡ (
__CORTEX_M
 == 0x04)

573 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

575 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

576 
uöt32_t
 
ªsu…
;

578 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

579 (
ªsu…
);

583 
	}
}

592 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

594 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

595 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) );

597 
	}
}

602 #ñi‡
deföed
 ( 
__TASKING__
 )

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\cmsis\core_cmInstr.h

24 #i‚de‡
__CORE_CMINSTR_H


25 
	#__CORE_CMINSTR_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

46 
	#__NOP
 
__n›


	)

54 
	#__WFI
 
__wfi


	)

62 
	#__WFE
 
__w„


	)

69 
	#__SEV
 
__£v


	)

78 
	#__ISB
(Ë
	`__isb
(0xF)

	)

86 
	#__DSB
(Ë
	`__dsb
(0xF)

	)

94 
	#__DMB
(Ë
	`__dmb
(0xF)

	)

104 
	#__REV
 
__ªv


	)

114 
__©åibuã__
((
£˘i⁄
(".ªv16_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__©åibuã__
((
£˘i⁄
(".ªvsh_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

143 
	#__ROR
 
__r‹


	)

146 #i‡ (
__CORTEX_M
 >= 0x03)

155 
	#__RBIT
 
__rbô


	)

165 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

175 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

185 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

197 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

209 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

221 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

229 
	#__CLREX
 
__˛ªx


	)

240 
	#__SSAT
 
__sßt


	)

251 
	#__USAT
 
__ußt


	)

261 
	#__CLZ
 
__˛z


	)

267 #ñi‡
deföed
 ( 
__ICCARM__
 )

270 
	~<cmsis_ür.h
>

273 #ñi‡
deföed
 ( 
__TMS470__
 )

276 
	~<cmsis_ccs.h
>

279 #ñi‡
deföed
 ( 
__GNUC__
 )

286 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__NOP
()

288 
__ASM
 volatile ("nop");

289 
	}
}

297 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__WFI
()

299 
__ASM
 volatile ("wfi");

300 
	}
}

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__WFE
()

310 
__ASM
 volatile ("wfe");

311 
	}
}

318 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__SEV
()

320 
__ASM
 volatile ("sev");

321 
	}
}

330 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__ISB
()

332 
__ASM
 volatile ("isb");

333 
	}
}

341 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__DSB
()

343 
__ASM
 volatile ("dsb");

344 
	}
}

352 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__DMB
()

354 
__ASM
 volatile ("dmb");

355 
	}
}

365 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

367 
uöt32_t
 
ªsu…
;

369 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

370 (
ªsu…
);

371 
	}
}

381 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

383 
uöt32_t
 
ªsu…
;

385 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

386 (
ªsu…
);

387 
	}
}

397 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

399 
uöt32_t
 
ªsu…
;

401 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

402 (
ªsu…
);

403 
	}
}

414 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

417 
__ASM
 vﬁ©ûê("r‹ %0, %0, %1" : "+r" (
›1
Ë: "r" (
›2
) );

418 (
›1
);

419 
	}
}

422 #i‡ (
__CORTEX_M
 >= 0x03)

431 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

433 
uöt32_t
 
ªsu…
;

435 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

436 (
ªsu…
);

437 
	}
}

447 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

449 
uöt8_t
 
ªsu…
;

451 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

452 (
ªsu…
);

453 
	}
}

463 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

465 
uöt16_t
 
ªsu…
;

467 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

468 (
ªsu…
);

469 
	}
}

479 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

481 
uöt32_t
 
ªsu…
;

483 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

484 (
ªsu…
);

485 
	}
}

497 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

499 
uöt32_t
 
ªsu…
;

501 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "=&r" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

502 (
ªsu…
);

503 
	}
}

515 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

517 
uöt32_t
 
ªsu…
;

519 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "=&r" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

520 (
ªsu…
);

521 
	}
}

533 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

535 
uöt32_t
 
ªsu…
;

537 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "=&r" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

538 (
ªsu…
);

539 
	}
}

547 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__CLREX
()

549 
__ASM
 volatile ("clrex");

550 
	}
}

561 
	#__SSAT
(
ARG1
,
ARG2
) \

563 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

564 
	`__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

565 
__RES
; \

566 })

	)

577 
	#__USAT
(
ARG1
,
ARG2
) \

579 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

580 
	`__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

581 
__RES
; \

582 })

	)

592 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
vÆue
)

594 
uöt8_t
 
ªsu…
;

596 
__ASM
 vﬁ©ûê("˛z %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

597 (
ªsu…
);

598 
	}
}

605 #ñi‡
deföed
 ( 
__TASKING__
 )

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\inc\stm32l1xx.h

54 #i‚de‡
__STM32L1XX_H


55 
	#__STM32L1XX_H


	)

57 #ifde‡
__˝lu•lus


69 #i‡!
deföed
 (
STM32L1XX_MD
Ë&& !deföed (
STM32L1XX_MDP
Ë&& !deföed (
STM32L1XX_HD
)

72 
	#STM32L1XX_HD


	)

85 #i‡!
deföed
 (
STM32L1XX_MD
Ë&& !deföed (
STM32L1XX_MDP
Ë&& !deföed (
STM32L1XX_HD
)

89 #i‡!
deföed
 
USE_STDPERIPH_DRIVER


105 #i‡!
deföed
 (
HSE_VALUE
)

106 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

113 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

114 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0500Ë

	)

121 #i‡!
deföed
 (
HSI_STARTUP_TIMEOUT
)

122 
	#HSI_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0500Ë

	)

125 #i‡!
deföed
 (
HSI_VALUE
)

126 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

131 #i‡!
deföed
 (
LSI_VALUE
)

132 
	#LSI_VALUE
 ((
uöt32_t
)37000Ë

	)

137 #i‡!
deföed
 (
LSE_VALUE
)

138 
	#LSE_VALUE
 ((
uöt32_t
)32768Ë

	)

144 
	#__STM32L1XX_STDPERIPH_VERSION_MAIN
 (0x01Ë

	)

145 
	#__STM32L1XX_STDPERIPH_VERSION_SUB1
 (0x01Ë

	)

146 
	#__STM32L1XX_STDPERIPH_VERSION_SUB2
 (0x01Ë

	)

147 
	#__STM32L1XX_STDPERIPH_VERSION_RC
 (0x00Ë

	)

148 
	#__STM32L1XX_STDPERIPH_VERSION
 ( (
__STM32L1XX_STDPERIPH_VERSION_MAIN
 << 24)\

149 |(
__STM32L1XX_STDPERIPH_VERSION_SUB1
 << 16)\

150 |(
__STM32L1XX_STDPERIPH_VERSION_SUB2
 << 8)\

151 |(
__STM32L1XX_STDPERIPH_VERSION_RC
))

	)

165 
	#__CM3_REV
 0x200

	)

166 
	#__MPU_PRESENT
 1

	)

167 
	#__NVIC_PRIO_BITS
 4

	)

168 
	#__Víd‹_SysTickC⁄fig
 0

	)

171 
	eIRQn


174 
N⁄MaskabÀI¡_IRQn
 = -14,

175 
Mem‹yM™agemít_IRQn
 = -12,

176 
BusFau…_IRQn
 = -11,

177 
UßgeFau…_IRQn
 = -10,

178 
SVC_IRQn
 = -5,

179 
DebugM⁄ô‹_IRQn
 = -4,

180 
PídSV_IRQn
 = -2,

181 
SysTick_IRQn
 = -1,

184 
WWDG_IRQn
 = 0,

185 
PVD_IRQn
 = 1,

186 
TAMPER_STAMP_IRQn
 = 2,

187 
RTC_WKUP_IRQn
 = 3,

188 
FLASH_IRQn
 = 4,

189 
RCC_IRQn
 = 5,

190 
EXTI0_IRQn
 = 6,

191 
EXTI1_IRQn
 = 7,

192 
EXTI2_IRQn
 = 8,

193 
EXTI3_IRQn
 = 9,

194 
EXTI4_IRQn
 = 10,

195 
DMA1_Ch™√l1_IRQn
 = 11,

196 
DMA1_Ch™√l2_IRQn
 = 12,

197 
DMA1_Ch™√l3_IRQn
 = 13,

198 
DMA1_Ch™√l4_IRQn
 = 14,

199 
DMA1_Ch™√l5_IRQn
 = 15,

200 
DMA1_Ch™√l6_IRQn
 = 16,

201 
DMA1_Ch™√l7_IRQn
 = 17,

202 
ADC1_IRQn
 = 18,

203 
USB_HP_IRQn
 = 19,

204 
USB_LP_IRQn
 = 20,

205 
DAC_IRQn
 = 21,

206 
COMP_IRQn
 = 22,

207 
EXTI9_5_IRQn
 = 23,

208 
LCD_IRQn
 = 24,

209 
TIM9_IRQn
 = 25,

210 
TIM10_IRQn
 = 26,

211 
TIM11_IRQn
 = 27,

212 
TIM2_IRQn
 = 28,

213 
TIM3_IRQn
 = 29,

214 
TIM4_IRQn
 = 30,

215 
I2C1_EV_IRQn
 = 31,

216 
I2C1_ER_IRQn
 = 32,

217 
I2C2_EV_IRQn
 = 33,

218 
I2C2_ER_IRQn
 = 34,

219 
SPI1_IRQn
 = 35,

220 
SPI2_IRQn
 = 36,

221 
USART1_IRQn
 = 37,

222 
USART2_IRQn
 = 38,

223 
USART3_IRQn
 = 39,

224 
EXTI15_10_IRQn
 = 40,

225 
RTC_Aœrm_IRQn
 = 41,

226 
USB_FS_WKUP_IRQn
 = 42,

227 
TIM6_IRQn
 = 43,

228 #ifde‡
STM32L1XX_MD


229 
TIM7_IRQn
 = 44

232 #ifde‡
STM32L1XX_MDP


233 
TIM7_IRQn
 = 44,

234 
TIM5_IRQn
 = 46,

235 
SPI3_IRQn
 = 47,

236 
DMA2_Ch™√l1_IRQn
 = 50,

237 
DMA2_Ch™√l2_IRQn
 = 51,

238 
DMA2_Ch™√l3_IRQn
 = 52,

239 
DMA2_Ch™√l4_IRQn
 = 53,

240 
DMA2_Ch™√l5_IRQn
 = 54,

241 
AES_IRQn
 = 55,

242 
COMP_ACQ_IRQn
 = 56

245 #ifde‡
STM32L1XX_HD


246 
TIM7_IRQn
 = 44,

247 
SDIO_IRQn
 = 45,

248 
TIM5_IRQn
 = 46,

249 
SPI3_IRQn
 = 47,

250 
UART4_IRQn
 = 48,

251 
UART5_IRQn
 = 49,

252 
DMA2_Ch™√l1_IRQn
 = 50,

253 
DMA2_Ch™√l2_IRQn
 = 51,

254 
DMA2_Ch™√l3_IRQn
 = 52,

255 
DMA2_Ch™√l4_IRQn
 = 53,

256 
DMA2_Ch™√l5_IRQn
 = 54,

257 
AES_IRQn
 = 55,

258 
COMP_ACQ_IRQn
 = 56

260 } 
	tIRQn_Ty≥
;

266 
	~"c‹e_cm3.h
"

267 
	~"sy°em_°m32l1xx.h
"

268 
	~<°döt.h
>

274 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

276 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

277 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

279 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

284 #i‡
deföed
 ( 
__CC_ARM
 )

294 
	#__RAM_FUNC
 
FLASH_Sètus


	)

296 #ñi‡
deföed
 ( 
__ICCARM__
 )

301 
	#__RAM_FUNC
 
__ømfunc
 
FLASH_Sètus


	)

303 #ñi‡
deföed
 ( 
__GNUC__
 )

309 
	#__RAM_FUNC
 
FLASH_Sètus
 
	`__©åibuã__
((
	`£˘i⁄
(".d©a")))

	)

311 #ñi‡
deföed
 ( 
__TASKING__
 )

317 
	#__RAM_FUNC
 
FLASH_Sètus


	)

335 
__IO
 
uöt32_t
 
SR
;

336 
__IO
 
uöt32_t
 
CR1
;

337 
__IO
 
uöt32_t
 
CR2
;

338 
__IO
 
uöt32_t
 
SMPR1
;

339 
__IO
 
uöt32_t
 
SMPR2
;

340 
__IO
 
uöt32_t
 
SMPR3
;

341 
__IO
 
uöt32_t
 
JOFR1
;

342 
__IO
 
uöt32_t
 
JOFR2
;

343 
__IO
 
uöt32_t
 
JOFR3
;

344 
__IO
 
uöt32_t
 
JOFR4
;

345 
__IO
 
uöt32_t
 
HTR
;

346 
__IO
 
uöt32_t
 
LTR
;

347 
__IO
 
uöt32_t
 
SQR1
;

348 
__IO
 
uöt32_t
 
SQR2
;

349 
__IO
 
uöt32_t
 
SQR3
;

350 
__IO
 
uöt32_t
 
SQR4
;

351 
__IO
 
uöt32_t
 
SQR5
;

352 
__IO
 
uöt32_t
 
JSQR
;

353 
__IO
 
uöt32_t
 
JDR1
;

354 
__IO
 
uöt32_t
 
JDR2
;

355 
__IO
 
uöt32_t
 
JDR3
;

356 
__IO
 
uöt32_t
 
JDR4
;

357 
__IO
 
uöt32_t
 
DR
;

358 
__IO
 
uöt32_t
 
SMPR0
;

359 } 
	tADC_Ty≥Def
;

363 
__IO
 
uöt32_t
 
CSR
;

364 
__IO
 
uöt32_t
 
CCR
;

365 } 
	tADC_Comm⁄_Ty≥Def
;

374 
__IO
 
uöt32_t
 
CR
;

375 
__IO
 
uöt32_t
 
SR
;

376 
__IO
 
uöt32_t
 
DINR
;

377 
__IO
 
uöt32_t
 
DOUTR
;

378 
__IO
 
uöt32_t
 
KEYR0
;

379 
__IO
 
uöt32_t
 
KEYR1
;

380 
__IO
 
uöt32_t
 
KEYR2
;

381 
__IO
 
uöt32_t
 
KEYR3
;

382 
__IO
 
uöt32_t
 
IVR0
;

383 
__IO
 
uöt32_t
 
IVR1
;

384 
__IO
 
uöt32_t
 
IVR2
;

385 
__IO
 
uöt32_t
 
IVR3
;

386 } 
	tAES_Ty≥Def
;

394 
__IO
 
uöt32_t
 
CSR
;

395 } 
	tCOMP_Ty≥Def
;

403 
__IO
 
uöt32_t
 
DR
;

404 
__IO
 
uöt8_t
 
IDR
;

405 
uöt8_t
 
RESERVED0
;

406 
uöt16_t
 
RESERVED1
;

407 
__IO
 
uöt32_t
 
CR
;

408 } 
	tCRC_Ty≥Def
;

416 
__IO
 
uöt32_t
 
CR
;

417 
__IO
 
uöt32_t
 
SWTRIGR
;

418 
__IO
 
uöt32_t
 
DHR12R1
;

419 
__IO
 
uöt32_t
 
DHR12L1
;

420 
__IO
 
uöt32_t
 
DHR8R1
;

421 
__IO
 
uöt32_t
 
DHR12R2
;

422 
__IO
 
uöt32_t
 
DHR12L2
;

423 
__IO
 
uöt32_t
 
DHR8R2
;

424 
__IO
 
uöt32_t
 
DHR12RD
;

425 
__IO
 
uöt32_t
 
DHR12LD
;

426 
__IO
 
uöt32_t
 
DHR8RD
;

427 
__IO
 
uöt32_t
 
DOR1
;

428 
__IO
 
uöt32_t
 
DOR2
;

429 
__IO
 
uöt32_t
 
SR
;

430 } 
	tDAC_Ty≥Def
;

438 
__IO
 
uöt32_t
 
IDCODE
;

439 
__IO
 
uöt32_t
 
CR
;

440 
__IO
 
uöt32_t
 
APB1FZ
;

441 
__IO
 
uöt32_t
 
APB2FZ
;

442 }
	tDBGMCU_Ty≥Def
;

450 
__IO
 
uöt32_t
 
CCR
;

451 
__IO
 
uöt32_t
 
CNDTR
;

452 
__IO
 
uöt32_t
 
CPAR
;

453 
__IO
 
uöt32_t
 
CMAR
;

454 } 
	tDMA_Ch™√l_Ty≥Def
;

458 
__IO
 
uöt32_t
 
ISR
;

459 
__IO
 
uöt32_t
 
IFCR
;

460 } 
	tDMA_Ty≥Def
;

468 
__IO
 
uöt32_t
 
IMR
;

469 
__IO
 
uöt32_t
 
EMR
;

470 
__IO
 
uöt32_t
 
RTSR
;

471 
__IO
 
uöt32_t
 
FTSR
;

472 
__IO
 
uöt32_t
 
SWIER
;

473 
__IO
 
uöt32_t
 
PR
;

474 } 
	tEXTI_Ty≥Def
;

482 
__IO
 
uöt32_t
 
ACR
;

483 
__IO
 
uöt32_t
 
PECR
;

484 
__IO
 
uöt32_t
 
PDKEYR
;

485 
__IO
 
uöt32_t
 
PEKEYR
;

486 
__IO
 
uöt32_t
 
PRGKEYR
;

487 
__IO
 
uöt32_t
 
OPTKEYR
;

488 
__IO
 
uöt32_t
 
SR
;

489 
__IO
 
uöt32_t
 
OBR
;

490 
__IO
 
uöt32_t
 
WRPR
;

491 
uöt32_t
 
RESERVED
[23];

492 
__IO
 
uöt32_t
 
WRPR1
;

493 
__IO
 
uöt32_t
 
WRPR2
;

494 } 
	tFLASH_Ty≥Def
;

502 
__IO
 
uöt32_t
 
RDP
;

503 
__IO
 
uöt32_t
 
USER
;

504 
__IO
 
uöt32_t
 
WRP01
;

505 
__IO
 
uöt32_t
 
WRP23
;

506 
__IO
 
uöt32_t
 
WRP45
;

507 
__IO
 
uöt32_t
 
WRP67
;

508 
__IO
 
uöt32_t
 
WRP89
;

509 
__IO
 
uöt32_t
 
WRP1011
;

510 } 
	tOB_Ty≥Def
;

518 
__IO
 
uöt32_t
 
CSR
;

519 
__IO
 
uöt32_t
 
OTR
;

520 
__IO
 
uöt32_t
 
LPOTR
;

521 } 
	tOPAMP_Ty≥Def
;

529 
__IO
 
uöt32_t
 
BTCR
[8];

530 } 
	tFSMC_B™k1_Ty≥Def
;

538 
__IO
 
uöt32_t
 
BWTR
[7];

539 } 
	tFSMC_B™k1E_Ty≥Def
;

547 
__IO
 
uöt32_t
 
MODER
;

548 
__IO
 
uöt16_t
 
OTYPER
;

549 
uöt16_t
 
RESERVED0
;

550 
__IO
 
uöt32_t
 
OSPEEDR
;

551 
__IO
 
uöt32_t
 
PUPDR
;

552 
__IO
 
uöt16_t
 
IDR
;

553 
uöt16_t
 
RESERVED1
;

554 
__IO
 
uöt16_t
 
ODR
;

555 
uöt16_t
 
RESERVED2
;

556 
__IO
 
uöt16_t
 
BSRRL
;

557 
__IO
 
uöt16_t
 
BSRRH
;

558 
__IO
 
uöt32_t
 
LCKR
;

559 
__IO
 
uöt32_t
 
AFR
[2];

560 
__IO
 
uöt16_t
 
BRR
;

561 
uöt16_t
 
RESERVED3
;

562 } 
	tGPIO_Ty≥Def
;

570 
__IO
 
uöt32_t
 
MEMRMP
;

571 
__IO
 
uöt32_t
 
PMC
;

572 
__IO
 
uöt32_t
 
EXTICR
[4];

573 } 
	tSYSCFG_Ty≥Def
;

581 
__IO
 
uöt16_t
 
CR1
;

582 
uöt16_t
 
RESERVED0
;

583 
__IO
 
uöt16_t
 
CR2
;

584 
uöt16_t
 
RESERVED1
;

585 
__IO
 
uöt16_t
 
OAR1
;

586 
uöt16_t
 
RESERVED2
;

587 
__IO
 
uöt16_t
 
OAR2
;

588 
uöt16_t
 
RESERVED3
;

589 
__IO
 
uöt16_t
 
DR
;

590 
uöt16_t
 
RESERVED4
;

591 
__IO
 
uöt16_t
 
SR1
;

592 
uöt16_t
 
RESERVED5
;

593 
__IO
 
uöt16_t
 
SR2
;

594 
uöt16_t
 
RESERVED6
;

595 
__IO
 
uöt16_t
 
CCR
;

596 
uöt16_t
 
RESERVED7
;

597 
__IO
 
uöt16_t
 
TRISE
;

598 
uöt16_t
 
RESERVED8
;

599 } 
	tI2C_Ty≥Def
;

607 
__IO
 
uöt32_t
 
KR
;

608 
__IO
 
uöt32_t
 
PR
;

609 
__IO
 
uöt32_t
 
RLR
;

610 
__IO
 
uöt32_t
 
SR
;

611 } 
	tIWDG_Ty≥Def
;

620 
__IO
 
uöt32_t
 
CR
;

621 
__IO
 
uöt32_t
 
FCR
;

622 
__IO
 
uöt32_t
 
SR
;

623 
__IO
 
uöt32_t
 
CLR
;

624 
uöt32_t
 
RESERVED
;

625 
__IO
 
uöt32_t
 
RAM
[16];

626 } 
	tLCD_Ty≥Def
;

634 
__IO
 
uöt32_t
 
CR
;

635 
__IO
 
uöt32_t
 
CSR
;

636 } 
	tPWR_Ty≥Def
;

644 
__IO
 
uöt32_t
 
CR
;

645 
__IO
 
uöt32_t
 
ICSCR
;

646 
__IO
 
uöt32_t
 
CFGR
;

647 
__IO
 
uöt32_t
 
CIR
;

648 
__IO
 
uöt32_t
 
AHBRSTR
;

649 
__IO
 
uöt32_t
 
APB2RSTR
;

650 
__IO
 
uöt32_t
 
APB1RSTR
;

651 
__IO
 
uöt32_t
 
AHBENR
;

652 
__IO
 
uöt32_t
 
APB2ENR
;

653 
__IO
 
uöt32_t
 
APB1ENR
;

654 
__IO
 
uöt32_t
 
AHBLPENR
;

655 
__IO
 
uöt32_t
 
APB2LPENR
;

656 
__IO
 
uöt32_t
 
APB1LPENR
;

657 
__IO
 
uöt32_t
 
CSR
;

658 } 
	tRCC_Ty≥Def
;

666 
__IO
 
uöt32_t
 
ICR
;

667 
__IO
 
uöt32_t
 
ASCR1
;

668 
__IO
 
uöt32_t
 
ASCR2
;

669 
__IO
 
uöt32_t
 
HYSCR1
;

670 
__IO
 
uöt32_t
 
HYSCR2
;

671 
__IO
 
uöt32_t
 
HYSCR3
;

672 
__IO
 
uöt32_t
 
HYSCR4
;

673 } 
	tRI_Ty≥Def
;

681 
__IO
 
uöt32_t
 
TR
;

682 
__IO
 
uöt32_t
 
DR
;

683 
__IO
 
uöt32_t
 
CR
;

684 
__IO
 
uöt32_t
 
ISR
;

685 
__IO
 
uöt32_t
 
PRER
;

686 
__IO
 
uöt32_t
 
WUTR
;

687 
__IO
 
uöt32_t
 
CALIBR
;

688 
__IO
 
uöt32_t
 
ALRMAR
;

689 
__IO
 
uöt32_t
 
ALRMBR
;

690 
__IO
 
uöt32_t
 
WPR
;

691 
__IO
 
uöt32_t
 
SSR
;

692 
__IO
 
uöt32_t
 
SHIFTR
;

693 
__IO
 
uöt32_t
 
TSTR
;

694 
__IO
 
uöt32_t
 
TSDR
;

695 
__IO
 
uöt32_t
 
TSSSR
;

696 
__IO
 
uöt32_t
 
CALR
;

697 
__IO
 
uöt32_t
 
TAFCR
;

698 
__IO
 
uöt32_t
 
ALRMASSR
;

699 
__IO
 
uöt32_t
 
ALRMBSSR
;

700 
uöt32_t
 
RESERVED7
;

701 
__IO
 
uöt32_t
 
BKP0R
;

702 
__IO
 
uöt32_t
 
BKP1R
;

703 
__IO
 
uöt32_t
 
BKP2R
;

704 
__IO
 
uöt32_t
 
BKP3R
;

705 
__IO
 
uöt32_t
 
BKP4R
;

706 
__IO
 
uöt32_t
 
BKP5R
;

707 
__IO
 
uöt32_t
 
BKP6R
;

708 
__IO
 
uöt32_t
 
BKP7R
;

709 
__IO
 
uöt32_t
 
BKP8R
;

710 
__IO
 
uöt32_t
 
BKP9R
;

711 
__IO
 
uöt32_t
 
BKP10R
;

712 
__IO
 
uöt32_t
 
BKP11R
;

713 
__IO
 
uöt32_t
 
BKP12R
;

714 
__IO
 
uöt32_t
 
BKP13R
;

715 
__IO
 
uöt32_t
 
BKP14R
;

716 
__IO
 
uöt32_t
 
BKP15R
;

717 
__IO
 
uöt32_t
 
BKP16R
;

718 
__IO
 
uöt32_t
 
BKP17R
;

719 
__IO
 
uöt32_t
 
BKP18R
;

720 
__IO
 
uöt32_t
 
BKP19R
;

721 
__IO
 
uöt32_t
 
BKP20R
;

722 
__IO
 
uöt32_t
 
BKP21R
;

723 
__IO
 
uöt32_t
 
BKP22R
;

724 
__IO
 
uöt32_t
 
BKP23R
;

725 
__IO
 
uöt32_t
 
BKP24R
;

726 
__IO
 
uöt32_t
 
BKP25R
;

727 
__IO
 
uöt32_t
 
BKP26R
;

728 
__IO
 
uöt32_t
 
BKP27R
;

729 
__IO
 
uöt32_t
 
BKP28R
;

730 
__IO
 
uöt32_t
 
BKP29R
;

731 
__IO
 
uöt32_t
 
BKP30R
;

732 
__IO
 
uöt32_t
 
BKP31R
;

733 } 
	tRTC_Ty≥Def
;

741 
__IO
 
uöt32_t
 
POWER
;

742 
__IO
 
uöt32_t
 
CLKCR
;

743 
__IO
 
uöt32_t
 
ARG
;

744 
__IO
 
uöt32_t
 
CMD
;

745 
__I
 
uöt32_t
 
RESPCMD
;

746 
__I
 
uöt32_t
 
RESP1
;

747 
__I
 
uöt32_t
 
RESP2
;

748 
__I
 
uöt32_t
 
RESP3
;

749 
__I
 
uöt32_t
 
RESP4
;

750 
__IO
 
uöt32_t
 
DTIMER
;

751 
__IO
 
uöt32_t
 
DLEN
;

752 
__IO
 
uöt32_t
 
DCTRL
;

753 
__I
 
uöt32_t
 
DCOUNT
;

754 
__I
 
uöt32_t
 
STA
;

755 
__IO
 
uöt32_t
 
ICR
;

756 
__IO
 
uöt32_t
 
MASK
;

757 
uöt32_t
 
RESERVED0
[2];

758 
__I
 
uöt32_t
 
FIFOCNT
;

759 
uöt32_t
 
RESERVED1
[13];

760 
__IO
 
uöt32_t
 
FIFO
;

761 } 
	tSDIO_Ty≥Def
;

769 
__IO
 
uöt16_t
 
CR1
;

770 
uöt16_t
 
RESERVED0
;

771 
__IO
 
uöt16_t
 
CR2
;

772 
uöt16_t
 
RESERVED1
;

773 
__IO
 
uöt16_t
 
SR
;

774 
uöt16_t
 
RESERVED2
;

775 
__IO
 
uöt16_t
 
DR
;

776 
uöt16_t
 
RESERVED3
;

777 
__IO
 
uöt16_t
 
CRCPR
;

778 
uöt16_t
 
RESERVED4
;

779 
__IO
 
uöt16_t
 
RXCRCR
;

780 
uöt16_t
 
RESERVED5
;

781 
__IO
 
uöt16_t
 
TXCRCR
;

782 
uöt16_t
 
RESERVED6
;

783 
__IO
 
uöt16_t
 
I2SCFGR
;

784 
uöt16_t
 
RESERVED7
;

785 
__IO
 
uöt16_t
 
I2SPR
;

786 
uöt16_t
 
RESERVED8
;

787 } 
	tSPI_Ty≥Def
;

795 
__IO
 
uöt16_t
 
CR1
;

796 
uöt16_t
 
RESERVED0
;

797 
__IO
 
uöt16_t
 
CR2
;

798 
uöt16_t
 
RESERVED1
;

799 
__IO
 
uöt16_t
 
SMCR
;

800 
uöt16_t
 
RESERVED2
;

801 
__IO
 
uöt16_t
 
DIER
;

802 
uöt16_t
 
RESERVED3
;

803 
__IO
 
uöt16_t
 
SR
;

804 
uöt16_t
 
RESERVED4
;

805 
__IO
 
uöt16_t
 
EGR
;

806 
uöt16_t
 
RESERVED5
;

807 
__IO
 
uöt16_t
 
CCMR1
;

808 
uöt16_t
 
RESERVED6
;

809 
__IO
 
uöt16_t
 
CCMR2
;

810 
uöt16_t
 
RESERVED7
;

811 
__IO
 
uöt16_t
 
CCER
;

812 
uöt16_t
 
RESERVED8
;

813 
__IO
 
uöt32_t
 
CNT
;

814 
__IO
 
uöt16_t
 
PSC
;

815 
uöt16_t
 
RESERVED10
;

816 
__IO
 
uöt32_t
 
ARR
;

817 
uöt32_t
 
RESERVED12
;

818 
__IO
 
uöt32_t
 
CCR1
;

819 
__IO
 
uöt32_t
 
CCR2
;

820 
__IO
 
uöt32_t
 
CCR3
;

821 
__IO
 
uöt32_t
 
CCR4
;

822 
uöt32_t
 
RESERVED17
;

823 
__IO
 
uöt16_t
 
DCR
;

824 
uöt16_t
 
RESERVED18
;

825 
__IO
 
uöt16_t
 
DMAR
;

826 
uöt16_t
 
RESERVED19
;

827 
__IO
 
uöt16_t
 
OR
;

828 
uöt16_t
 
RESERVED20
;

829 } 
	tTIM_Ty≥Def
;

837 
__IO
 
uöt16_t
 
SR
;

838 
uöt16_t
 
RESERVED0
;

839 
__IO
 
uöt16_t
 
DR
;

840 
uöt16_t
 
RESERVED1
;

841 
__IO
 
uöt16_t
 
BRR
;

842 
uöt16_t
 
RESERVED2
;

843 
__IO
 
uöt16_t
 
CR1
;

844 
uöt16_t
 
RESERVED3
;

845 
__IO
 
uöt16_t
 
CR2
;

846 
uöt16_t
 
RESERVED4
;

847 
__IO
 
uöt16_t
 
CR3
;

848 
uöt16_t
 
RESERVED5
;

849 
__IO
 
uöt16_t
 
GTPR
;

850 
uöt16_t
 
RESERVED6
;

851 } 
	tUSART_Ty≥Def
;

859 
__IO
 
uöt32_t
 
CR
;

860 
__IO
 
uöt32_t
 
CFR
;

861 
__IO
 
uöt32_t
 
SR
;

862 } 
	tWWDG_Ty≥Def
;

872 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

873 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

874 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

876 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

877 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

879 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

882 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

883 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

884 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x20000)

	)

886 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

887 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

888 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

889 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

890 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

891 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

892 
	#LCD_BASE
 (
APB1PERIPH_BASE
 + 0x2400)

	)

893 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

894 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

895 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

896 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

897 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

898 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

899 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

900 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

901 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

902 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

903 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

904 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

905 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

906 
	#COMP_BASE
 (
APB1PERIPH_BASE
 + 0x7C00)

	)

907 
	#RI_BASE
 (
APB1PERIPH_BASE
 + 0x7C04)

	)

908 
	#OPAMP_BASE
 (
APB1PERIPH_BASE
 + 0x7C5C)

	)

910 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

911 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

912 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x0800)

	)

913 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x0C00)

	)

914 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

915 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2400)

	)

916 
	#ADC_BASE
 (
APB2PERIPH_BASE
 + 0x2700)

	)

917 
	#SDIO_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

918 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

919 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

921 
	#GPIOA_BASE
 (
AHBPERIPH_BASE
 + 0x0000)

	)

922 
	#GPIOB_BASE
 (
AHBPERIPH_BASE
 + 0x0400)

	)

923 
	#GPIOC_BASE
 (
AHBPERIPH_BASE
 + 0x0800)

	)

924 
	#GPIOD_BASE
 (
AHBPERIPH_BASE
 + 0x0C00)

	)

925 
	#GPIOE_BASE
 (
AHBPERIPH_BASE
 + 0x1000)

	)

926 
	#GPIOH_BASE
 (
AHBPERIPH_BASE
 + 0x1400)

	)

927 
	#GPIOF_BASE
 (
AHBPERIPH_BASE
 + 0x1800)

	)

928 
	#GPIOG_BASE
 (
AHBPERIPH_BASE
 + 0x1C00)

	)

929 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x3000)

	)

930 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x3800)

	)

933 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x3C00Ë

	)

934 
	#OB_BASE
 ((
uöt32_t
)0x1FF80000Ë

	)

936 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x6000)

	)

937 
	#DMA1_Ch™√l1_BASE
 (
DMA1_BASE
 + 0x0008)

	)

938 
	#DMA1_Ch™√l2_BASE
 (
DMA1_BASE
 + 0x001C)

	)

939 
	#DMA1_Ch™√l3_BASE
 (
DMA1_BASE
 + 0x0030)

	)

940 
	#DMA1_Ch™√l4_BASE
 (
DMA1_BASE
 + 0x0044)

	)

941 
	#DMA1_Ch™√l5_BASE
 (
DMA1_BASE
 + 0x0058)

	)

942 
	#DMA1_Ch™√l6_BASE
 (
DMA1_BASE
 + 0x006C)

	)

943 
	#DMA1_Ch™√l7_BASE
 (
DMA1_BASE
 + 0x0080)

	)

945 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x6400)

	)

946 
	#DMA2_Ch™√l1_BASE
 (
DMA2_BASE
 + 0x0008)

	)

947 
	#DMA2_Ch™√l2_BASE
 (
DMA2_BASE
 + 0x001C)

	)

948 
	#DMA2_Ch™√l3_BASE
 (
DMA2_BASE
 + 0x0030)

	)

949 
	#DMA2_Ch™√l4_BASE
 (
DMA2_BASE
 + 0x0044)

	)

950 
	#DMA2_Ch™√l5_BASE
 (
DMA2_BASE
 + 0x0058)

	)

952 
	#AES_BASE
 ((
uöt32_t
)0x50060000)

	)

954 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000Ë

	)

955 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104Ë

	)

957 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

967 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

968 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

969 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

970 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

971 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

972 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

973 
	#LCD
 ((
LCD_Ty≥Def
 *Ë
LCD_BASE
)

	)

974 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

975 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

976 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

977 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

978 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

979 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

980 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

981 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

982 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

983 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

984 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

985 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

986 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

987 
	#COMP
 ((
COMP_Ty≥Def
 *Ë
COMP_BASE
)

	)

988 
	#RI
 ((
RI_Ty≥Def
 *Ë
RI_BASE
)

	)

989 
	#OPAMP
 ((
OPAMP_Ty≥Def
 *Ë
OPAMP_BASE
)

	)

990 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

991 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

993 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

994 
	#ADC
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

995 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

996 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

997 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

998 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

999 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1000 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1001 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1002 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

1003 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

1004 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

1005 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

1006 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

1007 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

1008 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

1010 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1011 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

1012 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

1013 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

1014 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

1015 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

1017 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1018 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1020 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1021 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1022 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1023 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1024 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1025 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

1026 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1027 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1029 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1030 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

1032 
	#AES
 ((
AES_Ty≥Def
 *Ë
AES_BASE
)

	)

1034 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1035 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1037 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1061 
	#ADC_SR_AWD
 ((
uöt32_t
)0x00000001Ë

	)

1062 
	#ADC_SR_EOC
 ((
uöt32_t
)0x00000002Ë

	)

1063 
	#ADC_SR_JEOC
 ((
uöt32_t
)0x00000004Ë

	)

1064 
	#ADC_SR_JSTRT
 ((
uöt32_t
)0x00000008Ë

	)

1065 
	#ADC_SR_STRT
 ((
uöt32_t
)0x00000010Ë

	)

1066 
	#ADC_SR_OVR
 ((
uöt32_t
)0x00000020Ë

	)

1067 
	#ADC_SR_ADONS
 ((
uöt32_t
)0x00000040Ë

	)

1068 
	#ADC_SR_RCNR
 ((
uöt32_t
)0x00000100Ë

	)

1069 
	#ADC_SR_JCNR
 ((
uöt32_t
)0x00000200Ë

	)

1072 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

1073 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

1074 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

1075 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

1076 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

1077 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

1079 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

1080 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

1081 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

1082 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

1083 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

1084 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

1085 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

1086 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

1088 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

1089 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

1090 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

1091 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

1093 
	#ADC_CR1_PDD
 ((
uöt32_t
)0x00010000Ë

	)

1094 
	#ADC_CR1_PDI
 ((
uöt32_t
)0x00020000Ë

	)

1096 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

1097 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

1099 
	#ADC_CR1_RES
 ((
uöt32_t
)0x03000000Ë

	)

1100 
	#ADC_CR1_RES_0
 ((
uöt32_t
)0x01000000Ë

	)

1101 
	#ADC_CR1_RES_1
 ((
uöt32_t
)0x02000000Ë

	)

1103 
	#ADC_CR1_OVRIE
 ((
uöt32_t
)0x04000000Ë

	)

1106 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

1107 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

1108 
	#ADC_CR2_CFG
 ((
uöt32_t
)0x00000004Ë

	)

1110 
	#ADC_CR2_DELS
 ((
uöt32_t
)0x00000070Ë

	)

1111 
	#ADC_CR2_DELS_0
 ((
uöt32_t
)0x00000010Ë

	)

1112 
	#ADC_CR2_DELS_1
 ((
uöt32_t
)0x00000020Ë

	)

1113 
	#ADC_CR2_DELS_2
 ((
uöt32_t
)0x00000040Ë

	)

1115 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

1116 
	#ADC_CR2_DDS
 ((
uöt32_t
)0x00000200Ë

	)

1117 
	#ADC_CR2_EOCS
 ((
uöt32_t
)0x00000400Ë

	)

1118 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

1120 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x000F0000Ë

	)

1121 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

1122 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

1123 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00040000Ë

	)

1124 
	#ADC_CR2_JEXTSEL_3
 ((
uöt32_t
)0x00080000Ë

	)

1126 
	#ADC_CR2_JEXTEN
 ((
uöt32_t
)0x00300000Ë

	)

1127 
	#ADC_CR2_JEXTEN_0
 ((
uöt32_t
)0x00100000Ë

	)

1128 
	#ADC_CR2_JEXTEN_1
 ((
uöt32_t
)0x00200000Ë

	)

1130 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00400000Ë

	)

1132 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x0F000000Ë

	)

1133 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

1134 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

1135 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

1136 
	#ADC_CR2_EXTSEL_3
 ((
uöt32_t
)0x08000000Ë

	)

1138 
	#ADC_CR2_EXTEN
 ((
uöt32_t
)0x30000000Ë

	)

1139 
	#ADC_CR2_EXTEN_0
 ((
uöt32_t
)0x10000000Ë

	)

1140 
	#ADC_CR2_EXTEN_1
 ((
uöt32_t
)0x20000000Ë

	)

1142 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x40000000Ë

	)

1145 
	#ADC_SMPR1_SMP20
 ((
uöt32_t
)0x00000007Ë

	)

1146 
	#ADC_SMPR1_SMP20_0
 ((
uöt32_t
)0x00000001Ë

	)

1147 
	#ADC_SMPR1_SMP20_1
 ((
uöt32_t
)0x00000002Ë

	)

1148 
	#ADC_SMPR1_SMP20_2
 ((
uöt32_t
)0x00000004Ë

	)

1150 
	#ADC_SMPR1_SMP21
 ((
uöt32_t
)0x00000038Ë

	)

1151 
	#ADC_SMPR1_SMP21_0
 ((
uöt32_t
)0x00000008Ë

	)

1152 
	#ADC_SMPR1_SMP21_1
 ((
uöt32_t
)0x00000010Ë

	)

1153 
	#ADC_SMPR1_SMP21_2
 ((
uöt32_t
)0x00000020Ë

	)

1155 
	#ADC_SMPR1_SMP22
 ((
uöt32_t
)0x000001C0Ë

	)

1156 
	#ADC_SMPR1_SMP22_0
 ((
uöt32_t
)0x00000040Ë

	)

1157 
	#ADC_SMPR1_SMP22_1
 ((
uöt32_t
)0x00000080Ë

	)

1158 
	#ADC_SMPR1_SMP22_2
 ((
uöt32_t
)0x00000100Ë

	)

1160 
	#ADC_SMPR1_SMP23
 ((
uöt32_t
)0x00000E00Ë

	)

1161 
	#ADC_SMPR1_SMP23_0
 ((
uöt32_t
)0x00000200Ë

	)

1162 
	#ADC_SMPR1_SMP23_1
 ((
uöt32_t
)0x00000400Ë

	)

1163 
	#ADC_SMPR1_SMP23_2
 ((
uöt32_t
)0x00000800Ë

	)

1165 
	#ADC_SMPR1_SMP24
 ((
uöt32_t
)0x00007000Ë

	)

1166 
	#ADC_SMPR1_SMP24_0
 ((
uöt32_t
)0x00001000Ë

	)

1167 
	#ADC_SMPR1_SMP24_1
 ((
uöt32_t
)0x00002000Ë

	)

1168 
	#ADC_SMPR1_SMP24_2
 ((
uöt32_t
)0x00004000Ë

	)

1170 
	#ADC_SMPR1_SMP25
 ((
uöt32_t
)0x00038000Ë

	)

1171 
	#ADC_SMPR1_SMP25_0
 ((
uöt32_t
)0x00008000Ë

	)

1172 
	#ADC_SMPR1_SMP25_1
 ((
uöt32_t
)0x00010000Ë

	)

1173 
	#ADC_SMPR1_SMP25_2
 ((
uöt32_t
)0x00020000Ë

	)

1175 
	#ADC_SMPR1_SMP26
 ((
uöt32_t
)0x001C0000Ë

	)

1176 
	#ADC_SMPR1_SMP26_0
 ((
uöt32_t
)0x00040000Ë

	)

1177 
	#ADC_SMPR1_SMP26_1
 ((
uöt32_t
)0x00080000Ë

	)

1178 
	#ADC_SMPR1_SMP26_2
 ((
uöt32_t
)0x00100000Ë

	)

1180 
	#ADC_SMPR1_SMP27
 ((
uöt32_t
)0x00E00000Ë

	)

1181 
	#ADC_SMPR1_SMP27_0
 ((
uöt32_t
)0x00200000Ë

	)

1182 
	#ADC_SMPR1_SMP27_1
 ((
uöt32_t
)0x00400000Ë

	)

1183 
	#ADC_SMPR1_SMP27_2
 ((
uöt32_t
)0x00800000Ë

	)

1185 
	#ADC_SMPR1_SMP28
 ((
uöt32_t
)0x07000000Ë

	)

1186 
	#ADC_SMPR1_SMP28_0
 ((
uöt32_t
)0x01000000Ë

	)

1187 
	#ADC_SMPR1_SMP28_1
 ((
uöt32_t
)0x02000000Ë

	)

1188 
	#ADC_SMPR1_SMP28_2
 ((
uöt32_t
)0x04000000Ë

	)

1190 
	#ADC_SMPR1_SMP29
 ((
uöt32_t
)0x38000000Ë

	)

1191 
	#ADC_SMPR1_SMP29_0
 ((
uöt32_t
)0x08000000Ë

	)

1192 
	#ADC_SMPR1_SMP29_1
 ((
uöt32_t
)0x10000000Ë

	)

1193 
	#ADC_SMPR1_SMP29_2
 ((
uöt32_t
)0x20000000Ë

	)

1196 
	#ADC_SMPR2_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

1197 
	#ADC_SMPR2_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

1198 
	#ADC_SMPR2_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

1199 
	#ADC_SMPR2_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

1201 
	#ADC_SMPR2_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

1202 
	#ADC_SMPR2_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

1203 
	#ADC_SMPR2_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

1204 
	#ADC_SMPR2_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

1206 
	#ADC_SMPR2_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

1207 
	#ADC_SMPR2_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

1208 
	#ADC_SMPR2_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

1209 
	#ADC_SMPR2_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

1211 
	#ADC_SMPR2_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

1212 
	#ADC_SMPR2_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

1213 
	#ADC_SMPR2_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

1214 
	#ADC_SMPR2_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

1216 
	#ADC_SMPR2_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

1217 
	#ADC_SMPR2_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

1218 
	#ADC_SMPR2_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

1219 
	#ADC_SMPR2_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

1221 
	#ADC_SMPR2_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

1222 
	#ADC_SMPR2_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

1223 
	#ADC_SMPR2_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

1224 
	#ADC_SMPR2_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

1226 
	#ADC_SMPR2_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

1227 
	#ADC_SMPR2_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

1228 
	#ADC_SMPR2_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

1229 
	#ADC_SMPR2_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

1231 
	#ADC_SMPR2_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

1232 
	#ADC_SMPR2_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

1233 
	#ADC_SMPR2_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

1234 
	#ADC_SMPR2_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

1236 
	#ADC_SMPR2_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

1237 
	#ADC_SMPR2_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

1238 
	#ADC_SMPR2_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

1239 
	#ADC_SMPR2_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

1241 
	#ADC_SMPR2_SMP19
 ((
uöt32_t
)0x38000000Ë

	)

1242 
	#ADC_SMPR2_SMP19_0
 ((
uöt32_t
)0x08000000Ë

	)

1243 
	#ADC_SMPR2_SMP19_1
 ((
uöt32_t
)0x10000000Ë

	)

1244 
	#ADC_SMPR2_SMP19_2
 ((
uöt32_t
)0x20000000Ë

	)

1247 
	#ADC_SMPR3_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

1248 
	#ADC_SMPR3_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

1249 
	#ADC_SMPR3_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

1250 
	#ADC_SMPR3_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

1252 
	#ADC_SMPR3_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

1253 
	#ADC_SMPR3_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

1254 
	#ADC_SMPR3_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

1255 
	#ADC_SMPR3_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

1257 
	#ADC_SMPR3_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

1258 
	#ADC_SMPR3_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

1259 
	#ADC_SMPR3_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

1260 
	#ADC_SMPR3_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

1262 
	#ADC_SMPR3_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

1263 
	#ADC_SMPR3_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

1264 
	#ADC_SMPR3_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

1265 
	#ADC_SMPR3_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

1267 
	#ADC_SMPR3_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

1268 
	#ADC_SMPR3_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

1269 
	#ADC_SMPR3_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

1270 
	#ADC_SMPR3_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

1272 
	#ADC_SMPR3_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

1273 
	#ADC_SMPR3_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

1274 
	#ADC_SMPR3_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

1275 
	#ADC_SMPR3_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

1277 
	#ADC_SMPR3_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

1278 
	#ADC_SMPR3_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

1279 
	#ADC_SMPR3_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

1280 
	#ADC_SMPR3_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

1282 
	#ADC_SMPR3_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

1283 
	#ADC_SMPR3_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

1284 
	#ADC_SMPR3_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

1285 
	#ADC_SMPR3_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

1287 
	#ADC_SMPR3_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

1288 
	#ADC_SMPR3_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

1289 
	#ADC_SMPR3_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

1290 
	#ADC_SMPR3_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

1292 
	#ADC_SMPR3_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

1293 
	#ADC_SMPR3_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

1294 
	#ADC_SMPR3_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

1295 
	#ADC_SMPR3_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

1298 
	#ADC_JOFR1_JOFFSET1
 ((
uöt32_t
)0x00000FFFË

	)

1301 
	#ADC_JOFR2_JOFFSET2
 ((
uöt32_t
)0x00000FFFË

	)

1304 
	#ADC_JOFR3_JOFFSET3
 ((
uöt32_t
)0x00000FFFË

	)

1307 
	#ADC_JOFR4_JOFFSET4
 ((
uöt32_t
)0x00000FFFË

	)

1310 
	#ADC_HTR_HT
 ((
uöt32_t
)0x00000FFFË

	)

1313 
	#ADC_LTR_LT
 ((
uöt32_t
)0x00000FFFË

	)

1316 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

1317 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

1318 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

1319 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

1320 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

1322 
	#ADC_SQR1_SQ28
 ((
uöt32_t
)0x000F8000Ë

	)

1323 
	#ADC_SQR1_SQ28_0
 ((
uöt32_t
)0x00008000Ë

	)

1324 
	#ADC_SQR1_SQ28_1
 ((
uöt32_t
)0x00010000Ë

	)

1325 
	#ADC_SQR1_SQ28_2
 ((
uöt32_t
)0x00020000Ë

	)

1326 
	#ADC_SQR1_SQ28_3
 ((
uöt32_t
)0x00040000Ë

	)

1327 
	#ADC_SQR1_SQ28_4
 ((
uöt32_t
)0x00080000Ë

	)

1329 
	#ADC_SQR1_SQ27
 ((
uöt32_t
)0x00007C00Ë

	)

1330 
	#ADC_SQR1_SQ27_0
 ((
uöt32_t
)0x00000400Ë

	)

1331 
	#ADC_SQR1_SQ27_1
 ((
uöt32_t
)0x00000800Ë

	)

1332 
	#ADC_SQR1_SQ27_2
 ((
uöt32_t
)0x00001000Ë

	)

1333 
	#ADC_SQR1_SQ27_3
 ((
uöt32_t
)0x00002000Ë

	)

1334 
	#ADC_SQR1_SQ27_4
 ((
uöt32_t
)0x00004000Ë

	)

1336 
	#ADC_SQR1_SQ26
 ((
uöt32_t
)0x000003E0Ë

	)

1337 
	#ADC_SQR1_SQ26_0
 ((
uöt32_t
)0x00000020Ë

	)

1338 
	#ADC_SQR1_SQ26_1
 ((
uöt32_t
)0x00000040Ë

	)

1339 
	#ADC_SQR1_SQ26_2
 ((
uöt32_t
)0x00000080Ë

	)

1340 
	#ADC_SQR1_SQ26_3
 ((
uöt32_t
)0x00000100Ë

	)

1341 
	#ADC_SQR1_SQ26_4
 ((
uöt32_t
)0x00000200Ë

	)

1343 
	#ADC_SQR1_SQ25
 ((
uöt32_t
)0x0000001FË

	)

1344 
	#ADC_SQR1_SQ25_0
 ((
uöt32_t
)0x00000001Ë

	)

1345 
	#ADC_SQR1_SQ25_1
 ((
uöt32_t
)0x00000002Ë

	)

1346 
	#ADC_SQR1_SQ25_2
 ((
uöt32_t
)0x00000004Ë

	)

1347 
	#ADC_SQR1_SQ25_3
 ((
uöt32_t
)0x00000008Ë

	)

1348 
	#ADC_SQR1_SQ25_4
 ((
uöt32_t
)0x00000010Ë

	)

1351 
	#ADC_SQR2_SQ19
 ((
uöt32_t
)0x0000001FË

	)

1352 
	#ADC_SQR2_SQ19_0
 ((
uöt32_t
)0x00000001Ë

	)

1353 
	#ADC_SQR2_SQ19_1
 ((
uöt32_t
)0x00000002Ë

	)

1354 
	#ADC_SQR2_SQ19_2
 ((
uöt32_t
)0x00000004Ë

	)

1355 
	#ADC_SQR2_SQ19_3
 ((
uöt32_t
)0x00000008Ë

	)

1356 
	#ADC_SQR2_SQ19_4
 ((
uöt32_t
)0x00000010Ë

	)

1358 
	#ADC_SQR2_SQ20
 ((
uöt32_t
)0x000003E0Ë

	)

1359 
	#ADC_SQR2_SQ20_0
 ((
uöt32_t
)0x00000020Ë

	)

1360 
	#ADC_SQR2_SQ20_1
 ((
uöt32_t
)0x00000040Ë

	)

1361 
	#ADC_SQR2_SQ20_2
 ((
uöt32_t
)0x00000080Ë

	)

1362 
	#ADC_SQR2_SQ20_3
 ((
uöt32_t
)0x00000100Ë

	)

1363 
	#ADC_SQR2_SQ20_4
 ((
uöt32_t
)0x00000200Ë

	)

1365 
	#ADC_SQR2_SQ21
 ((
uöt32_t
)0x00007C00Ë

	)

1366 
	#ADC_SQR2_SQ21_0
 ((
uöt32_t
)0x00000400Ë

	)

1367 
	#ADC_SQR2_SQ21_1
 ((
uöt32_t
)0x00000800Ë

	)

1368 
	#ADC_SQR2_SQ21_2
 ((
uöt32_t
)0x00001000Ë

	)

1369 
	#ADC_SQR2_SQ21_3
 ((
uöt32_t
)0x00002000Ë

	)

1370 
	#ADC_SQR2_SQ21_4
 ((
uöt32_t
)0x00004000Ë

	)

1372 
	#ADC_SQR2_SQ22
 ((
uöt32_t
)0x000F8000Ë

	)

1373 
	#ADC_SQR2_SQ22_0
 ((
uöt32_t
)0x00008000Ë

	)

1374 
	#ADC_SQR2_SQ22_1
 ((
uöt32_t
)0x00010000Ë

	)

1375 
	#ADC_SQR2_SQ22_2
 ((
uöt32_t
)0x00020000Ë

	)

1376 
	#ADC_SQR2_SQ22_3
 ((
uöt32_t
)0x00040000Ë

	)

1377 
	#ADC_SQR2_SQ22_4
 ((
uöt32_t
)0x00080000Ë

	)

1379 
	#ADC_SQR2_SQ23
 ((
uöt32_t
)0x01F00000Ë

	)

1380 
	#ADC_SQR2_SQ23_0
 ((
uöt32_t
)0x00100000Ë

	)

1381 
	#ADC_SQR2_SQ23_1
 ((
uöt32_t
)0x00200000Ë

	)

1382 
	#ADC_SQR2_SQ23_2
 ((
uöt32_t
)0x00400000Ë

	)

1383 
	#ADC_SQR2_SQ23_3
 ((
uöt32_t
)0x00800000Ë

	)

1384 
	#ADC_SQR2_SQ23_4
 ((
uöt32_t
)0x01000000Ë

	)

1386 
	#ADC_SQR2_SQ24
 ((
uöt32_t
)0x3E000000Ë

	)

1387 
	#ADC_SQR2_SQ24_0
 ((
uöt32_t
)0x02000000Ë

	)

1388 
	#ADC_SQR2_SQ24_1
 ((
uöt32_t
)0x04000000Ë

	)

1389 
	#ADC_SQR2_SQ24_2
 ((
uöt32_t
)0x08000000Ë

	)

1390 
	#ADC_SQR2_SQ24_3
 ((
uöt32_t
)0x10000000Ë

	)

1391 
	#ADC_SQR2_SQ24_4
 ((
uöt32_t
)0x20000000Ë

	)

1394 
	#ADC_SQR3_SQ13
 ((
uöt32_t
)0x0000001FË

	)

1395 
	#ADC_SQR3_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

1396 
	#ADC_SQR3_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

1397 
	#ADC_SQR3_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

1398 
	#ADC_SQR3_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

1399 
	#ADC_SQR3_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

1401 
	#ADC_SQR3_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

1402 
	#ADC_SQR3_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

1403 
	#ADC_SQR3_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

1404 
	#ADC_SQR3_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

1405 
	#ADC_SQR3_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

1406 
	#ADC_SQR3_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

1408 
	#ADC_SQR3_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

1409 
	#ADC_SQR3_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

1410 
	#ADC_SQR3_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

1411 
	#ADC_SQR3_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

1412 
	#ADC_SQR3_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

1413 
	#ADC_SQR3_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

1415 
	#ADC_SQR3_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

1416 
	#ADC_SQR3_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

1417 
	#ADC_SQR3_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

1418 
	#ADC_SQR3_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

1419 
	#ADC_SQR3_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

1420 
	#ADC_SQR3_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

1422 
	#ADC_SQR3_SQ17
 ((
uöt32_t
)0x01F00000Ë

	)

1423 
	#ADC_SQR3_SQ17_0
 ((
uöt32_t
)0x00100000Ë

	)

1424 
	#ADC_SQR3_SQ17_1
 ((
uöt32_t
)0x00200000Ë

	)

1425 
	#ADC_SQR3_SQ17_2
 ((
uöt32_t
)0x00400000Ë

	)

1426 
	#ADC_SQR3_SQ17_3
 ((
uöt32_t
)0x00800000Ë

	)

1427 
	#ADC_SQR3_SQ17_4
 ((
uöt32_t
)0x01000000Ë

	)

1429 
	#ADC_SQR3_SQ18
 ((
uöt32_t
)0x3E000000Ë

	)

1430 
	#ADC_SQR3_SQ18_0
 ((
uöt32_t
)0x02000000Ë

	)

1431 
	#ADC_SQR3_SQ18_1
 ((
uöt32_t
)0x04000000Ë

	)

1432 
	#ADC_SQR3_SQ18_2
 ((
uöt32_t
)0x08000000Ë

	)

1433 
	#ADC_SQR3_SQ18_3
 ((
uöt32_t
)0x10000000Ë

	)

1434 
	#ADC_SQR3_SQ18_4
 ((
uöt32_t
)0x20000000Ë

	)

1437 
	#ADC_SQR4_SQ7
 ((
uöt32_t
)0x0000001FË

	)

1438 
	#ADC_SQR4_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

1439 
	#ADC_SQR4_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

1440 
	#ADC_SQR4_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

1441 
	#ADC_SQR4_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

1442 
	#ADC_SQR4_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

1444 
	#ADC_SQR4_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

1445 
	#ADC_SQR4_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

1446 
	#ADC_SQR4_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

1447 
	#ADC_SQR4_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

1448 
	#ADC_SQR4_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

1449 
	#ADC_SQR4_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

1451 
	#ADC_SQR4_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

1452 
	#ADC_SQR4_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

1453 
	#ADC_SQR4_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

1454 
	#ADC_SQR4_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

1455 
	#ADC_SQR4_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

1456 
	#ADC_SQR4_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

1458 
	#ADC_SQR4_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

1459 
	#ADC_SQR4_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

1460 
	#ADC_SQR4_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

1461 
	#ADC_SQR4_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

1462 
	#ADC_SQR4_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

1463 
	#ADC_SQR4_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

1465 
	#ADC_SQR4_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

1466 
	#ADC_SQR4_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

1467 
	#ADC_SQR4_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

1468 
	#ADC_SQR4_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

1469 
	#ADC_SQR4_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

1470 
	#ADC_SQR4_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

1472 
	#ADC_SQR4_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

1473 
	#ADC_SQR4_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

1474 
	#ADC_SQR4_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

1475 
	#ADC_SQR4_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

1476 
	#ADC_SQR4_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

1477 
	#ADC_SQR4_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

1480 
	#ADC_SQR5_SQ1
 ((
uöt32_t
)0x0000001FË

	)

1481 
	#ADC_SQR5_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

1482 
	#ADC_SQR5_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

1483 
	#ADC_SQR5_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

1484 
	#ADC_SQR5_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

1485 
	#ADC_SQR5_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

1487 
	#ADC_SQR5_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

1488 
	#ADC_SQR5_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

1489 
	#ADC_SQR5_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

1490 
	#ADC_SQR5_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

1491 
	#ADC_SQR5_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

1492 
	#ADC_SQR5_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

1494 
	#ADC_SQR5_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

1495 
	#ADC_SQR5_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

1496 
	#ADC_SQR5_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

1497 
	#ADC_SQR5_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

1498 
	#ADC_SQR5_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

1499 
	#ADC_SQR5_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

1501 
	#ADC_SQR5_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

1502 
	#ADC_SQR5_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

1503 
	#ADC_SQR5_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

1504 
	#ADC_SQR5_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

1505 
	#ADC_SQR5_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

1506 
	#ADC_SQR5_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

1508 
	#ADC_SQR5_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

1509 
	#ADC_SQR5_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

1510 
	#ADC_SQR5_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

1511 
	#ADC_SQR5_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

1512 
	#ADC_SQR5_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

1513 
	#ADC_SQR5_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

1515 
	#ADC_SQR5_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

1516 
	#ADC_SQR5_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

1517 
	#ADC_SQR5_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

1518 
	#ADC_SQR5_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

1519 
	#ADC_SQR5_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

1520 
	#ADC_SQR5_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

1524 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

1525 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

1526 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

1527 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

1528 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

1529 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

1531 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

1532 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

1533 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

1534 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

1535 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

1536 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

1538 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

1539 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

1540 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

1541 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

1542 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

1543 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

1545 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

1546 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

1547 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

1548 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

1549 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

1550 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

1552 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

1553 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

1554 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

1557 
	#ADC_JDR1_JDATA
 ((
uöt32_t
)0x0000FFFFË

	)

1560 
	#ADC_JDR2_JDATA
 ((
uöt32_t
)0x0000FFFFË

	)

1563 
	#ADC_JDR3_JDATA
 ((
uöt32_t
)0x0000FFFFË

	)

1566 
	#ADC_JDR4_JDATA
 ((
uöt32_t
)0x0000FFFFË

	)

1569 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

1572 
	#ADC_SMPR3_SMP30
 ((
uöt32_t
)0x00000007Ë

	)

1573 
	#ADC_SMPR3_SMP30_0
 ((
uöt32_t
)0x00000001Ë

	)

1574 
	#ADC_SMPR3_SMP30_1
 ((
uöt32_t
)0x00000002Ë

	)

1575 
	#ADC_SMPR3_SMP30_2
 ((
uöt32_t
)0x00000004Ë

	)

1577 
	#ADC_SMPR3_SMP31
 ((
uöt32_t
)0x00000038Ë

	)

1578 
	#ADC_SMPR3_SMP31_0
 ((
uöt32_t
)0x00000008Ë

	)

1579 
	#ADC_SMPR3_SMP31_1
 ((
uöt32_t
)0x00000010Ë

	)

1580 
	#ADC_SMPR3_SMP31_2
 ((
uöt32_t
)0x00000020Ë

	)

1583 
	#ADC_CSR_AWD1
 ((
uöt32_t
)0x00000001Ë

	)

1584 
	#ADC_CSR_EOC1
 ((
uöt32_t
)0x00000002Ë

	)

1585 
	#ADC_CSR_JEOC1
 ((
uöt32_t
)0x00000004Ë

	)

1586 
	#ADC_CSR_JSTRT1
 ((
uöt32_t
)0x00000008Ë

	)

1587 
	#ADC_CSR_STRT1
 ((
uöt32_t
)0x00000010Ë

	)

1588 
	#ADC_CSR_OVR1
 ((
uöt32_t
)0x00000020Ë

	)

1589 
	#ADC_CSR_ADONS1
 ((
uöt32_t
)0x00000040Ë

	)

1592 
	#ADC_CCR_ADCPRE
 ((
uöt32_t
)0x00030000Ë

	)

1593 
	#ADC_CCR_ADCPRE_0
 ((
uöt32_t
)0x00010000Ë

	)

1594 
	#ADC_CCR_ADCPRE_1
 ((
uöt32_t
)0x00020000Ë

	)

1595 
	#ADC_CCR_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

1603 
	#AES_CR_EN
 ((
uöt32_t
)0x00000001Ë

	)

1604 
	#AES_CR_DATATYPE
 ((
uöt32_t
)0x00000006Ë

	)

1605 
	#AES_CR_DATATYPE_0
 ((
uöt32_t
)0x00000002Ë

	)

1606 
	#AES_CR_DATATYPE_1
 ((
uöt32_t
)0x00000004Ë

	)

1608 
	#AES_CR_MODE
 ((
uöt32_t
)0x00000018Ë

	)

1609 
	#AES_CR_MODE_0
 ((
uöt32_t
)0x00000008Ë

	)

1610 
	#AES_CR_MODE_1
 ((
uöt32_t
)0x00000010Ë

	)

1612 
	#AES_CR_CHMOD
 ((
uöt32_t
)0x00000060Ë

	)

1613 
	#AES_CR_CHMOD_0
 ((
uöt32_t
)0x00000020Ë

	)

1614 
	#AES_CR_CHMOD_1
 ((
uöt32_t
)0x00000040Ë

	)

1616 
	#AES_CR_CCFC
 ((
uöt32_t
)0x00000080Ë

	)

1617 
	#AES_CR_ERRC
 ((
uöt32_t
)0x00000100Ë

	)

1618 
	#AES_CR_CCIE
 ((
uöt32_t
)0x00000200Ë

	)

1619 
	#AES_CR_ERRIE
 ((
uöt32_t
)0x00000400Ë

	)

1620 
	#AES_CR_DMAINEN
 ((
uöt32_t
)0x00000800Ë

	)

1621 
	#AES_CR_DMAOUTEN
 ((
uöt32_t
)0x00001000Ë

	)

1624 
	#AES_SR_CCF
 ((
uöt32_t
)0x00000001Ë

	)

1625 
	#AES_SR_RDERR
 ((
uöt32_t
)0x00000002Ë

	)

1626 
	#AES_SR_WRERR
 ((
uöt32_t
)0x00000004Ë

	)

1629 
	#AES_DINR
 ((
uöt32_t
)0x0000FFFFË

	)

1632 
	#AES_DOUTR
 ((
uöt32_t
)0x0000FFFFË

	)

1635 
	#AES_KEYR0
 ((
uöt32_t
)0x0000FFFFË

	)

1638 
	#AES_KEYR1
 ((
uöt32_t
)0x0000FFFFË

	)

1641 
	#AES_KEYR2
 ((
uöt32_t
)0x0000FFFFË

	)

1644 
	#AES_KEYR3
 ((
uöt32_t
)0x0000FFFFË

	)

1647 
	#AES_IVR0
 ((
uöt32_t
)0x0000FFFFË

	)

1650 
	#AES_IVR1
 ((
uöt32_t
)0x0000FFFFË

	)

1653 
	#AES_IVR2
 ((
uöt32_t
)0x0000FFFFË

	)

1656 
	#AES_IVR3
 ((
uöt32_t
)0x0000FFFFË

	)

1665 
	#COMP_CSR_10KPU
 ((
uöt32_t
)0x00000001Ë

	)

1666 
	#COMP_CSR_400KPU
 ((
uöt32_t
)0x00000002Ë

	)

1667 
	#COMP_CSR_10KPD
 ((
uöt32_t
)0x00000004Ë

	)

1668 
	#COMP_CSR_400KPD
 ((
uöt32_t
)0x00000008Ë

	)

1670 
	#COMP_CSR_CMP1EN
 ((
uöt32_t
)0x00000010Ë

	)

1671 
	#COMP_CSR_SW1
 ((
uöt32_t
)0x00000020Ë

	)

1672 
	#COMP_CSR_CMP1OUT
 ((
uöt32_t
)0x00000080Ë

	)

1674 
	#COMP_CSR_SPEED
 ((
uöt32_t
)0x00001000Ë

	)

1675 
	#COMP_CSR_CMP2OUT
 ((
uöt32_t
)0x00002000Ë

	)

1677 
	#COMP_CSR_VREFOUTEN
 ((
uöt32_t
)0x00010000Ë

	)

1678 
	#COMP_CSR_WNDWE
 ((
uöt32_t
)0x00020000Ë

	)

1680 
	#COMP_CSR_INSEL
 ((
uöt32_t
)0x001C0000Ë

	)

1681 
	#COMP_CSR_INSEL_0
 ((
uöt32_t
)0x00040000Ë

	)

1682 
	#COMP_CSR_INSEL_1
 ((
uöt32_t
)0x00080000Ë

	)

1683 
	#COMP_CSR_INSEL_2
 ((
uöt32_t
)0x00100000Ë

	)

1685 
	#COMP_CSR_OUTSEL
 ((
uöt32_t
)0x00E00000Ë

	)

1686 
	#COMP_CSR_OUTSEL_0
 ((
uöt32_t
)0x00200000Ë

	)

1687 
	#COMP_CSR_OUTSEL_1
 ((
uöt32_t
)0x00400000Ë

	)

1688 
	#COMP_CSR_OUTSEL_2
 ((
uöt32_t
)0x00800000Ë

	)

1690 
	#COMP_CSR_FCH3
 ((
uöt32_t
)0x04000000Ë

	)

1691 
	#COMP_CSR_FCH8
 ((
uöt32_t
)0x08000000Ë

	)

1692 
	#COMP_CSR_RCH13
 ((
uöt32_t
)0x10000000Ë

	)

1694 
	#COMP_CSR_CAIE
 ((
uöt32_t
)0x20000000Ë

	)

1695 
	#COMP_CSR_CAIF
 ((
uöt32_t
)0x40000000Ë

	)

1696 
	#COMP_CSR_TSUSP
 ((
uöt32_t
)0x80000000Ë

	)

1704 
	#OPAMP_CSR_OPA1PD
 ((
uöt32_t
)0x00000001Ë

	)

1705 
	#OPAMP_CSR_S3SEL1
 ((
uöt32_t
)0x00000002Ë

	)

1706 
	#OPAMP_CSR_S4SEL1
 ((
uöt32_t
)0x00000004Ë

	)

1707 
	#OPAMP_CSR_S5SEL1
 ((
uöt32_t
)0x00000008Ë

	)

1708 
	#OPAMP_CSR_S6SEL1
 ((
uöt32_t
)0x00000010Ë

	)

1709 
	#OPAMP_CSR_OPA1CAL_L
 ((
uöt32_t
)0x00000020Ë

	)

1710 
	#OPAMP_CSR_OPA1CAL_H
 ((
uöt32_t
)0x00000040Ë

	)

1711 
	#OPAMP_CSR_OPA1LPM
 ((
uöt32_t
)0x00000080Ë

	)

1712 
	#OPAMP_CSR_OPA2PD
 ((
uöt32_t
)0x00000100Ë

	)

1713 
	#OPAMP_CSR_S3SEL2
 ((
uöt32_t
)0x00000200Ë

	)

1714 
	#OPAMP_CSR_S4SEL2
 ((
uöt32_t
)0x00000400Ë

	)

1715 
	#OPAMP_CSR_S5SEL2
 ((
uöt32_t
)0x00000800Ë

	)

1716 
	#OPAMP_CSR_S6SEL2
 ((
uöt32_t
)0x00001000Ë

	)

1717 
	#OPAMP_CSR_OPA2CAL_L
 ((
uöt32_t
)0x00002000Ë

	)

1718 
	#OPAMP_CSR_OPA2CAL_H
 ((
uöt32_t
)0x00004000Ë

	)

1719 
	#OPAMP_CSR_OPA2LPM
 ((
uöt32_t
)0x00008000Ë

	)

1720 
	#OPAMP_CSR_OPA3PD
 ((
uöt32_t
)0x00010000Ë

	)

1721 
	#OPAMP_CSR_S3SEL3
 ((
uöt32_t
)0x00020000Ë

	)

1722 
	#OPAMP_CSR_S4SEL3
 ((
uöt32_t
)0x00040000Ë

	)

1723 
	#OPAMP_CSR_S5SEL3
 ((
uöt32_t
)0x00080000Ë

	)

1724 
	#OPAMP_CSR_S6SEL3
 ((
uöt32_t
)0x00100000Ë

	)

1725 
	#OPAMP_CSR_OPA3CAL_L
 ((
uöt32_t
)0x00200000Ë

	)

1726 
	#OPAMP_CSR_OPA3CAL_H
 ((
uöt32_t
)0x00400000Ë

	)

1727 
	#OPAMP_CSR_OPA3LPM
 ((
uöt32_t
)0x00800000Ë

	)

1728 
	#OPAMP_CSR_ANAWSEL1
 ((
uöt32_t
)0x01000000Ë

	)

1729 
	#OPAMP_CSR_ANAWSEL2
 ((
uöt32_t
)0x02000000Ë

	)

1730 
	#OPAMP_CSR_ANAWSEL3
 ((
uöt32_t
)0x04000000Ë

	)

1731 
	#OPAMP_CSR_S7SEL2
 ((
uöt32_t
)0x08000000Ë

	)

1732 
	#OPAMP_CSR_AOP_RANGE
 ((
uöt32_t
)0x10000000Ë

	)

1733 
	#OPAMP_CSR_OPA1CALOUT
 ((
uöt32_t
)0x20000000Ë

	)

1734 
	#OPAMP_CSR_OPA2CALOUT
 ((
uöt32_t
)0x40000000Ë

	)

1735 
	#OPAMP_CSR_OPA3CALOUT
 ((
uöt32_t
)0x80000000Ë

	)

1738 
	#OPAMP_OTR_AO1_OPT_OFFSET_TRIM
 ((
uöt32_t
)0x000003FFË

	)

1739 
	#OPAMP_OTR_AO2_OPT_OFFSET_TRIM
 ((
uöt32_t
)0x000FFC00Ë

	)

1740 
	#OPAMP_OTR_AO3_OPT_OFFSET_TRIM
 ((
uöt32_t
)0x3FF00000Ë

	)

1741 
	#OPAMP_OTR_OT_USER
 ((
uöt32_t
)0x80000000Ë

	)

1744 
	#OPAMP_LP_OTR_AO1_OPT_OFFSET_TRIM_LP
 ((
uöt32_t
)0x000003FFË

	)

1745 
	#OPAMP_LP_OTR_AO2_OPT_OFFSET_TRIM_LP
 ((
uöt32_t
)0x000FFC00Ë

	)

1746 
	#OPAMP_LP_OTR_AO3_OPT_OFFSET_TRIM_LP
 ((
uöt32_t
)0x3FF00000Ë

	)

1755 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

1758 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

1761 
	#CRC_CR_RESET
 ((
uöt32_t
)0x00000001Ë

	)

1770 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

1771 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

1772 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

1774 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

1775 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

1776 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

1777 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

1779 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

1780 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

1781 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

1783 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

1784 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

1785 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

1786 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

1787 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

1789 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

1790 
	#DAC_CR_DMAUDRIE1
 ((
uöt32_t
)0x00002000Ë

	)

1791 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

1792 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

1793 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

1795 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

1796 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

1797 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

1798 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

1800 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

1801 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

1802 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

1804 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

1805 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

1806 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

1807 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

1808 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

1810 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

1811 
	#DAC_CR_DMAUDRIE2
 ((
uöt32_t
)0x20000000Ë

	)

1813 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

1814 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

1817 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

1820 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

1823 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

1826 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

1829 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

1832 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

1835 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

1836 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

1839 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

1840 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

1843 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

1844 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

1847 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

1850 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

1853 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

1854 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

1863 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFFË

	)

1865 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000Ë

	)

1866 
	#DBGMCU_IDCODE_REV_ID_0
 ((
uöt32_t
)0x00010000Ë

	)

1867 
	#DBGMCU_IDCODE_REV_ID_1
 ((
uöt32_t
)0x00020000Ë

	)

1868 
	#DBGMCU_IDCODE_REV_ID_2
 ((
uöt32_t
)0x00040000Ë

	)

1869 
	#DBGMCU_IDCODE_REV_ID_3
 ((
uöt32_t
)0x00080000Ë

	)

1870 
	#DBGMCU_IDCODE_REV_ID_4
 ((
uöt32_t
)0x00100000Ë

	)

1871 
	#DBGMCU_IDCODE_REV_ID_5
 ((
uöt32_t
)0x00200000Ë

	)

1872 
	#DBGMCU_IDCODE_REV_ID_6
 ((
uöt32_t
)0x00400000Ë

	)

1873 
	#DBGMCU_IDCODE_REV_ID_7
 ((
uöt32_t
)0x00800000Ë

	)

1874 
	#DBGMCU_IDCODE_REV_ID_8
 ((
uöt32_t
)0x01000000Ë

	)

1875 
	#DBGMCU_IDCODE_REV_ID_9
 ((
uöt32_t
)0x02000000Ë

	)

1876 
	#DBGMCU_IDCODE_REV_ID_10
 ((
uöt32_t
)0x04000000Ë

	)

1877 
	#DBGMCU_IDCODE_REV_ID_11
 ((
uöt32_t
)0x08000000Ë

	)

1878 
	#DBGMCU_IDCODE_REV_ID_12
 ((
uöt32_t
)0x10000000Ë

	)

1879 
	#DBGMCU_IDCODE_REV_ID_13
 ((
uöt32_t
)0x20000000Ë

	)

1880 
	#DBGMCU_IDCODE_REV_ID_14
 ((
uöt32_t
)0x40000000Ë

	)

1881 
	#DBGMCU_IDCODE_REV_ID_15
 ((
uöt32_t
)0x80000000Ë

	)

1884 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001Ë

	)

1885 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002Ë

	)

1886 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004Ë

	)

1887 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020Ë

	)

1889 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0Ë

	)

1890 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040Ë

	)

1891 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080Ë

	)

1895 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001Ë

	)

1896 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002Ë

	)

1897 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004Ë

	)

1898 
	#DBGMCU_APB1_FZ_DBG_TIM5_STOP
 ((
uöt32_t
)0x00000008Ë

	)

1899 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010Ë

	)

1900 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020Ë

	)

1901 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400Ë

	)

1902 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800Ë

	)

1903 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000Ë

	)

1904 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000Ë

	)

1905 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000Ë

	)

1909 
	#DBGMCU_APB2_FZ_DBG_TIM9_STOP
 ((
uöt32_t
)0x00000004Ë

	)

1910 
	#DBGMCU_APB2_FZ_DBG_TIM10_STOP
 ((
uöt32_t
)0x00000008Ë

	)

1911 
	#DBGMCU_APB2_FZ_DBG_TIM11_STOP
 ((
uöt32_t
)0x00000010Ë

	)

1920 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

1921 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

1922 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

1923 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

1924 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

1925 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

1926 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

1927 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

1928 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

1929 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

1930 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

1931 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

1932 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

1933 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

1934 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

1935 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

1936 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

1937 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

1938 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

1939 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

1940 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

1941 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

1942 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

1943 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

1944 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

1945 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

1946 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

1947 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

1950 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

1951 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

1952 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

1953 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

1954 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

1955 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

1956 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

1957 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

1958 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

1959 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

1960 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

1961 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

1962 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

1963 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

1964 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

1965 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

1966 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

1967 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

1968 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

1969 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

1970 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

1971 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

1972 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

1973 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

1974 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

1975 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

1976 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

1977 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

1980 
	#DMA_CCR1_EN
 ((
uöt16_t
)0x0001Ë

	)

1981 
	#DMA_CCR1_TCIE
 ((
uöt16_t
)0x0002Ë

	)

1982 
	#DMA_CCR1_HTIE
 ((
uöt16_t
)0x0004Ë

	)

1983 
	#DMA_CCR1_TEIE
 ((
uöt16_t
)0x0008Ë

	)

1984 
	#DMA_CCR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

1985 
	#DMA_CCR1_CIRC
 ((
uöt16_t
)0x0020Ë

	)

1986 
	#DMA_CCR1_PINC
 ((
uöt16_t
)0x0040Ë

	)

1987 
	#DMA_CCR1_MINC
 ((
uöt16_t
)0x0080Ë

	)

1989 
	#DMA_CCR1_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

1990 
	#DMA_CCR1_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

1991 
	#DMA_CCR1_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

1993 
	#DMA_CCR1_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

1994 
	#DMA_CCR1_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

1995 
	#DMA_CCR1_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

1997 
	#DMA_CCR1_PL
 ((
uöt16_t
)0x3000Ë

	)

1998 
	#DMA_CCR1_PL_0
 ((
uöt16_t
)0x1000Ë

	)

1999 
	#DMA_CCR1_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2001 
	#DMA_CCR1_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2004 
	#DMA_CCR2_EN
 ((
uöt16_t
)0x0001Ë

	)

2005 
	#DMA_CCR2_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2006 
	#DMA_CCR2_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2007 
	#DMA_CCR2_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2008 
	#DMA_CCR2_DIR
 ((
uöt16_t
)0x0010Ë

	)

2009 
	#DMA_CCR2_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2010 
	#DMA_CCR2_PINC
 ((
uöt16_t
)0x0040Ë

	)

2011 
	#DMA_CCR2_MINC
 ((
uöt16_t
)0x0080Ë

	)

2013 
	#DMA_CCR2_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2014 
	#DMA_CCR2_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2015 
	#DMA_CCR2_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2017 
	#DMA_CCR2_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2018 
	#DMA_CCR2_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2019 
	#DMA_CCR2_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2021 
	#DMA_CCR2_PL
 ((
uöt16_t
)0x3000Ë

	)

2022 
	#DMA_CCR2_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2023 
	#DMA_CCR2_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2025 
	#DMA_CCR2_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2028 
	#DMA_CCR3_EN
 ((
uöt16_t
)0x0001Ë

	)

2029 
	#DMA_CCR3_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2030 
	#DMA_CCR3_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2031 
	#DMA_CCR3_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2032 
	#DMA_CCR3_DIR
 ((
uöt16_t
)0x0010Ë

	)

2033 
	#DMA_CCR3_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2034 
	#DMA_CCR3_PINC
 ((
uöt16_t
)0x0040Ë

	)

2035 
	#DMA_CCR3_MINC
 ((
uöt16_t
)0x0080Ë

	)

2037 
	#DMA_CCR3_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2038 
	#DMA_CCR3_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2039 
	#DMA_CCR3_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2041 
	#DMA_CCR3_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2042 
	#DMA_CCR3_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2043 
	#DMA_CCR3_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2045 
	#DMA_CCR3_PL
 ((
uöt16_t
)0x3000Ë

	)

2046 
	#DMA_CCR3_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2047 
	#DMA_CCR3_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2049 
	#DMA_CCR3_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2052 
	#DMA_CCR4_EN
 ((
uöt16_t
)0x0001Ë

	)

2053 
	#DMA_CCR4_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2054 
	#DMA_CCR4_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2055 
	#DMA_CCR4_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2056 
	#DMA_CCR4_DIR
 ((
uöt16_t
)0x0010Ë

	)

2057 
	#DMA_CCR4_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2058 
	#DMA_CCR4_PINC
 ((
uöt16_t
)0x0040Ë

	)

2059 
	#DMA_CCR4_MINC
 ((
uöt16_t
)0x0080Ë

	)

2061 
	#DMA_CCR4_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2062 
	#DMA_CCR4_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2063 
	#DMA_CCR4_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2065 
	#DMA_CCR4_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2066 
	#DMA_CCR4_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2067 
	#DMA_CCR4_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2069 
	#DMA_CCR4_PL
 ((
uöt16_t
)0x3000Ë

	)

2070 
	#DMA_CCR4_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2071 
	#DMA_CCR4_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2073 
	#DMA_CCR4_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2076 
	#DMA_CCR5_EN
 ((
uöt16_t
)0x0001Ë

	)

2077 
	#DMA_CCR5_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2078 
	#DMA_CCR5_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2079 
	#DMA_CCR5_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2080 
	#DMA_CCR5_DIR
 ((
uöt16_t
)0x0010Ë

	)

2081 
	#DMA_CCR5_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2082 
	#DMA_CCR5_PINC
 ((
uöt16_t
)0x0040Ë

	)

2083 
	#DMA_CCR5_MINC
 ((
uöt16_t
)0x0080Ë

	)

2085 
	#DMA_CCR5_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2086 
	#DMA_CCR5_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2087 
	#DMA_CCR5_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2089 
	#DMA_CCR5_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2090 
	#DMA_CCR5_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2091 
	#DMA_CCR5_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2093 
	#DMA_CCR5_PL
 ((
uöt16_t
)0x3000Ë

	)

2094 
	#DMA_CCR5_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2095 
	#DMA_CCR5_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2097 
	#DMA_CCR5_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2100 
	#DMA_CCR6_EN
 ((
uöt16_t
)0x0001Ë

	)

2101 
	#DMA_CCR6_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2102 
	#DMA_CCR6_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2103 
	#DMA_CCR6_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2104 
	#DMA_CCR6_DIR
 ((
uöt16_t
)0x0010Ë

	)

2105 
	#DMA_CCR6_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2106 
	#DMA_CCR6_PINC
 ((
uöt16_t
)0x0040Ë

	)

2107 
	#DMA_CCR6_MINC
 ((
uöt16_t
)0x0080Ë

	)

2109 
	#DMA_CCR6_PSIZE
 ((
uöt16_t
)0x0300Ë

	)

2110 
	#DMA_CCR6_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2111 
	#DMA_CCR6_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2113 
	#DMA_CCR6_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2114 
	#DMA_CCR6_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2115 
	#DMA_CCR6_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2117 
	#DMA_CCR6_PL
 ((
uöt16_t
)0x3000Ë

	)

2118 
	#DMA_CCR6_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2119 
	#DMA_CCR6_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2121 
	#DMA_CCR6_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2124 
	#DMA_CCR7_EN
 ((
uöt16_t
)0x0001Ë

	)

2125 
	#DMA_CCR7_TCIE
 ((
uöt16_t
)0x0002Ë

	)

2126 
	#DMA_CCR7_HTIE
 ((
uöt16_t
)0x0004Ë

	)

2127 
	#DMA_CCR7_TEIE
 ((
uöt16_t
)0x0008Ë

	)

2128 
	#DMA_CCR7_DIR
 ((
uöt16_t
)0x0010Ë

	)

2129 
	#DMA_CCR7_CIRC
 ((
uöt16_t
)0x0020Ë

	)

2130 
	#DMA_CCR7_PINC
 ((
uöt16_t
)0x0040Ë

	)

2131 
	#DMA_CCR7_MINC
 ((
uöt16_t
)0x0080Ë

	)

2133 
	#DMA_CCR7_PSIZE
 , ((
uöt16_t
)0x0300Ë

	)

2134 
	#DMA_CCR7_PSIZE_0
 ((
uöt16_t
)0x0100Ë

	)

2135 
	#DMA_CCR7_PSIZE_1
 ((
uöt16_t
)0x0200Ë

	)

2137 
	#DMA_CCR7_MSIZE
 ((
uöt16_t
)0x0C00Ë

	)

2138 
	#DMA_CCR7_MSIZE_0
 ((
uöt16_t
)0x0400Ë

	)

2139 
	#DMA_CCR7_MSIZE_1
 ((
uöt16_t
)0x0800Ë

	)

2141 
	#DMA_CCR7_PL
 ((
uöt16_t
)0x3000Ë

	)

2142 
	#DMA_CCR7_PL_0
 ((
uöt16_t
)0x1000Ë

	)

2143 
	#DMA_CCR7_PL_1
 ((
uöt16_t
)0x2000Ë

	)

2145 
	#DMA_CCR7_MEM2MEM
 ((
uöt16_t
)0x4000Ë

	)

2148 
	#DMA_CNDTR1_NDT
 ((
uöt16_t
)0xFFFFË

	)

2151 
	#DMA_CNDTR2_NDT
 ((
uöt16_t
)0xFFFFË

	)

2154 
	#DMA_CNDTR3_NDT
 ((
uöt16_t
)0xFFFFË

	)

2157 
	#DMA_CNDTR4_NDT
 ((
uöt16_t
)0xFFFFË

	)

2160 
	#DMA_CNDTR5_NDT
 ((
uöt16_t
)0xFFFFË

	)

2163 
	#DMA_CNDTR6_NDT
 ((
uöt16_t
)0xFFFFË

	)

2166 
	#DMA_CNDTR7_NDT
 ((
uöt16_t
)0xFFFFË

	)

2169 
	#DMA_CPAR1_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2172 
	#DMA_CPAR2_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2175 
	#DMA_CPAR3_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2179 
	#DMA_CPAR4_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2182 
	#DMA_CPAR5_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2185 
	#DMA_CPAR6_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2189 
	#DMA_CPAR7_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2192 
	#DMA_CMAR1_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2195 
	#DMA_CMAR2_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2198 
	#DMA_CMAR3_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2202 
	#DMA_CMAR4_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2205 
	#DMA_CMAR5_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2208 
	#DMA_CMAR6_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2211 
	#DMA_CMAR7_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2220 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

2221 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

2222 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

2223 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

2224 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

2225 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

2226 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

2227 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

2228 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

2229 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

2230 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

2231 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

2232 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

2233 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

2234 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

2235 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

2236 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

2237 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

2238 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

2239 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

2240 
	#EXTI_IMR_MR20
 ((
uöt32_t
)0x00100000Ë

	)

2241 
	#EXTI_IMR_MR21
 ((
uöt32_t
)0x00200000Ë

	)

2242 
	#EXTI_IMR_MR22
 ((
uöt32_t
)0x00400000Ë

	)

2243 
	#EXTI_IMR_MR23
 ((
uöt32_t
)0x00800000Ë

	)

2246 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

2247 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

2248 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

2249 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

2250 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

2251 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

2252 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

2253 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

2254 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

2255 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

2256 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

2257 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

2258 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

2259 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

2260 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

2261 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

2262 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

2263 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

2264 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

2265 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

2266 
	#EXTI_EMR_MR20
 ((
uöt32_t
)0x00100000Ë

	)

2267 
	#EXTI_EMR_MR21
 ((
uöt32_t
)0x00200000Ë

	)

2268 
	#EXTI_EMR_MR22
 ((
uöt32_t
)0x00400000Ë

	)

2269 
	#EXTI_EMR_MR23
 ((
uöt32_t
)0x00800000Ë

	)

2272 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

2273 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

2274 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

2275 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

2276 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

2277 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

2278 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

2279 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

2280 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

2281 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

2282 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

2283 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

2284 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

2285 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

2286 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

2287 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

2288 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

2289 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

2290 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

2291 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

2292 
	#EXTI_RTSR_TR20
 ((
uöt32_t
)0x00100000Ë

	)

2293 
	#EXTI_RTSR_TR21
 ((
uöt32_t
)0x00200000Ë

	)

2294 
	#EXTI_RTSR_TR22
 ((
uöt32_t
)0x00400000Ë

	)

2295 
	#EXTI_RTSR_TR23
 ((
uöt32_t
)0x00800000Ë

	)

2298 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

2299 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

2300 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

2301 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

2302 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

2303 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

2304 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

2305 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

2306 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

2307 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

2308 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

2309 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

2310 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

2311 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

2312 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

2313 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

2314 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

2315 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

2316 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

2317 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

2318 
	#EXTI_FTSR_TR20
 ((
uöt32_t
)0x00100000Ë

	)

2319 
	#EXTI_FTSR_TR21
 ((
uöt32_t
)0x00200000Ë

	)

2320 
	#EXTI_FTSR_TR22
 ((
uöt32_t
)0x00400000Ë

	)

2321 
	#EXTI_FTSR_TR23
 ((
uöt32_t
)0x00800000Ë

	)

2324 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

2325 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

2326 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

2327 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

2328 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

2329 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

2330 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

2331 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

2332 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

2333 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

2334 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

2335 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

2336 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

2337 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

2338 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

2339 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

2340 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

2341 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

2342 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

2343 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

2344 
	#EXTI_SWIER_SWIER20
 ((
uöt32_t
)0x00100000Ë

	)

2345 
	#EXTI_SWIER_SWIER21
 ((
uöt32_t
)0x00200000Ë

	)

2346 
	#EXTI_SWIER_SWIER22
 ((
uöt32_t
)0x00400000Ë

	)

2347 
	#EXTI_SWIER_SWIER23
 ((
uöt32_t
)0x00800000Ë

	)

2350 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

2351 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

2352 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

2353 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

2354 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

2355 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

2356 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

2357 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

2358 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

2359 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

2360 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

2361 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

2362 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

2363 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

2364 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

2365 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

2366 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

2367 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

2368 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

2369 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

2370 
	#EXTI_PR_PR20
 ((
uöt32_t
)0x00100000Ë

	)

2371 
	#EXTI_PR_PR21
 ((
uöt32_t
)0x00200000Ë

	)

2372 
	#EXTI_PR_PR22
 ((
uöt32_t
)0x00400000Ë

	)

2373 
	#EXTI_PR_PR23
 ((
uöt32_t
)0x00800000Ë

	)

2383 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x00000001Ë

	)

2384 
	#FLASH_ACR_PRFTEN
 ((
uöt32_t
)0x00000002Ë

	)

2385 
	#FLASH_ACR_ACC64
 ((
uöt32_t
)0x00000004Ë

	)

2386 
	#FLASH_ACR_SLEEP_PD
 ((
uöt32_t
)0x00000008Ë

	)

2387 
	#FLASH_ACR_RUN_PD
 ((
uöt32_t
)0x00000010Ë

	)

2390 
	#FLASH_PECR_PELOCK
 ((
uöt32_t
)0x00000001Ë

	)

2391 
	#FLASH_PECR_PRGLOCK
 ((
uöt32_t
)0x00000002Ë

	)

2392 
	#FLASH_PECR_OPTLOCK
 ((
uöt32_t
)0x00000004Ë

	)

2393 
	#FLASH_PECR_PROG
 ((
uöt32_t
)0x00000008Ë

	)

2394 
	#FLASH_PECR_DATA
 ((
uöt32_t
)0x00000010Ë

	)

2395 
	#FLASH_PECR_FTDW
 ((
uöt32_t
)0x00000100Ë

	)

2396 
	#FLASH_PECR_ERASE
 ((
uöt32_t
)0x00000200Ë

	)

2397 
	#FLASH_PECR_FPRG
 ((
uöt32_t
)0x00000400Ë

	)

2398 
	#FLASH_PECR_PARALLBANK
 ((
uöt32_t
)0x00008000Ë

	)

2399 
	#FLASH_PECR_EOPIE
 ((
uöt32_t
)0x00010000Ë

	)

2400 
	#FLASH_PECR_ERRIE
 ((
uöt32_t
)0x00020000Ë

	)

2401 
	#FLASH_PECR_OBL_LAUNCH
 ((
uöt32_t
)0x00040000Ë

	)

2404 
	#FLASH_PDKEYR_PDKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

2407 
	#FLASH_PEKEYR_PEKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

2410 
	#FLASH_PRGKEYR_PRGKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

2413 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

2416 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00000001Ë

	)

2417 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000002Ë

	)

2418 
	#FLASH_SR_ENHV
 ((
uöt32_t
)0x00000004Ë

	)

2419 
	#FLASH_SR_READY
 ((
uöt32_t
)0x00000008Ë

	)

2421 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000100Ë

	)

2422 
	#FLASH_SR_PGAERR
 ((
uöt32_t
)0x00000200Ë

	)

2423 
	#FLASH_SR_SIZERR
 ((
uöt32_t
)0x00000400Ë

	)

2424 
	#FLASH_SR_OPTVERR
 ((
uöt32_t
)0x00000800Ë

	)

2425 
	#FLASH_SR_OPTVERRUSR
 ((
uöt32_t
)0x00001000Ë

	)

2428 
	#FLASH_OBR_RDPRT
 ((
uöt16_t
)0x000000AAË

	)

2429 
	#FLASH_OBR_BOR_LEV
 ((
uöt16_t
)0x000F0000Ë

	)

2430 
	#FLASH_OBR_USER
 ((
uöt32_t
)0x00700000Ë

	)

2431 
	#FLASH_OBR_IWDG_SW
 ((
uöt32_t
)0x00100000Ë

	)

2432 
	#FLASH_OBR_nRST_STOP
 ((
uöt32_t
)0x00200000Ë

	)

2433 
	#FLASH_OBR_nRST_STDBY
 ((
uöt32_t
)0x00400000Ë

	)

2434 
	#FLASH_OBR_nRST_BFB2
 ((
uöt32_t
)0x00800000Ë

	)

2437 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

2440 
	#FLASH_WRPR1_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

2443 
	#FLASH_WRPR2_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

2450 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

2451 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

2453 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

2454 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

2455 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

2457 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

2458 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

2459 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

2461 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

2462 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

2463 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

2464 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

2465 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

2466 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

2467 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

2468 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

2469 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

2470 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

2473 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

2474 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

2476 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

2477 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

2478 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

2480 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

2481 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

2482 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

2484 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

2485 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

2486 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

2487 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

2488 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

2489 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

2490 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

2491 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

2492 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

2493 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

2496 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

2497 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

2499 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

2500 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

2501 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

2503 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

2504 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

2505 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

2507 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

2508 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

2509 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

2510 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

2511 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

2512 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

2513 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

2514 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

2515 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

2516 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

2519 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

2520 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

2522 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

2523 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

2524 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

2526 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

2527 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

2528 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

2530 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

2531 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

2532 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

2533 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

2534 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

2535 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

2536 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

2537 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

2538 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

2539 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

2542 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

2543 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

2544 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

2545 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

2546 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

2548 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

2549 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

2550 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

2551 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

2552 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

2554 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

2555 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

2556 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

2557 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

2558 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

2560 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

2561 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

2562 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

2563 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

2564 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

2566 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

2567 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

2568 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

2569 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

2570 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

2572 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

2573 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

2574 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

2575 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

2576 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

2578 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

2579 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

2580 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

2583 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

2584 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

2585 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

2586 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

2587 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

2589 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

2590 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

2591 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

2592 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

2593 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

2595 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

2596 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

2597 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

2598 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

2599 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

2601 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

2602 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

2603 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

2604 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

2605 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

2607 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

2608 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

2609 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

2610 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

2611 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

2613 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

2614 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

2615 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

2616 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

2617 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

2619 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

2620 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

2621 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

2624 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

2625 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

2626 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

2627 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

2628 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

2630 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

2631 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

2632 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

2633 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

2634 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

2636 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

2637 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

2638 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

2639 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

2640 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

2642 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

2643 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

2644 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

2645 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

2646 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

2648 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

2649 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

2650 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

2651 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

2652 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

2654 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

2655 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

2656 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

2657 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

2658 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

2660 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

2661 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

2662 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

2665 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

2666 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

2667 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

2668 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

2669 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

2671 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

2672 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

2673 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

2674 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

2675 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

2677 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

2678 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

2679 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

2680 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

2681 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

2683 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

2684 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

2685 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

2686 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

2687 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

2689 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

2690 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

2691 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

2692 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

2693 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

2695 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

2696 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

2697 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

2698 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

2699 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

2701 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

2702 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

2703 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

2706 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

2707 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

2708 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

2709 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

2710 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

2712 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

2713 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

2714 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

2715 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

2716 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

2718 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

2719 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

2720 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

2721 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

2722 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

2724 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

2725 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

2726 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

2727 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

2728 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

2730 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

2731 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

2732 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

2733 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

2734 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

2736 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

2737 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

2738 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

2741 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

2742 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

2743 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

2744 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

2745 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

2747 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

2748 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

2749 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

2750 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

2751 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

2753 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

2754 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

2755 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

2756 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

2757 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

2759 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

2760 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

2761 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

2762 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

2763 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

2765 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

2766 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

2767 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

2768 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

2769 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

2771 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

2772 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

2773 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

2776 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

2777 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

2778 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

2779 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

2780 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

2782 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

2783 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

2784 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

2785 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

2786 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

2788 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

2789 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

2790 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

2791 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

2792 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

2794 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

2795 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

2796 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

2797 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

2798 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

2800 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

2801 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

2802 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

2803 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

2804 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

2806 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

2807 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

2808 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

2811 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

2812 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

2813 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

2814 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

2815 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

2817 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

2818 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

2819 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

2820 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

2821 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

2823 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

2824 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

2825 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

2826 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

2827 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

2829 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

2830 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

2831 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

2832 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

2833 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

2835 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

2836 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

2837 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

2838 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

2839 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

2841 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

2842 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

2843 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

2851 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

2852 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

2853 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

2854 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

2855 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

2856 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

2857 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

2858 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

2859 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

2860 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

2861 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

2862 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

2863 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

2864 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

2865 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

2866 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

2867 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

2868 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

2869 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

2870 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

2871 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

2872 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

2873 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

2874 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

2875 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

2876 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

2877 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

2878 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

2879 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

2880 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

2881 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

2882 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

2883 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

2884 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

2885 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

2886 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

2887 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

2888 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

2889 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

2890 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

2891 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

2892 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

2893 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

2894 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

2895 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

2896 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

2897 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

2898 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

2901 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

2902 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

2903 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

2904 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

2905 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

2906 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

2907 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

2908 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

2909 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

2910 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

2911 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

2912 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

2913 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

2914 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

2915 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

2916 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

2919 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

2920 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

2921 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

2922 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

2923 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

2924 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

2925 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

2926 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

2927 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

2928 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

2929 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

2930 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

2931 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

2932 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

2933 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

2934 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

2935 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

2936 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

2937 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

2938 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

2939 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

2940 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

2941 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

2942 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

2943 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

2944 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

2945 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

2946 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

2947 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

2948 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

2949 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

2950 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

2951 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

2952 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

2953 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

2954 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

2955 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

2956 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

2957 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

2958 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

2959 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

2960 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

2961 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

2962 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

2963 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

2964 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

2965 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

2966 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

2969 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

2970 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

2971 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

2972 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

2973 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

2974 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

2975 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

2976 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

2977 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

2978 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

2979 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

2980 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

2981 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

2982 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

2983 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

2984 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

2985 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

2986 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

2987 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

2988 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

2989 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

2990 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

2991 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

2992 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

2993 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

2994 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

2995 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

2996 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

2997 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

2998 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

2999 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

3000 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

3001 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

3002 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

3003 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

3004 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

3005 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

3006 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

3007 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

3008 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

3009 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

3010 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

3011 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

3012 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

3013 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

3014 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

3015 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

3016 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

3019 
	#GPIO_IDR_IDR_0
 ((
uöt32_t
)0x00000001)

	)

3020 
	#GPIO_IDR_IDR_1
 ((
uöt32_t
)0x00000002)

	)

3021 
	#GPIO_IDR_IDR_2
 ((
uöt32_t
)0x00000004)

	)

3022 
	#GPIO_IDR_IDR_3
 ((
uöt32_t
)0x00000008)

	)

3023 
	#GPIO_IDR_IDR_4
 ((
uöt32_t
)0x00000010)

	)

3024 
	#GPIO_IDR_IDR_5
 ((
uöt32_t
)0x00000020)

	)

3025 
	#GPIO_IDR_IDR_6
 ((
uöt32_t
)0x00000040)

	)

3026 
	#GPIO_IDR_IDR_7
 ((
uöt32_t
)0x00000080)

	)

3027 
	#GPIO_IDR_IDR_8
 ((
uöt32_t
)0x00000100)

	)

3028 
	#GPIO_IDR_IDR_9
 ((
uöt32_t
)0x00000200)

	)

3029 
	#GPIO_IDR_IDR_10
 ((
uöt32_t
)0x00000400)

	)

3030 
	#GPIO_IDR_IDR_11
 ((
uöt32_t
)0x00000800)

	)

3031 
	#GPIO_IDR_IDR_12
 ((
uöt32_t
)0x00001000)

	)

3032 
	#GPIO_IDR_IDR_13
 ((
uöt32_t
)0x00002000)

	)

3033 
	#GPIO_IDR_IDR_14
 ((
uöt32_t
)0x00004000)

	)

3034 
	#GPIO_IDR_IDR_15
 ((
uöt32_t
)0x00008000)

	)

3036 
	#GPIO_OTYPER_IDR_0
 
GPIO_IDR_IDR_0


	)

3037 
	#GPIO_OTYPER_IDR_1
 
GPIO_IDR_IDR_1


	)

3038 
	#GPIO_OTYPER_IDR_2
 
GPIO_IDR_IDR_2


	)

3039 
	#GPIO_OTYPER_IDR_3
 
GPIO_IDR_IDR_3


	)

3040 
	#GPIO_OTYPER_IDR_4
 
GPIO_IDR_IDR_4


	)

3041 
	#GPIO_OTYPER_IDR_5
 
GPIO_IDR_IDR_5


	)

3042 
	#GPIO_OTYPER_IDR_6
 
GPIO_IDR_IDR_6


	)

3043 
	#GPIO_OTYPER_IDR_7
 
GPIO_IDR_IDR_7


	)

3044 
	#GPIO_OTYPER_IDR_8
 
GPIO_IDR_IDR_8


	)

3045 
	#GPIO_OTYPER_IDR_9
 
GPIO_IDR_IDR_9


	)

3046 
	#GPIO_OTYPER_IDR_10
 
GPIO_IDR_IDR_10


	)

3047 
	#GPIO_OTYPER_IDR_11
 
GPIO_IDR_IDR_11


	)

3048 
	#GPIO_OTYPER_IDR_12
 
GPIO_IDR_IDR_12


	)

3049 
	#GPIO_OTYPER_IDR_13
 
GPIO_IDR_IDR_13


	)

3050 
	#GPIO_OTYPER_IDR_14
 
GPIO_IDR_IDR_14


	)

3051 
	#GPIO_OTYPER_IDR_15
 
GPIO_IDR_IDR_15


	)

3054 
	#GPIO_ODR_ODR_0
 ((
uöt32_t
)0x00000001)

	)

3055 
	#GPIO_ODR_ODR_1
 ((
uöt32_t
)0x00000002)

	)

3056 
	#GPIO_ODR_ODR_2
 ((
uöt32_t
)0x00000004)

	)

3057 
	#GPIO_ODR_ODR_3
 ((
uöt32_t
)0x00000008)

	)

3058 
	#GPIO_ODR_ODR_4
 ((
uöt32_t
)0x00000010)

	)

3059 
	#GPIO_ODR_ODR_5
 ((
uöt32_t
)0x00000020)

	)

3060 
	#GPIO_ODR_ODR_6
 ((
uöt32_t
)0x00000040)

	)

3061 
	#GPIO_ODR_ODR_7
 ((
uöt32_t
)0x00000080)

	)

3062 
	#GPIO_ODR_ODR_8
 ((
uöt32_t
)0x00000100)

	)

3063 
	#GPIO_ODR_ODR_9
 ((
uöt32_t
)0x00000200)

	)

3064 
	#GPIO_ODR_ODR_10
 ((
uöt32_t
)0x00000400)

	)

3065 
	#GPIO_ODR_ODR_11
 ((
uöt32_t
)0x00000800)

	)

3066 
	#GPIO_ODR_ODR_12
 ((
uöt32_t
)0x00001000)

	)

3067 
	#GPIO_ODR_ODR_13
 ((
uöt32_t
)0x00002000)

	)

3068 
	#GPIO_ODR_ODR_14
 ((
uöt32_t
)0x00004000)

	)

3069 
	#GPIO_ODR_ODR_15
 ((
uöt32_t
)0x00008000)

	)

3071 
	#GPIO_OTYPER_ODR_0
 
GPIO_ODR_ODR_0


	)

3072 
	#GPIO_OTYPER_ODR_1
 
GPIO_ODR_ODR_1


	)

3073 
	#GPIO_OTYPER_ODR_2
 
GPIO_ODR_ODR_2


	)

3074 
	#GPIO_OTYPER_ODR_3
 
GPIO_ODR_ODR_3


	)

3075 
	#GPIO_OTYPER_ODR_4
 
GPIO_ODR_ODR_4


	)

3076 
	#GPIO_OTYPER_ODR_5
 
GPIO_ODR_ODR_5


	)

3077 
	#GPIO_OTYPER_ODR_6
 
GPIO_ODR_ODR_6


	)

3078 
	#GPIO_OTYPER_ODR_7
 
GPIO_ODR_ODR_7


	)

3079 
	#GPIO_OTYPER_ODR_8
 
GPIO_ODR_ODR_8


	)

3080 
	#GPIO_OTYPER_ODR_9
 
GPIO_ODR_ODR_9


	)

3081 
	#GPIO_OTYPER_ODR_10
 
GPIO_ODR_ODR_10


	)

3082 
	#GPIO_OTYPER_ODR_11
 
GPIO_ODR_ODR_11


	)

3083 
	#GPIO_OTYPER_ODR_12
 
GPIO_ODR_ODR_12


	)

3084 
	#GPIO_OTYPER_ODR_13
 
GPIO_ODR_ODR_13


	)

3085 
	#GPIO_OTYPER_ODR_14
 
GPIO_ODR_ODR_14


	)

3086 
	#GPIO_OTYPER_ODR_15
 
GPIO_ODR_ODR_15


	)

3089 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

3090 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

3091 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

3092 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

3093 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

3094 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

3095 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

3096 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

3097 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

3098 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

3099 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

3100 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

3101 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

3102 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

3103 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

3104 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

3105 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

3106 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

3107 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

3108 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

3109 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

3110 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

3111 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

3112 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

3113 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

3114 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

3115 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

3116 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

3117 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

3118 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

3119 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

3120 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

3123 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001)

	)

3124 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002)

	)

3125 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004)

	)

3126 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008)

	)

3127 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010)

	)

3128 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020)

	)

3129 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040)

	)

3130 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080)

	)

3131 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100)

	)

3132 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200)

	)

3133 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400)

	)

3134 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800)

	)

3135 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000)

	)

3136 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000)

	)

3137 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000)

	)

3138 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000)

	)

3139 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000)

	)

3142 
	#GPIO_AFRL_AFRL0
 ((
uöt32_t
)0x0000000F)

	)

3143 
	#GPIO_AFRL_AFRL1
 ((
uöt32_t
)0x000000F0)

	)

3144 
	#GPIO_AFRL_AFRL2
 ((
uöt32_t
)0x00000F00)

	)

3145 
	#GPIO_AFRL_AFRL3
 ((
uöt32_t
)0x0000F000)

	)

3146 
	#GPIO_AFRL_AFRL4
 ((
uöt32_t
)0x000F0000)

	)

3147 
	#GPIO_AFRL_AFRL5
 ((
uöt32_t
)0x00F00000)

	)

3148 
	#GPIO_AFRL_AFRL6
 ((
uöt32_t
)0x0F000000)

	)

3149 
	#GPIO_AFRL_AFRL7
 ((
uöt32_t
)0xF0000000)

	)

3152 
	#GPIO_AFRH_AFRH8
 ((
uöt32_t
)0x0000000F)

	)

3153 
	#GPIO_AFRH_AFRH9
 ((
uöt32_t
)0x000000F0)

	)

3154 
	#GPIO_AFRH_AFRH10
 ((
uöt32_t
)0x00000F00)

	)

3155 
	#GPIO_AFRH_AFRH11
 ((
uöt32_t
)0x0000F000)

	)

3156 
	#GPIO_AFRH_AFRH12
 ((
uöt32_t
)0x000F0000)

	)

3157 
	#GPIO_AFRH_AFRH13
 ((
uöt32_t
)0x00F00000)

	)

3158 
	#GPIO_AFRH_AFRH14
 ((
uöt32_t
)0x0F000000)

	)

3159 
	#GPIO_AFRH_AFRH15
 ((
uöt32_t
)0xF0000000)

	)

3168 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

3169 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

3170 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

3171 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

3172 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

3173 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

3174 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

3175 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

3176 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

3177 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

3178 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

3179 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

3180 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

3181 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

3184 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

3185 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

3186 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

3187 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

3188 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

3189 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

3190 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

3192 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

3193 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

3194 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

3195 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

3196 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

3199 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

3200 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

3202 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

3203 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

3204 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

3205 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

3206 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

3207 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

3208 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

3209 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

3210 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

3211 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

3213 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

3216 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

3217 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

3220 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

3223 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

3224 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

3225 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

3226 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

3227 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

3228 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

3229 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

3230 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

3231 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

3232 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

3233 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

3234 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

3235 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

3236 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

3239 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

3240 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

3241 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

3242 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

3243 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

3244 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

3245 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

3246 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

3249 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

3250 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

3251 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

3254 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

3263 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

3266 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

3267 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

3268 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

3269 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

3272 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

3275 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

3276 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

3285 
	#LCD_CR_LCDEN
 ((
uöt32_t
)0x00000001Ë

	)

3286 
	#LCD_CR_VSEL
 ((
uöt32_t
)0x00000002Ë

	)

3288 
	#LCD_CR_DUTY
 ((
uöt32_t
)0x0000001CË

	)

3289 
	#LCD_CR_DUTY_0
 ((
uöt32_t
)0x00000004Ë

	)

3290 
	#LCD_CR_DUTY_1
 ((
uöt32_t
)0x00000008Ë

	)

3291 
	#LCD_CR_DUTY_2
 ((
uöt32_t
)0x00000010Ë

	)

3293 
	#LCD_CR_BIAS
 ((
uöt32_t
)0x00000060Ë

	)

3294 
	#LCD_CR_BIAS_0
 ((
uöt32_t
)0x00000020Ë

	)

3295 
	#LCD_CR_BIAS_1
 ((
uöt32_t
)0x00000040Ë

	)

3297 
	#LCD_CR_MUX_SEG
 ((
uöt32_t
)0x00000080Ë

	)

3300 
	#LCD_FCR_HD
 ((
uöt32_t
)0x00000001Ë

	)

3301 
	#LCD_FCR_SOFIE
 ((
uöt32_t
)0x00000002Ë

	)

3302 
	#LCD_FCR_UDDIE
 ((
uöt32_t
)0x00000008Ë

	)

3304 
	#LCD_FCR_PON
 ((
uöt32_t
)0x00000070Ë

	)

3305 
	#LCD_FCR_PON_0
 ((
uöt32_t
)0x00000010Ë

	)

3306 
	#LCD_FCR_PON_1
 ((
uöt32_t
)0x00000020Ë

	)

3307 
	#LCD_FCR_PON_2
 ((
uöt32_t
)0x00000040Ë

	)

3309 
	#LCD_FCR_DEAD
 ((
uöt32_t
)0x00000380Ë

	)

3310 
	#LCD_FCR_DEAD_0
 ((
uöt32_t
)0x00000080Ë

	)

3311 
	#LCD_FCR_DEAD_1
 ((
uöt32_t
)0x00000100Ë

	)

3312 
	#LCD_FCR_DEAD_2
 ((
uöt32_t
)0x00000200Ë

	)

3314 
	#LCD_FCR_CC
 ((
uöt32_t
)0x00001C00Ë

	)

3315 
	#LCD_FCR_CC_0
 ((
uöt32_t
)0x00000400Ë

	)

3316 
	#LCD_FCR_CC_1
 ((
uöt32_t
)0x00000800Ë

	)

3317 
	#LCD_FCR_CC_2
 ((
uöt32_t
)0x00001000Ë

	)

3319 
	#LCD_FCR_BLINKF
 ((
uöt32_t
)0x0000E000Ë

	)

3320 
	#LCD_FCR_BLINKF_0
 ((
uöt32_t
)0x00002000Ë

	)

3321 
	#LCD_FCR_BLINKF_1
 ((
uöt32_t
)0x00004000Ë

	)

3322 
	#LCD_FCR_BLINKF_2
 ((
uöt32_t
)0x00008000Ë

	)

3324 
	#LCD_FCR_BLINK
 ((
uöt32_t
)0x00030000Ë

	)

3325 
	#LCD_FCR_BLINK_0
 ((
uöt32_t
)0x00010000Ë

	)

3326 
	#LCD_FCR_BLINK_1
 ((
uöt32_t
)0x00020000Ë

	)

3328 
	#LCD_FCR_DIV
 ((
uöt32_t
)0x003C0000Ë

	)

3329 
	#LCD_FCR_PS
 ((
uöt32_t
)0x03C00000Ë

	)

3332 
	#LCD_SR_ENS
 ((
uöt32_t
)0x00000001Ë

	)

3333 
	#LCD_SR_SOF
 ((
uöt32_t
)0x00000002Ë

	)

3334 
	#LCD_SR_UDR
 ((
uöt32_t
)0x00000004Ë

	)

3335 
	#LCD_SR_UDD
 ((
uöt32_t
)0x00000008Ë

	)

3336 
	#LCD_SR_RDY
 ((
uöt32_t
)0x00000010Ë

	)

3337 
	#LCD_SR_FCRSR
 ((
uöt32_t
)0x00000020Ë

	)

3340 
	#LCD_CLR_SOFC
 ((
uöt32_t
)0x00000002Ë

	)

3341 
	#LCD_CLR_UDDC
 ((
uöt32_t
)0x00000008Ë

	)

3344 
	#LCD_RAM_SEGMENT_DATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3353 
	#PWR_CR_LPSDSR
 ((
uöt16_t
)0x0001Ë

	)

3354 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

3355 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

3356 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

3357 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

3359 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

3360 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

3361 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

3362 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

3365 
	#PWR_CR_PLS_LEV0
 ((
uöt16_t
)0x0000Ë

	)

3366 
	#PWR_CR_PLS_LEV1
 ((
uöt16_t
)0x0020Ë

	)

3367 
	#PWR_CR_PLS_LEV2
 ((
uöt16_t
)0x0040Ë

	)

3368 
	#PWR_CR_PLS_LEV3
 ((
uöt16_t
)0x0060Ë

	)

3369 
	#PWR_CR_PLS_LEV4
 ((
uöt16_t
)0x0080Ë

	)

3370 
	#PWR_CR_PLS_LEV5
 ((
uöt16_t
)0x00A0Ë

	)

3371 
	#PWR_CR_PLS_LEV6
 ((
uöt16_t
)0x00C0Ë

	)

3372 
	#PWR_CR_PLS_LEV7
 ((
uöt16_t
)0x00E0Ë

	)

3374 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

3375 
	#PWR_CR_ULP
 ((
uöt16_t
)0x0200Ë

	)

3376 
	#PWR_CR_FWU
 ((
uöt16_t
)0x0400Ë

	)

3378 
	#PWR_CR_VOS
 ((
uöt16_t
)0x1800Ë

	)

3379 
	#PWR_CR_VOS_0
 ((
uöt16_t
)0x0800Ë

	)

3380 
	#PWR_CR_VOS_1
 ((
uöt16_t
)0x1000Ë

	)

3381 
	#PWR_CR_LPRUN
 ((
uöt16_t
)0x4000Ë

	)

3384 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

3385 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

3386 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

3387 
	#PWR_CSR_VREFINTRDYF
 ((
uöt16_t
)0x0008Ë

	)

3388 
	#PWR_CSR_VOSF
 ((
uöt16_t
)0x0010Ë

	)

3389 
	#PWR_CSR_REGLPF
 ((
uöt16_t
)0x0020Ë

	)

3391 
	#PWR_CSR_EWUP1
 ((
uöt16_t
)0x0100Ë

	)

3392 
	#PWR_CSR_EWUP2
 ((
uöt16_t
)0x0200Ë

	)

3393 
	#PWR_CSR_EWUP3
 ((
uöt16_t
)0x0400Ë

	)

3401 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001Ë

	)

3402 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

3404 
	#RCC_CR_MSION
 ((
uöt32_t
)0x00000100Ë

	)

3405 
	#RCC_CR_MSIRDY
 ((
uöt32_t
)0x00000200Ë

	)

3407 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000Ë

	)

3408 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000Ë

	)

3409 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000Ë

	)

3411 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000Ë

	)

3412 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000Ë

	)

3413 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x10000000Ë

	)

3415 
	#RCC_CR_RTCPRE
 ((
uöt32_t
)0x60000000Ë

	)

3416 
	#RCC_CR_RTCPRE_0
 ((
uöt32_t
)0x20000000Ë

	)

3417 
	#RCC_CR_RTCPRE_1
 ((
uöt32_t
)0x40000000Ë

	)

3420 
	#RCC_ICSCR_HSICAL
 ((
uöt32_t
)0x000000FFË

	)

3421 
	#RCC_ICSCR_HSITRIM
 ((
uöt32_t
)0x00001F00Ë

	)

3423 
	#RCC_ICSCR_MSIRANGE
 ((
uöt32_t
)0x0000E000Ë

	)

3424 
	#RCC_ICSCR_MSIRANGE_0
 ((
uöt32_t
)0x00000000Ë

	)

3425 
	#RCC_ICSCR_MSIRANGE_1
 ((
uöt32_t
)0x00002000Ë

	)

3426 
	#RCC_ICSCR_MSIRANGE_2
 ((
uöt32_t
)0x00004000Ë

	)

3427 
	#RCC_ICSCR_MSIRANGE_3
 ((
uöt32_t
)0x00006000Ë

	)

3428 
	#RCC_ICSCR_MSIRANGE_4
 ((
uöt32_t
)0x00008000Ë

	)

3429 
	#RCC_ICSCR_MSIRANGE_5
 ((
uöt32_t
)0x0000A000Ë

	)

3430 
	#RCC_ICSCR_MSIRANGE_6
 ((
uöt32_t
)0x0000C000Ë

	)

3431 
	#RCC_ICSCR_MSICAL
 ((
uöt32_t
)0x00FF0000Ë

	)

3432 
	#RCC_ICSCR_MSITRIM
 ((
uöt32_t
)0xFF000000Ë

	)

3435 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

3436 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

3437 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

3440 
	#RCC_CFGR_SW_MSI
 ((
uöt32_t
)0x00000000Ë

	)

3441 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000001Ë

	)

3442 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000002Ë

	)

3443 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000003Ë

	)

3445 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

3446 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

3447 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

3450 
	#RCC_CFGR_SWS_MSI
 ((
uöt32_t
)0x00000000Ë

	)

3451 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000004Ë

	)

3452 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000008Ë

	)

3453 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x0000000CË

	)

3455 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

3456 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

3457 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

3458 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

3459 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

3462 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

3463 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

3464 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

3465 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

3466 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

3467 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

3468 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

3469 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

3470 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

3472 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

3473 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

3474 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

3475 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

3478 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

3479 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

3480 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

3481 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

3482 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

3484 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

3485 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

3486 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

3487 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

3490 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

3491 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

3492 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

3493 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

3494 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

3497 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

3499 
	#RCC_CFGR_PLLSRC_HSI
 ((
uöt32_t
)0x00000000Ë

	)

3500 
	#RCC_CFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00010000Ë

	)

3503 
	#RCC_CFGR_PLLMUL
 ((
uöt32_t
)0x003C0000Ë

	)

3504 
	#RCC_CFGR_PLLMUL_0
 ((
uöt32_t
)0x00040000Ë

	)

3505 
	#RCC_CFGR_PLLMUL_1
 ((
uöt32_t
)0x00080000Ë

	)

3506 
	#RCC_CFGR_PLLMUL_2
 ((
uöt32_t
)0x00100000Ë

	)

3507 
	#RCC_CFGR_PLLMUL_3
 ((
uöt32_t
)0x00200000Ë

	)

3510 
	#RCC_CFGR_PLLMUL3
 ((
uöt32_t
)0x00000000Ë

	)

3511 
	#RCC_CFGR_PLLMUL4
 ((
uöt32_t
)0x00040000Ë

	)

3512 
	#RCC_CFGR_PLLMUL6
 ((
uöt32_t
)0x00080000Ë

	)

3513 
	#RCC_CFGR_PLLMUL8
 ((
uöt32_t
)0x000C0000Ë

	)

3514 
	#RCC_CFGR_PLLMUL12
 ((
uöt32_t
)0x00100000Ë

	)

3515 
	#RCC_CFGR_PLLMUL16
 ((
uöt32_t
)0x00140000Ë

	)

3516 
	#RCC_CFGR_PLLMUL24
 ((
uöt32_t
)0x00180000Ë

	)

3517 
	#RCC_CFGR_PLLMUL32
 ((
uöt32_t
)0x001C0000Ë

	)

3518 
	#RCC_CFGR_PLLMUL48
 ((
uöt32_t
)0x00200000Ë

	)

3521 
	#RCC_CFGR_PLLDIV
 ((
uöt32_t
)0x00C00000Ë

	)

3522 
	#RCC_CFGR_PLLDIV_0
 ((
uöt32_t
)0x00400000Ë

	)

3523 
	#RCC_CFGR_PLLDIV_1
 ((
uöt32_t
)0x00800000Ë

	)

3527 
	#RCC_CFGR_PLLDIV1
 ((
uöt32_t
)0x00000000Ë

	)

3528 
	#RCC_CFGR_PLLDIV2
 ((
uöt32_t
)0x00400000Ë

	)

3529 
	#RCC_CFGR_PLLDIV3
 ((
uöt32_t
)0x00800000Ë

	)

3530 
	#RCC_CFGR_PLLDIV4
 ((
uöt32_t
)0x00C00000Ë

	)

3533 
	#RCC_CFGR_MCOSEL
 ((
uöt32_t
)0x07000000Ë

	)

3534 
	#RCC_CFGR_MCOSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

3535 
	#RCC_CFGR_MCOSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

3536 
	#RCC_CFGR_MCOSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

3539 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

3540 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x01000000Ë

	)

3541 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x02000000Ë

	)

3542 
	#RCC_CFGR_MCO_MSI
 ((
uöt32_t
)0x03000000Ë

	)

3543 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x04000000Ë

	)

3544 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x05000000Ë

	)

3545 
	#RCC_CFGR_MCO_LSI
 ((
uöt32_t
)0x06000000Ë

	)

3546 
	#RCC_CFGR_MCO_LSE
 ((
uöt32_t
)0x07000000Ë

	)

3548 
	#RCC_CFGR_MCOPRE
 ((
uöt32_t
)0x70000000Ë

	)

3549 
	#RCC_CFGR_MCOPRE_0
 ((
uöt32_t
)0x10000000Ë

	)

3550 
	#RCC_CFGR_MCOPRE_1
 ((
uöt32_t
)0x20000000Ë

	)

3551 
	#RCC_CFGR_MCOPRE_2
 ((
uöt32_t
)0x40000000Ë

	)

3554 
	#RCC_CFGR_MCO_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

3555 
	#RCC_CFGR_MCO_DIV2
 ((
uöt32_t
)0x10000000Ë

	)

3556 
	#RCC_CFGR_MCO_DIV4
 ((
uöt32_t
)0x20000000Ë

	)

3557 
	#RCC_CFGR_MCO_DIV8
 ((
uöt32_t
)0x30000000Ë

	)

3558 
	#RCC_CFGR_MCO_DIV16
 ((
uöt32_t
)0x40000000Ë

	)

3561 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

3562 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

3563 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

3564 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

3565 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

3566 
	#RCC_CIR_MSIRDYF
 ((
uöt32_t
)0x00000020Ë

	)

3567 
	#RCC_CIR_LSECSS
 ((
uöt32_t
)0x00000040Ë

	)

3568 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

3570 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

3571 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

3572 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

3573 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

3574 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

3575 
	#RCC_CIR_MSIRDYIE
 ((
uöt32_t
)0x00002000Ë

	)

3576 
	#RCC_CIR_LSECSSIE
 ((
uöt32_t
)0x00004000Ë

	)

3578 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

3579 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

3580 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

3581 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

3582 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

3583 
	#RCC_CIR_MSIRDYC
 ((
uöt32_t
)0x00200000Ë

	)

3584 
	#RCC_CIR_LSECSSC
 ((
uöt32_t
)0x00400000Ë

	)

3585 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

3589 
	#RCC_AHBRSTR_GPIOARST
 ((
uöt32_t
)0x00000001Ë

	)

3590 
	#RCC_AHBRSTR_GPIOBRST
 ((
uöt32_t
)0x00000002Ë

	)

3591 
	#RCC_AHBRSTR_GPIOCRST
 ((
uöt32_t
)0x00000004Ë

	)

3592 
	#RCC_AHBRSTR_GPIODRST
 ((
uöt32_t
)0x00000008Ë

	)

3593 
	#RCC_AHBRSTR_GPIOERST
 ((
uöt32_t
)0x00000010Ë

	)

3594 
	#RCC_AHBRSTR_GPIOHRST
 ((
uöt32_t
)0x00000020Ë

	)

3595 
	#RCC_AHBRSTR_GPIOFRST
 ((
uöt32_t
)0x00000040Ë

	)

3596 
	#RCC_AHBRSTR_GPIOGRST
 ((
uöt32_t
)0x00000080Ë

	)

3597 
	#RCC_AHBRSTR_CRCRST
 ((
uöt32_t
)0x00001000Ë

	)

3598 
	#RCC_AHBRSTR_FLITFRST
 ((
uöt32_t
)0x00008000Ë

	)

3599 
	#RCC_AHBRSTR_DMA1RST
 ((
uöt32_t
)0x01000000Ë

	)

3600 
	#RCC_AHBRSTR_DMA2RST
 ((
uöt32_t
)0x02000000Ë

	)

3601 
	#RCC_AHBRSTR_AESRST
 ((
uöt32_t
)0x08000000Ë

	)

3602 
	#RCC_AHBRSTR_FSMCRST
 ((
uöt32_t
)0x40000000Ë

	)

3605 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00000001Ë

	)

3606 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00000004Ë

	)

3607 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00000008Ë

	)

3608 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00000010Ë

	)

3609 
	#RCC_APB2RSTR_ADC1RST
 ((
uöt32_t
)0x00000200Ë

	)

3610 
	#RCC_APB2RSTR_SDIORST
 ((
uöt32_t
)0x00000800Ë

	)

3611 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000Ë

	)

3612 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00004000Ë

	)

3615 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

3616 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

3617 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

3618 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

3619 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

3620 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

3621 
	#RCC_APB1RSTR_LCDRST
 ((
uöt32_t
)0x00000200Ë

	)

3622 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

3623 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

3624 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

3625 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

3626 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

3627 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

3628 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

3629 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

3630 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

3631 
	#RCC_APB1RSTR_USBRST
 ((
uöt32_t
)0x00800000Ë

	)

3632 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

3633 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

3634 
	#RCC_APB1RSTR_COMPRST
 ((
uöt32_t
)0x80000000Ë

	)

3637 
	#RCC_AHBENR_GPIOAEN
 ((
uöt32_t
)0x00000001Ë

	)

3638 
	#RCC_AHBENR_GPIOBEN
 ((
uöt32_t
)0x00000002Ë

	)

3639 
	#RCC_AHBENR_GPIOCEN
 ((
uöt32_t
)0x00000004Ë

	)

3640 
	#RCC_AHBENR_GPIODEN
 ((
uöt32_t
)0x00000008Ë

	)

3641 
	#RCC_AHBENR_GPIOEEN
 ((
uöt32_t
)0x00000010Ë

	)

3642 
	#RCC_AHBENR_GPIOHEN
 ((
uöt32_t
)0x00000020Ë

	)

3643 
	#RCC_AHBENR_GPIOFEN
 ((
uöt32_t
)0x00000040Ë

	)

3644 
	#RCC_AHBENR_GPIOGEN
 ((
uöt32_t
)0x00000080Ë

	)

3645 
	#RCC_AHBENR_CRCEN
 ((
uöt32_t
)0x00001000Ë

	)

3646 
	#RCC_AHBENR_FLITFEN
 ((
uöt32_t
)0x00008000Ë

	)

3648 
	#RCC_AHBENR_DMA1EN
 ((
uöt32_t
)0x01000000Ë

	)

3649 
	#RCC_AHBENR_DMA2EN
 ((
uöt32_t
)0x02000000Ë

	)

3650 
	#RCC_AHBENR_AESEN
 ((
uöt32_t
)0x08000000Ë

	)

3651 
	#RCC_AHBENR_FSMCEN
 ((
uöt32_t
)0x40000000Ë

	)

3655 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00000001Ë

	)

3656 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00000004Ë

	)

3657 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00000008Ë

	)

3658 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00000010Ë

	)

3659 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000200Ë

	)

3660 
	#RCC_APB2ENR_SDIOEN
 ((
uöt32_t
)0x00000800Ë

	)

3661 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000Ë

	)

3662 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00004000Ë

	)

3666 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

3667 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

3668 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

3669 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

3670 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

3671 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

3672 
	#RCC_APB1ENR_LCDEN
 ((
uöt32_t
)0x00000200Ë

	)

3673 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

3674 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

3675 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

3676 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

3677 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

3678 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

3679 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

3680 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

3681 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

3682 
	#RCC_APB1ENR_USBEN
 ((
uöt32_t
)0x00800000Ë

	)

3683 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

3684 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

3685 
	#RCC_APB1ENR_COMPEN
 ((
uöt32_t
)0x80000000Ë

	)

3688 
	#RCC_AHBLPENR_GPIOALPEN
 ((
uöt32_t
)0x00000001Ë

	)

3689 
	#RCC_AHBLPENR_GPIOBLPEN
 ((
uöt32_t
)0x00000002Ë

	)

3690 
	#RCC_AHBLPENR_GPIOCLPEN
 ((
uöt32_t
)0x00000004Ë

	)

3691 
	#RCC_AHBLPENR_GPIODLPEN
 ((
uöt32_t
)0x00000008Ë

	)

3692 
	#RCC_AHBLPENR_GPIOELPEN
 ((
uöt32_t
)0x00000010Ë

	)

3693 
	#RCC_AHBLPENR_GPIOHLPEN
 ((
uöt32_t
)0x00000020Ë

	)

3694 
	#RCC_AHBLPENR_GPIOFLPEN
 ((
uöt32_t
)0x00000040Ë

	)

3695 
	#RCC_AHBLPENR_GPIOGLPEN
 ((
uöt32_t
)0x00000080Ë

	)

3696 
	#RCC_AHBLPENR_CRCLPEN
 ((
uöt32_t
)0x00001000Ë

	)

3697 
	#RCC_AHBLPENR_FLITFLPEN
 ((
uöt32_t
)0x00008000Ë

	)

3700 
	#RCC_AHBLPENR_SRAMLPEN
 ((
uöt32_t
)0x00010000Ë

	)

3701 
	#RCC_AHBLPENR_DMA1LPEN
 ((
uöt32_t
)0x01000000Ë

	)

3702 
	#RCC_AHBLPENR_DMA2LPEN
 ((
uöt32_t
)0x02000000Ë

	)

3703 
	#RCC_AHBLPENR_AESLPEN
 ((
uöt32_t
)0x08000000Ë

	)

3704 
	#RCC_AHBLPENR_FSMCLPEN
 ((
uöt32_t
)0x40000000Ë

	)

3707 
	#RCC_APB2LPENR_SYSCFGLPEN
 ((
uöt32_t
)0x00000001Ë

	)

3708 
	#RCC_APB2LPENR_TIM9LPEN
 ((
uöt32_t
)0x00000004Ë

	)

3709 
	#RCC_APB2LPENR_TIM10LPEN
 ((
uöt32_t
)0x00000008Ë

	)

3710 
	#RCC_APB2LPENR_TIM11LPEN
 ((
uöt32_t
)0x00000010Ë

	)

3711 
	#RCC_APB2LPENR_ADC1LPEN
 ((
uöt32_t
)0x00000200Ë

	)

3712 
	#RCC_APB2LPENR_SDIOLPEN
 ((
uöt32_t
)0x00000800Ë

	)

3713 
	#RCC_APB2LPENR_SPI1LPEN
 ((
uöt32_t
)0x00001000Ë

	)

3714 
	#RCC_APB2LPENR_USART1LPEN
 ((
uöt32_t
)0x00004000Ë

	)

3717 
	#RCC_APB1LPENR_TIM2LPEN
 ((
uöt32_t
)0x00000001Ë

	)

3718 
	#RCC_APB1LPENR_TIM3LPEN
 ((
uöt32_t
)0x00000002Ë

	)

3719 
	#RCC_APB1LPENR_TIM4LPEN
 ((
uöt32_t
)0x00000004Ë

	)

3720 
	#RCC_APB1LPENR_TIM5LPEN
 ((
uöt32_t
)0x00000008Ë

	)

3721 
	#RCC_APB1LPENR_TIM6LPEN
 ((
uöt32_t
)0x00000010Ë

	)

3722 
	#RCC_APB1LPENR_TIM7LPEN
 ((
uöt32_t
)0x00000020Ë

	)

3723 
	#RCC_APB1LPENR_LCDLPEN
 ((
uöt32_t
)0x00000200Ë

	)

3724 
	#RCC_APB1LPENR_WWDGLPEN
 ((
uöt32_t
)0x00000800Ë

	)

3725 
	#RCC_APB1LPENR_SPI2LPEN
 ((
uöt32_t
)0x00004000Ë

	)

3726 
	#RCC_APB1LPENR_SPI3LPEN
 ((
uöt32_t
)0x00008000Ë

	)

3727 
	#RCC_APB1LPENR_USART2LPEN
 ((
uöt32_t
)0x00020000Ë

	)

3728 
	#RCC_APB1LPENR_USART3LPEN
 ((
uöt32_t
)0x00040000Ë

	)

3729 
	#RCC_APB1LPENR_UART4LPEN
 ((
uöt32_t
)0x00080000Ë

	)

3730 
	#RCC_APB1LPENR_UART5LPEN
 ((
uöt32_t
)0x00100000Ë

	)

3731 
	#RCC_APB1LPENR_I2C1LPEN
 ((
uöt32_t
)0x00200000Ë

	)

3732 
	#RCC_APB1LPENR_I2C2LPEN
 ((
uöt32_t
)0x00400000Ë

	)

3733 
	#RCC_APB1LPENR_USBLPEN
 ((
uöt32_t
)0x00800000Ë

	)

3734 
	#RCC_APB1LPENR_PWRLPEN
 ((
uöt32_t
)0x10000000Ë

	)

3735 
	#RCC_APB1LPENR_DACLPEN
 ((
uöt32_t
)0x20000000Ë

	)

3736 
	#RCC_APB1LPENR_COMPLPEN
 ((
uöt32_t
)0x80000000Ë

	)

3739 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

3740 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

3742 
	#RCC_CSR_LSEON
 ((
uöt32_t
)0x00000100Ë

	)

3743 
	#RCC_CSR_LSERDY
 ((
uöt32_t
)0x00000200Ë

	)

3744 
	#RCC_CSR_LSEBYP
 ((
uöt32_t
)0x00000400Ë

	)

3745 
	#RCC_CSR_LSECSSON
 ((
uöt32_t
)0x00000800Ë

	)

3746 
	#RCC_CSR_LSECSSD
 ((
uöt32_t
)0x00001000Ë

	)

3748 
	#RCC_CSR_RTCSEL
 ((
uöt32_t
)0x00030000Ë

	)

3749 
	#RCC_CSR_RTCSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

3750 
	#RCC_CSR_RTCSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

3753 
	#RCC_CSR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

3754 
	#RCC_CSR_RTCSEL_LSE
 ((
uöt32_t
)0x00010000Ë

	)

3755 
	#RCC_CSR_RTCSEL_LSI
 ((
uöt32_t
)0x00020000Ë

	)

3756 
	#RCC_CSR_RTCSEL_HSE
 ((
uöt32_t
)0x00030000Ë

	)

3758 
	#RCC_CSR_RTCEN
 ((
uöt32_t
)0x00400000Ë

	)

3759 
	#RCC_CSR_RTCRST
 ((
uöt32_t
)0x00800000Ë

	)

3761 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

3762 
	#RCC_CSR_OBLRSTF
 ((
uöt32_t
)0x02000000Ë

	)

3763 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

3764 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

3765 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

3766 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

3767 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

3768 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

3777 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

3778 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

3779 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

3780 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

3781 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

3782 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

3783 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

3784 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

3785 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

3786 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

3787 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

3788 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

3789 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

3790 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

3791 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

3792 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

3793 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

3794 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

3795 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

3796 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

3797 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

3798 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

3799 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

3800 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

3801 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

3802 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

3803 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

3806 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

3807 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

3808 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

3809 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

3810 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

3811 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

3812 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

3813 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

3814 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

3815 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

3816 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

3817 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

3818 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

3819 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

3820 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

3821 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

3822 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

3823 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

3824 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

3825 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

3826 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

3827 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

3828 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

3829 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

3830 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

3831 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

3832 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

3833 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

3836 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

3837 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

3838 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

3839 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

3840 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

3841 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

3842 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

3843 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

3844 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

3845 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

3846 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

3847 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

3848 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

3849 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

3850 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

3851 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

3852 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

3853 
	#RTC_CR_DCE
 ((
uöt32_t
)0x00000080)

	)

3854 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

3855 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

3856 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

3857 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

3858 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

3859 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

3860 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

3861 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

3864 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

3865 
	#RTC_ISR_TAMP3F
 ((
uöt32_t
)0x00008000)

	)

3866 
	#RTC_ISR_TAMP2F
 ((
uöt32_t
)0x00004000)

	)

3867 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

3868 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

3869 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

3870 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

3871 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

3872 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

3873 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

3874 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

3875 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

3876 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

3877 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

3878 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

3879 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

3880 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

3883 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

3884 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00007FFF)

	)

3887 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

3890 
	#RTC_CALIBR_DCS
 ((
uöt32_t
)0x00000080)

	)

3891 
	#RTC_CALIBR_DC
 ((
uöt32_t
)0x0000001F)

	)

3894 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

3895 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

3896 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

3897 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

3898 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

3899 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

3900 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

3901 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

3902 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

3903 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

3904 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

3905 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

3906 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

3907 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

3908 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

3909 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

3910 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

3911 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

3912 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

3913 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

3914 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

3915 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

3916 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

3917 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

3918 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

3919 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

3920 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

3921 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

3922 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

3923 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

3924 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

3925 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

3926 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

3927 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

3928 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

3929 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

3930 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

3931 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

3932 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

3933 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

3936 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

3937 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

3938 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

3939 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

3940 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

3941 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

3942 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

3943 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

3944 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

3945 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

3946 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

3947 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

3948 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

3949 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

3950 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

3951 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

3952 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

3953 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

3954 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

3955 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

3956 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

3957 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

3958 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

3959 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

3960 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

3961 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

3962 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

3963 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

3964 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

3965 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

3966 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

3967 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

3968 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

3969 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

3970 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

3971 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

3972 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

3973 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

3974 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

3975 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

3978 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

3981 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

3984 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

3985 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

3988 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

3989 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

3990 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

3991 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

3992 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

3993 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

3994 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

3995 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

3996 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

3997 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

3998 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

3999 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

4000 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

4001 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

4002 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

4003 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

4004 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

4005 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

4006 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

4007 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

4008 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

4009 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

4010 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

4011 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

4012 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

4013 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

4014 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

4017 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

4018 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

4019 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

4020 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

4021 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

4022 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

4023 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

4024 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

4025 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

4026 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

4027 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

4028 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

4029 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

4030 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

4031 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

4032 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

4033 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

4034 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

4037 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

4040 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

4041 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

4042 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

4043 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

4044 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

4045 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

4046 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

4047 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

4048 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

4049 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

4050 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

4051 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

4052 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

4055 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

4056 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

4057 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

4058 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

4059 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

4060 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

4061 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

4062 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

4063 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

4064 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

4065 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

4066 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

4067 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

4068 
	#RTC_TAFCR_TAMP3TRG
 ((
uöt32_t
)0x00000040)

	)

4069 
	#RTC_TAFCR_TAMP3E
 ((
uöt32_t
)0x00000020)

	)

4070 
	#RTC_TAFCR_TAMP2TRG
 ((
uöt32_t
)0x00000010)

	)

4071 
	#RTC_TAFCR_TAMP2E
 ((
uöt32_t
)0x00000008)

	)

4072 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

4073 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

4074 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

4077 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

4078 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

4079 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

4080 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

4081 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

4082 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

4085 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

4086 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

4087 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

4088 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

4089 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

4090 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

4093 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4096 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4099 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4102 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4105 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4108 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4111 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4114 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4117 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4120 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4123 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4126 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4129 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4132 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4135 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4138 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4141 
	#RTC_BKP16R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4144 
	#RTC_BKP17R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4147 
	#RTC_BKP18R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4150 
	#RTC_BKP19R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4153 
	#RTC_BKP20R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4156 
	#RTC_BKP21R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4159 
	#RTC_BKP22R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4162 
	#RTC_BKP23R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4165 
	#RTC_BKP24R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4168 
	#RTC_BKP25R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4171 
	#RTC_BKP26R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4174 
	#RTC_BKP27R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4177 
	#RTC_BKP28R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4180 
	#RTC_BKP29R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4183 
	#RTC_BKP30R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4186 
	#RTC_BKP31R
 ((
uöt32_t
)0xFFFFFFFF)

	)

4195 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

4196 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

4197 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

4200 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

4201 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

4202 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

4203 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

4205 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

4206 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

4207 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

4209 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

4210 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

4213 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

4216 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

4218 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

4219 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

4220 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

4222 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

4223 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

4224 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

4225 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

4226 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

4227 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

4228 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

4231 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

4234 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

4237 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

4240 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4243 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4246 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

4249 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

4252 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

4255 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

4256 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

4257 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

4258 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

4260 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

4261 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

4262 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

4263 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

4264 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

4266 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

4267 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

4268 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

4269 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

4272 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

4275 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

4276 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

4277 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

4278 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

4279 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

4280 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

4281 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

4282 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

4283 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

4284 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

4285 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

4286 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

4287 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

4288 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

4289 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

4290 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

4291 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

4292 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

4293 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

4294 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

4295 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

4296 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

4297 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

4298 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

4301 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

4302 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

4303 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

4304 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

4305 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

4306 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

4307 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

4308 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

4309 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

4310 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

4311 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

4312 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

4313 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

4316 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

4317 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

4318 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

4319 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

4320 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

4321 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

4322 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

4323 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

4324 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

4325 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

4326 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

4327 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

4328 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

4329 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

4330 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

4331 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

4332 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

4333 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

4334 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

4335 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

4336 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

4337 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

4338 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

4339 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

4342 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

4345 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4354 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

4355 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

4356 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

4358 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

4359 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

4360 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

4361 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

4363 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

4364 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

4365 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

4366 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

4367 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

4368 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

4369 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

4370 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

4371 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

4372 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

4375 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

4376 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

4377 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

4378 
	#SPI_CR2_FRF
 ((
uöt8_t
)0x08Ë

	)

4379 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

4380 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

4381 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

4384 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

4385 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

4386 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

4387 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

4388 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

4389 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

4390 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

4391 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

4394 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

4397 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

4400 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

4403 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

4406 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

4408 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

4409 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

4410 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

4412 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

4414 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

4415 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

4416 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

4418 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

4420 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

4421 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

4422 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

4424 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

4425 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

4428 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

4429 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

4430 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

4438 
	#SYSCFG_MEMRMP_MEM_MODE
 ((
uöt32_t
)0x00000003Ë

	)

4439 
	#SYSCFG_MEMRMP_MEM_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

4440 
	#SYSCFG_MEMRMP_MEM_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

4441 
	#SYSCFG_MEMRMP_BOOT_MODE
 ((
uöt32_t
)0x00000300Ë

	)

4442 
	#SYSCFG_MEMRMP_BOOT_MODE_0
 ((
uöt32_t
)0x00000100Ë

	)

4443 
	#SYSCFG_MEMRMP_BOOT_MODE_1
 ((
uöt32_t
)0x00000200Ë

	)

4446 
	#SYSCFG_PMC_USB_PU
 ((
uöt32_t
)0x00000001Ë

	)

4449 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

4450 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

4451 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

4452 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

4457 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

4458 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

4459 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

4460 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

4461 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

4462 
	#SYSCFG_EXTICR1_EXTI0_PH
 ((
uöt16_t
)0x0005Ë

	)

4463 
	#SYSCFG_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0006Ë

	)

4464 
	#SYSCFG_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0007Ë

	)

4469 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

4470 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

4471 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

4472 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

4473 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

4474 
	#SYSCFG_EXTICR1_EXTI1_PH
 ((
uöt16_t
)0x0050Ë

	)

4475 
	#SYSCFG_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0060Ë

	)

4476 
	#SYSCFG_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0070Ë

	)

4481 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

4482 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

4483 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

4484 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

4485 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

4486 
	#SYSCFG_EXTICR1_EXTI2_PH
 ((
uöt16_t
)0x0500Ë

	)

4487 
	#SYSCFG_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0600Ë

	)

4488 
	#SYSCFG_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0700Ë

	)

4493 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

4494 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

4495 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

4496 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

4497 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

4498 
	#SYSCFG_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x3000Ë

	)

4499 
	#SYSCFG_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x4000Ë

	)

4502 
	#SYSCFG_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

4503 
	#SYSCFG_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

4504 
	#SYSCFG_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

4505 
	#SYSCFG_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

4510 
	#SYSCFG_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

4511 
	#SYSCFG_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

4512 
	#SYSCFG_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

4513 
	#SYSCFG_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

4514 
	#SYSCFG_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

4515 
	#SYSCFG_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0006Ë

	)

4516 
	#SYSCFG_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0007Ë

	)

4521 
	#SYSCFG_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

4522 
	#SYSCFG_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

4523 
	#SYSCFG_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

4524 
	#SYSCFG_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

4525 
	#SYSCFG_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

4526 
	#SYSCFG_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0060Ë

	)

4527 
	#SYSCFG_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0070Ë

	)

4532 
	#SYSCFG_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

4533 
	#SYSCFG_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

4534 
	#SYSCFG_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

4535 
	#SYSCFG_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

4536 
	#SYSCFG_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

4537 
	#SYSCFG_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0600Ë

	)

4538 
	#SYSCFG_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0700Ë

	)

4543 
	#SYSCFG_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

4544 
	#SYSCFG_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

4545 
	#SYSCFG_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

4546 
	#SYSCFG_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

4547 
	#SYSCFG_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

4548 
	#SYSCFG_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x6000Ë

	)

4549 
	#SYSCFG_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x7000Ë

	)

4552 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

4553 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

4554 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

4555 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

4560 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

4561 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

4562 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

4563 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

4564 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

4565 
	#SYSCFG_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0006Ë

	)

4566 
	#SYSCFG_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0007Ë

	)

4571 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

4572 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

4573 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

4574 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

4575 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

4576 
	#SYSCFG_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0060Ë

	)

4577 
	#SYSCFG_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0070Ë

	)

4582 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

4583 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

4584 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

4585 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

4586 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

4587 
	#SYSCFG_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0600Ë

	)

4588 
	#SYSCFG_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0700Ë

	)

4593 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

4594 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

4595 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

4596 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

4597 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

4598 
	#SYSCFG_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x6000Ë

	)

4599 
	#SYSCFG_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x7000Ë

	)

4602 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

4603 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

4604 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

4605 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

4610 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

4611 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

4612 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

4613 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

4614 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

4615 
	#SYSCFG_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0006Ë

	)

4616 
	#SYSCFG_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0007Ë

	)

4621 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

4622 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

4623 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

4624 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

4625 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

4626 
	#SYSCFG_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0060Ë

	)

4627 
	#SYSCFG_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0070Ë

	)

4632 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

4633 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

4634 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

4635 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

4636 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

4637 
	#SYSCFG_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0600Ë

	)

4638 
	#SYSCFG_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0700Ë

	)

4643 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

4644 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

4645 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

4646 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

4647 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

4648 
	#SYSCFG_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x6000Ë

	)

4649 
	#SYSCFG_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x7000Ë

	)

4658 
	#RI_ICR_IC1Z
 ((
uöt32_t
)0x0000000FË

	)

4659 
	#RI_ICR_IC1Z_0
 ((
uöt32_t
)0x00000001Ë

	)

4660 
	#RI_ICR_IC1Z_1
 ((
uöt32_t
)0x00000002Ë

	)

4661 
	#RI_ICR_IC1Z_2
 ((
uöt32_t
)0x00000004Ë

	)

4662 
	#RI_ICR_IC1Z_3
 ((
uöt32_t
)0x00000008Ë

	)

4664 
	#RI_ICR_IC2Z
 ((
uöt32_t
)0x000000F0Ë

	)

4665 
	#RI_ICR_IC2Z_0
 ((
uöt32_t
)0x00000010Ë

	)

4666 
	#RI_ICR_IC2Z_1
 ((
uöt32_t
)0x00000020Ë

	)

4667 
	#RI_ICR_IC2Z_2
 ((
uöt32_t
)0x00000040Ë

	)

4668 
	#RI_ICR_IC2Z_3
 ((
uöt32_t
)0x00000080Ë

	)

4670 
	#RI_ICR_IC3Z
 ((
uöt32_t
)0x00000F00Ë

	)

4671 
	#RI_ICR_IC3Z_0
 ((
uöt32_t
)0x00000100Ë

	)

4672 
	#RI_ICR_IC3Z_1
 ((
uöt32_t
)0x00000200Ë

	)

4673 
	#RI_ICR_IC3Z_2
 ((
uöt32_t
)0x00000400Ë

	)

4674 
	#RI_ICR_IC3Z_3
 ((
uöt32_t
)0x00000800Ë

	)

4676 
	#RI_ICR_IC4Z
 ((
uöt32_t
)0x0000F000Ë

	)

4677 
	#RI_ICR_IC4Z_0
 ((
uöt32_t
)0x00001000Ë

	)

4678 
	#RI_ICR_IC4Z_1
 ((
uöt32_t
)0x00002000Ë

	)

4679 
	#RI_ICR_IC4Z_2
 ((
uöt32_t
)0x00004000Ë

	)

4680 
	#RI_ICR_IC4Z_3
 ((
uöt32_t
)0x00008000Ë

	)

4682 
	#RI_ICR_TIM
 ((
uöt32_t
)0x00030000Ë

	)

4683 
	#RI_ICR_TIM_0
 ((
uöt32_t
)0x00010000Ë

	)

4684 
	#RI_ICR_TIM_1
 ((
uöt32_t
)0x00020000Ë

	)

4686 
	#RI_ICR_IC1
 ((
uöt32_t
)0x00040000Ë

	)

4687 
	#RI_ICR_IC2
 ((
uöt32_t
)0x00080000Ë

	)

4688 
	#RI_ICR_IC3
 ((
uöt32_t
)0x00100000Ë

	)

4689 
	#RI_ICR_IC4
 ((
uöt32_t
)0x00200000Ë

	)

4692 
	#RI_ASCR1_CH
 ((
uöt32_t
)0x03FCFFFFË

	)

4693 
	#RI_ASCR1_CH_0
 ((
uöt32_t
)0x00000001Ë

	)

4694 
	#RI_ASCR1_CH_1
 ((
uöt32_t
)0x00000002Ë

	)

4695 
	#RI_ASCR1_CH_2
 ((
uöt32_t
)0x00000004Ë

	)

4696 
	#RI_ASCR1_CH_3
 ((
uöt32_t
)0x00000008Ë

	)

4697 
	#RI_ASCR1_CH_4
 ((
uöt32_t
)0x00000010Ë

	)

4698 
	#RI_ASCR1_CH_5
 ((
uöt32_t
)0x00000020Ë

	)

4699 
	#RI_ASCR1_CH_6
 ((
uöt32_t
)0x00000040Ë

	)

4700 
	#RI_ASCR1_CH_7
 ((
uöt32_t
)0x00000080Ë

	)

4701 
	#RI_ASCR1_CH_8
 ((
uöt32_t
)0x00000100Ë

	)

4702 
	#RI_ASCR1_CH_9
 ((
uöt32_t
)0x00000200Ë

	)

4703 
	#RI_ASCR1_CH_10
 ((
uöt32_t
)0x00000400Ë

	)

4704 
	#RI_ASCR1_CH_11
 ((
uöt32_t
)0x00000800Ë

	)

4705 
	#RI_ASCR1_CH_12
 ((
uöt32_t
)0x00001000Ë

	)

4706 
	#RI_ASCR1_CH_13
 ((
uöt32_t
)0x00002000Ë

	)

4707 
	#RI_ASCR1_CH_14
 ((
uöt32_t
)0x00004000Ë

	)

4708 
	#RI_ASCR1_CH_15
 ((
uöt32_t
)0x00008000Ë

	)

4709 
	#RI_ASCR1_CH_31
 ((
uöt32_t
)0x00010000Ë

	)

4710 
	#RI_ASCR1_CH_18
 ((
uöt32_t
)0x00040000Ë

	)

4711 
	#RI_ASCR1_CH_19
 ((
uöt32_t
)0x00080000Ë

	)

4712 
	#RI_ASCR1_CH_20
 ((
uöt32_t
)0x00100000Ë

	)

4713 
	#RI_ASCR1_CH_21
 ((
uöt32_t
)0x00200000Ë

	)

4714 
	#RI_ASCR1_CH_22
 ((
uöt32_t
)0x00400000Ë

	)

4715 
	#RI_ASCR1_CH_23
 ((
uöt32_t
)0x00800000Ë

	)

4716 
	#RI_ASCR1_CH_24
 ((
uöt32_t
)0x01000000Ë

	)

4717 
	#RI_ASCR1_CH_25
 ((
uöt32_t
)0x02000000Ë

	)

4718 
	#RI_ASCR1_VCOMP
 ((
uöt32_t
)0x04000000Ë

	)

4719 
	#RI_ASCR1_CH_27
 ((
uöt32_t
)0x00400000Ë

	)

4720 
	#RI_ASCR1_CH_28
 ((
uöt32_t
)0x00800000Ë

	)

4721 
	#RI_ASCR1_CH_29
 ((
uöt32_t
)0x01000000Ë

	)

4722 
	#RI_ASCR1_CH_30
 ((
uöt32_t
)0x02000000Ë

	)

4723 
	#RI_ASCR1_SCM
 ((
uöt32_t
)0x80000000Ë

	)

4726 
	#RI_ASCR2_GR10_1
 ((
uöt32_t
)0x00000001Ë

	)

4727 
	#RI_ASCR2_GR10_2
 ((
uöt32_t
)0x00000002Ë

	)

4728 
	#RI_ASCR2_GR10_3
 ((
uöt32_t
)0x00000004Ë

	)

4729 
	#RI_ASCR2_GR10_4
 ((
uöt32_t
)0x00000008Ë

	)

4730 
	#RI_ASCR2_GR6_1
 ((
uöt32_t
)0x00000010Ë

	)

4731 
	#RI_ASCR2_GR6_2
 ((
uöt32_t
)0x00000020Ë

	)

4732 
	#RI_ASCR2_GR5_1
 ((
uöt32_t
)0x00000040Ë

	)

4733 
	#RI_ASCR2_GR5_2
 ((
uöt32_t
)0x00000080Ë

	)

4734 
	#RI_ASCR2_GR5_3
 ((
uöt32_t
)0x00000100Ë

	)

4735 
	#RI_ASCR2_GR4_1
 ((
uöt32_t
)0x00000200Ë

	)

4736 
	#RI_ASCR2_GR4_2
 ((
uöt32_t
)0x00000400Ë

	)

4737 
	#RI_ASCR2_GR4_3
 ((
uöt32_t
)0x00000800Ë

	)

4738 
	#RI_ASCR2_GR4_4
 ((
uöt32_t
)0x00008000Ë

	)

4739 
	#RI_ASCR2_CH0b
 ((
uöt32_t
)0x00010000Ë

	)

4740 
	#RI_ASCR2_CH1b
 ((
uöt32_t
)0x00020000Ë

	)

4741 
	#RI_ASCR2_CH2b
 ((
uöt32_t
)0x00040000Ë

	)

4742 
	#RI_ASCR2_CH3b
 ((
uöt32_t
)0x00080000Ë

	)

4743 
	#RI_ASCR2_CH6b
 ((
uöt32_t
)0x00100000Ë

	)

4744 
	#RI_ASCR2_CH7b
 ((
uöt32_t
)0x00200000Ë

	)

4745 
	#RI_ASCR2_CH8b
 ((
uöt32_t
)0x00400000Ë

	)

4746 
	#RI_ASCR2_CH9b
 ((
uöt32_t
)0x00800000Ë

	)

4747 
	#RI_ASCR2_CH10b
 ((
uöt32_t
)0x01000000Ë

	)

4748 
	#RI_ASCR2_CH11b
 ((
uöt32_t
)0x02000000Ë

	)

4749 
	#RI_ASCR2_CH12b
 ((
uöt32_t
)0x04000000Ë

	)

4750 
	#RI_ASCR2_GR6_3
 ((
uöt32_t
)0x08000000Ë

	)

4751 
	#RI_ASCR2_GR6_4
 ((
uöt32_t
)0x10000000Ë

	)

4752 
	#RI_ASCR2_GR5_4
 ((
uöt32_t
)0x20000000Ë

	)

4755 
	#RI_HYSCR1_PA
 ((
uöt32_t
)0x0000FFFFË

	)

4756 
	#RI_HYSCR1_PA_0
 ((
uöt32_t
)0x00000001Ë

	)

4757 
	#RI_HYSCR1_PA_1
 ((
uöt32_t
)0x00000002Ë

	)

4758 
	#RI_HYSCR1_PA_2
 ((
uöt32_t
)0x00000004Ë

	)

4759 
	#RI_HYSCR1_PA_3
 ((
uöt32_t
)0x00000008Ë

	)

4760 
	#RI_HYSCR1_PA_4
 ((
uöt32_t
)0x00000010Ë

	)

4761 
	#RI_HYSCR1_PA_5
 ((
uöt32_t
)0x00000020Ë

	)

4762 
	#RI_HYSCR1_PA_6
 ((
uöt32_t
)0x00000040Ë

	)

4763 
	#RI_HYSCR1_PA_7
 ((
uöt32_t
)0x00000080Ë

	)

4764 
	#RI_HYSCR1_PA_8
 ((
uöt32_t
)0x00000100Ë

	)

4765 
	#RI_HYSCR1_PA_9
 ((
uöt32_t
)0x00000200Ë

	)

4766 
	#RI_HYSCR1_PA_10
 ((
uöt32_t
)0x00000400Ë

	)

4767 
	#RI_HYSCR1_PA_11
 ((
uöt32_t
)0x00000800Ë

	)

4768 
	#RI_HYSCR1_PA_12
 ((
uöt32_t
)0x00001000Ë

	)

4769 
	#RI_HYSCR1_PA_13
 ((
uöt32_t
)0x00002000Ë

	)

4770 
	#RI_HYSCR1_PA_14
 ((
uöt32_t
)0x00004000Ë

	)

4771 
	#RI_HYSCR1_PA_15
 ((
uöt32_t
)0x00008000Ë

	)

4773 
	#RI_HYSCR1_PB
 ((
uöt32_t
)0xFFFF0000Ë

	)

4774 
	#RI_HYSCR1_PB_0
 ((
uöt32_t
)0x00010000Ë

	)

4775 
	#RI_HYSCR1_PB_1
 ((
uöt32_t
)0x00020000Ë

	)

4776 
	#RI_HYSCR1_PB_2
 ((
uöt32_t
)0x00040000Ë

	)

4777 
	#RI_HYSCR1_PB_3
 ((
uöt32_t
)0x00080000Ë

	)

4778 
	#RI_HYSCR1_PB_4
 ((
uöt32_t
)0x00100000Ë

	)

4779 
	#RI_HYSCR1_PB_5
 ((
uöt32_t
)0x00200000Ë

	)

4780 
	#RI_HYSCR1_PB_6
 ((
uöt32_t
)0x00400000Ë

	)

4781 
	#RI_HYSCR1_PB_7
 ((
uöt32_t
)0x00800000Ë

	)

4782 
	#RI_HYSCR1_PB_8
 ((
uöt32_t
)0x01000000Ë

	)

4783 
	#RI_HYSCR1_PB_9
 ((
uöt32_t
)0x02000000Ë

	)

4784 
	#RI_HYSCR1_PB_10
 ((
uöt32_t
)0x04000000Ë

	)

4785 
	#RI_HYSCR1_PB_11
 ((
uöt32_t
)0x08000000Ë

	)

4786 
	#RI_HYSCR1_PB_12
 ((
uöt32_t
)0x10000000Ë

	)

4787 
	#RI_HYSCR1_PB_13
 ((
uöt32_t
)0x20000000Ë

	)

4788 
	#RI_HYSCR1_PB_14
 ((
uöt32_t
)0x40000000Ë

	)

4789 
	#RI_HYSCR1_PB_15
 ((
uöt32_t
)0x80000000Ë

	)

4792 
	#RI_HYSCR2_PC
 ((
uöt32_t
)0x0000FFFFË

	)

4793 
	#RI_HYSCR2_PC_0
 ((
uöt32_t
)0x00000001Ë

	)

4794 
	#RI_HYSCR2_PC_1
 ((
uöt32_t
)0x00000002Ë

	)

4795 
	#RI_HYSCR2_PC_2
 ((
uöt32_t
)0x00000004Ë

	)

4796 
	#RI_HYSCR2_PC_3
 ((
uöt32_t
)0x00000008Ë

	)

4797 
	#RI_HYSCR2_PC_4
 ((
uöt32_t
)0x00000010Ë

	)

4798 
	#RI_HYSCR2_PC_5
 ((
uöt32_t
)0x00000020Ë

	)

4799 
	#RI_HYSCR2_PC_6
 ((
uöt32_t
)0x00000040Ë

	)

4800 
	#RI_HYSCR2_PC_7
 ((
uöt32_t
)0x00000080Ë

	)

4801 
	#RI_HYSCR2_PC_8
 ((
uöt32_t
)0x00000100Ë

	)

4802 
	#RI_HYSCR2_PC_9
 ((
uöt32_t
)0x00000200Ë

	)

4803 
	#RI_HYSCR2_PC_10
 ((
uöt32_t
)0x00000400Ë

	)

4804 
	#RI_HYSCR2_PC_11
 ((
uöt32_t
)0x00000800Ë

	)

4805 
	#RI_HYSCR2_PC_12
 ((
uöt32_t
)0x00001000Ë

	)

4806 
	#RI_HYSCR2_PC_13
 ((
uöt32_t
)0x00002000Ë

	)

4807 
	#RI_HYSCR2_PC_14
 ((
uöt32_t
)0x00004000Ë

	)

4808 
	#RI_HYSCR2_PC_15
 ((
uöt32_t
)0x00008000Ë

	)

4810 
	#RI_HYSCR2_PD
 ((
uöt32_t
)0xFFFF0000Ë

	)

4811 
	#RI_HYSCR2_PD_0
 ((
uöt32_t
)0x00010000Ë

	)

4812 
	#RI_HYSCR2_PD_1
 ((
uöt32_t
)0x00020000Ë

	)

4813 
	#RI_HYSCR2_PD_2
 ((
uöt32_t
)0x00040000Ë

	)

4814 
	#RI_HYSCR2_PD_3
 ((
uöt32_t
)0x00080000Ë

	)

4815 
	#RI_HYSCR2_PD_4
 ((
uöt32_t
)0x00100000Ë

	)

4816 
	#RI_HYSCR2_PD_5
 ((
uöt32_t
)0x00200000Ë

	)

4817 
	#RI_HYSCR2_PD_6
 ((
uöt32_t
)0x00400000Ë

	)

4818 
	#RI_HYSCR2_PD_7
 ((
uöt32_t
)0x00800000Ë

	)

4819 
	#RI_HYSCR2_PD_8
 ((
uöt32_t
)0x01000000Ë

	)

4820 
	#RI_HYSCR2_PD_9
 ((
uöt32_t
)0x02000000Ë

	)

4821 
	#RI_HYSCR2_PD_10
 ((
uöt32_t
)0x04000000Ë

	)

4822 
	#RI_HYSCR2_PD_11
 ((
uöt32_t
)0x08000000Ë

	)

4823 
	#RI_HYSCR2_PD_12
 ((
uöt32_t
)0x10000000Ë

	)

4824 
	#RI_HYSCR2_PD_13
 ((
uöt32_t
)0x20000000Ë

	)

4825 
	#RI_HYSCR2_PD_14
 ((
uöt32_t
)0x40000000Ë

	)

4826 
	#RI_HYSCR2_PD_15
 ((
uöt32_t
)0x80000000Ë

	)

4829 
	#RI_HYSCR2_PE
 ((
uöt32_t
)0x0000FFFFË

	)

4830 
	#RI_HYSCR2_PE_0
 ((
uöt32_t
)0x00000001Ë

	)

4831 
	#RI_HYSCR2_PE_1
 ((
uöt32_t
)0x00000002Ë

	)

4832 
	#RI_HYSCR2_PE_2
 ((
uöt32_t
)0x00000004Ë

	)

4833 
	#RI_HYSCR2_PE_3
 ((
uöt32_t
)0x00000008Ë

	)

4834 
	#RI_HYSCR2_PE_4
 ((
uöt32_t
)0x00000010Ë

	)

4835 
	#RI_HYSCR2_PE_5
 ((
uöt32_t
)0x00000020Ë

	)

4836 
	#RI_HYSCR2_PE_6
 ((
uöt32_t
)0x00000040Ë

	)

4837 
	#RI_HYSCR2_PE_7
 ((
uöt32_t
)0x00000080Ë

	)

4838 
	#RI_HYSCR2_PE_8
 ((
uöt32_t
)0x00000100Ë

	)

4839 
	#RI_HYSCR2_PE_9
 ((
uöt32_t
)0x00000200Ë

	)

4840 
	#RI_HYSCR2_PE_10
 ((
uöt32_t
)0x00000400Ë

	)

4841 
	#RI_HYSCR2_PE_11
 ((
uöt32_t
)0x00000800Ë

	)

4842 
	#RI_HYSCR2_PE_12
 ((
uöt32_t
)0x00001000Ë

	)

4843 
	#RI_HYSCR2_PE_13
 ((
uöt32_t
)0x00002000Ë

	)

4844 
	#RI_HYSCR2_PE_14
 ((
uöt32_t
)0x00004000Ë

	)

4845 
	#RI_HYSCR2_PE_15
 ((
uöt32_t
)0x00008000Ë

	)

4847 
	#RI_HYSCR3_PF
 ((
uöt32_t
)0xFFFF0000Ë

	)

4848 
	#RI_HYSCR3_PF_0
 ((
uöt32_t
)0x00010000Ë

	)

4849 
	#RI_HYSCR3_PF_1
 ((
uöt32_t
)0x00020000Ë

	)

4850 
	#RI_HYSCR3_PF_2
 ((
uöt32_t
)0x00040000Ë

	)

4851 
	#RI_HYSCR3_PF_3
 ((
uöt32_t
)0x00080000Ë

	)

4852 
	#RI_HYSCR3_PF_4
 ((
uöt32_t
)0x00100000Ë

	)

4853 
	#RI_HYSCR3_PF_5
 ((
uöt32_t
)0x00200000Ë

	)

4854 
	#RI_HYSCR3_PF_6
 ((
uöt32_t
)0x00400000Ë

	)

4855 
	#RI_HYSCR3_PF_7
 ((
uöt32_t
)0x00800000Ë

	)

4856 
	#RI_HYSCR3_PF_8
 ((
uöt32_t
)0x01000000Ë

	)

4857 
	#RI_HYSCR3_PF_9
 ((
uöt32_t
)0x02000000Ë

	)

4858 
	#RI_HYSCR3_PF_10
 ((
uöt32_t
)0x04000000Ë

	)

4859 
	#RI_HYSCR3_PF_11
 ((
uöt32_t
)0x08000000Ë

	)

4860 
	#RI_HYSCR3_PF_12
 ((
uöt32_t
)0x10000000Ë

	)

4861 
	#RI_HYSCR3_PF_13
 ((
uöt32_t
)0x20000000Ë

	)

4862 
	#RI_HYSCR3_PF_14
 ((
uöt32_t
)0x40000000Ë

	)

4863 
	#RI_HYSCR3_PF_15
 ((
uöt32_t
)0x80000000Ë

	)

4866 
	#RI_HYSCR4_PG
 ((
uöt32_t
)0x0000FFFFË

	)

4867 
	#RI_HYSCR4_PG_0
 ((
uöt32_t
)0x00000001Ë

	)

4868 
	#RI_HYSCR4_PG_1
 ((
uöt32_t
)0x00000002Ë

	)

4869 
	#RI_HYSCR4_PG_2
 ((
uöt32_t
)0x00000004Ë

	)

4870 
	#RI_HYSCR4_PG_3
 ((
uöt32_t
)0x00000008Ë

	)

4871 
	#RI_HYSCR4_PG_4
 ((
uöt32_t
)0x00000010Ë

	)

4872 
	#RI_HYSCR4_PG_5
 ((
uöt32_t
)0x00000020Ë

	)

4873 
	#RI_HYSCR4_PG_6
 ((
uöt32_t
)0x00000040Ë

	)

4874 
	#RI_HYSCR4_PG_7
 ((
uöt32_t
)0x00000080Ë

	)

4875 
	#RI_HYSCR4_PG_8
 ((
uöt32_t
)0x00000100Ë

	)

4876 
	#RI_HYSCR4_PG_9
 ((
uöt32_t
)0x00000200Ë

	)

4877 
	#RI_HYSCR4_PG_10
 ((
uöt32_t
)0x00000400Ë

	)

4878 
	#RI_HYSCR4_PG_11
 ((
uöt32_t
)0x00000800Ë

	)

4879 
	#RI_HYSCR4_PG_12
 ((
uöt32_t
)0x00001000Ë

	)

4880 
	#RI_HYSCR4_PG_13
 ((
uöt32_t
)0x00002000Ë

	)

4881 
	#RI_HYSCR4_PG_14
 ((
uöt32_t
)0x00004000Ë

	)

4882 
	#RI_HYSCR4_PG_15
 ((
uöt32_t
)0x00008000Ë

	)

4891 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

4892 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

4893 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

4894 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

4895 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

4897 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

4898 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

4899 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

4901 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

4903 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

4904 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

4905 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

4908 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

4910 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

4911 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

4912 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

4913 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

4915 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

4918 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

4919 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

4920 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

4921 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

4923 
	#TIM_SMCR_OCCS
 ((
uöt16_t
)0x0008Ë

	)

4925 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

4926 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

4927 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

4928 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

4930 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

4932 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

4933 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

4934 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

4935 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

4936 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

4938 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

4939 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

4940 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

4942 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

4943 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

4946 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

4947 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

4948 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

4949 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

4950 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

4951 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

4952 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

4953 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

4954 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

4955 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

4956 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

4957 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

4960 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

4961 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

4962 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

4963 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

4964 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

4965 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

4966 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

4967 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

4968 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

4969 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

4972 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

4973 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

4974 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

4975 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

4976 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

4977 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

4980 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

4981 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

4982 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

4984 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

4985 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

4987 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

4988 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

4989 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

4990 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

4992 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

4994 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

4995 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

4996 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

4998 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

4999 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

5001 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

5002 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

5003 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

5004 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

5006 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

5010 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

5011 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

5012 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

5014 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

5015 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

5016 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

5017 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

5018 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

5020 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

5021 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

5022 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

5024 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

5025 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

5026 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

5027 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

5028 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

5031 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

5032 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

5033 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

5035 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

5036 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

5038 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

5039 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

5040 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

5041 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

5043 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

5045 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

5046 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

5047 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

5049 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

5050 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

5052 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

5053 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

5054 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

5055 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

5057 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

5061 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

5062 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

5063 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

5065 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

5066 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

5067 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

5068 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

5069 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

5071 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

5072 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

5073 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

5075 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

5076 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

5077 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

5078 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

5079 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

5082 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

5083 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

5084 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

5085 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

5086 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

5087 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

5088 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

5089 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

5090 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

5091 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

5092 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

5093 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

5096 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

5099 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

5102 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

5105 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

5108 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

5111 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

5114 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

5117 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

5118 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

5119 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

5120 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

5121 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

5122 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

5124 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

5125 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

5126 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

5127 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

5128 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

5129 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

5132 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

5135 
	#TIM_OR_TI1RMP
 ((
uöt16_t
)0x0003Ë

	)

5136 
	#TIM_OR_TI1RMP_0
 ((
uöt16_t
)0x0001Ë

	)

5137 
	#TIM_OR_TI1RMP_1
 ((
uöt16_t
)0x0002Ë

	)

5146 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

5147 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

5148 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

5149 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

5150 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

5151 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

5152 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

5153 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

5154 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

5155 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

5158 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

5161 
	#USART_BRR_DIV_FRACTION
 ((
uöt16_t
)0x000FË

	)

5162 
	#USART_BRR_DIV_MANTISSA
 ((
uöt16_t
)0xFFF0Ë

	)

5165 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

5166 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

5167 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

5168 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

5169 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

5170 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

5171 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

5172 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

5173 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

5174 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

5175 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

5176 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

5177 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

5178 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

5179 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

5182 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

5183 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

5184 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

5185 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

5186 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

5187 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

5188 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

5190 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

5191 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

5192 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

5194 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

5197 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

5198 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

5199 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

5200 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

5201 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

5202 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

5203 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

5204 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

5205 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

5206 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

5207 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

5208 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

5211 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

5212 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

5213 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

5214 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

5215 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

5216 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

5217 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

5218 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

5219 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

5221 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

5231 
	#USB_EP0R_EA
 ((
uöt16_t
)0x000FË

	)

5233 
	#USB_EP0R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5234 
	#USB_EP0R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5235 
	#USB_EP0R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5237 
	#USB_EP0R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5238 
	#USB_EP0R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5239 
	#USB_EP0R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5241 
	#USB_EP0R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5242 
	#USB_EP0R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5243 
	#USB_EP0R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5245 
	#USB_EP0R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5247 
	#USB_EP0R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5248 
	#USB_EP0R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5249 
	#USB_EP0R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5251 
	#USB_EP0R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5252 
	#USB_EP0R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5255 
	#USB_EP1R_EA
 ((
uöt16_t
)0x000FË

	)

5257 
	#USB_EP1R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5258 
	#USB_EP1R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5259 
	#USB_EP1R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5261 
	#USB_EP1R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5262 
	#USB_EP1R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5263 
	#USB_EP1R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5265 
	#USB_EP1R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5266 
	#USB_EP1R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5267 
	#USB_EP1R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5269 
	#USB_EP1R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5271 
	#USB_EP1R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5272 
	#USB_EP1R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5273 
	#USB_EP1R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5275 
	#USB_EP1R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5276 
	#USB_EP1R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5279 
	#USB_EP2R_EA
 ((
uöt16_t
)0x000FË

	)

5281 
	#USB_EP2R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5282 
	#USB_EP2R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5283 
	#USB_EP2R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5285 
	#USB_EP2R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5286 
	#USB_EP2R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5287 
	#USB_EP2R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5289 
	#USB_EP2R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5290 
	#USB_EP2R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5291 
	#USB_EP2R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5293 
	#USB_EP2R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5295 
	#USB_EP2R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5296 
	#USB_EP2R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5297 
	#USB_EP2R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5299 
	#USB_EP2R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5300 
	#USB_EP2R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5303 
	#USB_EP3R_EA
 ((
uöt16_t
)0x000FË

	)

5305 
	#USB_EP3R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5306 
	#USB_EP3R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5307 
	#USB_EP3R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5309 
	#USB_EP3R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5310 
	#USB_EP3R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5311 
	#USB_EP3R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5313 
	#USB_EP3R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5314 
	#USB_EP3R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5315 
	#USB_EP3R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5317 
	#USB_EP3R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5319 
	#USB_EP3R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5320 
	#USB_EP3R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5321 
	#USB_EP3R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5323 
	#USB_EP3R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5324 
	#USB_EP3R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5327 
	#USB_EP4R_EA
 ((
uöt16_t
)0x000FË

	)

5329 
	#USB_EP4R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5330 
	#USB_EP4R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5331 
	#USB_EP4R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5333 
	#USB_EP4R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5334 
	#USB_EP4R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5335 
	#USB_EP4R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5337 
	#USB_EP4R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5338 
	#USB_EP4R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5339 
	#USB_EP4R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5341 
	#USB_EP4R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5343 
	#USB_EP4R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5344 
	#USB_EP4R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5345 
	#USB_EP4R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5347 
	#USB_EP4R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5348 
	#USB_EP4R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5351 
	#USB_EP5R_EA
 ((
uöt16_t
)0x000FË

	)

5353 
	#USB_EP5R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5354 
	#USB_EP5R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5355 
	#USB_EP5R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5357 
	#USB_EP5R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5358 
	#USB_EP5R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5359 
	#USB_EP5R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5361 
	#USB_EP5R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5362 
	#USB_EP5R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5363 
	#USB_EP5R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5365 
	#USB_EP5R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5367 
	#USB_EP5R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5368 
	#USB_EP5R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5369 
	#USB_EP5R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5371 
	#USB_EP5R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5372 
	#USB_EP5R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5375 
	#USB_EP6R_EA
 ((
uöt16_t
)0x000FË

	)

5377 
	#USB_EP6R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5378 
	#USB_EP6R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5379 
	#USB_EP6R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5381 
	#USB_EP6R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5382 
	#USB_EP6R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5383 
	#USB_EP6R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5385 
	#USB_EP6R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5386 
	#USB_EP6R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5387 
	#USB_EP6R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5389 
	#USB_EP6R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5391 
	#USB_EP6R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5392 
	#USB_EP6R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5393 
	#USB_EP6R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5395 
	#USB_EP6R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5396 
	#USB_EP6R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5399 
	#USB_EP7R_EA
 ((
uöt16_t
)0x000FË

	)

5401 
	#USB_EP7R_STAT_TX
 ((
uöt16_t
)0x0030Ë

	)

5402 
	#USB_EP7R_STAT_TX_0
 ((
uöt16_t
)0x0010Ë

	)

5403 
	#USB_EP7R_STAT_TX_1
 ((
uöt16_t
)0x0020Ë

	)

5405 
	#USB_EP7R_DTOG_TX
 ((
uöt16_t
)0x0040Ë

	)

5406 
	#USB_EP7R_CTR_TX
 ((
uöt16_t
)0x0080Ë

	)

5407 
	#USB_EP7R_EP_KIND
 ((
uöt16_t
)0x0100Ë

	)

5409 
	#USB_EP7R_EP_TYPE
 ((
uöt16_t
)0x0600Ë

	)

5410 
	#USB_EP7R_EP_TYPE_0
 ((
uöt16_t
)0x0200Ë

	)

5411 
	#USB_EP7R_EP_TYPE_1
 ((
uöt16_t
)0x0400Ë

	)

5413 
	#USB_EP7R_SETUP
 ((
uöt16_t
)0x0800Ë

	)

5415 
	#USB_EP7R_STAT_RX
 ((
uöt16_t
)0x3000Ë

	)

5416 
	#USB_EP7R_STAT_RX_0
 ((
uöt16_t
)0x1000Ë

	)

5417 
	#USB_EP7R_STAT_RX_1
 ((
uöt16_t
)0x2000Ë

	)

5419 
	#USB_EP7R_DTOG_RX
 ((
uöt16_t
)0x4000Ë

	)

5420 
	#USB_EP7R_CTR_RX
 ((
uöt16_t
)0x8000Ë

	)

5424 
	#USB_CNTR_FRES
 ((
uöt16_t
)0x0001Ë

	)

5425 
	#USB_CNTR_PDWN
 ((
uöt16_t
)0x0002Ë

	)

5426 
	#USB_CNTR_LP_MODE
 ((
uöt16_t
)0x0004Ë

	)

5427 
	#USB_CNTR_FSUSP
 ((
uöt16_t
)0x0008Ë

	)

5428 
	#USB_CNTR_RESUME
 ((
uöt16_t
)0x0010Ë

	)

5429 
	#USB_CNTR_ESOFM
 ((
uöt16_t
)0x0100Ë

	)

5430 
	#USB_CNTR_SOFM
 ((
uöt16_t
)0x0200Ë

	)

5431 
	#USB_CNTR_RESETM
 ((
uöt16_t
)0x0400Ë

	)

5432 
	#USB_CNTR_SUSPM
 ((
uöt16_t
)0x0800Ë

	)

5433 
	#USB_CNTR_WKUPM
 ((
uöt16_t
)0x1000Ë

	)

5434 
	#USB_CNTR_ERRM
 ((
uöt16_t
)0x2000Ë

	)

5435 
	#USB_CNTR_PMAOVRM
 ((
uöt16_t
)0x4000Ë

	)

5436 
	#USB_CNTR_CTRM
 ((
uöt16_t
)0x8000Ë

	)

5439 
	#USB_ISTR_EP_ID
 ((
uöt16_t
)0x000FË

	)

5440 
	#USB_ISTR_DIR
 ((
uöt16_t
)0x0010Ë

	)

5441 
	#USB_ISTR_ESOF
 ((
uöt16_t
)0x0100Ë

	)

5442 
	#USB_ISTR_SOF
 ((
uöt16_t
)0x0200Ë

	)

5443 
	#USB_ISTR_RESET
 ((
uöt16_t
)0x0400Ë

	)

5444 
	#USB_ISTR_SUSP
 ((
uöt16_t
)0x0800Ë

	)

5445 
	#USB_ISTR_WKUP
 ((
uöt16_t
)0x1000Ë

	)

5446 
	#USB_ISTR_ERR
 ((
uöt16_t
)0x2000Ë

	)

5447 
	#USB_ISTR_PMAOVR
 ((
uöt16_t
)0x4000Ë

	)

5448 
	#USB_ISTR_CTR
 ((
uöt16_t
)0x8000Ë

	)

5451 
	#USB_FNR_FN
 ((
uöt16_t
)0x07FFË

	)

5452 
	#USB_FNR_LSOF
 ((
uöt16_t
)0x1800Ë

	)

5453 
	#USB_FNR_LCK
 ((
uöt16_t
)0x2000Ë

	)

5454 
	#USB_FNR_RXDM
 ((
uöt16_t
)0x4000Ë

	)

5455 
	#USB_FNR_RXDP
 ((
uöt16_t
)0x8000Ë

	)

5458 
	#USB_DADDR_ADD
 ((
uöt8_t
)0x7FË

	)

5459 
	#USB_DADDR_ADD0
 ((
uöt8_t
)0x01Ë

	)

5460 
	#USB_DADDR_ADD1
 ((
uöt8_t
)0x02Ë

	)

5461 
	#USB_DADDR_ADD2
 ((
uöt8_t
)0x04Ë

	)

5462 
	#USB_DADDR_ADD3
 ((
uöt8_t
)0x08Ë

	)

5463 
	#USB_DADDR_ADD4
 ((
uöt8_t
)0x10Ë

	)

5464 
	#USB_DADDR_ADD5
 ((
uöt8_t
)0x20Ë

	)

5465 
	#USB_DADDR_ADD6
 ((
uöt8_t
)0x40Ë

	)

5467 
	#USB_DADDR_EF
 ((
uöt8_t
)0x80Ë

	)

5470 
	#USB_BTABLE_BTABLE
 ((
uöt16_t
)0xFFF8Ë

	)

5474 
	#USB_ADDR0_TX_ADDR0_TX
 ((
uöt16_t
)0xFFFEË

	)

5477 
	#USB_ADDR1_TX_ADDR1_TX
 ((
uöt16_t
)0xFFFEË

	)

5480 
	#USB_ADDR2_TX_ADDR2_TX
 ((
uöt16_t
)0xFFFEË

	)

5483 
	#USB_ADDR3_TX_ADDR3_TX
 ((
uöt16_t
)0xFFFEË

	)

5486 
	#USB_ADDR4_TX_ADDR4_TX
 ((
uöt16_t
)0xFFFEË

	)

5489 
	#USB_ADDR5_TX_ADDR5_TX
 ((
uöt16_t
)0xFFFEË

	)

5492 
	#USB_ADDR6_TX_ADDR6_TX
 ((
uöt16_t
)0xFFFEË

	)

5495 
	#USB_ADDR7_TX_ADDR7_TX
 ((
uöt16_t
)0xFFFEË

	)

5500 
	#USB_COUNT0_TX_COUNT0_TX
 ((
uöt16_t
)0x03FFË

	)

5503 
	#USB_COUNT1_TX_COUNT1_TX
 ((
uöt16_t
)0x03FFË

	)

5506 
	#USB_COUNT2_TX_COUNT2_TX
 ((
uöt16_t
)0x03FFË

	)

5509 
	#USB_COUNT3_TX_COUNT3_TX
 ((
uöt16_t
)0x03FFË

	)

5512 
	#USB_COUNT4_TX_COUNT4_TX
 ((
uöt16_t
)0x03FFË

	)

5515 
	#USB_COUNT5_TX_COUNT5_TX
 ((
uöt16_t
)0x03FFË

	)

5518 
	#USB_COUNT6_TX_COUNT6_TX
 ((
uöt16_t
)0x03FFË

	)

5521 
	#USB_COUNT7_TX_COUNT7_TX
 ((
uöt16_t
)0x03FFË

	)

5526 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5529 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5532 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5535 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5538 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5541 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5544 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 ((
uöt16_t
)0x000003FFË

	)

5547 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 ((
uöt16_t
)0x03FF0000Ë

	)

5550 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5553 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5556 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5559 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5562 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5565 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5568 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 ((
uöt32_t
)0x000003FFË

	)

5571 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5576 
	#USB_ADDR0_RX_ADDR0_RX
 ((
uöt16_t
)0xFFFEË

	)

5579 
	#USB_ADDR1_RX_ADDR1_RX
 ((
uöt16_t
)0xFFFEË

	)

5582 
	#USB_ADDR2_RX_ADDR2_RX
 ((
uöt16_t
)0xFFFEË

	)

5585 
	#USB_ADDR3_RX_ADDR3_RX
 ((
uöt16_t
)0xFFFEË

	)

5588 
	#USB_ADDR4_RX_ADDR4_RX
 ((
uöt16_t
)0xFFFEË

	)

5591 
	#USB_ADDR5_RX_ADDR5_RX
 ((
uöt16_t
)0xFFFEË

	)

5594 
	#USB_ADDR6_RX_ADDR6_RX
 ((
uöt16_t
)0xFFFEË

	)

5597 
	#USB_ADDR7_RX_ADDR7_RX
 ((
uöt16_t
)0xFFFEË

	)

5602 
	#USB_COUNT0_RX_COUNT0_RX
 ((
uöt16_t
)0x03FFË

	)

5604 
	#USB_COUNT0_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5605 
	#USB_COUNT0_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5606 
	#USB_COUNT0_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5607 
	#USB_COUNT0_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5608 
	#USB_COUNT0_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5609 
	#USB_COUNT0_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5611 
	#USB_COUNT0_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5614 
	#USB_COUNT1_RX_COUNT1_RX
 ((
uöt16_t
)0x03FFË

	)

5616 
	#USB_COUNT1_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5617 
	#USB_COUNT1_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5618 
	#USB_COUNT1_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5619 
	#USB_COUNT1_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5620 
	#USB_COUNT1_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5621 
	#USB_COUNT1_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5623 
	#USB_COUNT1_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5626 
	#USB_COUNT2_RX_COUNT2_RX
 ((
uöt16_t
)0x03FFË

	)

5628 
	#USB_COUNT2_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5629 
	#USB_COUNT2_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5630 
	#USB_COUNT2_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5631 
	#USB_COUNT2_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5632 
	#USB_COUNT2_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5633 
	#USB_COUNT2_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5635 
	#USB_COUNT2_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5638 
	#USB_COUNT3_RX_COUNT3_RX
 ((
uöt16_t
)0x03FFË

	)

5640 
	#USB_COUNT3_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5641 
	#USB_COUNT3_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5642 
	#USB_COUNT3_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5643 
	#USB_COUNT3_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5644 
	#USB_COUNT3_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5645 
	#USB_COUNT3_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5647 
	#USB_COUNT3_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5650 
	#USB_COUNT4_RX_COUNT4_RX
 ((
uöt16_t
)0x03FFË

	)

5652 
	#USB_COUNT4_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5653 
	#USB_COUNT4_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5654 
	#USB_COUNT4_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5655 
	#USB_COUNT4_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5656 
	#USB_COUNT4_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5657 
	#USB_COUNT4_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5659 
	#USB_COUNT4_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5662 
	#USB_COUNT5_RX_COUNT5_RX
 ((
uöt16_t
)0x03FFË

	)

5664 
	#USB_COUNT5_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5665 
	#USB_COUNT5_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5666 
	#USB_COUNT5_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5667 
	#USB_COUNT5_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5668 
	#USB_COUNT5_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5669 
	#USB_COUNT5_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5671 
	#USB_COUNT5_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5674 
	#USB_COUNT6_RX_COUNT6_RX
 ((
uöt16_t
)0x03FFË

	)

5676 
	#USB_COUNT6_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5677 
	#USB_COUNT6_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5678 
	#USB_COUNT6_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5679 
	#USB_COUNT6_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5680 
	#USB_COUNT6_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5681 
	#USB_COUNT6_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5683 
	#USB_COUNT6_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5686 
	#USB_COUNT7_RX_COUNT7_RX
 ((
uöt16_t
)0x03FFË

	)

5688 
	#USB_COUNT7_RX_NUM_BLOCK
 ((
uöt16_t
)0x7C00Ë

	)

5689 
	#USB_COUNT7_RX_NUM_BLOCK_0
 ((
uöt16_t
)0x0400Ë

	)

5690 
	#USB_COUNT7_RX_NUM_BLOCK_1
 ((
uöt16_t
)0x0800Ë

	)

5691 
	#USB_COUNT7_RX_NUM_BLOCK_2
 ((
uöt16_t
)0x1000Ë

	)

5692 
	#USB_COUNT7_RX_NUM_BLOCK_3
 ((
uöt16_t
)0x2000Ë

	)

5693 
	#USB_COUNT7_RX_NUM_BLOCK_4
 ((
uöt16_t
)0x4000Ë

	)

5695 
	#USB_COUNT7_RX_BLSIZE
 ((
uöt16_t
)0x8000Ë

	)

5700 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5702 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5703 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5704 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5705 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5706 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5707 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5709 
	#USB_COUNT0_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5712 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5714 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5715 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5716 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5717 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5718 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5719 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5721 
	#USB_COUNT0_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5724 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5726 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5727 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5728 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5729 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5730 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5731 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5733 
	#USB_COUNT1_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5736 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5738 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5739 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5740 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5741 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5742 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5743 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5745 
	#USB_COUNT1_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5748 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5750 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5751 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5752 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5753 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5754 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5755 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5757 
	#USB_COUNT2_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5760 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5762 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5763 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5764 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5765 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5766 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5767 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5769 
	#USB_COUNT2_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5772 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5774 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5775 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5776 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5777 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5778 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5779 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5781 
	#USB_COUNT3_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5784 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5786 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5787 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5788 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5789 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5790 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5791 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5793 
	#USB_COUNT3_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5796 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5798 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5799 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5800 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5801 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5802 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5803 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5805 
	#USB_COUNT4_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5808 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5810 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5811 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5812 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5813 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5814 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5815 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5817 
	#USB_COUNT4_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5820 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5822 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5823 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5824 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5825 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5826 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5827 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5829 
	#USB_COUNT5_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5832 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5834 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5835 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5836 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5837 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5838 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5839 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5841 
	#USB_COUNT5_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5844 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5846 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5847 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5848 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5849 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5850 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5851 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5853 
	#USB_COUNT6_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5856 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5858 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5859 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5860 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5861 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5862 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5863 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5865 
	#USB_COUNT6_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5868 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 ((
uöt32_t
)0x000003FFË

	)

5870 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 ((
uöt32_t
)0x00007C00Ë

	)

5871 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 ((
uöt32_t
)0x00000400Ë

	)

5872 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 ((
uöt32_t
)0x00000800Ë

	)

5873 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 ((
uöt32_t
)0x00001000Ë

	)

5874 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 ((
uöt32_t
)0x00002000Ë

	)

5875 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 ((
uöt32_t
)0x00004000Ë

	)

5877 
	#USB_COUNT7_RX_0_BLSIZE_0
 ((
uöt32_t
)0x00008000Ë

	)

5880 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 ((
uöt32_t
)0x03FF0000Ë

	)

5882 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 ((
uöt32_t
)0x7C000000Ë

	)

5883 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 ((
uöt32_t
)0x04000000Ë

	)

5884 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 ((
uöt32_t
)0x08000000Ë

	)

5885 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 ((
uöt32_t
)0x10000000Ë

	)

5886 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 ((
uöt32_t
)0x20000000Ë

	)

5887 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 ((
uöt32_t
)0x40000000Ë

	)

5889 
	#USB_COUNT7_RX_1_BLSIZE_1
 ((
uöt32_t
)0x80000000Ë

	)

5898 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

5899 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

5900 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

5901 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

5902 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

5903 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

5904 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

5905 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

5907 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

5910 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

5911 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

5912 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

5913 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

5914 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

5915 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

5916 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

5917 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

5919 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

5920 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

5921 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

5923 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

5926 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

5935 
	#SysTick_CTRL_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

5936 
	#SysTick_CTRL_TICKINT
 ((
uöt32_t
)0x00000002Ë

	)

5937 
	#SysTick_CTRL_CLKSOURCE
 ((
uöt32_t
)0x00000004Ë

	)

5938 
	#SysTick_CTRL_COUNTFLAG
 ((
uöt32_t
)0x00010000Ë

	)

5941 
	#SysTick_LOAD_RELOAD
 ((
uöt32_t
)0x00FFFFFFË

	)

5944 
	#SysTick_VAL_CURRENT
 ((
uöt32_t
)0x00FFFFFFË

	)

5947 
	#SysTick_CALIB_TENMS
 ((
uöt32_t
)0x00FFFFFFË

	)

5948 
	#SysTick_CALIB_SKEW
 ((
uöt32_t
)0x40000000Ë

	)

5949 
	#SysTick_CALIB_NOREF
 ((
uöt32_t
)0x80000000Ë

	)

5958 
	#NVIC_ISER_SETENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

5959 
	#NVIC_ISER_SETENA_0
 ((
uöt32_t
)0x00000001Ë

	)

5960 
	#NVIC_ISER_SETENA_1
 ((
uöt32_t
)0x00000002Ë

	)

5961 
	#NVIC_ISER_SETENA_2
 ((
uöt32_t
)0x00000004Ë

	)

5962 
	#NVIC_ISER_SETENA_3
 ((
uöt32_t
)0x00000008Ë

	)

5963 
	#NVIC_ISER_SETENA_4
 ((
uöt32_t
)0x00000010Ë

	)

5964 
	#NVIC_ISER_SETENA_5
 ((
uöt32_t
)0x00000020Ë

	)

5965 
	#NVIC_ISER_SETENA_6
 ((
uöt32_t
)0x00000040Ë

	)

5966 
	#NVIC_ISER_SETENA_7
 ((
uöt32_t
)0x00000080Ë

	)

5967 
	#NVIC_ISER_SETENA_8
 ((
uöt32_t
)0x00000100Ë

	)

5968 
	#NVIC_ISER_SETENA_9
 ((
uöt32_t
)0x00000200Ë

	)

5969 
	#NVIC_ISER_SETENA_10
 ((
uöt32_t
)0x00000400Ë

	)

5970 
	#NVIC_ISER_SETENA_11
 ((
uöt32_t
)0x00000800Ë

	)

5971 
	#NVIC_ISER_SETENA_12
 ((
uöt32_t
)0x00001000Ë

	)

5972 
	#NVIC_ISER_SETENA_13
 ((
uöt32_t
)0x00002000Ë

	)

5973 
	#NVIC_ISER_SETENA_14
 ((
uöt32_t
)0x00004000Ë

	)

5974 
	#NVIC_ISER_SETENA_15
 ((
uöt32_t
)0x00008000Ë

	)

5975 
	#NVIC_ISER_SETENA_16
 ((
uöt32_t
)0x00010000Ë

	)

5976 
	#NVIC_ISER_SETENA_17
 ((
uöt32_t
)0x00020000Ë

	)

5977 
	#NVIC_ISER_SETENA_18
 ((
uöt32_t
)0x00040000Ë

	)

5978 
	#NVIC_ISER_SETENA_19
 ((
uöt32_t
)0x00080000Ë

	)

5979 
	#NVIC_ISER_SETENA_20
 ((
uöt32_t
)0x00100000Ë

	)

5980 
	#NVIC_ISER_SETENA_21
 ((
uöt32_t
)0x00200000Ë

	)

5981 
	#NVIC_ISER_SETENA_22
 ((
uöt32_t
)0x00400000Ë

	)

5982 
	#NVIC_ISER_SETENA_23
 ((
uöt32_t
)0x00800000Ë

	)

5983 
	#NVIC_ISER_SETENA_24
 ((
uöt32_t
)0x01000000Ë

	)

5984 
	#NVIC_ISER_SETENA_25
 ((
uöt32_t
)0x02000000Ë

	)

5985 
	#NVIC_ISER_SETENA_26
 ((
uöt32_t
)0x04000000Ë

	)

5986 
	#NVIC_ISER_SETENA_27
 ((
uöt32_t
)0x08000000Ë

	)

5987 
	#NVIC_ISER_SETENA_28
 ((
uöt32_t
)0x10000000Ë

	)

5988 
	#NVIC_ISER_SETENA_29
 ((
uöt32_t
)0x20000000Ë

	)

5989 
	#NVIC_ISER_SETENA_30
 ((
uöt32_t
)0x40000000Ë

	)

5990 
	#NVIC_ISER_SETENA_31
 ((
uöt32_t
)0x80000000Ë

	)

5993 
	#NVIC_ICER_CLRENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

5994 
	#NVIC_ICER_CLRENA_0
 ((
uöt32_t
)0x00000001Ë

	)

5995 
	#NVIC_ICER_CLRENA_1
 ((
uöt32_t
)0x00000002Ë

	)

5996 
	#NVIC_ICER_CLRENA_2
 ((
uöt32_t
)0x00000004Ë

	)

5997 
	#NVIC_ICER_CLRENA_3
 ((
uöt32_t
)0x00000008Ë

	)

5998 
	#NVIC_ICER_CLRENA_4
 ((
uöt32_t
)0x00000010Ë

	)

5999 
	#NVIC_ICER_CLRENA_5
 ((
uöt32_t
)0x00000020Ë

	)

6000 
	#NVIC_ICER_CLRENA_6
 ((
uöt32_t
)0x00000040Ë

	)

6001 
	#NVIC_ICER_CLRENA_7
 ((
uöt32_t
)0x00000080Ë

	)

6002 
	#NVIC_ICER_CLRENA_8
 ((
uöt32_t
)0x00000100Ë

	)

6003 
	#NVIC_ICER_CLRENA_9
 ((
uöt32_t
)0x00000200Ë

	)

6004 
	#NVIC_ICER_CLRENA_10
 ((
uöt32_t
)0x00000400Ë

	)

6005 
	#NVIC_ICER_CLRENA_11
 ((
uöt32_t
)0x00000800Ë

	)

6006 
	#NVIC_ICER_CLRENA_12
 ((
uöt32_t
)0x00001000Ë

	)

6007 
	#NVIC_ICER_CLRENA_13
 ((
uöt32_t
)0x00002000Ë

	)

6008 
	#NVIC_ICER_CLRENA_14
 ((
uöt32_t
)0x00004000Ë

	)

6009 
	#NVIC_ICER_CLRENA_15
 ((
uöt32_t
)0x00008000Ë

	)

6010 
	#NVIC_ICER_CLRENA_16
 ((
uöt32_t
)0x00010000Ë

	)

6011 
	#NVIC_ICER_CLRENA_17
 ((
uöt32_t
)0x00020000Ë

	)

6012 
	#NVIC_ICER_CLRENA_18
 ((
uöt32_t
)0x00040000Ë

	)

6013 
	#NVIC_ICER_CLRENA_19
 ((
uöt32_t
)0x00080000Ë

	)

6014 
	#NVIC_ICER_CLRENA_20
 ((
uöt32_t
)0x00100000Ë

	)

6015 
	#NVIC_ICER_CLRENA_21
 ((
uöt32_t
)0x00200000Ë

	)

6016 
	#NVIC_ICER_CLRENA_22
 ((
uöt32_t
)0x00400000Ë

	)

6017 
	#NVIC_ICER_CLRENA_23
 ((
uöt32_t
)0x00800000Ë

	)

6018 
	#NVIC_ICER_CLRENA_24
 ((
uöt32_t
)0x01000000Ë

	)

6019 
	#NVIC_ICER_CLRENA_25
 ((
uöt32_t
)0x02000000Ë

	)

6020 
	#NVIC_ICER_CLRENA_26
 ((
uöt32_t
)0x04000000Ë

	)

6021 
	#NVIC_ICER_CLRENA_27
 ((
uöt32_t
)0x08000000Ë

	)

6022 
	#NVIC_ICER_CLRENA_28
 ((
uöt32_t
)0x10000000Ë

	)

6023 
	#NVIC_ICER_CLRENA_29
 ((
uöt32_t
)0x20000000Ë

	)

6024 
	#NVIC_ICER_CLRENA_30
 ((
uöt32_t
)0x40000000Ë

	)

6025 
	#NVIC_ICER_CLRENA_31
 ((
uöt32_t
)0x80000000Ë

	)

6028 
	#NVIC_ISPR_SETPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

6029 
	#NVIC_ISPR_SETPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

6030 
	#NVIC_ISPR_SETPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

6031 
	#NVIC_ISPR_SETPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

6032 
	#NVIC_ISPR_SETPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

6033 
	#NVIC_ISPR_SETPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

6034 
	#NVIC_ISPR_SETPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

6035 
	#NVIC_ISPR_SETPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

6036 
	#NVIC_ISPR_SETPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

6037 
	#NVIC_ISPR_SETPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

6038 
	#NVIC_ISPR_SETPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

6039 
	#NVIC_ISPR_SETPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

6040 
	#NVIC_ISPR_SETPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

6041 
	#NVIC_ISPR_SETPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

6042 
	#NVIC_ISPR_SETPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

6043 
	#NVIC_ISPR_SETPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

6044 
	#NVIC_ISPR_SETPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

6045 
	#NVIC_ISPR_SETPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

6046 
	#NVIC_ISPR_SETPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

6047 
	#NVIC_ISPR_SETPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

6048 
	#NVIC_ISPR_SETPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

6049 
	#NVIC_ISPR_SETPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

6050 
	#NVIC_ISPR_SETPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

6051 
	#NVIC_ISPR_SETPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

6052 
	#NVIC_ISPR_SETPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

6053 
	#NVIC_ISPR_SETPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

6054 
	#NVIC_ISPR_SETPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

6055 
	#NVIC_ISPR_SETPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

6056 
	#NVIC_ISPR_SETPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

6057 
	#NVIC_ISPR_SETPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

6058 
	#NVIC_ISPR_SETPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

6059 
	#NVIC_ISPR_SETPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

6060 
	#NVIC_ISPR_SETPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

6063 
	#NVIC_ICPR_CLRPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

6064 
	#NVIC_ICPR_CLRPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

6065 
	#NVIC_ICPR_CLRPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

6066 
	#NVIC_ICPR_CLRPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

6067 
	#NVIC_ICPR_CLRPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

6068 
	#NVIC_ICPR_CLRPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

6069 
	#NVIC_ICPR_CLRPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

6070 
	#NVIC_ICPR_CLRPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

6071 
	#NVIC_ICPR_CLRPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

6072 
	#NVIC_ICPR_CLRPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

6073 
	#NVIC_ICPR_CLRPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

6074 
	#NVIC_ICPR_CLRPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

6075 
	#NVIC_ICPR_CLRPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

6076 
	#NVIC_ICPR_CLRPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

6077 
	#NVIC_ICPR_CLRPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

6078 
	#NVIC_ICPR_CLRPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

6079 
	#NVIC_ICPR_CLRPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

6080 
	#NVIC_ICPR_CLRPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

6081 
	#NVIC_ICPR_CLRPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

6082 
	#NVIC_ICPR_CLRPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

6083 
	#NVIC_ICPR_CLRPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

6084 
	#NVIC_ICPR_CLRPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

6085 
	#NVIC_ICPR_CLRPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

6086 
	#NVIC_ICPR_CLRPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

6087 
	#NVIC_ICPR_CLRPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

6088 
	#NVIC_ICPR_CLRPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

6089 
	#NVIC_ICPR_CLRPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

6090 
	#NVIC_ICPR_CLRPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

6091 
	#NVIC_ICPR_CLRPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

6092 
	#NVIC_ICPR_CLRPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

6093 
	#NVIC_ICPR_CLRPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

6094 
	#NVIC_ICPR_CLRPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

6095 
	#NVIC_ICPR_CLRPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

6098 
	#NVIC_IABR_ACTIVE
 ((
uöt32_t
)0xFFFFFFFFË

	)

6099 
	#NVIC_IABR_ACTIVE_0
 ((
uöt32_t
)0x00000001Ë

	)

6100 
	#NVIC_IABR_ACTIVE_1
 ((
uöt32_t
)0x00000002Ë

	)

6101 
	#NVIC_IABR_ACTIVE_2
 ((
uöt32_t
)0x00000004Ë

	)

6102 
	#NVIC_IABR_ACTIVE_3
 ((
uöt32_t
)0x00000008Ë

	)

6103 
	#NVIC_IABR_ACTIVE_4
 ((
uöt32_t
)0x00000010Ë

	)

6104 
	#NVIC_IABR_ACTIVE_5
 ((
uöt32_t
)0x00000020Ë

	)

6105 
	#NVIC_IABR_ACTIVE_6
 ((
uöt32_t
)0x00000040Ë

	)

6106 
	#NVIC_IABR_ACTIVE_7
 ((
uöt32_t
)0x00000080Ë

	)

6107 
	#NVIC_IABR_ACTIVE_8
 ((
uöt32_t
)0x00000100Ë

	)

6108 
	#NVIC_IABR_ACTIVE_9
 ((
uöt32_t
)0x00000200Ë

	)

6109 
	#NVIC_IABR_ACTIVE_10
 ((
uöt32_t
)0x00000400Ë

	)

6110 
	#NVIC_IABR_ACTIVE_11
 ((
uöt32_t
)0x00000800Ë

	)

6111 
	#NVIC_IABR_ACTIVE_12
 ((
uöt32_t
)0x00001000Ë

	)

6112 
	#NVIC_IABR_ACTIVE_13
 ((
uöt32_t
)0x00002000Ë

	)

6113 
	#NVIC_IABR_ACTIVE_14
 ((
uöt32_t
)0x00004000Ë

	)

6114 
	#NVIC_IABR_ACTIVE_15
 ((
uöt32_t
)0x00008000Ë

	)

6115 
	#NVIC_IABR_ACTIVE_16
 ((
uöt32_t
)0x00010000Ë

	)

6116 
	#NVIC_IABR_ACTIVE_17
 ((
uöt32_t
)0x00020000Ë

	)

6117 
	#NVIC_IABR_ACTIVE_18
 ((
uöt32_t
)0x00040000Ë

	)

6118 
	#NVIC_IABR_ACTIVE_19
 ((
uöt32_t
)0x00080000Ë

	)

6119 
	#NVIC_IABR_ACTIVE_20
 ((
uöt32_t
)0x00100000Ë

	)

6120 
	#NVIC_IABR_ACTIVE_21
 ((
uöt32_t
)0x00200000Ë

	)

6121 
	#NVIC_IABR_ACTIVE_22
 ((
uöt32_t
)0x00400000Ë

	)

6122 
	#NVIC_IABR_ACTIVE_23
 ((
uöt32_t
)0x00800000Ë

	)

6123 
	#NVIC_IABR_ACTIVE_24
 ((
uöt32_t
)0x01000000Ë

	)

6124 
	#NVIC_IABR_ACTIVE_25
 ((
uöt32_t
)0x02000000Ë

	)

6125 
	#NVIC_IABR_ACTIVE_26
 ((
uöt32_t
)0x04000000Ë

	)

6126 
	#NVIC_IABR_ACTIVE_27
 ((
uöt32_t
)0x08000000Ë

	)

6127 
	#NVIC_IABR_ACTIVE_28
 ((
uöt32_t
)0x10000000Ë

	)

6128 
	#NVIC_IABR_ACTIVE_29
 ((
uöt32_t
)0x20000000Ë

	)

6129 
	#NVIC_IABR_ACTIVE_30
 ((
uöt32_t
)0x40000000Ë

	)

6130 
	#NVIC_IABR_ACTIVE_31
 ((
uöt32_t
)0x80000000Ë

	)

6133 
	#NVIC_IPR0_PRI_0
 ((
uöt32_t
)0x000000FFË

	)

6134 
	#NVIC_IPR0_PRI_1
 ((
uöt32_t
)0x0000FF00Ë

	)

6135 
	#NVIC_IPR0_PRI_2
 ((
uöt32_t
)0x00FF0000Ë

	)

6136 
	#NVIC_IPR0_PRI_3
 ((
uöt32_t
)0xFF000000Ë

	)

6139 
	#NVIC_IPR1_PRI_4
 ((
uöt32_t
)0x000000FFË

	)

6140 
	#NVIC_IPR1_PRI_5
 ((
uöt32_t
)0x0000FF00Ë

	)

6141 
	#NVIC_IPR1_PRI_6
 ((
uöt32_t
)0x00FF0000Ë

	)

6142 
	#NVIC_IPR1_PRI_7
 ((
uöt32_t
)0xFF000000Ë

	)

6145 
	#NVIC_IPR2_PRI_8
 ((
uöt32_t
)0x000000FFË

	)

6146 
	#NVIC_IPR2_PRI_9
 ((
uöt32_t
)0x0000FF00Ë

	)

6147 
	#NVIC_IPR2_PRI_10
 ((
uöt32_t
)0x00FF0000Ë

	)

6148 
	#NVIC_IPR2_PRI_11
 ((
uöt32_t
)0xFF000000Ë

	)

6151 
	#NVIC_IPR3_PRI_12
 ((
uöt32_t
)0x000000FFË

	)

6152 
	#NVIC_IPR3_PRI_13
 ((
uöt32_t
)0x0000FF00Ë

	)

6153 
	#NVIC_IPR3_PRI_14
 ((
uöt32_t
)0x00FF0000Ë

	)

6154 
	#NVIC_IPR3_PRI_15
 ((
uöt32_t
)0xFF000000Ë

	)

6157 
	#NVIC_IPR4_PRI_16
 ((
uöt32_t
)0x000000FFË

	)

6158 
	#NVIC_IPR4_PRI_17
 ((
uöt32_t
)0x0000FF00Ë

	)

6159 
	#NVIC_IPR4_PRI_18
 ((
uöt32_t
)0x00FF0000Ë

	)

6160 
	#NVIC_IPR4_PRI_19
 ((
uöt32_t
)0xFF000000Ë

	)

6163 
	#NVIC_IPR5_PRI_20
 ((
uöt32_t
)0x000000FFË

	)

6164 
	#NVIC_IPR5_PRI_21
 ((
uöt32_t
)0x0000FF00Ë

	)

6165 
	#NVIC_IPR5_PRI_22
 ((
uöt32_t
)0x00FF0000Ë

	)

6166 
	#NVIC_IPR5_PRI_23
 ((
uöt32_t
)0xFF000000Ë

	)

6169 
	#NVIC_IPR6_PRI_24
 ((
uöt32_t
)0x000000FFË

	)

6170 
	#NVIC_IPR6_PRI_25
 ((
uöt32_t
)0x0000FF00Ë

	)

6171 
	#NVIC_IPR6_PRI_26
 ((
uöt32_t
)0x00FF0000Ë

	)

6172 
	#NVIC_IPR6_PRI_27
 ((
uöt32_t
)0xFF000000Ë

	)

6175 
	#NVIC_IPR7_PRI_28
 ((
uöt32_t
)0x000000FFË

	)

6176 
	#NVIC_IPR7_PRI_29
 ((
uöt32_t
)0x0000FF00Ë

	)

6177 
	#NVIC_IPR7_PRI_30
 ((
uöt32_t
)0x00FF0000Ë

	)

6178 
	#NVIC_IPR7_PRI_31
 ((
uöt32_t
)0xFF000000Ë

	)

6181 
	#SCB_CPUID_REVISION
 ((
uöt32_t
)0x0000000FË

	)

6182 
	#SCB_CPUID_PARTNO
 ((
uöt32_t
)0x0000FFF0Ë

	)

6183 
	#SCB_CPUID_C⁄°™t
 ((
uöt32_t
)0x000F0000Ë

	)

6184 
	#SCB_CPUID_VARIANT
 ((
uöt32_t
)0x00F00000Ë

	)

6185 
	#SCB_CPUID_IMPLEMENTER
 ((
uöt32_t
)0xFF000000Ë

	)

6188 
	#SCB_ICSR_VECTACTIVE
 ((
uöt32_t
)0x000001FFË

	)

6189 
	#SCB_ICSR_RETTOBASE
 ((
uöt32_t
)0x00000800Ë

	)

6190 
	#SCB_ICSR_VECTPENDING
 ((
uöt32_t
)0x003FF000Ë

	)

6191 
	#SCB_ICSR_ISRPENDING
 ((
uöt32_t
)0x00400000Ë

	)

6192 
	#SCB_ICSR_ISRPREEMPT
 ((
uöt32_t
)0x00800000Ë

	)

6193 
	#SCB_ICSR_PENDSTCLR
 ((
uöt32_t
)0x02000000Ë

	)

6194 
	#SCB_ICSR_PENDSTSET
 ((
uöt32_t
)0x04000000Ë

	)

6195 
	#SCB_ICSR_PENDSVCLR
 ((
uöt32_t
)0x08000000Ë

	)

6196 
	#SCB_ICSR_PENDSVSET
 ((
uöt32_t
)0x10000000Ë

	)

6197 
	#SCB_ICSR_NMIPENDSET
 ((
uöt32_t
)0x80000000Ë

	)

6200 
	#SCB_VTOR_TBLOFF
 ((
uöt32_t
)0x1FFFFF80Ë

	)

6201 
	#SCB_VTOR_TBLBASE
 ((
uöt32_t
)0x20000000Ë

	)

6204 
	#SCB_AIRCR_VECTRESET
 ((
uöt32_t
)0x00000001Ë

	)

6205 
	#SCB_AIRCR_VECTCLRACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

6206 
	#SCB_AIRCR_SYSRESETREQ
 ((
uöt32_t
)0x00000004Ë

	)

6208 
	#SCB_AIRCR_PRIGROUP
 ((
uöt32_t
)0x00000700Ë

	)

6209 
	#SCB_AIRCR_PRIGROUP_0
 ((
uöt32_t
)0x00000100Ë

	)

6210 
	#SCB_AIRCR_PRIGROUP_1
 ((
uöt32_t
)0x00000200Ë

	)

6211 
	#SCB_AIRCR_PRIGROUP_2
 ((
uöt32_t
)0x00000400Ë

	)

6214 
	#SCB_AIRCR_PRIGROUP0
 ((
uöt32_t
)0x00000000Ë

	)

6215 
	#SCB_AIRCR_PRIGROUP1
 ((
uöt32_t
)0x00000100Ë

	)

6216 
	#SCB_AIRCR_PRIGROUP2
 ((
uöt32_t
)0x00000200Ë

	)

6217 
	#SCB_AIRCR_PRIGROUP3
 ((
uöt32_t
)0x00000300Ë

	)

6218 
	#SCB_AIRCR_PRIGROUP4
 ((
uöt32_t
)0x00000400Ë

	)

6219 
	#SCB_AIRCR_PRIGROUP5
 ((
uöt32_t
)0x00000500Ë

	)

6220 
	#SCB_AIRCR_PRIGROUP6
 ((
uöt32_t
)0x00000600Ë

	)

6221 
	#SCB_AIRCR_PRIGROUP7
 ((
uöt32_t
)0x00000700Ë

	)

6223 
	#SCB_AIRCR_ENDIANESS
 ((
uöt32_t
)0x00008000Ë

	)

6224 
	#SCB_AIRCR_VECTKEY
 ((
uöt32_t
)0xFFFF0000Ë

	)

6227 
	#SCB_SCR_SLEEPONEXIT
 ((
uöt8_t
)0x02Ë

	)

6228 
	#SCB_SCR_SLEEPDEEP
 ((
uöt8_t
)0x04Ë

	)

6229 
	#SCB_SCR_SEVONPEND
 ((
uöt8_t
)0x10Ë

	)

6232 
	#SCB_CCR_NONBASETHRDENA
 ((
uöt16_t
)0x0001Ë

	)

6233 
	#SCB_CCR_USERSETMPEND
 ((
uöt16_t
)0x0002Ë

	)

6234 
	#SCB_CCR_UNALIGN_TRP
 ((
uöt16_t
)0x0008Ë

	)

6235 
	#SCB_CCR_DIV_0_TRP
 ((
uöt16_t
)0x0010Ë

	)

6236 
	#SCB_CCR_BFHFNMIGN
 ((
uöt16_t
)0x0100Ë

	)

6237 
	#SCB_CCR_STKALIGN
 ((
uöt16_t
)0x0200Ë

	)

6240 
	#SCB_SHPR_PRI_N
 ((
uöt32_t
)0x000000FFË

	)

6241 
	#SCB_SHPR_PRI_N1
 ((
uöt32_t
)0x0000FF00Ë

	)

6242 
	#SCB_SHPR_PRI_N2
 ((
uöt32_t
)0x00FF0000Ë

	)

6243 
	#SCB_SHPR_PRI_N3
 ((
uöt32_t
)0xFF000000Ë

	)

6246 
	#SCB_SHCSR_MEMFAULTACT
 ((
uöt32_t
)0x00000001Ë

	)

6247 
	#SCB_SHCSR_BUSFAULTACT
 ((
uöt32_t
)0x00000002Ë

	)

6248 
	#SCB_SHCSR_USGFAULTACT
 ((
uöt32_t
)0x00000008Ë

	)

6249 
	#SCB_SHCSR_SVCALLACT
 ((
uöt32_t
)0x00000080Ë

	)

6250 
	#SCB_SHCSR_MONITORACT
 ((
uöt32_t
)0x00000100Ë

	)

6251 
	#SCB_SHCSR_PENDSVACT
 ((
uöt32_t
)0x00000400Ë

	)

6252 
	#SCB_SHCSR_SYSTICKACT
 ((
uöt32_t
)0x00000800Ë

	)

6253 
	#SCB_SHCSR_USGFAULTPENDED
 ((
uöt32_t
)0x00001000Ë

	)

6254 
	#SCB_SHCSR_MEMFAULTPENDED
 ((
uöt32_t
)0x00002000Ë

	)

6255 
	#SCB_SHCSR_BUSFAULTPENDED
 ((
uöt32_t
)0x00004000Ë

	)

6256 
	#SCB_SHCSR_SVCALLPENDED
 ((
uöt32_t
)0x00008000Ë

	)

6257 
	#SCB_SHCSR_MEMFAULTENA
 ((
uöt32_t
)0x00010000Ë

	)

6258 
	#SCB_SHCSR_BUSFAULTENA
 ((
uöt32_t
)0x00020000Ë

	)

6259 
	#SCB_SHCSR_USGFAULTENA
 ((
uöt32_t
)0x00040000Ë

	)

6263 
	#SCB_CFSR_IACCVIOL
 ((
uöt32_t
)0x00000001Ë

	)

6264 
	#SCB_CFSR_DACCVIOL
 ((
uöt32_t
)0x00000002Ë

	)

6265 
	#SCB_CFSR_MUNSTKERR
 ((
uöt32_t
)0x00000008Ë

	)

6266 
	#SCB_CFSR_MSTKERR
 ((
uöt32_t
)0x00000010Ë

	)

6267 
	#SCB_CFSR_MMARVALID
 ((
uöt32_t
)0x00000080Ë

	)

6269 
	#SCB_CFSR_IBUSERR
 ((
uöt32_t
)0x00000100Ë

	)

6270 
	#SCB_CFSR_PRECISERR
 ((
uöt32_t
)0x00000200Ë

	)

6271 
	#SCB_CFSR_IMPRECISERR
 ((
uöt32_t
)0x00000400Ë

	)

6272 
	#SCB_CFSR_UNSTKERR
 ((
uöt32_t
)0x00000800Ë

	)

6273 
	#SCB_CFSR_STKERR
 ((
uöt32_t
)0x00001000Ë

	)

6274 
	#SCB_CFSR_BFARVALID
 ((
uöt32_t
)0x00008000Ë

	)

6276 
	#SCB_CFSR_UNDEFINSTR
 ((
uöt32_t
)0x00010000Ë

	)

6277 
	#SCB_CFSR_INVSTATE
 ((
uöt32_t
)0x00020000Ë

	)

6278 
	#SCB_CFSR_INVPC
 ((
uöt32_t
)0x00040000Ë

	)

6279 
	#SCB_CFSR_NOCP
 ((
uöt32_t
)0x00080000Ë

	)

6280 
	#SCB_CFSR_UNALIGNED
 ((
uöt32_t
)0x01000000Ë

	)

6281 
	#SCB_CFSR_DIVBYZERO
 ((
uöt32_t
)0x02000000Ë

	)

6284 
	#SCB_HFSR_VECTTBL
 ((
uöt32_t
)0x00000002Ë

	)

6285 
	#SCB_HFSR_FORCED
 ((
uöt32_t
)0x40000000Ë

	)

6286 
	#SCB_HFSR_DEBUGEVT
 ((
uöt32_t
)0x80000000Ë

	)

6289 
	#SCB_DFSR_HALTED
 ((
uöt8_t
)0x01Ë

	)

6290 
	#SCB_DFSR_BKPT
 ((
uöt8_t
)0x02Ë

	)

6291 
	#SCB_DFSR_DWTTRAP
 ((
uöt8_t
)0x04Ë

	)

6292 
	#SCB_DFSR_VCATCH
 ((
uöt8_t
)0x08Ë

	)

6293 
	#SCB_DFSR_EXTERNAL
 ((
uöt8_t
)0x10Ë

	)

6296 
	#SCB_MMFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

6299 
	#SCB_BFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

6302 
	#SCB_AFSR_IMPDEF
 ((
uöt32_t
)0xFFFFFFFFË

	)

6311 #ifde‡
USE_STDPERIPH_DRIVER


6312 
	~"°m32l1xx_c⁄f.h
"

6319 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

6321 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

6323 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

6325 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

6327 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

6329 
	#READ_REG
(
REG
Ë((REG))

	)

6331 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

6337 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\inc\stm32l1xx_conf.h

29 #i‚de‡
__STM32L1xx_CONF_H


30 
	#__STM32L1xx_CONF_H


	)

34 
	~"°m32l1xx_adc.h
"

35 
	~"°m32l1xx_´s.h
"

36 
	~"°m32l1xx_comp.h
"

37 
	~"°m32l1xx_¸c.h
"

38 
	~"°m32l1xx_dac.h
"

39 
	~"°m32l1xx_dbgmcu.h
"

40 
	~"°m32l1xx_dma.h
"

41 
	~"°m32l1xx_exti.h
"

42 
	~"°m32l1xx_Êash.h
"

43 
	~"°m32l1xx_fsmc.h
"

44 
	~"°m32l1xx_gpio.h
"

45 
	~"°m32l1xx_i2c.h
"

46 
	~"°m32l1xx_iwdg.h
"

47 
	~"°m32l1xx_lcd.h
"

48 
	~"°m32l1xx_›amp.h
"

49 
	~"°m32l1xx_pwr.h
"

50 
	~"°m32l1xx_rcc.h
"

51 
	~"°m32l1xx_πc.h
"

52 
	~"°m32l1xx_sdio.h
"

53 
	~"°m32l1xx_•i.h
"

54 
	~"°m32l1xx_syscfg.h
"

55 
	~"°m32l1xx_tim.h
"

56 
	~"°m32l1xx_ußπ.h
"

57 
	~"°m32l1xx_wwdg.h
"

58 
	~"misc.h
"

67 #ifde‡ 
USE_FULL_ASSERT


76 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

78 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

80 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\inc\system_stm32l1xx.h

39 #i‚de‡
__SYSTEM_STM32L1XX_H


40 
	#__SYSTEM_STM32L1XX_H


	)

42 #ifde‡
__˝lu•lus


59 
uöt32_t
 
Sy°emC‹eClock
;

85 
Sy°emInô
();

86 
Sy°emC‹eClockUpd©e
();

91 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\readme.txt

2 
	gXR™ge
 | 
	gv1
.0 | 
	gv0
.1 |

4 
	gDIO0
 | 
	gGPIOA
 | 
	gPö_10
 | GPIOA | Pin_10 |

5 
	gDIO1
 | 
	gGPIOA
 | 
	gPö_9
 | GPIOA | Pin_9 |

6 
	gDIO2
 | 
	gGPIOC
 | 
	gPö_13
 | 
	gGPIOA
 | 
	gPö_8
 |

7 
	gDIO3
 | 
	gGPIOB
 | 
	gPö_0
 | GPIOB | Pin_0 |

8 
	gDIO4
 | 
	gGPIOB
 | 
	gPö_4
 | GPIOB | Pin_4 |

9 
	gDIO5
 | 
	gGPIOB
 | 
	gPö_10
 | GPIOB | Pin_10 |

11 
	gRXTX
 | 
	gGPIOB
 | 
	gPö_11
 | GPIOB | Pin_11 |

12 
	gRESET
 | 
	gGPIOB
 | 
	gPö_2
 | GPIOB | Pin_2 |

13 
	gNSS
 | 
	gGPIOB
 | 
	gPö_12
 | GPIOB | Pin_12 |

15 
	gSCK
 | 
	gGPIOB
 | 
	gPö_13
 | GPIOB | Pin_13 |

16 
	gMISO
 | 
	gGPIOB
 | 
	gPö_14
 | GPIOB | Pin_14 |

17 
	gMOSI
 | 
	gGPIOB
 | 
	gPö_15
 | GPIOB | Pin_15 |

19 
LED
 
	gGREEN
 | 
	gGPIOA
 | 
	gPö_7
 | GPIOA | 
	gPö_6
 |

20 
LED
 
	gRED
 | 
	gGPIOA
 | 
	gPö_8
 | GPIOA | 
	gPö_7
 |

27 
You
 
have
 
to
 
£t
 
the
 
c‹ª˘
 
mem‹y
 
œyout
 
your
 
devi˚
 
ö
Åhê
lökî
 
	gs¸ùt
.

28 
PÀa£
 
check
 
the
 
FLASH
 
™d
 
SRAM
 
	gÀngth
.

30 
	ge
.
	gg
.

33 
	gMEMORY


35 
FLASH
 (
rx
Ë: 
ORIGIN
 = 0x08000000, 
	gLENGTH
 = 0x08000

36 
RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
	gLENGTH
 = 0x01000

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\main.c

1 
	~<°rög.h
>

2 
	~<°döt.h
>

3 
	~<°dboﬁ.h
>

4 
	~"∂©f‹m.h
"

5 
	~"Àd.h
"

6 
	~<°dio.h
>

7 
	~"ødio/sx1272-LoRaMisc.h
"

9 #i‡
USE_UART


10 
	~"u¨t.h
"

13 
	~"ødio/ødio.h
"

17 
	#BUFFER_SIZE
 9

18 

	)

20 
uöt16_t
 
	gBuf„rSize
 = 
BUFFER_SIZE
;

21 
uöt8_t
 
	gBuf„r
[
BUFFER_SIZE
];

24 
uöt8_t
 
	gE«bÀMa°î
 = 
åue
;

26 
uöt8_t
 
	gE«bÀMa°î
 = 
Ál£
;

28 
tRadioDrivî
 *
	gRadio
 = 
NULL
;

30 c⁄° 
uöt8_t
 
	gPögMsg
[] = "PING";

31 c⁄° 
uöt8_t
 
	gP⁄gMsg
[] = "PONG";

34 
	$LedGªeBlök
()

36 
	`LedOn
(
LED_GREEN
);

37 
	`Dñay
(300);

38 
	`LedOff
(
LED_GREEN
);

39 
	}
}

42 
	$LedBlueBlök
()

44 
	`LedOn
(
LED_RED
);

45 
	`Dñay
(300);

46 
	`LedOff
(
LED_RED
);

47 
	}
}

52 
	$OnMa°î
( )

54 
uöt8_t
 
i
;

56  
Radio
->
	`Pro˚ss
( ) )

58 
RF_RX_TIMEOUT
:

60 
Buf„r
[0] = 'P';

61 
Buf„r
[1] = 'I';

62 
Buf„r
[2] = 'N';

63 
Buf„r
[3] = 'G';

64  
i
 = 4; i < 
Buf„rSize
; i++ )

66 
Buf„r
[
i
] = i - 4;

68 
Radio
->
	`SëTxPackë
–
Buf„r
, 
Buf„rSize
 );

70 
RF_RX_DONE
:

71 
Radio
->
	`GëRxPackë
–
Buf„r
, ( 
uöt16_t
* )&
Buf„rSize
 );

73 if–
Buf„rSize
 > 0 )

75 if–
	`°∫cmp
––c⁄° * )
Buf„r
, ( c⁄° * )
P⁄gMsg
, 4 ) == 0 )

78 
	`LedToggÀ
–
LED_GREEN
 );

81 
Buf„r
[0] = 'P';

82 
Buf„r
[1] = 'I';

83 
Buf„r
[2] = 'N';

84 
Buf„r
[3] = 'G';

86  
i
 = 4; i < 
Buf„rSize
; i++ )

88 
Buf„r
[
i
] = i - 4;

90 
Radio
->
	`SëTxPackë
–
Buf„r
, 
Buf„rSize
 );

92 if–
	`°∫cmp
––c⁄° * )
Buf„r
, ( c⁄° * )
PögMsg
, 4 ) == 0 )

95 
E«bÀMa°î
 = 
Ál£
;

96 
	`LedOff
–
LED_RED
 );

100 
RF_TX_DONE
:

102 
	`LedToggÀ
–
LED_RED
 );

103 
Radio
->
	`SèπRx
( );

108 
	}
}

114 
	$OnSœve
( )

116 
uöt8_t
 
i
;

118  
Radio
->
	`Pro˚ss
( ) )

120 
RF_RX_DONE
:

121 
Radio
->
	`GëRxPackë
–
Buf„r
, ( 
uöt16_t
* )&
Buf„rSize
 );

123 if–
Buf„rSize
 > 0 )

125 if–
	`°∫cmp
––c⁄° * )
Buf„r
, ( c⁄° * )
PögMsg
, 4 ) == 0 )

128 
	`LedToggÀ
–
LED_GREEN
 );

131 
Buf„r
[0] = 'P';

132 
Buf„r
[1] = 'O';

133 
Buf„r
[2] = 'N';

134 
Buf„r
[3] = 'G';

136  
i
 = 4; i < 
Buf„rSize
; i++ )

138 
Buf„r
[
i
] = i - 4;

141 
Radio
->
	`SëTxPackë
–
Buf„r
, 
Buf„rSize
 );

145 
RF_TX_DONE
:

147 
	`LedToggÀ
–
LED_RED
 );

148 
Radio
->
	`SèπRx
( );

153 
	}
}

156 
	$OnRe˚ive
( )

160  
Radio
->
	`Pro˚ss
( ) )

162 
RF_RX_DONE
:

163 
Radio
->
	`GëRxPackë
–
Buf„r
, ( 
uöt16_t
* )&
Buf„rSize
 );

165 if–
Buf„rSize
 > 0 )

167 if–
	`°∫cmp
––c⁄° * )
Buf„r
, ( c⁄° * )
PögMsg
, 4 ) == 0 )

169 
	`LedGªeBlök
();

173 
Radio
->
	`SèπRx
();

178 
	}
}

190 
	$maö
( )

192 
	`BﬂrdInô
( );

197 
Radio
 = 
	`RadioDrivîInô
( );

199 
Radio
->
	`Inô
( );

201 
Radio
->
	`SèπRx
( );

205 if–
E«bÀMa°î
 =
åue
 )

207 
	`OnMa°î
( );

211 
	`OnSœve
( );

214 #ifde‡
__GNUC__


218 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\platform.h

16 #i‚de‡
__PLATFORM_H__


17 
	#__PLATFORM_H__


	)

19 #i‚de‡
__GNUC__


20 
	#ölöe


	)

28 
	#USE_SX1272_RADIO


	)

34 
	~"XR™ge-HÆ.h
"

35 
	~"utûôy.h
"

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\radio.c

21 
	~"∂©f‹m.h
"

23 
	~"ødio.h
"

25 #i‡
deföed
–
USE_SX1232_RADIO
 )

26 
	~"sx1232.h
"

27 #ñi‡
deföed
–
USE_SX1272_RADIO
 )

28 
	~"sx1272.h
"

29 #ñi‡
deföed
–
USE_SX1276_RADIO
 )

30 
	~"sx1276.h
"

35 
tRadioDrivî
 
	gRadioDrivî
;

37 
tRadioDrivî
* 
	$RadioDrivîInô
( )

39 #i‡
	`deföed
–
USE_SX1232_RADIO
 )

40 
RadioDrivî
.
Inô
 = 
SX1232Inô
;

41 
RadioDrivî
.
Re£t
 = 
SX1232Re£t
;

42 
RadioDrivî
.
SèπRx
 = 
SX1232SèπRx
;

43 
RadioDrivî
.
GëRxPackë
 = 
SX1232GëRxPackë
;

44 
RadioDrivî
.
SëTxPackë
 = 
SX1232SëTxPackë
;

45 
RadioDrivî
.
Pro˚ss
 = 
SX1232Pro˚ss
;

46 #ñi‡
	`deföed
–
USE_SX1272_RADIO
 )

47 
RadioDrivî
.
Inô
 = 
SX1272Inô
;

48 
RadioDrivî
.
Re£t
 = 
SX1272Re£t
;

49 
RadioDrivî
.
SèπRx
 = 
SX1272SèπRx
;

50 
RadioDrivî
.
GëRxPackë
 = 
SX1272GëRxPackë
;

51 
RadioDrivî
.
SëTxPackë
 = 
SX1272SëTxPackë
;

52 
RadioDrivî
.
Pro˚ss
 = 
SX1272Pro˚ss
;

53 #ñi‡
	`deföed
–
USE_SX1276_RADIO
 )

54 
RadioDrivî
.
Inô
 = 
SX1276Inô
;

55 
RadioDrivî
.
Re£t
 = 
SX1276Re£t
;

56 
RadioDrivî
.
SèπRx
 = 
SX1276SèπRx
;

57 
RadioDrivî
.
GëRxPackë
 = 
SX1276GëRxPackë
;

58 
RadioDrivî
.
SëTxPackë
 = 
SX1276SëTxPackë
;

59 
RadioDrivî
.
Pro˚ss
 = 
SX1276Pro˚ss
;

64  &
RadioDrivî
;

65 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\radio.h

21 #i‚de‡
__RADIO_H__


22 
	#__RADIO_H__


	)

27 
	#LORA
 0

28 

	)

34 
	mRF_IDLE
,

35 
	mRF_BUSY
,

36 
	mRF_RX_DONE
,

37 
	mRF_RX_TIMEOUT
,

38 
	mRF_TX_DONE
,

39 
	mRF_TX_TIMEOUT
,

40 
	mRF_LEN_ERROR
,

41 
	mRF_CHANNEL_EMPTY
,

42 
	mRF_CHANNEL_ACTIVITY_DETECTED
,

43 }
	ttRFPro˚ssRëu∫Codes
;

48 
	ssRadioDrivî


50 –*
	mInô
 )( );

51 –*
	mRe£t
 )( );

52 –*
	mSèπRx
 )( );

53 –*
	mGëRxPackë
 )–*
	mbuf„r
, 
uöt16_t
 *
	msize
 );

54 –*
	mSëTxPackë
 )–c⁄° *
	mbuf„r
, 
uöt16_t
 
	msize
 );

55 
uöt32_t
 ( *
Pro˚ss
 )( );

56 }
	ttRadioDrivî
;

64 
tRadioDrivî
* 
RadioDrivîInô
( );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1232-Hal.h

21 #i‚de‡
__SX1232_HAL_H__


22 
	#__SX1232_HAL_H__


	)

24 
	~"i€.h
"

28 
	#DIO0
 
	`SX1232RódDio0
–)

	)

29 
	#DIO1
 
	`SX1232RódDio1
–)

	)

30 
	#DIO2
 
	`SX1232RódDio2
–)

	)

31 
	#DIO3
 
	`SX1232RódDio3
–)

	)

32 
	#DIO4
 
	`SX1232RódDio4
–)

	)

33 
	#DIO5
 
	`SX1232RódDio5
–)

	)

36 
	#GET_TICK_COUNT
–Ë–
TickCou¡î
 )

	)

37 
	#TICK_RATE_MS
–
ms
 ) ( m†)

	)

41 
	mRADIO_RESET_OFF
,

42 
	mRADIO_RESET_ON
,

43 }
	ttRadioRe£tSèã
;

48 
SX1232InôIo
( );

55 
SX1232SëRe£t
–
uöt8_t
 
°©e
 );

63 
SX1232Wrôe
–
uöt8_t
 
addr
, uöt8_à
d©a
 );

71 
SX1232Ród
–
uöt8_t
 
addr
, uöt8_à*
d©a
 );

80 
SX1232WrôeBuf„r
–
uöt8_t
 
addr
, uöt8_à*
buf„r
, uöt8_à
size
 );

89 
SX1232RódBuf„r
–
uöt8_t
 
addr
, uöt8_à*
buf„r
, uöt8_à
size
 );

97 
SX1232WrôeFifo
–
uöt8_t
 *
buf„r
, uöt8_à
size
 );

105 
SX1232RódFifo
–
uöt8_t
 *
buf„r
, uöt8_à
size
 );

112 
ölöe
 
uöt8_t
 
SX1232RódDio0
( );

119 
ölöe
 
uöt8_t
 
SX1232RódDio1
( );

126 
ölöe
 
uöt8_t
 
SX1232RódDio2
( );

133 
ölöe
 
uöt8_t
 
SX1232RódDio3
( );

140 
ölöe
 
uöt8_t
 
SX1232RódDio4
( );

147 
ölöe
 
uöt8_t
 
SX1232RódDio5
( );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1232-Misc.c

29 
	~<m©h.h
>

31 
	~"∂©f‹m.h
"

33 #i‡
deföed
–
USE_SX1232_RADIO
 )

35 
	~"sx1232-HÆ.h
"

36 
	~"sx1232.h
"

38 
	~"sx1232-Misc.h
"

40 
tFskSëtögs
 
FskSëtögs
;

42 
	$SX1232SëRFFªquícy
–
uöt32_t
 
‰eq
 )

44 
FskSëtögs
.
RFFªquícy
 = 
‰eq
;

46 
‰eq
 = ( 
uöt32_t
 )––)‰eq / ( )
FREQ_STEP
 );

47 
SX1232
->
RegFrfMsb
 = ( 
uöt8_t
 )––
‰eq
 >> 16 ) & 0xFF );

48 
SX1232
->
RegFrfMid
 = ( 
uöt8_t
 )––
‰eq
 >> 8 ) & 0xFF );

49 
SX1232
->
RegFrfLsb
 = ( 
uöt8_t
 )–
‰eq
 & 0xFF );

50 
	`SX1232WrôeBuf„r
–
REG_FRFMSB
, &
SX1232
->
RegFrfMsb
, 3 );

51 
	}
}

53 
uöt32_t
 
	$SX1232GëRFFªquícy
( )

55 
	`SX1232RódBuf„r
–
REG_FRFMSB
, &
SX1232
->
RegFrfMsb
, 3 );

56 
FskSëtögs
.
RFFªquícy
 = ( ( 
uöt32_t
 )
SX1232
->
RegFrfMsb
 << 16 ) | ( ( uöt32_à)SX1232->
RegFrfMid
 << 8 ) | ( ( uöt32_à)SX1232->
RegFrfLsb
 );

57 
FskSëtögs
.
RFFªquícy
 = ( 
uöt32_t
 )––)FskSëtögs.RFFªquícy * ( )
FREQ_STEP
 );

59  
FskSëtögs
.
RFFªquícy
;

60 
	}
}

62 
	$SX1232RxCÆibøã
( )

65 
	`SX1232Wrôe
–
REG_RSSICONFIG
, 
RF_RSSICONFIG_OFFSET_P_00_DB
 |

66 
RF_RSSICONFIG_SMOOTHING_256
 );

68 
	`SX1232Wrôe
–
REG_IMAGECAL
, 
RF_IMAGECAL_AUTOIMAGECAL_OFF
 |

69 
RF_IMAGECAL_IMAGECAL_START
 |

70 
RF_IMAGECAL_TEMPTHRESHOLD_10
 |

71 
RF_IMAGECAL_TEMPMONITOR_OFF
 );

74 
uöt32_t
 
°¨tTick
 = 
	`GET_TICK_COUNT
( );

75  ( 
	`GET_TICK_COUNT
–Ë- 
°¨tTick
 ) < 
	`TICK_RATE_MS
( 8 ) );

77 
	`SX1232Wrôe
–
REG_RSSICONFIG
, 
RF_RSSICONFIG_OFFSET_P_00_DB
 |

78 
RF_RSSICONFIG_SMOOTHING_16
 );

79 
	}
}

81 
	$SX1232SëBôøã
–
uöt32_t
 
bôøã
 )

83 
FskSëtögs
.
Bôøã
 = 
bôøã
;

85 
bôøã
 = ( 
uöt16_t
 )––)
XTAL_FREQ
 / ( )bitrate );

86 
SX1232
->
RegBôøãMsb
 = ( 
uöt8_t
 )–
bôøã
 >> 8 );

87 
SX1232
->
RegBôøãLsb
 = ( 
uöt8_t
 )–
bôøã
 & 0xFF );

88 
	`SX1232WrôeBuf„r
–
REG_BITRATEMSB
, &
SX1232
->
RegBôøãMsb
, 2 );

89 
	}
}

91 
uöt32_t
 
	$SX1232GëBôøã
( )

93 
	`SX1232RódBuf„r
–
REG_BITRATEMSB
, &
SX1232
->
RegBôøãMsb
, 2 );

94 
FskSëtögs
.
Bôøã
 = ( ( ( 
uöt32_t
 )
SX1232
->
RegBôøãMsb
 << 8 ) | ( ( uöt32_à)SX1232->
RegBôøãLsb
 ) );

95 
FskSëtögs
.
Bôøã
 = ( 
uöt16_t
 )––)
XTAL_FREQ
 / ( )FskSettings.Bitrate );

97  
FskSëtögs
.
Bôøã
;

98 
	}
}

100 
	$SX1232SëFdev
–
uöt32_t
 
fdev
 )

102 
FskSëtögs
.
Fdev
 = 
fdev
;

104 
fdev
 = ( 
uöt16_t
 )––)fdev / ( )
FREQ_STEP
 );

105 
SX1232
->
RegFdevMsb
 = ( 
uöt8_t
 )–
fdev
 >> 8 );

106 
SX1232
->
RegFdevLsb
 = ( 
uöt8_t
 )–
fdev
 & 0xFF );

107 
	`SX1232WrôeBuf„r
–
REG_FDEVMSB
, &
SX1232
->
RegFdevMsb
, 2 );

108 
	}
}

110 
uöt32_t
 
	$SX1232GëFdev
( )

112 
	`SX1232RódBuf„r
–
REG_FDEVMSB
, &
SX1232
->
RegFdevMsb
, 2 );

113 
FskSëtögs
.
Fdev
 = ( ( ( 
uöt32_t
 )
SX1232
->
RegFdevMsb
 << 8 ) | ( ( uöt32_à)SX1232->
RegFdevLsb
 ) );

114 
FskSëtögs
.
Fdev
 = ( 
uöt16_t
 )––)FskSëtögs.Fdev * ( )
FREQ_STEP
 );

116  
FskSëtögs
.
Fdev
;

117 
	}
}

119 
	$SX1232SëRFPowî
–
öt8_t
 
powî
 )

121 
	`SX1232Ród
–
REG_PACONFIG
, &
SX1232
->
RegPaC⁄fig
 );

122 
	`SX1232Ród
–
REG_PADAC
, &
SX1232
->
RegPaDac
 );

124 if––
SX1232
->
RegPaC⁄fig
 & 
RF_PACONFIG_PASELECT_PABOOST
 ) == RF_PACONFIG_PASELECT_PABOOST )

126 if––
SX1232
->
RegPaDac
 & 0x07 ) == 0x07 )

128 if–
powî
 < 5 )

130 
powî
 = 5;

132 if–
powî
 > 20 )

134 
powî
 = 20;

136 
SX1232
->
RegPaC⁄fig
 = ( SX1232->RegPaC⁄fig & 
RF_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 - 5 ) & 0x0F );

140 if–
powî
 < 2 )

142 
powî
 = 2;

144 if–
powî
 > 17 )

146 
powî
 = 17;

148 
SX1232
->
RegPaC⁄fig
 = ( SX1232->RegPaC⁄fig & 
RF_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 - 2 ) & 0x0F );

153 if–
powî
 < -1 )

155 
powî
 = -1;

157 if–
powî
 > 14 )

159 
powî
 = 14;

161 
SX1232
->
RegPaC⁄fig
 = ( SX1232->RegPaC⁄fig & 
RF_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 + 1 ) & 0x0F );

163 
	`SX1232Wrôe
–
REG_PACONFIG
, 
SX1232
->
RegPaC⁄fig
 );

164 
FskSëtögs
.
Powî
 = 
powî
;

165 
	}
}

167 
öt8_t
 
	$SX1232GëRFPowî
( )

169 
	`SX1232Ród
–
REG_PACONFIG
, &
SX1232
->
RegPaC⁄fig
 );

170 
	`SX1232Ród
–
REG_PADAC
, &
SX1232
->
RegPaDac
 );

172 if––
SX1232
->
RegPaC⁄fig
 & 
RF_PACONFIG_PASELECT_PABOOST
 ) == RF_PACONFIG_PASELECT_PABOOST )

174 if––
SX1232
->
RegPaDac
 & 0x07 ) == 0x07 )

176 
FskSëtögs
.
Powî
 = 5 + ( 
SX1232
->
RegPaC⁄fig
 & 
RF_PACONFIG_OUTPUTPOWER_MASK
 );

180 
FskSëtögs
.
Powî
 = 2 + ( 
SX1232
->
RegPaC⁄fig
 & 
RF_PACONFIG_OUTPUTPOWER_MASK
 );

185 
FskSëtögs
.
Powî
 = -1 + ( 
SX1232
->
RegPaC⁄fig
 & 
RF_PACONFIG_OUTPUTPOWER_MASK
 );

187  
FskSëtögs
.
Powî
;

188 
	}
}

197 
uöt32_t
 
	$SX1232CompuãRxBw
–
uöt8_t
 
m™tis£
, uöt8_à
exp⁄ít
 )

200 if––
SX1232
->
RegOpMode
 & 
RF_OPMODE_MODULATIONTYPE_FSK
 ) == RF_OPMODE_MODULATIONTYPE_FSK )

202  ( 
uöt32_t
 )––)
XTAL_FREQ
 / ( 
m™tis£
 * ( )
	`pow
–2, 
exp⁄ít
 + 2 ) ) );

206  ( 
uöt32_t
 )––)
XTAL_FREQ
 / ( 
m™tis£
 * ( )
	`pow
–2, 
exp⁄ít
 + 3 ) ) );

208 
	}
}

217 
	$SX1232CompuãRxBwM™tExp
–
uöt32_t
 
rxBwVÆue
, 
uöt8_t
* 
m™tis£
, uöt8_t* 
exp⁄ít
 )

219 
uöt8_t
 
tmpExp
 = 0;

220 
uöt8_t
 
tmpM™t
 = 0;

222 
tmpRxBw
 = 0;

223 
rxBwMö
 = 10e6;

225  
tmpExp
 = 0;ÅmpExp < 8;ÅmpExp++ )

227  
tmpM™t
 = 16;ÅmpMant <= 24;ÅmpMant += 4 )

229 if––
SX1232
->
RegOpMode
 & 
RF_OPMODE_MODULATIONTYPE_FSK
 ) == RF_OPMODE_MODULATIONTYPE_FSK )

231 
tmpRxBw
 = ( )
XTAL_FREQ
 / ( 
tmpM™t
 * ( )
	`pow
–2, 
tmpExp
 + 2 ) );

235 
tmpRxBw
 = ( )
XTAL_FREQ
 / ( 
tmpM™t
 * ( )
	`pow
–2, 
tmpExp
 + 3 ) );

237 if–
	`Ábs
–
tmpRxBw
 - 
rxBwVÆue
 ) < 
rxBwMö
 )

239 
rxBwMö
 = 
	`Ábs
–
tmpRxBw
 - 
rxBwVÆue
 );

240 *
m™tis£
 = 
tmpM™t
;

241 *
exp⁄ít
 = 
tmpExp
;

245 
	}
}

247 
	$SX1232SëDccBw
–
uöt8_t
* 
ªg
, 
uöt32_t
 
dccVÆue
, uöt32_à
rxBwVÆue
 )

249 
uöt8_t
 
m™tis£
 = 0;

250 
uöt8_t
 
exp⁄ít
 = 0;

252 if–
ªg
 =&
SX1232
->
RegRxBw
 )

254 *
ªg
 = ( 
uöt8_t
 )
dccVÆue
 & 0x60;

258 *
ªg
 = 0;

261 
	`SX1232CompuãRxBwM™tExp
–
rxBwVÆue
, &
m™tis£
, &
exp⁄ít
 );

263  
m™tis£
 )

266 *
ªg
 |–
uöt8_t
 )–0x00 | ( 
exp⁄ít
 & 0x07 ) );

269 *
ªg
 |–
uöt8_t
 )–0x08 | ( 
exp⁄ít
 & 0x07 ) );

272 *
ªg
 |–
uöt8_t
 )–0x10 | ( 
exp⁄ít
 & 0x07 ) );

279 if–
ªg
 =&
SX1232
->
RegRxBw
 )

281 
	`SX1232Wrôe
–
REG_RXBW
, *
ªg
 );

282 
FskSëtögs
.
RxBw
 = 
rxBwVÆue
;

286 
	`SX1232Wrôe
–
REG_AFCBW
, *
ªg
 );

287 
FskSëtögs
.
RxBwAfc
 = 
rxBwVÆue
;

289 
	}
}

291 
uöt32_t
 
	$SX1232GëBw
–
uöt8_t
* 
ªg
 )

293 
uöt32_t
 
rxBwVÆue
 = 0;

294 
uöt8_t
 
m™tis£
 = 0;

295  ( *
ªg
 & 0x18 ) >> 3 )

298 
m™tis£
 = 16;

301 
m™tis£
 = 20;

304 
m™tis£
 = 24;

309 
rxBwVÆue
 = 
	`SX1232CompuãRxBw
–
m™tis£
, ( 
uöt8_t
 )*
ªg
 & 0x07 );

310 if–
ªg
 =&
SX1232
->
RegRxBw
 )

312  
FskSëtögs
.
RxBw
 = 
rxBwVÆue
;

316  
FskSëtögs
.
RxBwAfc
 = 
rxBwVÆue
;

318 
	}
}

320 
	$SX1232SëPackëCrcOn
–
boﬁ
 
íabÀ
 )

322 
	`SX1232Ród
–
REG_PACKETCONFIG1
, &
SX1232
->
RegPackëC⁄fig1
 );

323 
SX1232
->
RegPackëC⁄fig1
 = ( SX1232->RegPackëC⁄fig1 & 
RF_PACKETCONFIG1_CRC_MASK
 ) | ( 
íabÀ
 << 4 );

324 
	`SX1232Wrôe
–
REG_PACKETCONFIG1
, 
SX1232
->
RegPackëC⁄fig1
 );

325 
FskSëtögs
.
CrcOn
 = 
íabÀ
;

326 
	}
}

328 
boﬁ
 
	$SX1232GëPackëCrcOn
( )

330 
	`SX1232Ród
–
REG_PACKETCONFIG1
, &
SX1232
->
RegPackëC⁄fig1
 );

331 
FskSëtögs
.
CrcOn
 = ( 
SX1232
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_CRC_ON
 ) >> 4;

332  
FskSëtögs
.
CrcOn
;

333 
	}
}

335 
	$SX1232SëAfcOn
–
boﬁ
 
íabÀ
 )

337 
	`SX1232Ród
–
REG_RXCONFIG
, &
SX1232
->
RegRxC⁄fig
 );

338 
SX1232
->
RegRxC⁄fig
 = ( SX1232->RegRxC⁄fig & 
RF_RXCONFIG_AFCAUTO_MASK
 ) | ( 
íabÀ
 << 4 );

339 
	`SX1232Wrôe
–
REG_RXCONFIG
, 
SX1232
->
RegRxC⁄fig
 );

340 
FskSëtögs
.
AfcOn
 = 
íabÀ
;

341 
	}
}

343 
boﬁ
 
	$SX1232GëAfcOn
( )

345 
	`SX1232Ród
–
REG_RXCONFIG
, &
SX1232
->
RegRxC⁄fig
 );

346 
FskSëtögs
.
AfcOn
 = ( 
SX1232
->
RegRxC⁄fig
 & 
RF_RXCONFIG_AFCAUTO_ON
 ) >> 4;

347  
FskSëtögs
.
AfcOn
;

348 
	}
}

350 
	$SX1232SëPaylﬂdLígth
–
uöt8_t
 
vÆue
 )

352 
SX1232
->
RegPaylﬂdLígth
 = 
vÆue
;

353 
	`SX1232Wrôe
–
REG_PAYLOADLENGTH
, 
SX1232
->
RegPaylﬂdLígth
 );

354 
FskSëtögs
.
PaylﬂdLígth
 = 
vÆue
;

355 
	}
}

357 
uöt8_t
 
	$SX1232GëPaylﬂdLígth
( )

359 
	`SX122Ród
–
REG_PAYLOADLENGTH
, &
SX1232
->
RegPaylﬂdLígth
 );

360 
FskSëtögs
.
PaylﬂdLígth
 = 
SX1232
->
RegPaylﬂdLígth
;

361  
FskSëtögs
.
PaylﬂdLígth
;

362 
	}
}

364 
	$SX1232SëPa20dBm
–
boﬁ
 
íÆe
 )

366 
	`SX1232Ród
–
REG_PADAC
, &
SX1232
->
RegPaDac
 );

368 if–
íÆe
 =
åue
 )

370 
SX1232
->
RegPaDac
 = 0x87;

374 
SX1232
->
RegPaDac
 = 0x84;

376 
	`SX1232Wrôe
–
REG_PADAC
, 
SX1232
->
RegPaDac
 );

377 
	}
}

379 
boﬁ
 
	$SX1232GëPa20dBm
( )

381 
	`SX1232Ród
–
REG_PADAC
, &
SX1232
->
RegPaDac
 );

383  ( ( 
SX1232
->
RegPaDac
 & 0x07 ) =0x07 ) ? 
åue
 : 
Ál£
;

384 
	}
}

386 
	$SX1232SëPaRamp
–
uöt8_t
 
vÆue
 )

388 
	`SX1232Ród
–
REG_PARAMP
, &
SX1232
->
RegPaRamp
 );

389 
SX1232
->
RegPaRamp
 = ( SX1232->RegPaRam∞& 
RF_PARAMP_MASK
 ) | ( 
vÆue
 & ~RF_PARAMP_MASK );

390 
	`SX1232Wrôe
–
REG_PARAMP
, 
SX1232
->
RegPaRamp
 );

391 
	}
}

393 
uöt8_t
 
	$SX1232GëPaRamp
( )

395 
	`SX1232Ród
–
REG_PARAMP
, &
SX1232
->
RegPaRamp
 );

396  
SX1232
->
RegPaRamp
 & ~
RF_PARAMP_MASK
;

397 
	}
}

399 
	$SX1232SëRssiOff£t
–
öt8_t
 
off£t
 )

401 
	`SX1232Ród
–
REG_RSSICONFIG
, &
SX1232
->
RegRssiC⁄fig
 );

402 if–
off£t
 < 0 )

404 
off£t
 = ( ~offset & 0x1F );

405 
off£t
 += 1;

406 
off£t
 = -offset;

408 
SX1232
->
RegRssiC⁄fig
 |–
uöt8_t
 )––
off£t
 & 0x1F ) << 3 );

409 
	`SX1232Wrôe
–
REG_RSSICONFIG
, 
SX1232
->
RegRssiC⁄fig
 );

410 
	}
}

412 
öt8_t
 
	$SX1232GëRssiOff£t
( )

414 
	`SX1232Ród
–
REG_RSSICONFIG
, &
SX1232
->
RegRssiC⁄fig
 );

415 
öt8_t
 
off£t
 = 
SX1232
->
RegRssiC⁄fig
 >> 3;

416 if––
off£t
 & 0x10 ) == 0x10 )

418 
off£t
 = ( ~offset & 0x1F );

419 
off£t
 += 1;

420 
off£t
 = -offset;

422  
off£t
;

423 
	}
}

425 
öt8_t
 
	$SX1232GëRawTemp
( )

427 
öt8_t
 
ãmp
 = 0;

428 
uöt8_t
 
ªgVÆue
 = 0;

430 
	`SX1232Ród
–
REG_TEMP
, &
SX1232
->
RegTemp
 );

432 
ãmp
 = 
ªgVÆue
 & 0x7F;

434 if––
ªgVÆue
 & 0x80 ) == 0x80 )

436 
ãmp
 *= -1;

438  
ãmp
;

439 
	}
}

441 
öt8_t
 
	$SX1232CÆibª©eTemp
–
öt8_t
 
a˘uÆTemp
 )

443  
a˘uÆTemp
 - 
	`SX1232GëRawTemp
( );

444 
	}
}

446 
öt8_t
 
	$SX1232GëTemp
–
öt8_t
 
com≥nßti⁄Fa˘‹
 )

448  
	`SX1232GëRawTemp
–Ë+ 
com≥nßti⁄Fa˘‹
;

449 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1232-Misc.h

29 #i‚de‡
__SX1232_MISC_H__


30 
	#__SX1232_MISC_H__


	)

37 
SX1232SëRFFªquícy
–
uöt32_t
 
‰eq
 );

44 
uöt32_t
 
SX1232GëRFFªquícy
( );

51 
SX1232SëBôøã
–
uöt32_t
 
bôøã
 );

58 
uöt32_t
 
SX1232GëBôøã
( );

65 
SX1232SëFdev
–
uöt32_t
 
fdev
 );

72 
uöt32_t
 
SX1232GëFdev
( );

79 
SX1232SëRFPowî
–
öt8_t
 
powî
 );

86 
öt8_t
 
SX1232GëRFPowî
( );

98 
SX1232SëDccBw
–
uöt8_t
* 
ªg
, 
uöt32_t
 
dccVÆue
, uöt32_à
rxBwVÆue
 );

107 
uöt32_t
 
SX1232GëBw
–
uöt8_t
* 
ªg
 );

114 
SX1232SëPackëCrcOn
–
boﬁ
 
íabÀ
 );

121 
boﬁ
 
SX1232GëPackëCrcOn
( );

128 
SX1232SëAfcOn
–
boﬁ
 
íabÀ
 );

135 
boﬁ
 
SX1232GëAfcOn
( );

142 
SX1232SëPaylﬂdLígth
–
uöt8_t
 
vÆue
 );

149 
uöt8_t
 
SX1232GëPaylﬂdLígth
( );

156 
SX1232SëPa20dBm
–
boﬁ
 
íÆe
 );

163 
boﬁ
 
SX1232GëPa20dBm
( );

170 
SX1232SëPaRamp
–
uöt8_t
 
vÆue
 );

177 
uöt8_t
 
SX1232GëPaRamp
( );

184 
SX1232SëRssiOff£t
–
öt8_t
 
off£t
 );

191 
öt8_t
 
SX1232GëRssiOff£t
( );

198 
SX1232SëPªambÀSize
–
uöt16_t
 
size
 );

204 
öt8_t
 
SX1232GëRawTemp
( );

211 
öt8_t
 
SX1232CÆibª©eTemp
–öt8_à
a˘uÆTemp
 );

218 
öt8_t
 
SX1232GëTemp
–öt8_à
com≥nßti⁄Fa˘‹
 );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1232.c

21 
	~<°rög.h
>

22 
	~<m©h.h
>

24 
	~"∂©f‹m.h
"

26 #i‡
deföed
–
USE_SX1232_RADIO
 )

28 
	~"ødio.h
"

30 
	~"sx1232-HÆ.h
"

31 
	~"sx1232.h
"

33 
	~"sx1232-Misc.h
"

36 
tFskSëtögs
 
	gFskSëtögs
 =

44 
åue
,

45 
åue
,

52 
tSX1232
* 
	gSX1232
;

53 
uöt8_t
 
	gSX1232Regs
[0x70];

59 
uöt8_t
 
	gRFBuf„r
[
RF_BUFFER_SIZE
];

64 
uöt8_t
 
	gD©aChunkSize
 = 32;

70 
uöt8_t
 
	gRFSèã
 = 
RF_STATE_IDLE
;

86 
uöt32_t
 
	gPackëTimeout
;

93 
uöt32_t
 
	gPªambÀ2SyncTimeout
;

95 
boﬁ
 
	gPªambÀDëe˘ed
 = 
Ál£
;

96 
boﬁ
 
	gSyncW‹dDëe˘ed
 = 
Ál£
;

97 
boﬁ
 
	gPackëDëe˘ed
 = 
Ál£
;

98 
uöt16_t
 
	gRxPackëSize
 = 0;

99 
uöt8_t
 
	gRxByãsRód
 = 0;

100 
uöt8_t
 
	gTxByãsSít
 = 0;

101 
	gRxPackëRssiVÆue
;

102 
uöt32_t
 
	gRxPackëAfcVÆue
;

103 
uöt8_t
 
	gRxGaö
 = 1;

104 
uöt32_t
 
	gRxTimeoutTimî
 = 0;

105 
uöt32_t
 
	gPªambÀ2SyncTimî
 = 0;

110 
uöt16_t
 
	gTxPackëSize
 = 0;

111 
uöt32_t
 
	gTxTimeoutTimî
 = 0;

113 
	$SX1232Inô
( )

115 
RFSèã
 = 
RF_STATE_IDLE
;

117 
SX1232
 = ( 
tSX1232
* )
SX1232Regs
;

119 
	`SX1232InôIo
( );

121 
	`SX1232Re£t
( );

123 
	`SX1232SëDeÁu…s
( );

125 
	`SX1232RódBuf„r
–
REG_OPMODE
, 
SX1232Regs
 + 1, 0x70 - 1 );

128 
	`SX1232RxCÆibøã
( );

131 
SX1232
->
RegOpMode
 = 
RF_OPMODE_MODULATIONTYPE_FSK
 | 
RF_OPMODE_SLEEP
;

132 
	`SX1232Wrôe
–
REG_OPMODE
, 
SX1232
->
RegOpMode
 );

135 
SX1232
->
RegPaC⁄fig
 = ( SX1232->RegPaC⁄fig & 
RF_PACONFIG_PASELECT_PABOOST
 ) | RF_PACONFIG_PASELECT_PABOOST;

137 
SX1232
->
RegL«
 = 
RF_LNA_GAIN_G1
 | 
RF_LNA_BOOST_ON
;

139 if–
FskSëtögs
.
AfcOn
 =
åue
 )

141 
SX1232
->
RegRxC⁄fig
 = 
RF_RXCONFIG_RESTARTRXONCOLLISION_OFF
 | 
RF_RXCONFIG_AFCAUTO_ON
 |

142 
RF_RXCONFIG_AGCAUTO_ON
 | 
RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT
;

146 
SX1232
->
RegRxC⁄fig
 = 
RF_RXCONFIG_RESTARTRXONCOLLISION_OFF
 | 
RF_RXCONFIG_AFCAUTO_OFF
 |

147 
RF_RXCONFIG_AGCAUTO_ON
 | 
RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT
;

150 
SX1232
->
RegPªambÀLsb
 = 8;

152 
SX1232
->
RegPªambÀDëe˘
 = 
RF_PREAMBLEDETECT_DETECTOR_ON
 | 
RF_PREAMBLEDETECT_DETECTORSIZE_2
 |

153 
RF_PREAMBLEDETECT_DETECTORTOL_10
;

155 
SX1232
->
RegRssiThªsh
 = 0xFF;

157 
SX1232
->
RegSyncC⁄fig
 = 
RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_ON
 | 
RF_SYNCCONFIG_PREAMBLEPOLARITY_AA
 |

158 
RF_SYNCCONFIG_SYNC_ON
 | 
RF_SYNCCONFIG_FIFOFILLCONDITION_AUTO
 |

159 
RF_SYNCCONFIG_SYNCSIZE_4
;

161 
SX1232
->
RegSyncVÆue1
 = 0x69;

162 
SX1232
->
RegSyncVÆue2
 = 0x81;

163 
SX1232
->
RegSyncVÆue3
 = 0x7E;

164 
SX1232
->
RegSyncVÆue4
 = 0x96;

166 
SX1232
->
RegPackëC⁄fig1
 = 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 | 
RF_PACKETCONFIG1_DCFREE_OFF
 |

167 –
FskSëtögs
.
CrcOn
 << 4 ) | 
RF_PACKETCONFIG1_CRCAUTOCLEAR_ON
 |

168 
RF_PACKETCONFIG1_ADDRSFILTERING_OFF
 | 
RF_PACKETCONFIG1_CRCWHITENINGTYPE_CCITT
;

169 
	`SX1232GëPackëCrcOn
( );

171 
SX1232
->
RegPaylﬂdLígth
 = 
FskSëtögs
.
PaylﬂdLígth
;

174 
	`SX1232WrôeBuf„r
–
REG_OPMODE
, 
SX1232Regs
 + 1, 0x70 - 1 );

177 
	`SX1232SëRFFªquícy
–
FskSëtögs
.
RFFªquícy
 );

178 
	`SX1232SëBôøã
–
FskSëtögs
.
Bôøã
 );

179 
	`SX1232SëFdev
–
FskSëtögs
.
Fdev
 );

180 
	`SX1232SëPa20dBm
–
åue
 );

181 
	`SX1232SëRFPowî
–
FskSëtögs
.
Powî
 );

182 
	`SX1232SëDccBw
–&
SX1232
->
RegRxBw
, 0, 
FskSëtögs
.
RxBw
 );

183 
	`SX1232SëDccBw
–&
SX1232
->
RegAfcBw
, 0, 
FskSëtögs
.
RxBwAfc
 );

184 
	`SX1232SëRssiOff£t
( -6 );

186 
	`SX1232SëOpMode
–
RF_OPMODE_STANDBY
 );

187 
	}
}

189 
	$SX1232SëDeÁu…s
( )

193 
uöt8_t
 
SyncW‹d
[] = { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };

195 
	`SX1232Ród
–
REG_VERSION
, &
SX1232
->
RegVîsi⁄
 );

197 
	`SX1232Wrôe
–
REG_RXCONFIG
, 0x0E );

198 
	`SX1232Wrôe
–
REG_PREAMBLEDETECT
, 0xAA );

199 
	`SX1232Wrôe
–
REG_OSC
, 0x07 );

201 
	`SX1232WrôeBuf„r
–
REG_SYNCVALUE1
, 
SyncW‹d
, 8 );

203 
	`SX1232Wrôe
–
REG_FIFOTHRESH
, 0x8F );

205 
	`SX1232Wrôe
–
REG_IMAGECAL
, 0x02 );

206 
	}
}

208 
	$SX1232Re£t
( )

210 
	`SX1232SëRe£t
–
RADIO_RESET_ON
 );

213 
uöt32_t
 
°¨tTick
 = 
	`GET_TICK_COUNT
( );

214  ( 
	`GET_TICK_COUNT
–Ë- 
°¨tTick
 ) < 
	`TICK_RATE_MS
( 1 ) );

216 
	`SX1232SëRe£t
–
RADIO_RESET_OFF
 );

219 
°¨tTick
 = 
	`GET_TICK_COUNT
( );

220  ( 
	`GET_TICK_COUNT
–Ë- 
°¨tTick
 ) < 
	`TICK_RATE_MS
( 6 ) );

221 
	}
}

223 
	$SX1232SëOpMode
–
uöt8_t
 
›Mode
 )

225 
uöt8_t
 
›ModePªv
 = 
RF_OPMODE_STANDBY
;

227 
›ModePªv
 = 
SX1232
->
RegOpMode
 & ~
RF_OPMODE_MASK
;

229 if–
›Mode
 !
›ModePªv
 )

231 
SX1232
->
RegOpMode
 = ( SX1232->RegOpModê& 
RF_OPMODE_MASK
 ) | 
›Mode
;

233 
	`SX1232Wrôe
–
REG_OPMODE
, 
SX1232
->
RegOpMode
 );

235 
	}
}

237 
uöt8_t
 
	$SX1232GëOpMode
( )

239 
	`SX1232Ród
–
REG_OPMODE
, &
SX1232
->
RegOpMode
 );

241  
SX1232
->
RegOpMode
 & ~
RF_OPMODE_MASK
;

242 
	}
}

244 
öt32_t
 
	$SX1232RódFei
( )

246 
	`SX1232RódBuf„r
–
REG_FEIMSB
, &
SX1232
->
RegFeiMsb
, 2 );

248  ( 
öt32_t
 )–)–––
uöt16_t
 )
SX1232
->
RegFeiMsb
 << 8 ) | ( uöt16_à)SX1232->
RegFeiLsb
 ) * ( )
FREQ_STEP
;

249 
	}
}

251 
öt32_t
 
	$SX1232RódAfc
( )

253 
	`SX1232RódBuf„r
–
REG_AFCMSB
, &
SX1232
->
RegAfcMsb
, 2 );

254  ( 
öt32_t
 )–)–––
uöt16_t
 )
SX1232
->
RegAfcMsb
 << 8 ) | ( uöt16_à)SX1232->
RegAfcLsb
 ) * ( )
FREQ_STEP
;

255 
	}
}

257 
uöt8_t
 
	$SX1232RódRxGaö
( )

259 
	`SX1232Ród
–
REG_LNA
, &
SX1232
->
RegL«
 );

260 –
SX1232
->
RegL«
 >> 5 ) & 0x07;

261 
	}
}

263 
	$SX1232RódRssi
( )

265 
	`SX1232Ród
–
REG_RSSIVALUE
, &
SX1232
->
RegRssiVÆue
 );

267  -–)––)
SX1232
->
RegRssiVÆue
 / 2.0 );

268 
	}
}

270 
uöt8_t
 
	$SX1232GëPackëRxGaö
( )

272  
RxGaö
;

273 
	}
}

275 
	$SX1232GëPackëRssi
( )

277  
RxPackëRssiVÆue
;

278 
	}
}

280 
uöt32_t
 
	$SX1232GëPackëAfc
( )

282  
RxPackëAfcVÆue
;

283 
	}
}

285 
	$SX1232SèπRx
( )

287 
	`SX1232SëRFSèã
–
RF_STATE_RX_INIT
 );

288 
	}
}

290 
	$SX1232GëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 )

292 *
size
 = 
RxPackëSize
;

293 
RxPackëSize
 = 0;

294 
	`mem˝y
––* )
buf„r
, ( * )
RFBuf„r
, ( 
size_t
 )*
size
 );

295 
	}
}

297 
	$SX1232SëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 )

299 
TxPackëSize
 = 
size
;

300 
	`mem˝y
––* )
RFBuf„r
, 
buf„r
, ( 
size_t
 )
TxPackëSize
 );

302 
RFSèã
 = 
RF_STATE_TX_INIT
;

303 
	}
}

306 
uöt16_t
 
	$SX1232GëPackëPaylﬂdSize
( )

308 
uöt16_t
 
syncSize
;

309 
uöt16_t
 
v¨übÀSize
;

310 
uöt16_t
 
addªssSize
;

311 
uöt16_t
 
∑ylﬂdSize
;

312 
uöt16_t
 
¸cSize
;

314 
syncSize
 = ( 
SX1232
->
RegSyncC⁄fig
 & 0x07 ) + 1;

315 
v¨übÀSize
 = ( ( 
SX1232
->
RegPackëC⁄fig1
 & 0x80 ) == 0x80 ) ? 1 : 0;

316 
addªssSize
 = ( ( 
SX1232
->
RegPackëC⁄fig1
 & 0x06 ) != 0x00 ) ? 1 : 0;

317 
∑ylﬂdSize
 = 
SX1232
->
RegPaylﬂdLígth
;

318 
¸cSize
 = ( ( 
SX1232
->
RegPackëC⁄fig1
 & 0x10 ) == 0x10 ) ? 2 : 0;

320  
syncSize
 + 
v¨übÀSize
 + 
addªssSize
 + 
∑ylﬂdSize
 + 
¸cSize
;

321 
	}
}

324 
uöt16_t
 
	$SX1232GëPackëHódîSize
( )

326 
uöt16_t
 
¥ómbÀSize
;

327 
uöt16_t
 
syncSize
;

329 
¥ómbÀSize
 = ( ( 
uöt16_t
 )
SX1232
->
RegPªambÀMsb
 << 8 ) | ( uöt16_à)SX1232->
RegPªambÀLsb
;

330 
syncSize
 = ( 
SX1232
->
RegSyncC⁄fig
 & 0x07 ) + 1;

332  
¥ómbÀSize
 + 
syncSize
;

333 
	}
}

335 
uöt8_t
 
	$SX1232FskGëRFSèã
( )

337  
RFSèã
;

338 
	}
}

340 
	$SX1232SëRFSèã
–
uöt8_t
 
°©e
 )

342 
RFSèã
 = 
°©e
;

343 
	}
}

345 
uöt32_t
 
	$SX1232Pro˚ss
( )

347 
uöt32_t
 
ªsu…
 = 
RF_BUSY
;

349  
RFSèã
 )

351 
RF_STATE_IDLE
:

354 
RF_STATE_RX_INIT
:

356 if––
SX1232
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_CRC_ON
 ) == RF_PACKETCONFIG1_CRC_ON )

359 
SX1232
->
RegDioM≠pög1
 = 
RF_DIOMAPPING1_DIO0_01
 | 
RF_DIOMAPPING1_DIO1_00
 | 
RF_DIOMAPPING1_DIO2_11
 | 
RF_DIOMAPPING1_DIO3_00
;

364 
SX1232
->
RegDioM≠pög1
 = 
RF_DIOMAPPING1_DIO0_00
 | 
RF_DIOMAPPING1_DIO1_00
 | 
RF_DIOMAPPING1_DIO2_11
 | 
RF_DIOMAPPING1_DIO3_00
;

367 
SX1232
->
RegDioM≠pög2
 = 
RF_DIOMAPPING2_DIO4_11
 | 
RF_DIOMAPPING2_DIO5_10
 | 
RF_DIOMAPPING2_MAP_PREAMBLEDETECT
;

368 
	`SX1232WrôeBuf„r
–
REG_DIOMAPPING1
, &
SX1232
->
RegDioM≠pög1
, 2 );

370 
	`SX1232SëOpMode
–
RF_OPMODE_RECEIVER
 );

372 
	`mem£t
–
RFBuf„r
, 0, ( 
size_t
 )
RF_BUFFER_SIZE
 );

374 
PackëTimeout
 = ( 
uöt16_t
 )–
	`round
––8.0 * ( ( )
	`SX1232GëPackëPaylﬂdSize
–ËË/ ( )
FskSëtögs
.
Bôøã
 ) * 1000.0 ) + 1.0 );

375 
PackëTimeout
 = PacketTimeout + ( PacketTimeout >> 1 );

377 
PªambÀ2SyncTimeout
 = 
PackëTimeout
;

379 
PªambÀ2SyncTimî
 = 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

381 
SX1232
->
RegFifoThªsh
 = 
RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY
 | 0x20;

382 
	`SX1232Wrôe
–
REG_FIFOTHRESH
, 
SX1232
->
RegFifoThªsh
 );

384 
PªambÀDëe˘ed
 = 
Ál£
;

385 
SyncW‹dDëe˘ed
 = 
Ál£
;

386 
PackëDëe˘ed
 = 
Ál£
;

387 
RxByãsRód
 = 0;

388 
RxPackëSize
 = 0;

389 
RFSèã
 = 
RF_STATE_RX_SYNC
;

391 
RF_STATE_RX_SYNC
:

392 if––
DIO4
 =1 ) && ( 
PªambÀDëe˘ed
 =
Ál£
 ) )

394 
PªambÀDëe˘ed
 = 
åue
;

395 
PªambÀ2SyncTimî
 = 
	`GET_TICK_COUNT
( );

397 if––
DIO2
 =1 ) && ( 
PªambÀDëe˘ed
 =
åue
 ) && ( 
SyncW‹dDëe˘ed
 =
Ál£
 ) )

399 
SyncW‹dDëe˘ed
 = 
åue
;

401 
RxPackëRssiVÆue
 = 
	`SX1232RódRssi
( );

403 
RxPackëAfcVÆue
 = 
	`SX1232RódAfc
( );

404 
RxGaö
 = 
	`SX1232RódRxGaö
( );

406 
PªambÀ2SyncTimî
 = 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

408 
RFSèã
 = 
RF_STATE_RX_RUNNING
;

412 if––
SyncW‹dDëe˘ed
 =
Ál£
 ) && ( 
PªambÀDëe˘ed
 =
åue
 ) && ( ( 
	`GET_TICK_COUNT
–Ë- 
PªambÀ2SyncTimî
 ) > 
PªambÀ2SyncTimeout
 ) )

414 
RFSèã
 = 
RF_STATE_RX_INIT
;

415 
	`SX1232Wrôe
–
REG_RXCONFIG
, 
SX1232
->
RegRxC⁄fig
 | 
RF_RXCONFIG_RESTARTRXWITHPLLLOCK
 );

417 if––
SyncW‹dDëe˘ed
 =
Ál£
 ) &&

418 –
PªambÀDëe˘ed
 =
Ál£
 ) &&

419 –
PackëDëe˘ed
 =
Ál£
 ) &&

420 ––
	`GET_TICK_COUNT
–Ë- 
RxTimeoutTimî
 ) > 
PackëTimeout
 ) )

422 
RFSèã
 = 
RF_STATE_RX_TIMEOUT
;

425 
RF_STATE_RX_RUNNING
:

426 if–
RxPackëSize
 > 
RF_BUFFER_SIZE_MAX
 )

428 
RFSèã
 = 
RF_STATE_RX_LEN_ERROR
;

432 if–
DIO1
 == 1 )

434 if––
RxPackëSize
 =0 ) && ( 
RxByãsRód
 == 0 ) )

436 if––
SX1232
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 ) == RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE )

438 
	`SX1232RódFifo
––
uöt8_t
* )&
RxPackëSize
, 1 );

442 
RxPackëSize
 = 
SX1232
->
RegPaylﬂdLígth
;

446 if––
RxPackëSize
 - 
RxByãsRód
 ) > ( 
SX1232
->
RegFifoThªsh
 & 0x3F ) )

448 
	`SX1232RódFifo
––
RFBuf„r
 + 
RxByãsRód
 ), ( 
SX1232
->
RegFifoThªsh
 & 0x3F ) );

449 
RxByãsRód
 +–
SX1232
->
RegFifoThªsh
 & 0x3F );

453 
	`SX1232RódFifo
––
RFBuf„r
 + 
RxByãsRód
 ), 
RxPackëSize
 - RxBytesRead );

454 
RxByãsRód
 +–
RxPackëSize
 - RxBytesRead );

458 if–
DIO0
 == 1 )

460 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

461 if––
RxPackëSize
 =0 ) && ( 
RxByãsRód
 == 0 ) )

463 if––
SX1232
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 ) == RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE )

465 
	`SX1232RódFifo
––
uöt8_t
* )&
RxPackëSize
, 1 );

469 
RxPackëSize
 = 
SX1232
->
RegPaylﬂdLígth
;

471 
	`SX1232RódFifo
–
RFBuf„r
 + 
RxByãsRód
, 
RxPackëSize
 - RxBytesRead );

472 
RxByãsRód
 +–
RxPackëSize
 - RxBytesRead );

473 
PackëDëe˘ed
 = 
åue
;

474 
RFSèã
 = 
RF_STATE_RX_DONE
;

478 
	`SX1232RódFifo
–
RFBuf„r
 + 
RxByãsRód
, 
RxPackëSize
 - RxBytesRead );

479 
RxByãsRód
 +–
RxPackëSize
 - RxBytesRead );

480 
PackëDëe˘ed
 = 
åue
;

481 
RFSèã
 = 
RF_STATE_RX_DONE
;

486 if––
PackëDëe˘ed
 =
Ál£
 ) && ( ( 
	`GET_TICK_COUNT
–Ë- 
RxTimeoutTimî
 ) > 
PackëTimeout
 ) )

488 
RFSèã
 = 
RF_STATE_RX_TIMEOUT
;

491 
RF_STATE_RX_DONE
:

492 
RxByãsRód
 = 0;

493 
RFSèã
 = 
RF_STATE_RX_INIT
;

494 
ªsu…
 = 
RF_RX_DONE
;

496 
RF_STATE_RX_TIMEOUT
:

497 
RxByãsRód
 = 0;

498 
RxPackëSize
 = 0;

499 
	`SX1232Wrôe
–
REG_RXCONFIG
, 
SX1232
->
RegRxC⁄fig
 | 
RF_RXCONFIG_RESTARTRXWITHPLLLOCK
 );

500 
RFSèã
 = 
RF_STATE_RX_INIT
;

501 
ªsu…
 = 
RF_RX_TIMEOUT
;

503 
RF_STATE_RX_LEN_ERROR
:

504 
RxByãsRód
 = 0;

505 
RxPackëSize
 = 0;

506 
	`SX1232Wrôe
–
REG_RXCONFIG
, 
SX1232
->
RegRxC⁄fig
 | 
RF_RXCONFIG_RESTARTRXWITHPLLLOCK
 );

507 
RFSèã
 = 
RF_STATE_RX_INIT
;

508 
ªsu…
 = 
RF_LEN_ERROR
;

511 
RF_STATE_TX_INIT
:

514 
SX1232
->
RegDioM≠pög1
 = 
RF_DIOMAPPING1_DIO0_00
 | 
RF_DIOMAPPING1_DIO1_00
 | 
RF_DIOMAPPING1_DIO2_00
 | 
RF_DIOMAPPING1_DIO3_01
;

516 
SX1232
->
RegDioM≠pög2
 = 
RF_DIOMAPPING2_DIO4_00
 | 
RF_DIOMAPPING2_DIO5_10
;

517 
	`SX1232WrôeBuf„r
–
REG_DIOMAPPING1
, &
SX1232
->
RegDioM≠pög1
, 2 );

519 
SX1232
->
RegFifoThªsh
 = 
RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY
 | 0x18;

520 
	`SX1232Wrôe
–
REG_FIFOTHRESH
, 
SX1232
->
RegFifoThªsh
 );

522 
	`SX1232SëOpMode
–
RF_OPMODE_TRANSMITTER
 );

523 
RFSèã
 = 
RF_STATE_TX_READY_WAIT
;

524 
TxByãsSít
 = 0;

526 
RF_STATE_TX_READY_WAIT
:

527 if–
DIO3
 == 1 )

529 if––
SX1232
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 ) == RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE )

531 
	`SX1232WrôeFifo
––
uöt8_t
* )&
TxPackëSize
, 1 );

534 if––
TxPackëSize
 > 0 ) && ( TxPacketSize <= 64 ) )

536 
D©aChunkSize
 = 
TxPackëSize
;

540 
D©aChunkSize
 = 32;

543 
	`SX1232WrôeFifo
–
RFBuf„r
, 
D©aChunkSize
 );

544 
TxByãsSít
 +
D©aChunkSize
;

545 
TxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

546 
RFSèã
 = 
RF_STATE_TX_RUNNING
;

550 
RF_STATE_TX_RUNNING
:

551 if–
DIO1
 == 0 )

553 if––
TxPackëSize
 - 
TxByãsSít
 ) > 
D©aChunkSize
 )

555 
	`SX1232WrôeFifo
––
RFBuf„r
 + 
TxByãsSít
 ), 
D©aChunkSize
 );

556 
TxByãsSít
 +
D©aChunkSize
;

561 
	`SX1232WrôeFifo
–
RFBuf„r
 + 
TxByãsSít
, 
TxPackëSize
 - TxBytesSent );

562 
TxByãsSít
 +
TxPackëSize
 - TxBytesSent;

566 if–
DIO0
 == 1 )

568 
TxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

569 
RFSèã
 = 
RF_STATE_TX_DONE
;

570 
	`SX1232SëOpMode
–
RF_OPMODE_STANDBY
 );

574 if––
	`GET_TICK_COUNT
–Ë- 
TxTimeoutTimî
 ) > 
	`TICK_RATE_MS
( 1000 ) )

576 
RFSèã
 = 
RF_STATE_TX_TIMEOUT
;

579 
RF_STATE_TX_DONE
:

580 
RFSèã
 = 
RF_STATE_IDLE
;

581 
ªsu…
 = 
RF_TX_DONE
;

583 
RF_STATE_TX_TIMEOUT
:

584 
RFSèã
 = 
RF_STATE_IDLE
;

585 
ªsu…
 = 
RF_TX_TIMEOUT
;

590  
ªsu…
;

591 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1232.h

21 #i‚de‡
__SX1232_H__


22 
	#__SX1232_H__


	)

28 
	ssFskSëtögs


30 
uöt32_t
 
	mRFFªquícy
;

31 
uöt32_t
 
	mBôøã
;

32 
uöt32_t
 
	mFdev
;

33 
öt8_t
 
	mPowî
;

34 
uöt32_t
 
	mRxBw
;

35 
uöt32_t
 
	mRxBwAfc
;

36 
boﬁ
 
	mCrcOn
;

37 
boﬁ
 
	mAfcOn
;

38 
uöt8_t
 
	mPaylﬂdLígth
;

39 }
	ttFskSëtögs
;

44 
	#RF_BUFFER_SIZE_MAX
 256

	)

45 
	#RF_BUFFER_SIZE
 256

	)

52 
	mRF_STATE_IDLE
,

53 
	mRF_STATE_RX_INIT
,

54 
	mRF_STATE_RX_SYNC
,

55 
	mRF_STATE_RX_RUNNING
,

56 
	mRF_STATE_RX_DONE
,

57 
	mRF_STATE_RX_TIMEOUT
,

58 
	mRF_STATE_RX_LEN_ERROR
,

59 
	mRF_STATE_TX_INIT
,

60 
	mRF_STATE_TX_READY_WAIT
,

61 
	mRF_STATE_TX_RUNNING
,

62 
	mRF_STATE_TX_DONE
,

63 
	mRF_STATE_TX_TIMEOUT
,

64 }
	ttRFSèãs
;

69 
	#XTAL_FREQ
 32000000

	)

70 
	#FREQ_STEP
 61.03515625

	)

75 
	#REG_FIFO
 0x00

	)

77 
	#REG_OPMODE
 0x01

	)

78 
	#REG_BITRATEMSB
 0x02

	)

79 
	#REG_BITRATELSB
 0x03

	)

80 
	#REG_FDEVMSB
 0x04

	)

81 
	#REG_FDEVLSB
 0x05

	)

82 
	#REG_FRFMSB
 0x06

	)

83 
	#REG_FRFMID
 0x07

	)

84 
	#REG_FRFLSB
 0x08

	)

86 
	#REG_PACONFIG
 0x09

	)

87 
	#REG_PARAMP
 0x0A

	)

88 
	#REG_OCP
 0x0B

	)

90 
	#REG_LNA
 0x0C

	)

91 
	#REG_RXCONFIG
 0x0D

	)

92 
	#REG_RSSICONFIG
 0x0E

	)

93 
	#REG_RSSICOLLISION
 0x0F

	)

94 
	#REG_RSSITHRESH
 0x10

	)

95 
	#REG_RSSIVALUE
 0x11

	)

96 
	#REG_RXBW
 0x12

	)

97 
	#REG_AFCBW
 0x13

	)

98 
	#REG_OOKPEAK
 0x14

	)

99 
	#REG_OOKFIX
 0x15

	)

100 
	#REG_OOKAVG
 0x16

	)

101 
	#REG_RES17
 0x17

	)

102 
	#REG_RES18
 0x18

	)

103 
	#REG_RES19
 0x19

	)

104 
	#REG_AFCFEI
 0x1A

	)

105 
	#REG_AFCMSB
 0x1B

	)

106 
	#REG_AFCLSB
 0x1C

	)

107 
	#REG_FEIMSB
 0x1D

	)

108 
	#REG_FEILSB
 0x1E

	)

109 
	#REG_PREAMBLEDETECT
 0x1F

	)

110 
	#REG_RXTIMEOUT1
 0x20

	)

111 
	#REG_RXTIMEOUT2
 0x21

	)

112 
	#REG_RXTIMEOUT3
 0x22

	)

113 
	#REG_RXDELAY
 0x23

	)

115 
	#REG_OSC
 0x24

	)

117 
	#REG_PREAMBLEMSB
 0x25

	)

118 
	#REG_PREAMBLELSB
 0x26

	)

119 
	#REG_SYNCCONFIG
 0x27

	)

120 
	#REG_SYNCVALUE1
 0x28

	)

121 
	#REG_SYNCVALUE2
 0x29

	)

122 
	#REG_SYNCVALUE3
 0x2A

	)

123 
	#REG_SYNCVALUE4
 0x2B

	)

124 
	#REG_SYNCVALUE5
 0x2C

	)

125 
	#REG_SYNCVALUE6
 0x2D

	)

126 
	#REG_SYNCVALUE7
 0x2E

	)

127 
	#REG_SYNCVALUE8
 0x2F

	)

128 
	#REG_PACKETCONFIG1
 0x30

	)

129 
	#REG_PACKETCONFIG2
 0x31

	)

130 
	#REG_PAYLOADLENGTH
 0x32

	)

131 
	#REG_NODEADRS
 0x33

	)

132 
	#REG_BROADCASTADRS
 0x34

	)

133 
	#REG_FIFOTHRESH
 0x35

	)

135 
	#REG_SEQCONFIG1
 0x36

	)

136 
	#REG_SEQCONFIG2
 0x37

	)

137 
	#REG_TIMERRESOL
 0x38

	)

138 
	#REG_TIMER1COEF
 0x39

	)

139 
	#REG_TIMER2COEF
 0x3A

	)

141 
	#REG_IMAGECAL
 0x3B

	)

142 
	#REG_TEMP
 0x3C

	)

143 
	#REG_LOWBAT
 0x3D

	)

145 
	#REG_IRQFLAGS1
 0x3E

	)

146 
	#REG_IRQFLAGS2
 0x3F

	)

148 
	#REG_DIOMAPPING1
 0x40

	)

149 
	#REG_DIOMAPPING2
 0x41

	)

151 
	#REG_VERSION
 0x42

	)

153 
	#REG_AGCREF
 0x43

	)

154 
	#REG_AGCTHRESH1
 0x44

	)

155 
	#REG_AGCTHRESH2
 0x45

	)

156 
	#REG_AGCTHRESH3
 0x46

	)

157 
	#REG_PLLHOP
 0x4B

	)

158 
	#REG_TCXO
 0x58

	)

159 
	#REG_PADAC
 0x5A

	)

160 
	#REG_PLL
 0x5C

	)

161 
	#REG_PLLLOWPN
 0x5E

	)

162 
	#REG_FORMERTEMP
 0x6C

	)

163 
	#REG_BITRATEFRAC
 0x70

	)

176 
	#RF_OPMODE_LONGRANGEMODE_MASK
 0x7F

	)

177 
	#RF_OPMODE_LONGRANGEMODE_OFF
 0x00

	)

178 
	#RF_OPMODE_LONGRANGEMODE_ON
 0x80

	)

180 
	#RF_OPMODE_MODULATIONTYPE_MASK
 0x9F

	)

181 
	#RF_OPMODE_MODULATIONTYPE_FSK
 0x00

182 
	#RF_OPMODE_MODULATIONTYPE_OOK
 0x20

	)

184 
	#RF_OPMODE_MODULATIONSHAPING_MASK
 0xE7

	)

185 
	#RF_OPMODE_MODULATIONSHAPING_00
 0x00

186 
	#RF_OPMODE_MODULATIONSHAPING_01
 0x08

	)

187 
	#RF_OPMODE_MODULATIONSHAPING_10
 0x10

	)

188 
	#RF_OPMODE_MODULATIONSHAPING_11
 0x18

	)

190 
	#RF_OPMODE_MASK
 0xF8

	)

191 
	#RF_OPMODE_SLEEP
 0x00

	)

192 
	#RF_OPMODE_STANDBY
 0x01

193 
	#RF_OPMODE_SYNTHESIZER_TX
 0x02

	)

194 
	#RF_OPMODE_TRANSMITTER
 0x03

	)

195 
	#RF_OPMODE_SYNTHESIZER_RX
 0x04

	)

196 
	#RF_OPMODE_RECEIVER
 0x05

	)

201 
	#RF_BITRATEMSB_1200_BPS
 0x68

	)

202 
	#RF_BITRATELSB_1200_BPS
 0x2B

	)

203 
	#RF_BITRATEMSB_2400_BPS
 0x34

	)

204 
	#RF_BITRATELSB_2400_BPS
 0x15

	)

205 
	#RF_BITRATEMSB_4800_BPS
 0x1A

206 
	#RF_BITRATELSB_4800_BPS
 0x0B

207 
	#RF_BITRATEMSB_9600_BPS
 0x0D

	)

208 
	#RF_BITRATELSB_9600_BPS
 0x05

	)

209 
	#RF_BITRATEMSB_15000_BPS
 0x08

	)

210 
	#RF_BITRATELSB_15000_BPS
 0x55

	)

211 
	#RF_BITRATEMSB_19200_BPS
 0x06

	)

212 
	#RF_BITRATELSB_19200_BPS
 0x83

	)

213 
	#RF_BITRATEMSB_38400_BPS
 0x03

	)

214 
	#RF_BITRATELSB_38400_BPS
 0x41

	)

215 
	#RF_BITRATEMSB_76800_BPS
 0x01

	)

216 
	#RF_BITRATELSB_76800_BPS
 0xA1

	)

217 
	#RF_BITRATEMSB_153600_BPS
 0x00

	)

218 
	#RF_BITRATELSB_153600_BPS
 0xD0

	)

219 
	#RF_BITRATEMSB_57600_BPS
 0x02

	)

220 
	#RF_BITRATELSB_57600_BPS
 0x2C

	)

221 
	#RF_BITRATEMSB_115200_BPS
 0x01

	)

222 
	#RF_BITRATELSB_115200_BPS
 0x16

	)

223 
	#RF_BITRATEMSB_12500_BPS
 0x0A

	)

224 
	#RF_BITRATELSB_12500_BPS
 0x00

	)

225 
	#RF_BITRATEMSB_25000_BPS
 0x05

	)

226 
	#RF_BITRATELSB_25000_BPS
 0x00

	)

227 
	#RF_BITRATEMSB_50000_BPS
 0x02

	)

228 
	#RF_BITRATELSB_50000_BPS
 0x80

	)

229 
	#RF_BITRATEMSB_100000_BPS
 0x01

	)

230 
	#RF_BITRATELSB_100000_BPS
 0x40

	)

231 
	#RF_BITRATEMSB_150000_BPS
 0x00

	)

232 
	#RF_BITRATELSB_150000_BPS
 0xD5

	)

233 
	#RF_BITRATEMSB_200000_BPS
 0x00

	)

234 
	#RF_BITRATELSB_200000_BPS
 0xA0

	)

235 
	#RF_BITRATEMSB_250000_BPS
 0x00

	)

236 
	#RF_BITRATELSB_250000_BPS
 0x80

	)

237 
	#RF_BITRATEMSB_32768_BPS
 0x03

	)

238 
	#RF_BITRATELSB_32768_BPS
 0xD1

	)

243 
	#RF_FDEVMSB_2000_HZ
 0x00

	)

244 
	#RF_FDEVLSB_2000_HZ
 0x21

	)

245 
	#RF_FDEVMSB_5000_HZ
 0x00

246 
	#RF_FDEVLSB_5000_HZ
 0x52

247 
	#RF_FDEVMSB_10000_HZ
 0x00

	)

248 
	#RF_FDEVLSB_10000_HZ
 0xA4

	)

249 
	#RF_FDEVMSB_15000_HZ
 0x00

	)

250 
	#RF_FDEVLSB_15000_HZ
 0xF6

	)

251 
	#RF_FDEVMSB_20000_HZ
 0x01

	)

252 
	#RF_FDEVLSB_20000_HZ
 0x48

	)

253 
	#RF_FDEVMSB_25000_HZ
 0x01

	)

254 
	#RF_FDEVLSB_25000_HZ
 0x9A

	)

255 
	#RF_FDEVMSB_30000_HZ
 0x01

	)

256 
	#RF_FDEVLSB_30000_HZ
 0xEC

	)

257 
	#RF_FDEVMSB_35000_HZ
 0x02

	)

258 
	#RF_FDEVLSB_35000_HZ
 0x3D

	)

259 
	#RF_FDEVMSB_40000_HZ
 0x02

	)

260 
	#RF_FDEVLSB_40000_HZ
 0x8F

	)

261 
	#RF_FDEVMSB_45000_HZ
 0x02

	)

262 
	#RF_FDEVLSB_45000_HZ
 0xE1

	)

263 
	#RF_FDEVMSB_50000_HZ
 0x03

	)

264 
	#RF_FDEVLSB_50000_HZ
 0x33

	)

265 
	#RF_FDEVMSB_55000_HZ
 0x03

	)

266 
	#RF_FDEVLSB_55000_HZ
 0x85

	)

267 
	#RF_FDEVMSB_60000_HZ
 0x03

	)

268 
	#RF_FDEVLSB_60000_HZ
 0xD7

	)

269 
	#RF_FDEVMSB_65000_HZ
 0x04

	)

270 
	#RF_FDEVLSB_65000_HZ
 0x29

	)

271 
	#RF_FDEVMSB_70000_HZ
 0x04

	)

272 
	#RF_FDEVLSB_70000_HZ
 0x7B

	)

273 
	#RF_FDEVMSB_75000_HZ
 0x04

	)

274 
	#RF_FDEVLSB_75000_HZ
 0xCD

	)

275 
	#RF_FDEVMSB_80000_HZ
 0x05

	)

276 
	#RF_FDEVLSB_80000_HZ
 0x1F

	)

277 
	#RF_FDEVMSB_85000_HZ
 0x05

	)

278 
	#RF_FDEVLSB_85000_HZ
 0x71

	)

279 
	#RF_FDEVMSB_90000_HZ
 0x05

	)

280 
	#RF_FDEVLSB_90000_HZ
 0xC3

	)

281 
	#RF_FDEVMSB_95000_HZ
 0x06

	)

282 
	#RF_FDEVLSB_95000_HZ
 0x14

	)

283 
	#RF_FDEVMSB_100000_HZ
 0x06

	)

284 
	#RF_FDEVLSB_100000_HZ
 0x66

	)

285 
	#RF_FDEVMSB_110000_HZ
 0x07

	)

286 
	#RF_FDEVLSB_110000_HZ
 0x0A

	)

287 
	#RF_FDEVMSB_120000_HZ
 0x07

	)

288 
	#RF_FDEVLSB_120000_HZ
 0xAE

	)

289 
	#RF_FDEVMSB_130000_HZ
 0x08

	)

290 
	#RF_FDEVLSB_130000_HZ
 0x52

	)

291 
	#RF_FDEVMSB_140000_HZ
 0x08

	)

292 
	#RF_FDEVLSB_140000_HZ
 0xF6

	)

293 
	#RF_FDEVMSB_150000_HZ
 0x09

	)

294 
	#RF_FDEVLSB_150000_HZ
 0x9A

	)

295 
	#RF_FDEVMSB_160000_HZ
 0x0A

	)

296 
	#RF_FDEVLSB_160000_HZ
 0x3D

	)

297 
	#RF_FDEVMSB_170000_HZ
 0x0A

	)

298 
	#RF_FDEVLSB_170000_HZ
 0xE1

	)

299 
	#RF_FDEVMSB_180000_HZ
 0x0B

	)

300 
	#RF_FDEVLSB_180000_HZ
 0x85

	)

301 
	#RF_FDEVMSB_190000_HZ
 0x0C

	)

302 
	#RF_FDEVLSB_190000_HZ
 0x29

	)

303 
	#RF_FDEVMSB_200000_HZ
 0x0C

	)

304 
	#RF_FDEVLSB_200000_HZ
 0xCD

	)

309 
	#RF_FRFMSB_863_MHZ
 0xD7

	)

310 
	#RF_FRFMID_863_MHZ
 0xC0

	)

311 
	#RF_FRFLSB_863_MHZ
 0x00

	)

312 
	#RF_FRFMSB_864_MHZ
 0xD8

	)

313 
	#RF_FRFMID_864_MHZ
 0x00

	)

314 
	#RF_FRFLSB_864_MHZ
 0x00

	)

315 
	#RF_FRFMSB_865_MHZ
 0xD8

	)

316 
	#RF_FRFMID_865_MHZ
 0x40

	)

317 
	#RF_FRFLSB_865_MHZ
 0x00

	)

318 
	#RF_FRFMSB_866_MHZ
 0xD8

	)

319 
	#RF_FRFMID_866_MHZ
 0x80

	)

320 
	#RF_FRFLSB_866_MHZ
 0x00

	)

321 
	#RF_FRFMSB_867_MHZ
 0xD8

	)

322 
	#RF_FRFMID_867_MHZ
 0xC0

	)

323 
	#RF_FRFLSB_867_MHZ
 0x00

	)

324 
	#RF_FRFMSB_868_MHZ
 0xD9

	)

325 
	#RF_FRFMID_868_MHZ
 0x00

	)

326 
	#RF_FRFLSB_868_MHZ
 0x00

	)

327 
	#RF_FRFMSB_869_MHZ
 0xD9

	)

328 
	#RF_FRFMID_869_MHZ
 0x40

	)

329 
	#RF_FRFLSB_869_MHZ
 0x00

	)

330 
	#RF_FRFMSB_870_MHZ
 0xD9

	)

331 
	#RF_FRFMID_870_MHZ
 0x80

	)

332 
	#RF_FRFLSB_870_MHZ
 0x00

	)

334 
	#RF_FRFMSB_902_MHZ
 0xE1

	)

335 
	#RF_FRFMID_902_MHZ
 0x80

	)

336 
	#RF_FRFLSB_902_MHZ
 0x00

	)

337 
	#RF_FRFMSB_903_MHZ
 0xE1

	)

338 
	#RF_FRFMID_903_MHZ
 0xC0

	)

339 
	#RF_FRFLSB_903_MHZ
 0x00

	)

340 
	#RF_FRFMSB_904_MHZ
 0xE2

	)

341 
	#RF_FRFMID_904_MHZ
 0x00

	)

342 
	#RF_FRFLSB_904_MHZ
 0x00

	)

343 
	#RF_FRFMSB_905_MHZ
 0xE2

	)

344 
	#RF_FRFMID_905_MHZ
 0x40

	)

345 
	#RF_FRFLSB_905_MHZ
 0x00

	)

346 
	#RF_FRFMSB_906_MHZ
 0xE2

	)

347 
	#RF_FRFMID_906_MHZ
 0x80

	)

348 
	#RF_FRFLSB_906_MHZ
 0x00

	)

349 
	#RF_FRFMSB_907_MHZ
 0xE2

	)

350 
	#RF_FRFMID_907_MHZ
 0xC0

	)

351 
	#RF_FRFLSB_907_MHZ
 0x00

	)

352 
	#RF_FRFMSB_908_MHZ
 0xE3

	)

353 
	#RF_FRFMID_908_MHZ
 0x00

	)

354 
	#RF_FRFLSB_908_MHZ
 0x00

	)

355 
	#RF_FRFMSB_909_MHZ
 0xE3

	)

356 
	#RF_FRFMID_909_MHZ
 0x40

	)

357 
	#RF_FRFLSB_909_MHZ
 0x00

	)

358 
	#RF_FRFMSB_910_MHZ
 0xE3

	)

359 
	#RF_FRFMID_910_MHZ
 0x80

	)

360 
	#RF_FRFLSB_910_MHZ
 0x00

	)

361 
	#RF_FRFMSB_911_MHZ
 0xE3

	)

362 
	#RF_FRFMID_911_MHZ
 0xC0

	)

363 
	#RF_FRFLSB_911_MHZ
 0x00

	)

364 
	#RF_FRFMSB_912_MHZ
 0xE4

	)

365 
	#RF_FRFMID_912_MHZ
 0x00

	)

366 
	#RF_FRFLSB_912_MHZ
 0x00

	)

367 
	#RF_FRFMSB_913_MHZ
 0xE4

	)

368 
	#RF_FRFMID_913_MHZ
 0x40

	)

369 
	#RF_FRFLSB_913_MHZ
 0x00

	)

370 
	#RF_FRFMSB_914_MHZ
 0xE4

	)

371 
	#RF_FRFMID_914_MHZ
 0x80

	)

372 
	#RF_FRFLSB_914_MHZ
 0x00

	)

373 
	#RF_FRFMSB_915_MHZ
 0xE4

374 
	#RF_FRFMID_915_MHZ
 0xC0

375 
	#RF_FRFLSB_915_MHZ
 0x00

376 
	#RF_FRFMSB_916_MHZ
 0xE5

	)

377 
	#RF_FRFMID_916_MHZ
 0x00

	)

378 
	#RF_FRFLSB_916_MHZ
 0x00

	)

379 
	#RF_FRFMSB_917_MHZ
 0xE5

	)

380 
	#RF_FRFMID_917_MHZ
 0x40

	)

381 
	#RF_FRFLSB_917_MHZ
 0x00

	)

382 
	#RF_FRFMSB_918_MHZ
 0xE5

	)

383 
	#RF_FRFMID_918_MHZ
 0x80

	)

384 
	#RF_FRFLSB_918_MHZ
 0x00

	)

385 
	#RF_FRFMSB_919_MHZ
 0xE5

	)

386 
	#RF_FRFMID_919_MHZ
 0xC0

	)

387 
	#RF_FRFLSB_919_MHZ
 0x00

	)

388 
	#RF_FRFMSB_920_MHZ
 0xE6

	)

389 
	#RF_FRFMID_920_MHZ
 0x00

	)

390 
	#RF_FRFLSB_920_MHZ
 0x00

	)

391 
	#RF_FRFMSB_921_MHZ
 0xE6

	)

392 
	#RF_FRFMID_921_MHZ
 0x40

	)

393 
	#RF_FRFLSB_921_MHZ
 0x00

	)

394 
	#RF_FRFMSB_922_MHZ
 0xE6

	)

395 
	#RF_FRFMID_922_MHZ
 0x80

	)

396 
	#RF_FRFLSB_922_MHZ
 0x00

	)

397 
	#RF_FRFMSB_923_MHZ
 0xE6

	)

398 
	#RF_FRFMID_923_MHZ
 0xC0

	)

399 
	#RF_FRFLSB_923_MHZ
 0x00

	)

400 
	#RF_FRFMSB_924_MHZ
 0xE7

	)

401 
	#RF_FRFMID_924_MHZ
 0x00

	)

402 
	#RF_FRFLSB_924_MHZ
 0x00

	)

403 
	#RF_FRFMSB_925_MHZ
 0xE7

	)

404 
	#RF_FRFMID_925_MHZ
 0x40

	)

405 
	#RF_FRFLSB_925_MHZ
 0x00

	)

406 
	#RF_FRFMSB_926_MHZ
 0xE7

	)

407 
	#RF_FRFMID_926_MHZ
 0x80

	)

408 
	#RF_FRFLSB_926_MHZ
 0x00

	)

409 
	#RF_FRFMSB_927_MHZ
 0xE7

	)

410 
	#RF_FRFMID_927_MHZ
 0xC0

	)

411 
	#RF_FRFLSB_927_MHZ
 0x00

	)

412 
	#RF_FRFMSB_928_MHZ
 0xE8

	)

413 
	#RF_FRFMID_928_MHZ
 0x00

	)

414 
	#RF_FRFLSB_928_MHZ
 0x00

	)

419 
	#RF_PACONFIG_PASELECT_MASK
 0x7F

	)

420 
	#RF_PACONFIG_PASELECT_PABOOST
 0x80

	)

421 
	#RF_PACONFIG_PASELECT_RFO
 0x00

422 

	)

423 
	#RF_PACONFIG_OUTPUTPOWER_MASK
 0xF0

	)

428 
	#RF_PARAMP_LOWPNTXPLL_MASK
 0xE0

	)

429 
	#RF_PARAMP_LOWPNTXPLL_OFF
 0x10

430 
	#RF_PARAMP_LOWPNTXPLL_ON
 0x00

	)

432 
	#RF_PARAMP_MASK
 0xF0

	)

433 
	#RF_PARAMP_3400_US
 0x00

	)

434 
	#RF_PARAMP_2000_US
 0x01

	)

435 
	#RF_PARAMP_1000_US
 0x02

	)

436 
	#RF_PARAMP_0500_US
 0x03

	)

437 
	#RF_PARAMP_0250_US
 0x04

	)

438 
	#RF_PARAMP_0125_US
 0x05

	)

439 
	#RF_PARAMP_0100_US
 0x06

	)

440 
	#RF_PARAMP_0062_US
 0x07

	)

441 
	#RF_PARAMP_0050_US
 0x08

	)

442 
	#RF_PARAMP_0040_US
 0x09

443 
	#RF_PARAMP_0031_US
 0x0A

	)

444 
	#RF_PARAMP_0025_US
 0x0B

	)

445 
	#RF_PARAMP_0020_US
 0x0C

	)

446 
	#RF_PARAMP_0015_US
 0x0D

	)

447 
	#RF_PARAMP_0012_US
 0x0E

	)

448 
	#RF_PARAMP_0010_US
 0x0F

	)

453 
	#RF_OCP_MASK
 0xDF

	)

454 
	#RF_OCP_ON
 0x20

455 
	#RF_OCP_OFF
 0x00

	)

457 
	#RF_OCP_TRIM_MASK
 0xE0

	)

458 
	#RF_OCP_TRIM_045_MA
 0x00

	)

459 
	#RF_OCP_TRIM_050_MA
 0x01

	)

460 
	#RF_OCP_TRIM_055_MA
 0x02

	)

461 
	#RF_OCP_TRIM_060_MA
 0x03

	)

462 
	#RF_OCP_TRIM_065_MA
 0x04

	)

463 
	#RF_OCP_TRIM_070_MA
 0x05

	)

464 
	#RF_OCP_TRIM_075_MA
 0x06

	)

465 
	#RF_OCP_TRIM_080_MA
 0x07

	)

466 
	#RF_OCP_TRIM_085_MA
 0x08

	)

467 
	#RF_OCP_TRIM_090_MA
 0x09

	)

468 
	#RF_OCP_TRIM_095_MA
 0x0A

	)

469 
	#RF_OCP_TRIM_100_MA
 0x0B

470 
	#RF_OCP_TRIM_105_MA
 0x0C

	)

471 
	#RF_OCP_TRIM_110_MA
 0x0D

	)

472 
	#RF_OCP_TRIM_115_MA
 0x0E

	)

473 
	#RF_OCP_TRIM_120_MA
 0x0F

	)

474 
	#RF_OCP_TRIM_130_MA
 0x10

	)

475 
	#RF_OCP_TRIM_140_MA
 0x11

	)

476 
	#RF_OCP_TRIM_150_MA
 0x12

	)

477 
	#RF_OCP_TRIM_160_MA
 0x13

	)

478 
	#RF_OCP_TRIM_170_MA
 0x14

	)

479 
	#RF_OCP_TRIM_180_MA
 0x15

	)

480 
	#RF_OCP_TRIM_190_MA
 0x16

	)

481 
	#RF_OCP_TRIM_200_MA
 0x17

	)

482 
	#RF_OCP_TRIM_210_MA
 0x18

	)

483 
	#RF_OCP_TRIM_220_MA
 0x19

	)

484 
	#RF_OCP_TRIM_230_MA
 0x1A

	)

485 
	#RF_OCP_TRIM_240_MA
 0x1B

	)

490 
	#RF_LNA_GAIN_MASK
 0x1F

	)

491 
	#RF_LNA_GAIN_G1
 0x20

492 
	#RF_LNA_GAIN_G2
 0x40

	)

493 
	#RF_LNA_GAIN_G3
 0x60

	)

494 
	#RF_LNA_GAIN_G4
 0x80

	)

495 
	#RF_LNA_GAIN_G5
 0xA0

	)

496 
	#RF_LNA_GAIN_G6
 0xC0

	)

498 
	#RF_LNA_BOOST_MASK
 0xFC

	)

499 
	#RF_LNA_BOOST_OFF
 0x00

500 
	#RF_LNA_BOOST_ON
 0x03

	)

505 
	#RF_RXCONFIG_RESTARTRXONCOLLISION_MASK
 0x7F

	)

506 
	#RF_RXCONFIG_RESTARTRXONCOLLISION_ON
 0x80

	)

507 
	#RF_RXCONFIG_RESTARTRXONCOLLISION_OFF
 0x00

508 

	)

509 
	#RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK
 0x40

510 

	)

511 
	#RF_RXCONFIG_RESTARTRXWITHPLLLOCK
 0x20

512 

	)

513 
	#RF_RXCONFIG_AFCAUTO_MASK
 0xEF

	)

514 
	#RF_RXCONFIG_AFCAUTO_ON
 0x10

	)

515 
	#RF_RXCONFIG_AFCAUTO_OFF
 0x00

516 

	)

517 
	#RF_RXCONFIG_AGCAUTO_MASK
 0xF7

	)

518 
	#RF_RXCONFIG_AGCAUTO_ON
 0x08

519 
	#RF_RXCONFIG_AGCAUTO_OFF
 0x00

	)

521 
	#RF_RXCONFIG_RXTRIGER_MASK
 0xF8

	)

522 
	#RF_RXCONFIG_RXTRIGER_OFF
 0x00

	)

523 
	#RF_RXCONFIG_RXTRIGER_RSSI
 0x01

	)

524 
	#RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT
 0x06

525 
	#RF_RXCONFIG_RXTRIGER_RSSI_PREAMBLEDETECT
 0x07

	)

530 
	#RF_RSSICONFIG_OFFSET_MASK
 0x07

	)

531 
	#RF_RSSICONFIG_OFFSET_P_00_DB
 0x00

532 
	#RF_RSSICONFIG_OFFSET_P_01_DB
 0x08

	)

533 
	#RF_RSSICONFIG_OFFSET_P_02_DB
 0x10

	)

534 
	#RF_RSSICONFIG_OFFSET_P_03_DB
 0x18

	)

535 
	#RF_RSSICONFIG_OFFSET_P_04_DB
 0x20

	)

536 
	#RF_RSSICONFIG_OFFSET_P_05_DB
 0x28

	)

537 
	#RF_RSSICONFIG_OFFSET_P_06_DB
 0x30

	)

538 
	#RF_RSSICONFIG_OFFSET_P_07_DB
 0x38

	)

539 
	#RF_RSSICONFIG_OFFSET_P_08_DB
 0x40

	)

540 
	#RF_RSSICONFIG_OFFSET_P_09_DB
 0x48

	)

541 
	#RF_RSSICONFIG_OFFSET_P_10_DB
 0x50

	)

542 
	#RF_RSSICONFIG_OFFSET_P_11_DB
 0x58

	)

543 
	#RF_RSSICONFIG_OFFSET_P_12_DB
 0x60

	)

544 
	#RF_RSSICONFIG_OFFSET_P_13_DB
 0x68

	)

545 
	#RF_RSSICONFIG_OFFSET_P_14_DB
 0x70

	)

546 
	#RF_RSSICONFIG_OFFSET_P_15_DB
 0x78

	)

547 
	#RF_RSSICONFIG_OFFSET_M_16_DB
 0x80

	)

548 
	#RF_RSSICONFIG_OFFSET_M_15_DB
 0x88

	)

549 
	#RF_RSSICONFIG_OFFSET_M_14_DB
 0x90

	)

550 
	#RF_RSSICONFIG_OFFSET_M_13_DB
 0x98

	)

551 
	#RF_RSSICONFIG_OFFSET_M_12_DB
 0xA0

	)

552 
	#RF_RSSICONFIG_OFFSET_M_11_DB
 0xA8

	)

553 
	#RF_RSSICONFIG_OFFSET_M_10_DB
 0xB0

	)

554 
	#RF_RSSICONFIG_OFFSET_M_09_DB
 0xB8

	)

555 
	#RF_RSSICONFIG_OFFSET_M_08_DB
 0xC0

	)

556 
	#RF_RSSICONFIG_OFFSET_M_07_DB
 0xC8

	)

557 
	#RF_RSSICONFIG_OFFSET_M_06_DB
 0xD0

	)

558 
	#RF_RSSICONFIG_OFFSET_M_05_DB
 0xD8

	)

559 
	#RF_RSSICONFIG_OFFSET_M_04_DB
 0xE0

	)

560 
	#RF_RSSICONFIG_OFFSET_M_03_DB
 0xE8

	)

561 
	#RF_RSSICONFIG_OFFSET_M_02_DB
 0xF0

	)

562 
	#RF_RSSICONFIG_OFFSET_M_01_DB
 0xF8

	)

564 
	#RF_RSSICONFIG_SMOOTHING_MASK
 0xF8

	)

565 
	#RF_RSSICONFIG_SMOOTHING_2
 0x00

	)

566 
	#RF_RSSICONFIG_SMOOTHING_4
 0x01

	)

567 
	#RF_RSSICONFIG_SMOOTHING_8
 0x02

568 
	#RF_RSSICONFIG_SMOOTHING_16
 0x03

	)

569 
	#RF_RSSICONFIG_SMOOTHING_32
 0x04

	)

570 
	#RF_RSSICONFIG_SMOOTHING_64
 0x05

	)

571 
	#RF_RSSICONFIG_SMOOTHING_128
 0x06

	)

572 
	#RF_RSSICONFIG_SMOOTHING_256
 0x07

	)

577 
	#RF_RSSICOLISION_THRESHOLD
 0x0A

578 

	)

582 
	#RF_RSSITHRESH_THRESHOLD
 0xFF

583 

	)

591 
	#RF_RXBW_MANT_MASK
 0xE7

	)

592 
	#RF_RXBW_MANT_16
 0x00

	)

593 
	#RF_RXBW_MANT_20
 0x08

	)

594 
	#RF_RXBW_MANT_24
 0x10

595 

	)

596 
	#RF_RXBW_EXP_MASK
 0xF8

	)

597 
	#RF_RXBW_EXP_0
 0x00

	)

598 
	#RF_RXBW_EXP_1
 0x01

	)

599 
	#RF_RXBW_EXP_2
 0x02

	)

600 
	#RF_RXBW_EXP_3
 0x03

	)

601 
	#RF_RXBW_EXP_4
 0x04

	)

602 
	#RF_RXBW_EXP_5
 0x05

603 
	#RF_RXBW_EXP_6
 0x06

	)

604 
	#RF_RXBW_EXP_7
 0x07

	)

609 
	#RF_AFCBW_MANTAFC_MASK
 0xE7

	)

610 
	#RF_AFCBW_MANTAFC_16
 0x00

	)

611 
	#RF_AFCBW_MANTAFC_20
 0x08

612 
	#RF_AFCBW_MANTAFC_24
 0x10

	)

614 
	#RF_AFCBW_EXPAFC_MASK
 0xF8

	)

615 
	#RF_AFCBW_EXPAFC_0
 0x00

	)

616 
	#RF_AFCBW_EXPAFC_1
 0x01

	)

617 
	#RF_AFCBW_EXPAFC_2
 0x02

	)

618 
	#RF_AFCBW_EXPAFC_3
 0x03

619 
	#RF_AFCBW_EXPAFC_4
 0x04

	)

620 
	#RF_AFCBW_EXPAFC_5
 0x05

	)

621 
	#RF_AFCBW_EXPAFC_6
 0x06

	)

622 
	#RF_AFCBW_EXPAFC_7
 0x07

	)

627 
	#RF_OOKPEAK_BITSYNC_MASK
 0xDF

628 
	#RF_OOKPEAK_BITSYNC_ON
 0x20

629 
	#RF_OOKPEAK_BITSYNC_OFF
 0x00

	)

631 
	#RF_OOKPEAK_OOKTHRESHTYPE_MASK
 0xE7

	)

632 
	#RF_OOKPEAK_OOKTHRESHTYPE_FIXED
 0x00

	)

633 
	#RF_OOKPEAK_OOKTHRESHTYPE_PEAK
 0x08

634 
	#RF_OOKPEAK_OOKTHRESHTYPE_AVERAGE
 0x10

	)

636 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_MASK
 0xF8

	)

637 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_0_5_DB
 0x00

638 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_1_0_DB
 0x01

	)

639 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_1_5_DB
 0x02

	)

640 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_2_0_DB
 0x03

	)

641 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_3_0_DB
 0x04

	)

642 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_4_0_DB
 0x05

	)

643 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_5_0_DB
 0x06

	)

644 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_6_0_DB
 0x07

	)

649 
	#RF_OOKFIX_OOKFIXEDTHRESHOLD
 0x0C

650 

	)

654 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_MASK
 0x1F

	)

655 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_000
 0x00

656 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_001
 0x20

	)

657 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_010
 0x40

	)

658 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_011
 0x60

	)

659 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_100
 0x80

	)

660 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_101
 0xA0

	)

661 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_110
 0xC0

	)

662 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_111
 0xE0

	)

664 
	#RF_OOKAVG_AVERAGEOFFSET_MASK
 0xF3

	)

665 
	#RF_OOKAVG_AVERAGEOFFSET_0_DB
 0x00

666 
	#RF_OOKAVG_AVERAGEOFFSET_2_DB
 0x04

	)

667 
	#RF_OOKAVG_AVERAGEOFFSET_4_DB
 0x08

	)

668 
	#RF_OOKAVG_AVERAGEOFFSET_6_DB
 0x0C

	)

670 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_MASK
 0xFC

	)

671 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_00
 0x00

	)

672 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_01
 0x01

	)

673 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_10
 0x02

674 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_11
 0x03

	)

679 
	#RF_AFCFEI_AGCSTART
 0x10

	)

681 
	#RF_AFCFEI_AFCCLEAR
 0x02

	)

683 
	#RF_AFCFEI_AFCAUTOCLEAR_MASK
 0xFE

	)

684 
	#RF_AFCFEI_AFCAUTOCLEAR_ON
 0x01

	)

685 
	#RF_AFCFEI_AFCAUTOCLEAR_OFF
 0x00

686 

	)

706 
	#RF_PREAMBLEDETECT_DETECTOR_MASK
 0x7F

	)

707 
	#RF_PREAMBLEDETECT_DETECTOR_ON
 0x80

708 
	#RF_PREAMBLEDETECT_DETECTOR_OFF
 0x00

	)

710 
	#RF_PREAMBLEDETECT_DETECTORSIZE_MASK
 0x9F

	)

711 
	#RF_PREAMBLEDETECT_DETECTORSIZE_1
 0x00

	)

712 
	#RF_PREAMBLEDETECT_DETECTORSIZE_2
 0x20

713 
	#RF_PREAMBLEDETECT_DETECTORSIZE_3
 0x40

	)

715 
	#RF_PREAMBLEDETECT_DETECTORTOL_MASK
 0xE0

	)

716 
	#RF_PREAMBLEDETECT_DETECTORTOL_0
 0x00

	)

717 
	#RF_PREAMBLEDETECT_DETECTORTOL_1
 0x01

	)

718 
	#RF_PREAMBLEDETECT_DETECTORTOL_2
 0x02

	)

719 
	#RF_PREAMBLEDETECT_DETECTORTOL_3
 0x03

	)

720 
	#RF_PREAMBLEDETECT_DETECTORTOL_4
 0x04

	)

721 
	#RF_PREAMBLEDETECT_DETECTORTOL_5
 0x05

	)

722 
	#RF_PREAMBLEDETECT_DETECTORTOL_6
 0x06

	)

723 
	#RF_PREAMBLEDETECT_DETECTORTOL_7
 0x07

	)

724 
	#RF_PREAMBLEDETECT_DETECTORTOL_8
 0x08

	)

725 
	#RF_PREAMBLEDETECT_DETECTORTOL_9
 0x09

	)

726 
	#RF_PREAMBLEDETECT_DETECTORTOL_10
 0x0A

727 
	#RF_PREAMBLEDETECT_DETECTORTOL_11
 0x0B

	)

728 
	#RF_PREAMBLEDETECT_DETECTORTOL_12
 0x0C

	)

729 
	#RF_PREAMBLEDETECT_DETECTORTOL_13
 0x0D

	)

730 
	#RF_PREAMBLEDETECT_DETECTORTOL_14
 0x0E

	)

731 
	#RF_PREAMBLEDETECT_DETECTORTOL_15
 0x0F

	)

732 
	#RF_PREAMBLEDETECT_DETECTORTOL_16
 0x10

	)

733 
	#RF_PREAMBLEDETECT_DETECTORTOL_17
 0x11

	)

734 
	#RF_PREAMBLEDETECT_DETECTORTOL_18
 0x12

	)

735 
	#RF_PREAMBLEDETECT_DETECTORTOL_19
 0x13

	)

736 
	#RF_PREAMBLEDETECT_DETECTORTOL_20
 0x14

	)

737 
	#RF_PREAMBLEDETECT_DETECTORTOL_21
 0x15

	)

738 
	#RF_PREAMBLEDETECT_DETECTORTOL_22
 0x16

	)

739 
	#RF_PREAMBLEDETECT_DETECTORTOL_23
 0x17

	)

740 
	#RF_PREAMBLEDETECT_DETECTORTOL_24
 0x18

	)

741 
	#RF_PREAMBLEDETECT_DETECTORTOL_25
 0x19

	)

742 
	#RF_PREAMBLEDETECT_DETECTORTOL_26
 0x1A

	)

743 
	#RF_PREAMBLEDETECT_DETECTORTOL_27
 0x1B

	)

744 
	#RF_PREAMBLEDETECT_DETECTORTOL_28
 0x1C

	)

745 
	#RF_PREAMBLEDETECT_DETECTORTOL_29
 0x1D

	)

746 
	#RF_PREAMBLEDETECT_DETECTORTOL_30
 0x1E

	)

747 
	#RF_PREAMBLEDETECT_DETECTORTOL_31
 0x1F

	)

752 
	#RF_RXTIMEOUT1_TIMEOUTRXRSSI
 0x00

753 

	)

757 
	#RF_RXTIMEOUT2_TIMEOUTRXPREAMBLE
 0x00

758 

	)

762 
	#RF_RXTIMEOUT3_TIMEOUTSIGNALSYNC
 0x00

763 

	)

767 
	#RF_RXDELAY_INTERPACKETRXDELAY
 0x00

768 

	)

772 
	#RF_OSC_RCCALSTART
 0x08

	)

774 
	#RF_OSC_CLKOUT_MASK
 0xF8

	)

775 
	#RF_OSC_CLKOUT_32_MHZ
 0x00

	)

776 
	#RF_OSC_CLKOUT_16_MHZ
 0x01

	)

777 
	#RF_OSC_CLKOUT_8_MHZ
 0x02

	)

778 
	#RF_OSC_CLKOUT_4_MHZ
 0x03

	)

779 
	#RF_OSC_CLKOUT_2_MHZ
 0x04

	)

780 
	#RF_OSC_CLKOUT_1_MHZ
 0x05

	)

781 
	#RF_OSC_CLKOUT_RC
 0x06

	)

782 
	#RF_OSC_CLKOUT_OFF
 0x07

783 

	)

787 
	#RF_PREAMBLEMSB_SIZE
 0x00

788 
	#RF_PREAMBLELSB_SIZE
 0x03

789 

	)

793 
	#RF_SYNCCONFIG_AUTORESTARTRXMODE_MASK
 0x3F

	)

794 
	#RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_ON
 0x80

795 
	#RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_OFF
 0x40

	)

796 
	#RF_SYNCCONFIG_AUTORESTARTRXMODE_OFF
 0x00

	)

799 
	#RF_SYNCCONFIG_PREAMBLEPOLARITY_MASK
 0xDF

	)

800 
	#RF_SYNCCONFIG_PREAMBLEPOLARITY_55
 0x20

	)

801 
	#RF_SYNCCONFIG_PREAMBLEPOLARITY_AA
 0x00

802 

	)

803 
	#RF_SYNCCONFIG_SYNC_MASK
 0xEF

	)

804 
	#RF_SYNCCONFIG_SYNC_ON
 0x10

805 
	#RF_SYNCCONFIG_SYNC_OFF
 0x00

	)

807 
	#RF_SYNCCONFIG_FIFOFILLCONDITION_MASK
 0xF7

	)

808 
	#RF_SYNCCONFIG_FIFOFILLCONDITION_AUTO
 0x00

809 
	#RF_SYNCCONFIG_FIFOFILLCONDITION_MANUAL
 0x08

	)

811 
	#RF_SYNCCONFIG_SYNCSIZE_MASK
 0xF8

	)

812 
	#RF_SYNCCONFIG_SYNCSIZE_1
 0x00

	)

813 
	#RF_SYNCCONFIG_SYNCSIZE_2
 0x01

	)

814 
	#RF_SYNCCONFIG_SYNCSIZE_3
 0x02

	)

815 
	#RF_SYNCCONFIG_SYNCSIZE_4
 0x03

816 
	#RF_SYNCCONFIG_SYNCSIZE_5
 0x04

	)

817 
	#RF_SYNCCONFIG_SYNCSIZE_6
 0x05

	)

818 
	#RF_SYNCCONFIG_SYNCSIZE_7
 0x06

	)

819 
	#RF_SYNCCONFIG_SYNCSIZE_8
 0x07

	)

824 
	#RF_SYNCVALUE1_SYNCVALUE
 0x01

825 
	#RF_SYNCVALUE2_SYNCVALUE
 0x01

826 
	#RF_SYNCVALUE3_SYNCVALUE
 0x01

827 
	#RF_SYNCVALUE4_SYNCVALUE
 0x01

828 
	#RF_SYNCVALUE5_SYNCVALUE
 0x01

829 
	#RF_SYNCVALUE6_SYNCVALUE
 0x01

830 
	#RF_SYNCVALUE7_SYNCVALUE
 0x01

831 
	#RF_SYNCVALUE8_SYNCVALUE
 0x01

832 

	)

836 
	#RF_PACKETCONFIG1_PACKETFORMAT_MASK
 0x7F

	)

837 
	#RF_PACKETCONFIG1_PACKETFORMAT_FIXED
 0x00

	)

838 
	#RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 0x80

839 

	)

840 
	#RF_PACKETCONFIG1_DCFREE_MASK
 0x9F

	)

841 
	#RF_PACKETCONFIG1_DCFREE_OFF
 0x00

842 
	#RF_PACKETCONFIG1_DCFREE_MANCHESTER
 0x20

	)

843 
	#RF_PACKETCONFIG1_DCFREE_WHITENING
 0x40

	)

845 
	#RF_PACKETCONFIG1_CRC_MASK
 0xEF

	)

846 
	#RF_PACKETCONFIG1_CRC_ON
 0x10

847 
	#RF_PACKETCONFIG1_CRC_OFF
 0x00

	)

849 
	#RF_PACKETCONFIG1_CRCAUTOCLEAR_MASK
 0xF7

	)

850 
	#RF_PACKETCONFIG1_CRCAUTOCLEAR_ON
 0x00

851 
	#RF_PACKETCONFIG1_CRCAUTOCLEAR_OFF
 0x08

	)

853 
	#RF_PACKETCONFIG1_ADDRSFILTERING_MASK
 0xF9

	)

854 
	#RF_PACKETCONFIG1_ADDRSFILTERING_OFF
 0x00

855 
	#RF_PACKETCONFIG1_ADDRSFILTERING_NODE
 0x02

	)

856 
	#RF_PACKETCONFIG1_ADDRSFILTERING_NODEBROADCAST
 0x04

	)

858 
	#RF_PACKETCONFIG1_CRCWHITENINGTYPE_MASK
 0xFE

	)

859 
	#RF_PACKETCONFIG1_CRCWHITENINGTYPE_CCITT
 0x00

860 
	#RF_PACKETCONFIG1_CRCWHITENINGTYPE_IBM
 0x01

	)

865 
	#RF_PACKETCONFIG2_DATAMODE_MASK
 0xBF

	)

866 
	#RF_PACKETCONFIG2_DATAMODE_CONTINUOUS
 0x00

	)

867 
	#RF_PACKETCONFIG2_DATAMODE_PACKET
 0x40

868 

	)

869 
	#RF_PACKETCONFIG2_IOHOME_MASK
 0xDF

	)

870 
	#RF_PACKETCONFIG2_IOHOME_ON
 0x20

	)

871 
	#RF_PACKETCONFIG2_IOHOME_OFF
 0x00

872 

	)

873 
	#RF_PACKETCONFIG2_BEACON_MASK
 0xF7

	)

874 
	#RF_PACKETCONFIG2_BEACON_ON
 0x08

	)

875 
	#RF_PACKETCONFIG2_BEACON_OFF
 0x00

876 

	)

877 
	#RF_PACKETCONFIG2_PAYLOADLENGTH_MSB_MASK
 0xF8

	)

882 
	#RF_PAYLOADLENGTH_LENGTH
 0x40

883 

	)

887 
	#RF_NODEADDRESS_ADDRESS
 0x00

	)

892 
	#RF_BROADCASTADDRESS_ADDRESS
 0x00

	)

897 
	#RF_FIFOTHRESH_TXSTARTCONDITION_MASK
 0x7F

	)

898 
	#RF_FIFOTHRESH_TXSTARTCONDITION_FIFOTHRESH
 0x00

	)

899 
	#RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY
 0x80

900 

	)

901 
	#RF_FIFOTHRESH_FIFOTHRESHOLD_MASK
 0xC0

	)

902 
	#RF_FIFOTHRESH_FIFOTHRESHOLD_THRESHOLD
 0x0F

903 

	)

907 
	#RF_SEQCONFIG1_SEQUENCER_START
 0x80

	)

909 
	#RF_SEQCONFIG1_SEQUENCER_STOP
 0x40

	)

911 
	#RF_SEQCONFIG1_IDLEMODE_MASK
 0xDF

	)

912 
	#RF_SEQCONFIG1_IDLEMODE_SLEEP
 0x20

	)

913 
	#RF_SEQCONFIG1_IDLEMODE_STANDBY
 0x00

914 

	)

915 
	#RF_SEQCONFIG1_FROMSTART_MASK
 0xE7

	)

916 
	#RF_SEQCONFIG1_FROMSTART_TOLPS
 0x00

917 
	#RF_SEQCONFIG1_FROMSTART_TORX
 0x08

	)

918 
	#RF_SEQCONFIG1_FROMSTART_TOTX
 0x10

	)

919 
	#RF_SEQCONFIG1_FROMSTART_TOTX_ONFIFOLEVEL
 0x18

	)

921 
	#RF_SEQCONFIG1_LPS_MASK
 0xFB

	)

922 
	#RF_SEQCONFIG1_LPS_SEQUENCER_OFF
 0x00

923 
	#RF_SEQCONFIG1_LPS_IDLE
 0x04

	)

925 
	#RF_SEQCONFIG1_FROMIDLE_MASK
 0xFD

	)

926 
	#RF_SEQCONFIG1_FROMIDLE_TOTX
 0x00

927 
	#RF_SEQCONFIG1_FROMIDLE_TORX
 0x02

	)

929 
	#RF_SEQCONFIG1_FROMTX_MASK
 0xFE

	)

930 
	#RF_SEQCONFIG1_FROMTX_TOLPS
 0x00

931 
	#RF_SEQCONFIG1_FROMTX_TORX
 0x01

	)

936 
	#RF_SEQCONFIG2_FROMRX_MASK
 0x1F

	)

937 
	#RF_SEQCONFIG2_FROMRX_TOUNUSED_000
 0x00

938 
	#RF_SEQCONFIG2_FROMRX_TORXPKT_ONPLDRDY
 0x20

	)

939 
	#RF_SEQCONFIG2_FROMRX_TOLPS_ONPLDRDY
 0x40

	)

940 
	#RF_SEQCONFIG2_FROMRX_TORXPKT_ONCRCOK
 0x60

	)

941 
	#RF_SEQCONFIG2_FROMRX_TOSEQUENCEROFF_ONRSSI
 0x80

	)

942 
	#RF_SEQCONFIG2_FROMRX_TOSEQUENCEROFF_ONSYNC
 0xA0

	)

943 
	#RF_SEQCONFIG2_FROMRX_TOSEQUENCEROFF_ONPREAMBLE
 0xC0

	)

944 
	#RF_SEQCONFIG2_FROMRX_TOUNUSED_111
 0xE0

	)

946 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_MASK
 0xE7

	)

947 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_TORXRESTART
 0x00

948 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_TOTX
 0x08

	)

949 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_TOLPS
 0x10

	)

950 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_TOSEQUENCEROFF
 0x18

	)

952 
	#RF_SEQCONFIG2_FROMRXPKT_MASK
 0xF8

	)

953 
	#RF_SEQCONFIG2_FROMRXPKT_TOSEQUENCEROFF
 0x00

954 
	#RF_SEQCONFIG2_FROMRXPKT_TOTX_ONFIFOEMPTY
 0x01

	)

955 
	#RF_SEQCONFIG2_FROMRXPKT_TOLPS
 0x02

	)

956 
	#RF_SEQCONFIG2_FROMRXPKT_TOSYNTHESIZERRX
 0x03

	)

957 
	#RF_SEQCONFIG2_FROMRXPKT_TORX
 0x04

	)

962 
	#RF_TIMERRESOL_TIMER1RESOL_MASK
 0xF3

	)

963 
	#RF_TIMERRESOL_TIMER1RESOL_OFF
 0x00

964 
	#RF_TIMERRESOL_TIMER1RESOL_000064_US
 0x04

	)

965 
	#RF_TIMERRESOL_TIMER1RESOL_004100_US
 0x08

	)

966 
	#RF_TIMERRESOL_TIMER1RESOL_262000_US
 0x0C

	)

968 
	#RF_TIMERRESOL_TIMER2RESOL_MASK
 0xFC

	)

969 
	#RF_TIMERRESOL_TIMER2RESOL_OFF
 0x00

970 
	#RF_TIMERRESOL_TIMER2RESOL_000064_US
 0x01

	)

971 
	#RF_TIMERRESOL_TIMER2RESOL_004100_US
 0x02

	)

972 
	#RF_TIMERRESOL_TIMER2RESOL_262000_US
 0x03

	)

977 
	#RF_TIMER1COEF_TIMER1COEFFICIENT
 0xF5

978 

	)

982 
	#RF_TIMER2COEF_TIMER2COEFFICIENT
 0x20

983 

	)

987 
	#RF_IMAGECAL_AUTOIMAGECAL_MASK
 0x7F

	)

988 
	#RF_IMAGECAL_AUTOIMAGECAL_ON
 0x80

	)

989 
	#RF_IMAGECAL_AUTOIMAGECAL_OFF
 0x00

990 

	)

991 
	#RF_IMAGECAL_IMAGECAL_MASK
 0xBF

	)

992 
	#RF_IMAGECAL_IMAGECAL_START
 0x40

	)

994 
	#RF_IMAGECAL_IMAGECAL_RUNNING
 0x20

	)

995 
	#RF_IMAGECAL_IMAGECAL_DONE
 0x00

996 

	)

997 
	#RF_IMAGECAL_TEMPCHANGE_HIGHER
 0x08

	)

998 
	#RF_IMAGECAL_TEMPCHANGE_LOWER
 0x00

	)

1000 
	#RF_IMAGECAL_TEMPTHRESHOLD_MASK
 0xF9

	)

1001 
	#RF_IMAGECAL_TEMPTHRESHOLD_05
 0x00

	)

1002 
	#RF_IMAGECAL_TEMPTHRESHOLD_10
 0x02

1003 
	#RF_IMAGECAL_TEMPTHRESHOLD_15
 0x04

	)

1004 
	#RF_IMAGECAL_TEMPTHRESHOLD_20
 0x06

	)

1006 
	#RF_IMAGECAL_TEMPMONITOR_MASK
 0xFE

	)

1007 
	#RF_IMAGECAL_TEMPMONITOR_ON
 0x00

1008 
	#RF_IMAGECAL_TEMPMONITOR_OFF
 0x01

	)

1017 
	#RF_LOWBAT_MASK
 0xF7

	)

1018 
	#RF_LOWBAT_ON
 0x08

	)

1019 
	#RF_LOWBAT_OFF
 0x00

1020 

	)

1021 
	#RF_LOWBAT_TRIM_MASK
 0xF8

	)

1022 
	#RF_LOWBAT_TRIM_1695
 0x00

	)

1023 
	#RF_LOWBAT_TRIM_1764
 0x01

	)

1024 
	#RF_LOWBAT_TRIM_1835
 0x02

1025 
	#RF_LOWBAT_TRIM_1905
 0x03

	)

1026 
	#RF_LOWBAT_TRIM_1976
 0x04

	)

1027 
	#RF_LOWBAT_TRIM_2045
 0x05

	)

1028 
	#RF_LOWBAT_TRIM_2116
 0x06

	)

1029 
	#RF_LOWBAT_TRIM_2185
 0x07

	)

1034 
	#RF_IRQFLAGS1_MODEREADY
 0x80

	)

1036 
	#RF_IRQFLAGS1_RXREADY
 0x40

	)

1038 
	#RF_IRQFLAGS1_TXREADY
 0x20

	)

1040 
	#RF_IRQFLAGS1_PLLLOCK
 0x10

	)

1042 
	#RF_IRQFLAGS1_RSSI
 0x08

	)

1044 
	#RF_IRQFLAGS1_TIMEOUT
 0x04

	)

1046 
	#RF_IRQFLAGS1_PREAMBLEDETECT
 0x02

	)

1048 
	#RF_IRQFLAGS1_SYNCADDRESSMATCH
 0x01

	)

1053 
	#RF_IRQFLAGS2_FIFOFULL
 0x80

	)

1055 
	#RF_IRQFLAGS2_FIFOEMPTY
 0x40

	)

1057 
	#RF_IRQFLAGS2_FIFOLEVEL
 0x20

	)

1059 
	#RF_IRQFLAGS2_FIFOOVERRUN
 0x10

	)

1061 
	#RF_IRQFLAGS2_PACKETSENT
 0x08

	)

1063 
	#RF_IRQFLAGS2_PAYLOADREADY
 0x04

	)

1065 
	#RF_IRQFLAGS2_CRCOK
 0x02

	)

1067 
	#RF_IRQFLAGS2_LOWBAT
 0x01

	)

1072 
	#RF_DIOMAPPING1_DIO0_MASK
 0x3F

	)

1073 
	#RF_DIOMAPPING1_DIO0_00
 0x00

1074 
	#RF_DIOMAPPING1_DIO0_01
 0x40

	)

1075 
	#RF_DIOMAPPING1_DIO0_10
 0x80

	)

1076 
	#RF_DIOMAPPING1_DIO0_11
 0xC0

	)

1078 
	#RF_DIOMAPPING1_DIO1_MASK
 0xCF

	)

1079 
	#RF_DIOMAPPING1_DIO1_00
 0x00

1080 
	#RF_DIOMAPPING1_DIO1_01
 0x10

	)

1081 
	#RF_DIOMAPPING1_DIO1_10
 0x20

	)

1082 
	#RF_DIOMAPPING1_DIO1_11
 0x30

	)

1084 
	#RF_DIOMAPPING1_DIO2_MASK
 0xF3

	)

1085 
	#RF_DIOMAPPING1_DIO2_00
 0x00

1086 
	#RF_DIOMAPPING1_DIO2_01
 0x04

	)

1087 
	#RF_DIOMAPPING1_DIO2_10
 0x08

	)

1088 
	#RF_DIOMAPPING1_DIO2_11
 0x0C

	)

1090 
	#RF_DIOMAPPING1_DIO3_MASK
 0xFC

	)

1091 
	#RF_DIOMAPPING1_DIO3_00
 0x00

1092 
	#RF_DIOMAPPING1_DIO3_01
 0x01

	)

1093 
	#RF_DIOMAPPING1_DIO3_10
 0x02

	)

1094 
	#RF_DIOMAPPING1_DIO3_11
 0x03

	)

1099 
	#RF_DIOMAPPING2_DIO4_MASK
 0x3F

	)

1100 
	#RF_DIOMAPPING2_DIO4_00
 0x00

1101 
	#RF_DIOMAPPING2_DIO4_01
 0x40

	)

1102 
	#RF_DIOMAPPING2_DIO4_10
 0x80

	)

1103 
	#RF_DIOMAPPING2_DIO4_11
 0xC0

	)

1105 
	#RF_DIOMAPPING2_DIO5_MASK
 0xCF

	)

1106 
	#RF_DIOMAPPING2_DIO5_00
 0x00

1107 
	#RF_DIOMAPPING2_DIO5_01
 0x10

	)

1108 
	#RF_DIOMAPPING2_DIO5_10
 0x20

	)

1109 
	#RF_DIOMAPPING2_DIO5_11
 0x30

	)

1111 
	#RF_DIOMAPPING2_MAP_MASK
 0xFE

	)

1112 
	#RF_DIOMAPPING2_MAP_PREAMBLEDETECT
 0x01

	)

1113 
	#RF_DIOMAPPING2_MAP_RSSI
 0x00

1114 

	)

1138 
	#RF_PLLHOP_FASTHOP_MASK
 0x7F

	)

1139 
	#RF_PLLHOP_FASTHOP_ON
 0x80

	)

1140 
	#RF_PLLHOP_FASTHOP_OFF
 0x00

1141 

	)

1145 
	#RF_TCXO_TCXOINPUT_MASK
 0xEF

	)

1146 
	#RF_TCXO_TCXOINPUT_ON
 0x10

	)

1147 
	#RF_TCXO_TCXOINPUT_OFF
 0x00

1148 

	)

1152 
	#RF_PADAC_20DBM_MASK
 0xF8

	)

1153 
	#RF_PADAC_20DBM_ON
 0x07

	)

1154 
	#RF_PADAC_20DBM_OFF
 0x04

1155 

	)

1159 
	#RF_PLL_BANDWIDTH_MASK
 0x3F

	)

1160 
	#RF_PLL_BANDWIDTH_75
 0x00

	)

1161 
	#RF_PLL_BANDWIDTH_150
 0x40

	)

1162 
	#RF_PLL_BANDWIDTH_225
 0x80

	)

1163 
	#RF_PLL_BANDWIDTH_300
 0xC0

1164 

	)

1168 
	#RF_PLLLOWPN_BANDWIDTH_MASK
 0x3F

	)

1169 
	#RF_PLLLOWPN_BANDWIDTH_75
 0x00

	)

1170 
	#RF_PLLLOWPN_BANDWIDTH_150
 0x40

	)

1171 
	#RF_PLLLOWPN_BANDWIDTH_225
 0x80

	)

1172 
	#RF_PLLLOWPN_BANDWIDTH_300
 0xC0

1173 

	)

1181 
	#RF_BITRATEFRAC_MASK
 0xF0

	)

1183 
	ssSX1232


1185 
uöt8_t
 
	mRegFifo
;

1187 
uöt8_t
 
	mRegOpMode
;

1188 
uöt8_t
 
	mRegBôøãMsb
;

1189 
uöt8_t
 
	mRegBôøãLsb
;

1190 
uöt8_t
 
	mRegFdevMsb
;

1191 
uöt8_t
 
	mRegFdevLsb
;

1192 
uöt8_t
 
	mRegFrfMsb
;

1193 
uöt8_t
 
	mRegFrfMid
;

1194 
uöt8_t
 
	mRegFrfLsb
;

1196 
uöt8_t
 
	mRegPaC⁄fig
;

1197 
uöt8_t
 
	mRegPaRamp
;

1198 
uöt8_t
 
	mRegO˝
;

1200 
uöt8_t
 
	mRegL«
;

1201 
uöt8_t
 
	mRegRxC⁄fig
;

1202 
uöt8_t
 
	mRegRssiC⁄fig
;

1203 
uöt8_t
 
	mRegRssiCﬁlisi⁄
;

1204 
uöt8_t
 
	mRegRssiThªsh
;

1205 
uöt8_t
 
	mRegRssiVÆue
;

1206 
uöt8_t
 
	mRegRxBw
;

1207 
uöt8_t
 
	mRegAfcBw
;

1208 
uöt8_t
 
	mRegOokPók
;

1209 
uöt8_t
 
	mRegOokFix
;

1210 
uöt8_t
 
	mRegOokAvg
;

1211 
uöt8_t
 
	mRegRes17
;

1212 
uöt8_t
 
	mRegRes18
;

1213 
uöt8_t
 
	mRegRes19
;

1214 
uöt8_t
 
	mRegAfcFei
;

1215 
uöt8_t
 
	mRegAfcMsb
;

1216 
uöt8_t
 
	mRegAfcLsb
;

1217 
uöt8_t
 
	mRegFeiMsb
;

1218 
uöt8_t
 
	mRegFeiLsb
;

1219 
uöt8_t
 
	mRegPªambÀDëe˘
;

1220 
uöt8_t
 
	mRegRxTimeout1
;

1221 
uöt8_t
 
	mRegRxTimeout2
;

1222 
uöt8_t
 
	mRegRxTimeout3
;

1223 
uöt8_t
 
	mRegRxDñay
;

1225 
uöt8_t
 
	mRegOsc
;

1227 
uöt8_t
 
	mRegPªambÀMsb
;

1228 
uöt8_t
 
	mRegPªambÀLsb
;

1229 
uöt8_t
 
	mRegSyncC⁄fig
;

1230 
uöt8_t
 
	mRegSyncVÆue1
;

1231 
uöt8_t
 
	mRegSyncVÆue2
;

1232 
uöt8_t
 
	mRegSyncVÆue3
;

1233 
uöt8_t
 
	mRegSyncVÆue4
;

1234 
uöt8_t
 
	mRegSyncVÆue5
;

1235 
uöt8_t
 
	mRegSyncVÆue6
;

1236 
uöt8_t
 
	mRegSyncVÆue7
;

1237 
uöt8_t
 
	mRegSyncVÆue8
;

1238 
uöt8_t
 
	mRegPackëC⁄fig1
;

1239 
uöt8_t
 
	mRegPackëC⁄fig2
;

1240 
uöt8_t
 
	mRegPaylﬂdLígth
;

1241 
uöt8_t
 
	mRegNodeAdrs
;

1242 
uöt8_t
 
	mRegBrﬂdˇ°Adrs
;

1243 
uöt8_t
 
	mRegFifoThªsh
;

1245 
uöt8_t
 
	mRegSeqC⁄fig1
;

1246 
uöt8_t
 
	mRegSeqC⁄fig2
;

1247 
uöt8_t
 
	mRegTimîResﬁ
;

1248 
uöt8_t
 
	mRegTimî1C€f
;

1249 
uöt8_t
 
	mRegTimî2C€f
;

1251 
uöt8_t
 
	mRegImageCÆ
;

1252 
uöt8_t
 
	mRegTemp
;

1253 
uöt8_t
 
	mRegLowB©
;

1255 
uöt8_t
 
	mRegIrqFœgs1
;

1256 
uöt8_t
 
	mRegIrqFœgs2
;

1258 
uöt8_t
 
	mRegDioM≠pög1
;

1259 
uöt8_t
 
	mRegDioM≠pög2
;

1261 
uöt8_t
 
	mRegVîsi⁄
;

1263 
uöt8_t
 
	mRegAgcRef
;

1264 
uöt8_t
 
	mRegAgcThªsh1
;

1265 
uöt8_t
 
	mRegAgcThªsh2
;

1266 
uöt8_t
 
	mRegAgcThªsh3
;

1268 
uöt8_t
 
	mRegTe°Re£rved47
[0x4B - 0x47];

1270 
uöt8_t
 
	mRegPŒH›
;

1272 
uöt8_t
 
	mRegTe°Re£rved4C
[0x58-0x4C];

1274 
uöt8_t
 
	mRegTcxo
;

1276 
uöt8_t
 
	mRegTe°Re£rved59
;

1278 
uöt8_t
 
	mRegPaDac
;

1280 
uöt8_t
 
	mRegTe°Re£rved5B
;

1282 
uöt8_t
 
	mRegPŒ
;

1284 
uöt8_t
 
	mRegTe°Re£rved5D
;

1286 
uöt8_t
 
	mRegPŒLowPn
;

1288 
uöt8_t
 
	mRegTe°Re£rved5F
[0x6C - 0x5F];

1290 
uöt8_t
 
	mRegF‹mîTemp
;

1292 
uöt8_t
 
	mRegTe°Re£rved6D
[0x70 - 0x6D];

1294 
uöt8_t
 
	mRegBôøãFøc
;

1295 }
	ttSX1232
;

1297 
tSX1232
* 
SX1232
;

1298 
uöt8_t
 
SX1232Regs
[0x70];

1303 
SX1232Inô
( );

1308 
SX1232SëDeÁu…s
( );

1313 
SX1232Re£t
( );

1318 
SX1232RxCÆibøã
( );

1325 
SX1232SëOpMode
–
uöt8_t
 
›Mode
 );

1332 
uöt8_t
 
SX1232GëOpMode
( );

1339 
öt32_t
 
SX1232RódFei
( );

1346 
öt32_t
 
SX1232RódAfc
( );

1353 
uöt8_t
 
SX1232RódRxGaö
( );

1360 
SX1232RódRssi
( );

1367 
uöt8_t
 
SX1232GëPackëRxGaö
( );

1374 
SX1232GëPackëRssi
( );

1381 
uöt32_t
 
SX1232GëPackëAfc
( );

1386 
SX1232SèπRx
( );

1394 
SX1232GëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 );

1403 
SX1232SëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 );

1412 
uöt8_t
 
SX1232GëRFSèã
( );

1419 
SX1232SëRFSèã
–
uöt8_t
 
°©e
 );

1429 
uöt32_t
 
SX1232Pro˚ss
( );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-Fsk.c

21 
	~<°rög.h
>

22 
	~<m©h.h
>

25 
round
();

27 
	~"∂©f‹m.h
"

29 #i‡
deföed
–
USE_SX1272_RADIO
 )

31 
	~"ødio.h
"

33 
	~"sx1272-HÆ.h
"

34 
	~"sx1272.h
"

36 
	~"sx1272-FskMisc.h
"

37 
	~"sx1272-Fsk.h
"

41 
tFskSëtögs
 
	gFskSëtögs
 =

49 
åue
,

50 
åue
,

56 
tFskSëtögs
 
	gFskSëtögs
 =

64 
åue
,

65 
åue
,

72 
tSX1272
* 
	gSX1272
;

77 
uöt8_t
 
	gRFBuf„r
[
RF_BUFFER_SIZE
];

82 
uöt8_t
 
	gD©aChunkSize
 = 32;

88 
uöt8_t
 
	gRFSèã
 = 
RF_STATE_IDLE
;

104 
uöt32_t
 
	gPackëTimeout
;

111 
uöt32_t
 
	gPªambÀ2SyncTimeout
;

113 
boﬁ
 
	gPªambÀDëe˘ed
 = 
Ál£
;

114 
boﬁ
 
	gSyncW‹dDëe˘ed
 = 
Ál£
;

115 
boﬁ
 
	gPackëDëe˘ed
 = 
Ál£
;

116 
uöt16_t
 
	gRxPackëSize
 = 0;

117 
uöt8_t
 
	gRxByãsRód
 = 0;

118 
uöt8_t
 
	gTxByãsSít
 = 0;

119 
	gRxPackëRssiVÆue
;

120 
uöt32_t
 
	gRxPackëAfcVÆue
;

121 
uöt8_t
 
	gRxGaö
 = 1;

122 
uöt32_t
 
	gRxTimeoutTimî
 = 0;

123 
uöt32_t
 
	gPªambÀ2SyncTimî
 = 0;

128 
uöt16_t
 
	gTxPackëSize
 = 0;

129 
uöt32_t
 
	gTxTimeoutTimî
 = 0;

131 
	$SX1272FskInô
( )

133 
RFSèã
 = 
RF_STATE_IDLE
;

135 
	`SX1272FskSëDeÁu…s
( );

137 
	`SX1272RódBuf„r
–
REG_OPMODE
, 
SX1272Regs
 + 1, 0x70 - 1 );

140 
SX1272
->
RegOpMode
 = 
RF_OPMODE_MODULATIONTYPE_FSK
 | 
RF_OPMODE_SLEEP
;

141 
	`SX1272Wrôe
–
REG_OPMODE
, 
SX1272
->
RegOpMode
 );

143 #i‡–
PLATFORM
 =
SX12xxEigî
 )

145 
SX1272
->
RegPaC⁄fig
 = ( SX1272->RegPaC⁄fig & 
RF_PACONFIG_PASELECT_PABOOST
 ) | RF_PACONFIG_PASELECT_PABOOST;

148 
SX1272
->
RegPaC⁄fig
 = ( SX1272->RegPaC⁄fig & 
RF_PACONFIG_PASELECT_PABOOST
 ) | 
RF_PACONFIG_PASELECT_RFO
;

151 
SX1272
->
RegL«
 = 
RF_LNA_GAIN_G1
 | 
RF_LNA_BOOST_ON
;

153 if–
FskSëtögs
.
AfcOn
 =
åue
 )

155 
SX1272
->
RegRxC⁄fig
 = 
RF_RXCONFIG_RESTARTRXONCOLLISION_OFF
 | 
RF_RXCONFIG_AFCAUTO_ON
 |

156 
RF_RXCONFIG_AGCAUTO_ON
 | 
RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT
;

160 
SX1272
->
RegRxC⁄fig
 = 
RF_RXCONFIG_RESTARTRXONCOLLISION_OFF
 | 
RF_RXCONFIG_AFCAUTO_OFF
 |

161 
RF_RXCONFIG_AGCAUTO_ON
 | 
RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT
;

164 
SX1272
->
RegPªambÀLsb
 = 8;

166 
SX1272
->
RegPªambÀDëe˘
 = 
RF_PREAMBLEDETECT_DETECTOR_ON
 | 
RF_PREAMBLEDETECT_DETECTORSIZE_2
 |

167 
RF_PREAMBLEDETECT_DETECTORTOL_10
;

169 
SX1272
->
RegRssiThªsh
 = 0xFF;

171 
SX1272
->
RegSyncC⁄fig
 = 
RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_ON
 | 
RF_SYNCCONFIG_PREAMBLEPOLARITY_AA
 |

172 
RF_SYNCCONFIG_SYNC_ON
 | 
RF_SYNCCONFIG_FIFOFILLCONDITION_AUTO
 |

173 
RF_SYNCCONFIG_SYNCSIZE_4
;

175 
SX1272
->
RegSyncVÆue1
 = 0x69;

176 
SX1272
->
RegSyncVÆue2
 = 0x81;

177 
SX1272
->
RegSyncVÆue3
 = 0x7E;

178 
SX1272
->
RegSyncVÆue4
 = 0x96;

180 
SX1272
->
RegPackëC⁄fig1
 = 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 | 
RF_PACKETCONFIG1_DCFREE_OFF
 |

181 –
FskSëtögs
.
CrcOn
 << 4 ) | 
RF_PACKETCONFIG1_CRCAUTOCLEAR_ON
 |

182 
RF_PACKETCONFIG1_ADDRSFILTERING_OFF
 | 
RF_PACKETCONFIG1_CRCWHITENINGTYPE_CCITT
;

183 
	`SX1272FskGëPackëCrcOn
( );

185 
SX1272
->
RegPaylﬂdLígth
 = 
FskSëtögs
.
PaylﬂdLígth
;

188 
	`SX1272WrôeBuf„r
–
REG_OPMODE
, 
SX1272Regs
 + 1, 0x70 - 1 );

191 
	`SX1272FskSëRFFªquícy
–
FskSëtögs
.
RFFªquícy
 );

192 
	`SX1272FskSëBôøã
–
FskSëtögs
.
Bôøã
 );

193 
	`SX1272FskSëFdev
–
FskSëtögs
.
Fdev
 );

194 
	`SX1272FskSëPa20dBm
–
åue
 );

195 
	`SX1272FskSëRFPowî
–
FskSëtögs
.
Powî
 );

196 
	`SX1272FskSëDccBw
–&
SX1272
->
RegRxBw
, 0, 
FskSëtögs
.
RxBw
 );

197 
	`SX1272FskSëDccBw
–&
SX1272
->
RegAfcBw
, 0, 
FskSëtögs
.
RxBwAfc
 );

198 
	`SX1272FskSëRssiOff£t
( -6 );

200 
	`SX1272FskSëOpMode
–
RF_OPMODE_STANDBY
 );

201 
	}
}

203 
	$SX1272FskSëDeÁu…s
( )

207 
	`SX1272Ród
–
REG_VERSION
, &
SX1272
->
RegVîsi⁄
 );

208 
	}
}

210 
	$SX1272FskSëOpMode
–
uöt8_t
 
›Mode
 )

212 
uöt8_t
 
›ModePªv
 = 
RF_OPMODE_STANDBY
;

213 
boﬁ
 
™ã¬aSwôchTxOnPªv
 = 
åue
;

214 
boﬁ
 
™ã¬aSwôchTxOn
 = 
Ál£
;

216 
›ModePªv
 = 
SX1272
->
RegOpMode
 & ~
RF_OPMODE_MASK
;

218 if–
›Mode
 !
›ModePªv
 )

220 if–
›Mode
 =
RF_OPMODE_TRANSMITTER
 )

222 
™ã¬aSwôchTxOn
 = 
åue
;

226 
™ã¬aSwôchTxOn
 = 
Ál£
;

228 if–
™ã¬aSwôchTxOn
 !
™ã¬aSwôchTxOnPªv
 )

230 
™ã¬aSwôchTxOnPªv
 = 
™ã¬aSwôchTxOn
;

231 
	`RXTX
–
™ã¬aSwôchTxOn
 );

233 
SX1272
->
RegOpMode
 = ( SX1272->RegOpModê& 
RF_OPMODE_MASK
 ) | 
›Mode
;

235 
	`SX1272Wrôe
–
REG_OPMODE
, 
SX1272
->
RegOpMode
 );

237 
	}
}

239 
uöt8_t
 
	$SX1272FskGëOpMode
( )

241 
	`SX1272Ród
–
REG_OPMODE
, &
SX1272
->
RegOpMode
 );

243  
SX1272
->
RegOpMode
 & ~
RF_OPMODE_MASK
;

244 
	}
}

246 
öt32_t
 
	$SX1272FskRódFei
( )

248 
	`SX1272RódBuf„r
–
REG_FEIMSB
, &
SX1272
->
RegFeiMsb
, 2 );

250  ( 
öt32_t
 )–)–––
uöt16_t
 )
SX1272
->
RegFeiMsb
 << 8 ) | ( uöt16_à)SX1272->
RegFeiLsb
 ) * ( )
FREQ_STEP
;

251 
	}
}

253 
öt32_t
 
	$SX1272FskRódAfc
( )

255 
	`SX1272RódBuf„r
–
REG_AFCMSB
, &
SX1272
->
RegAfcMsb
, 2 );

256  ( 
öt32_t
 )–)–––
uöt16_t
 )
SX1272
->
RegAfcMsb
 << 8 ) | ( uöt16_à)SX1272->
RegAfcLsb
 ) * ( )
FREQ_STEP
;

257 
	}
}

259 
uöt8_t
 
	$SX1272FskRódRxGaö
( )

261 
	`SX1272Ród
–
REG_LNA
, &
SX1272
->
RegL«
 );

262 –
SX1272
->
RegL«
 >> 5 ) & 0x07;

263 
	}
}

265 
	$SX1272FskRódRssi
( )

267 
	`SX1272Ród
–
REG_RSSIVALUE
, &
SX1272
->
RegRssiVÆue
 );

269  -–)––)
SX1272
->
RegRssiVÆue
 / 2.0 );

270 
	}
}

272 
uöt8_t
 
	$SX1272FskGëPackëRxGaö
( )

274  
RxGaö
;

275 
	}
}

277 
	$SX1272FskGëPackëRssi
( )

279  
RxPackëRssiVÆue
;

280 
	}
}

282 
uöt32_t
 
	$SX1272FskGëPackëAfc
( )

284  
RxPackëAfcVÆue
;

285 
	}
}

287 
	$SX1272FskSèπRx
( )

289 
	`SX1272FskSëRFSèã
–
RF_STATE_RX_INIT
 );

290 
	}
}

292 
	$SX1272FskGëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 )

294 *
size
 = 
RxPackëSize
;

295 
RxPackëSize
 = 0;

296 
	`mem˝y
––* )
buf„r
, ( * )
RFBuf„r
, ( 
size_t
 )*
size
 );

297 
	}
}

299 
	$SX1272FskSëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 )

301 
TxPackëSize
 = 
size
;

302 
	`mem˝y
––* )
RFBuf„r
, 
buf„r
, ( 
size_t
 )
TxPackëSize
 );

304 
RFSèã
 = 
RF_STATE_TX_INIT
;

305 
	}
}

308 
uöt16_t
 
	$SX1272FskGëPackëPaylﬂdSize
( )

310 
uöt16_t
 
syncSize
;

311 
uöt16_t
 
v¨übÀSize
;

312 
uöt16_t
 
addªssSize
;

313 
uöt16_t
 
∑ylﬂdSize
;

314 
uöt16_t
 
¸cSize
;

316 
syncSize
 = ( 
SX1272
->
RegSyncC⁄fig
 & 0x07 ) + 1;

317 
v¨übÀSize
 = ( ( 
SX1272
->
RegPackëC⁄fig1
 & 0x80 ) == 0x80 ) ? 1 : 0;

318 
addªssSize
 = ( ( 
SX1272
->
RegPackëC⁄fig1
 & 0x06 ) != 0x00 ) ? 1 : 0;

319 
∑ylﬂdSize
 = 
SX1272
->
RegPaylﬂdLígth
;

320 
¸cSize
 = ( ( 
SX1272
->
RegPackëC⁄fig1
 & 0x10 ) == 0x10 ) ? 2 : 0;

322  
syncSize
 + 
v¨übÀSize
 + 
addªssSize
 + 
∑ylﬂdSize
 + 
¸cSize
;

323 
	}
}

326 
uöt16_t
 
	$SX1272FskGëPackëHódîSize
( )

328 
uöt16_t
 
¥ómbÀSize
;

329 
uöt16_t
 
syncSize
;

331 
¥ómbÀSize
 = ( ( 
uöt16_t
 )
SX1272
->
RegPªambÀMsb
 << 8 ) | ( uöt16_à)SX1272->
RegPªambÀLsb
;

332 
syncSize
 = ( 
SX1272
->
RegSyncC⁄fig
 & 0x07 ) + 1;

334  
¥ómbÀSize
 + 
syncSize
;

335 
	}
}

337 
uöt8_t
 
	$SX1272FskGëRFSèã
( )

339  
RFSèã
;

340 
	}
}

342 
	$SX1272FskSëRFSèã
–
uöt8_t
 
°©e
 )

344 
RFSèã
 = 
°©e
;

345 
	}
}

347 
uöt32_t
 
	$SX1272FskPro˚ss
( )

349 
uöt32_t
 
ªsu…
 = 
RF_BUSY
;

351  
RFSèã
 )

353 
RF_STATE_IDLE
:

356 
RF_STATE_RX_INIT
:

358 if––
SX1272
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_CRC_ON
 ) == RF_PACKETCONFIG1_CRC_ON )

361 
SX1272
->
RegDioM≠pög1
 = 
RF_DIOMAPPING1_DIO0_01
 | 
RF_DIOMAPPING1_DIO1_00
 | 
RF_DIOMAPPING1_DIO2_11
 | 
RF_DIOMAPPING1_DIO3_00
;

366 
SX1272
->
RegDioM≠pög1
 = 
RF_DIOMAPPING1_DIO0_00
 | 
RF_DIOMAPPING1_DIO1_00
 | 
RF_DIOMAPPING1_DIO2_11
 | 
RF_DIOMAPPING1_DIO3_00
;

369 
SX1272
->
RegDioM≠pög2
 = 
RF_DIOMAPPING2_DIO4_11
 | 
RF_DIOMAPPING2_DIO5_10
 | 
RF_DIOMAPPING2_MAP_PREAMBLEDETECT
;

370 
	`SX1272WrôeBuf„r
–
REG_DIOMAPPING1
, &
SX1272
->
RegDioM≠pög1
, 2 );

372 
	`SX1272FskSëOpMode
–
RF_OPMODE_RECEIVER
 );

374 
	`mem£t
–
RFBuf„r
, 0, ( 
size_t
 )
RF_BUFFER_SIZE
 );

376 
PackëTimeout
 = ( 
uöt16_t
 )–
	`round
––8.0 * ( ( )
	`SX1272FskGëPackëPaylﬂdSize
–ËË/ ( )
FskSëtögs
.
Bôøã
 ) * 1000.0 ) + 1.0 );

377 
PackëTimeout
 = PacketTimeout + ( PacketTimeout >> 1 );

379 
PªambÀ2SyncTimeout
 = 
PackëTimeout
;

381 
PªambÀ2SyncTimî
 = 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

383 
SX1272
->
RegFifoThªsh
 = 
RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY
 | 0x20;

384 
	`SX1272Wrôe
–
REG_FIFOTHRESH
, 
SX1272
->
RegFifoThªsh
 );

386 
PªambÀDëe˘ed
 = 
Ál£
;

387 
SyncW‹dDëe˘ed
 = 
Ál£
;

388 
PackëDëe˘ed
 = 
Ál£
;

389 
RxByãsRód
 = 0;

390 
RxPackëSize
 = 0;

391 
RFSèã
 = 
RF_STATE_RX_SYNC
;

393 
RF_STATE_RX_SYNC
:

394 if––
DIO4
 =1 ) && ( 
PªambÀDëe˘ed
 =
Ál£
 ) )

396 
PªambÀDëe˘ed
 = 
åue
;

397 
PªambÀ2SyncTimî
 = 
	`GET_TICK_COUNT
( );

399 if––
DIO2
 =1 ) && ( 
PªambÀDëe˘ed
 =
åue
 ) && ( 
SyncW‹dDëe˘ed
 =
Ál£
 ) )

401 
SyncW‹dDëe˘ed
 = 
åue
;

403 
RxPackëRssiVÆue
 = 
	`SX1272FskRódRssi
( );

405 
RxPackëAfcVÆue
 = 
	`SX1272FskRódAfc
( );

406 
RxGaö
 = 
	`SX1272FskRódRxGaö
( );

408 
PªambÀ2SyncTimî
 = 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

410 
RFSèã
 = 
RF_STATE_RX_RUNNING
;

414 if––
SyncW‹dDëe˘ed
 =
Ál£
 ) && ( 
PªambÀDëe˘ed
 =
åue
 ) && ( ( 
	`GET_TICK_COUNT
–Ë- 
PªambÀ2SyncTimî
 ) > 
PªambÀ2SyncTimeout
 ) )

416 
RFSèã
 = 
RF_STATE_RX_INIT
;

417 
	`SX1272Wrôe
–
REG_RXCONFIG
, 
SX1272
->
RegRxC⁄fig
 | 
RF_RXCONFIG_RESTARTRXWITHPLLLOCK
 );

419 if––
SyncW‹dDëe˘ed
 =
Ál£
 ) &&

420 –
PªambÀDëe˘ed
 =
Ál£
 ) &&

421 –
PackëDëe˘ed
 =
Ál£
 ) &&

422 ––
	`GET_TICK_COUNT
–Ë- 
RxTimeoutTimî
 ) > 
PackëTimeout
 ) )

424 
RFSèã
 = 
RF_STATE_RX_TIMEOUT
;

427 
RF_STATE_RX_RUNNING
:

428 if–
RxPackëSize
 > 
RF_BUFFER_SIZE_MAX
 )

430 
RFSèã
 = 
RF_STATE_RX_LEN_ERROR
;

434 if–
DIO1
 == 1 )

436 if––
RxPackëSize
 =0 ) && ( 
RxByãsRód
 == 0 ) )

438 if––
SX1272
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 ) == RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE )

440 
	`SX1272RódFifo
––
uöt8_t
* )&
RxPackëSize
, 1 );

444 
RxPackëSize
 = 
SX1272
->
RegPaylﬂdLígth
;

448 if––
RxPackëSize
 - 
RxByãsRód
 ) > ( 
SX1272
->
RegFifoThªsh
 & 0x3F ) )

450 
	`SX1272RódFifo
––
RFBuf„r
 + 
RxByãsRód
 ), ( 
SX1272
->
RegFifoThªsh
 & 0x3F ) );

451 
RxByãsRód
 +–
SX1272
->
RegFifoThªsh
 & 0x3F );

455 
	`SX1272RódFifo
––
RFBuf„r
 + 
RxByãsRód
 ), 
RxPackëSize
 - RxBytesRead );

456 
RxByãsRód
 +–
RxPackëSize
 - RxBytesRead );

460 if–
DIO0
 == 1 )

462 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

463 if––
RxPackëSize
 =0 ) && ( 
RxByãsRód
 == 0 ) )

465 if––
SX1272
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 ) == RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE )

467 
	`SX1272RódFifo
––
uöt8_t
* )&
RxPackëSize
, 1 );

471 
RxPackëSize
 = 
SX1272
->
RegPaylﬂdLígth
;

473 
	`SX1272RódFifo
–
RFBuf„r
 + 
RxByãsRód
, 
RxPackëSize
 - RxBytesRead );

474 
RxByãsRód
 +–
RxPackëSize
 - RxBytesRead );

475 
PackëDëe˘ed
 = 
åue
;

476 
RFSèã
 = 
RF_STATE_RX_DONE
;

480 
	`SX1272RódFifo
–
RFBuf„r
 + 
RxByãsRód
, 
RxPackëSize
 - RxBytesRead );

481 
RxByãsRód
 +–
RxPackëSize
 - RxBytesRead );

482 
PackëDëe˘ed
 = 
åue
;

483 
RFSèã
 = 
RF_STATE_RX_DONE
;

488 if––
PackëDëe˘ed
 =
Ál£
 ) && ( ( 
	`GET_TICK_COUNT
–Ë- 
RxTimeoutTimî
 ) > 
PackëTimeout
 ) )

490 
RFSèã
 = 
RF_STATE_RX_TIMEOUT
;

493 
RF_STATE_RX_DONE
:

494 
RxByãsRód
 = 0;

495 
RFSèã
 = 
RF_STATE_RX_INIT
;

496 
ªsu…
 = 
RF_RX_DONE
;

498 
RF_STATE_RX_TIMEOUT
:

499 
RxByãsRód
 = 0;

500 
RxPackëSize
 = 0;

501 
	`SX1272Wrôe
–
REG_RXCONFIG
, 
SX1272
->
RegRxC⁄fig
 | 
RF_RXCONFIG_RESTARTRXWITHPLLLOCK
 );

502 
RFSèã
 = 
RF_STATE_RX_INIT
;

503 
ªsu…
 = 
RF_RX_TIMEOUT
;

505 
RF_STATE_RX_LEN_ERROR
:

506 
RxByãsRód
 = 0;

507 
RxPackëSize
 = 0;

508 
	`SX1272Wrôe
–
REG_RXCONFIG
, 
SX1272
->
RegRxC⁄fig
 | 
RF_RXCONFIG_RESTARTRXWITHPLLLOCK
 );

509 
RFSèã
 = 
RF_STATE_RX_INIT
;

510 
ªsu…
 = 
RF_LEN_ERROR
;

513 
RF_STATE_TX_INIT
:

516 
SX1272
->
RegDioM≠pög1
 = 
RF_DIOMAPPING1_DIO0_00
 | 
RF_DIOMAPPING1_DIO1_00
 | 
RF_DIOMAPPING1_DIO2_00
 | 
RF_DIOMAPPING1_DIO3_01
;

518 
SX1272
->
RegDioM≠pög2
 = 
RF_DIOMAPPING2_DIO4_00
 | 
RF_DIOMAPPING2_DIO5_10
;

519 
	`SX1272WrôeBuf„r
–
REG_DIOMAPPING1
, &
SX1272
->
RegDioM≠pög1
, 2 );

521 
SX1272
->
RegFifoThªsh
 = 
RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY
 | 0x18;

522 
	`SX1272Wrôe
–
REG_FIFOTHRESH
, 
SX1272
->
RegFifoThªsh
 );

524 
	`SX1272FskSëOpMode
–
RF_OPMODE_TRANSMITTER
 );

525 
RFSèã
 = 
RF_STATE_TX_READY_WAIT
;

526 
TxByãsSít
 = 0;

528 
RF_STATE_TX_READY_WAIT
:

529 if–
DIO3
 == 1 )

531 if––
SX1272
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 ) == RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE )

533 
	`SX1272WrôeFifo
––
uöt8_t
* )&
TxPackëSize
, 1 );

536 if––
TxPackëSize
 > 0 ) && ( TxPacketSize <= 64 ) )

538 
D©aChunkSize
 = 
TxPackëSize
;

542 
D©aChunkSize
 = 32;

545 
	`SX1272WrôeFifo
–
RFBuf„r
, 
D©aChunkSize
 );

546 
TxByãsSít
 +
D©aChunkSize
;

547 
TxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

548 
RFSèã
 = 
RF_STATE_TX_RUNNING
;

552 
RF_STATE_TX_RUNNING
:

553 if–
DIO1
 == 0 )

555 if––
TxPackëSize
 - 
TxByãsSít
 ) > 
D©aChunkSize
 )

557 
	`SX1272WrôeFifo
––
RFBuf„r
 + 
TxByãsSít
 ), 
D©aChunkSize
 );

558 
TxByãsSít
 +
D©aChunkSize
;

563 
	`SX1272WrôeFifo
–
RFBuf„r
 + 
TxByãsSít
, 
TxPackëSize
 - TxBytesSent );

564 
TxByãsSít
 +
TxPackëSize
 - TxBytesSent;

568 if–
DIO0
 == 1 )

570 
TxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

571 
RFSèã
 = 
RF_STATE_TX_DONE
;

572 
	`SX1272FskSëOpMode
–
RF_OPMODE_STANDBY
 );

576 if––
	`GET_TICK_COUNT
–Ë- 
TxTimeoutTimî
 ) > 
	`TICK_RATE_MS
( 1000 ) )

578 
RFSèã
 = 
RF_STATE_TX_TIMEOUT
;

581 
RF_STATE_TX_DONE
:

582 
RFSèã
 = 
RF_STATE_IDLE
;

583 
ªsu…
 = 
RF_TX_DONE
;

585 
RF_STATE_TX_TIMEOUT
:

586 
RFSèã
 = 
RF_STATE_IDLE
;

587 
ªsu…
 = 
RF_TX_TIMEOUT
;

592  
ªsu…
;

593 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-Fsk.h

21 #i‚de‡
__SX1272_FSK_H__


22 
	#__SX1272_FSK_H__


	)

28 
	ssFskSëtögs


30 
uöt32_t
 
	mRFFªquícy
;

31 
uöt32_t
 
	mBôøã
;

32 
uöt32_t
 
	mFdev
;

33 
öt8_t
 
	mPowî
;

34 
uöt32_t
 
	mRxBw
;

35 
uöt32_t
 
	mRxBwAfc
;

36 
boﬁ
 
	mCrcOn
;

37 
boﬁ
 
	mAfcOn
;

38 
uöt8_t
 
	mPaylﬂdLígth
;

39 }
	ttFskSëtögs
;

44 
	#RF_BUFFER_SIZE_MAX
 256

	)

45 
	#RF_BUFFER_SIZE
 256

	)

53 
	mRF_STATE_IDLE
,

54 
	mRF_STATE_RX_INIT
,

55 
	mRF_STATE_RX_SYNC
,

56 
	mRF_STATE_RX_RUNNING
,

57 
	mRF_STATE_RX_DONE
,

58 
	mRF_STATE_RX_TIMEOUT
,

59 
	mRF_STATE_RX_LEN_ERROR
,

60 
	mRF_STATE_TX_INIT
,

61 
	mRF_STATE_TX_READY_WAIT
,

62 
	mRF_STATE_TX_RUNNING
,

63 
	mRF_STATE_TX_DONE
,

64 
	mRF_STATE_TX_TIMEOUT
,

65 }
	ttRFSèãs
;

70 
	#XTAL_FREQ
 32000000

	)

71 
	#FREQ_STEP
 61.03515625

	)

76 
	#REG_FIFO
 0x00

	)

78 
	#REG_OPMODE
 0x01

	)

79 
	#REG_BITRATEMSB
 0x02

	)

80 
	#REG_BITRATELSB
 0x03

	)

81 
	#REG_FDEVMSB
 0x04

	)

82 
	#REG_FDEVLSB
 0x05

	)

83 
	#REG_FRFMSB
 0x06

	)

84 
	#REG_FRFMID
 0x07

	)

85 
	#REG_FRFLSB
 0x08

	)

87 
	#REG_PACONFIG
 0x09

	)

88 
	#REG_PARAMP
 0x0A

	)

89 
	#REG_OCP
 0x0B

	)

91 
	#REG_LNA
 0x0C

	)

92 
	#REG_RXCONFIG
 0x0D

	)

93 
	#REG_RSSICONFIG
 0x0E

	)

94 
	#REG_RSSICOLLISION
 0x0F

	)

95 
	#REG_RSSITHRESH
 0x10

	)

96 
	#REG_RSSIVALUE
 0x11

	)

97 
	#REG_RXBW
 0x12

	)

98 
	#REG_AFCBW
 0x13

	)

99 
	#REG_OOKPEAK
 0x14

	)

100 
	#REG_OOKFIX
 0x15

	)

101 
	#REG_OOKAVG
 0x16

	)

102 
	#REG_RES17
 0x17

	)

103 
	#REG_RES18
 0x18

	)

104 
	#REG_RES19
 0x19

	)

105 
	#REG_AFCFEI
 0x1A

	)

106 
	#REG_AFCMSB
 0x1B

	)

107 
	#REG_AFCLSB
 0x1C

	)

108 
	#REG_FEIMSB
 0x1D

	)

109 
	#REG_FEILSB
 0x1E

	)

110 
	#REG_PREAMBLEDETECT
 0x1F

	)

111 
	#REG_RXTIMEOUT1
 0x20

	)

112 
	#REG_RXTIMEOUT2
 0x21

	)

113 
	#REG_RXTIMEOUT3
 0x22

	)

114 
	#REG_RXDELAY
 0x23

	)

116 
	#REG_OSC
 0x24

	)

118 
	#REG_PREAMBLEMSB
 0x25

	)

119 
	#REG_PREAMBLELSB
 0x26

	)

120 
	#REG_SYNCCONFIG
 0x27

	)

121 
	#REG_SYNCVALUE1
 0x28

	)

122 
	#REG_SYNCVALUE2
 0x29

	)

123 
	#REG_SYNCVALUE3
 0x2A

	)

124 
	#REG_SYNCVALUE4
 0x2B

	)

125 
	#REG_SYNCVALUE5
 0x2C

	)

126 
	#REG_SYNCVALUE6
 0x2D

	)

127 
	#REG_SYNCVALUE7
 0x2E

	)

128 
	#REG_SYNCVALUE8
 0x2F

	)

129 
	#REG_PACKETCONFIG1
 0x30

	)

130 
	#REG_PACKETCONFIG2
 0x31

	)

131 
	#REG_PAYLOADLENGTH
 0x32

	)

132 
	#REG_NODEADRS
 0x33

	)

133 
	#REG_BROADCASTADRS
 0x34

	)

134 
	#REG_FIFOTHRESH
 0x35

	)

136 
	#REG_SEQCONFIG1
 0x36

	)

137 
	#REG_SEQCONFIG2
 0x37

	)

138 
	#REG_TIMERRESOL
 0x38

	)

139 
	#REG_TIMER1COEF
 0x39

	)

140 
	#REG_TIMER2COEF
 0x3A

	)

142 
	#REG_IMAGECAL
 0x3B

	)

143 
	#REG_TEMP
 0x3C

	)

144 
	#REG_LOWBAT
 0x3D

	)

146 
	#REG_IRQFLAGS1
 0x3E

	)

147 
	#REG_IRQFLAGS2
 0x3F

	)

149 
	#REG_DIOMAPPING1
 0x40

	)

150 
	#REG_DIOMAPPING2
 0x41

	)

152 
	#REG_VERSION
 0x42

	)

154 
	#REG_AGCREF
 0x43

	)

155 
	#REG_AGCTHRESH1
 0x44

	)

156 
	#REG_AGCTHRESH2
 0x45

	)

157 
	#REG_AGCTHRESH3
 0x46

	)

158 
	#REG_PLLHOP
 0x4B

	)

159 
	#REG_TCXO
 0x58

	)

160 
	#REG_PADAC
 0x5A

	)

161 
	#REG_PLL
 0x5C

	)

162 
	#REG_PLLLOWPN
 0x5E

	)

163 
	#REG_FORMERTEMP
 0x6C

	)

164 
	#REG_BITRATEFRAC
 0x70

	)

177 
	#RF_OPMODE_LONGRANGEMODE_MASK
 0x7F

	)

178 
	#RF_OPMODE_LONGRANGEMODE_OFF
 0x00

	)

179 
	#RF_OPMODE_LONGRANGEMODE_ON
 0x80

	)

181 
	#RF_OPMODE_MODULATIONTYPE_MASK
 0x9F

	)

182 
	#RF_OPMODE_MODULATIONTYPE_FSK
 0x00

183 
	#RF_OPMODE_MODULATIONTYPE_OOK
 0x20

	)

185 
	#RF_OPMODE_MODULATIONSHAPING_MASK
 0xE7

	)

186 
	#RF_OPMODE_MODULATIONSHAPING_00
 0x00

187 
	#RF_OPMODE_MODULATIONSHAPING_01
 0x08

	)

188 
	#RF_OPMODE_MODULATIONSHAPING_10
 0x10

	)

189 
	#RF_OPMODE_MODULATIONSHAPING_11
 0x18

	)

191 
	#RF_OPMODE_MASK
 0xF8

	)

192 
	#RF_OPMODE_SLEEP
 0x00

	)

193 
	#RF_OPMODE_STANDBY
 0x01

194 
	#RF_OPMODE_SYNTHESIZER_TX
 0x02

	)

195 
	#RF_OPMODE_TRANSMITTER
 0x03

	)

196 
	#RF_OPMODE_SYNTHESIZER_RX
 0x04

	)

197 
	#RF_OPMODE_RECEIVER
 0x05

	)

202 
	#RF_BITRATEMSB_1200_BPS
 0x68

	)

203 
	#RF_BITRATELSB_1200_BPS
 0x2B

	)

204 
	#RF_BITRATEMSB_2400_BPS
 0x34

	)

205 
	#RF_BITRATELSB_2400_BPS
 0x15

	)

206 
	#RF_BITRATEMSB_4800_BPS
 0x1A

207 
	#RF_BITRATELSB_4800_BPS
 0x0B

208 
	#RF_BITRATEMSB_9600_BPS
 0x0D

	)

209 
	#RF_BITRATELSB_9600_BPS
 0x05

	)

210 
	#RF_BITRATEMSB_15000_BPS
 0x08

	)

211 
	#RF_BITRATELSB_15000_BPS
 0x55

	)

212 
	#RF_BITRATEMSB_19200_BPS
 0x06

	)

213 
	#RF_BITRATELSB_19200_BPS
 0x83

	)

214 
	#RF_BITRATEMSB_38400_BPS
 0x03

	)

215 
	#RF_BITRATELSB_38400_BPS
 0x41

	)

216 
	#RF_BITRATEMSB_76800_BPS
 0x01

	)

217 
	#RF_BITRATELSB_76800_BPS
 0xA1

	)

218 
	#RF_BITRATEMSB_153600_BPS
 0x00

	)

219 
	#RF_BITRATELSB_153600_BPS
 0xD0

	)

220 
	#RF_BITRATEMSB_57600_BPS
 0x02

	)

221 
	#RF_BITRATELSB_57600_BPS
 0x2C

	)

222 
	#RF_BITRATEMSB_115200_BPS
 0x01

	)

223 
	#RF_BITRATELSB_115200_BPS
 0x16

	)

224 
	#RF_BITRATEMSB_12500_BPS
 0x0A

	)

225 
	#RF_BITRATELSB_12500_BPS
 0x00

	)

226 
	#RF_BITRATEMSB_25000_BPS
 0x05

	)

227 
	#RF_BITRATELSB_25000_BPS
 0x00

	)

228 
	#RF_BITRATEMSB_50000_BPS
 0x02

	)

229 
	#RF_BITRATELSB_50000_BPS
 0x80

	)

230 
	#RF_BITRATEMSB_100000_BPS
 0x01

	)

231 
	#RF_BITRATELSB_100000_BPS
 0x40

	)

232 
	#RF_BITRATEMSB_150000_BPS
 0x00

	)

233 
	#RF_BITRATELSB_150000_BPS
 0xD5

	)

234 
	#RF_BITRATEMSB_200000_BPS
 0x00

	)

235 
	#RF_BITRATELSB_200000_BPS
 0xA0

	)

236 
	#RF_BITRATEMSB_250000_BPS
 0x00

	)

237 
	#RF_BITRATELSB_250000_BPS
 0x80

	)

238 
	#RF_BITRATEMSB_32768_BPS
 0x03

	)

239 
	#RF_BITRATELSB_32768_BPS
 0xD1

	)

244 
	#RF_FDEVMSB_2000_HZ
 0x00

	)

245 
	#RF_FDEVLSB_2000_HZ
 0x21

	)

246 
	#RF_FDEVMSB_5000_HZ
 0x00

247 
	#RF_FDEVLSB_5000_HZ
 0x52

248 
	#RF_FDEVMSB_10000_HZ
 0x00

	)

249 
	#RF_FDEVLSB_10000_HZ
 0xA4

	)

250 
	#RF_FDEVMSB_15000_HZ
 0x00

	)

251 
	#RF_FDEVLSB_15000_HZ
 0xF6

	)

252 
	#RF_FDEVMSB_20000_HZ
 0x01

	)

253 
	#RF_FDEVLSB_20000_HZ
 0x48

	)

254 
	#RF_FDEVMSB_25000_HZ
 0x01

	)

255 
	#RF_FDEVLSB_25000_HZ
 0x9A

	)

256 
	#RF_FDEVMSB_30000_HZ
 0x01

	)

257 
	#RF_FDEVLSB_30000_HZ
 0xEC

	)

258 
	#RF_FDEVMSB_35000_HZ
 0x02

	)

259 
	#RF_FDEVLSB_35000_HZ
 0x3D

	)

260 
	#RF_FDEVMSB_40000_HZ
 0x02

	)

261 
	#RF_FDEVLSB_40000_HZ
 0x8F

	)

262 
	#RF_FDEVMSB_45000_HZ
 0x02

	)

263 
	#RF_FDEVLSB_45000_HZ
 0xE1

	)

264 
	#RF_FDEVMSB_50000_HZ
 0x03

	)

265 
	#RF_FDEVLSB_50000_HZ
 0x33

	)

266 
	#RF_FDEVMSB_55000_HZ
 0x03

	)

267 
	#RF_FDEVLSB_55000_HZ
 0x85

	)

268 
	#RF_FDEVMSB_60000_HZ
 0x03

	)

269 
	#RF_FDEVLSB_60000_HZ
 0xD7

	)

270 
	#RF_FDEVMSB_65000_HZ
 0x04

	)

271 
	#RF_FDEVLSB_65000_HZ
 0x29

	)

272 
	#RF_FDEVMSB_70000_HZ
 0x04

	)

273 
	#RF_FDEVLSB_70000_HZ
 0x7B

	)

274 
	#RF_FDEVMSB_75000_HZ
 0x04

	)

275 
	#RF_FDEVLSB_75000_HZ
 0xCD

	)

276 
	#RF_FDEVMSB_80000_HZ
 0x05

	)

277 
	#RF_FDEVLSB_80000_HZ
 0x1F

	)

278 
	#RF_FDEVMSB_85000_HZ
 0x05

	)

279 
	#RF_FDEVLSB_85000_HZ
 0x71

	)

280 
	#RF_FDEVMSB_90000_HZ
 0x05

	)

281 
	#RF_FDEVLSB_90000_HZ
 0xC3

	)

282 
	#RF_FDEVMSB_95000_HZ
 0x06

	)

283 
	#RF_FDEVLSB_95000_HZ
 0x14

	)

284 
	#RF_FDEVMSB_100000_HZ
 0x06

	)

285 
	#RF_FDEVLSB_100000_HZ
 0x66

	)

286 
	#RF_FDEVMSB_110000_HZ
 0x07

	)

287 
	#RF_FDEVLSB_110000_HZ
 0x0A

	)

288 
	#RF_FDEVMSB_120000_HZ
 0x07

	)

289 
	#RF_FDEVLSB_120000_HZ
 0xAE

	)

290 
	#RF_FDEVMSB_130000_HZ
 0x08

	)

291 
	#RF_FDEVLSB_130000_HZ
 0x52

	)

292 
	#RF_FDEVMSB_140000_HZ
 0x08

	)

293 
	#RF_FDEVLSB_140000_HZ
 0xF6

	)

294 
	#RF_FDEVMSB_150000_HZ
 0x09

	)

295 
	#RF_FDEVLSB_150000_HZ
 0x9A

	)

296 
	#RF_FDEVMSB_160000_HZ
 0x0A

	)

297 
	#RF_FDEVLSB_160000_HZ
 0x3D

	)

298 
	#RF_FDEVMSB_170000_HZ
 0x0A

	)

299 
	#RF_FDEVLSB_170000_HZ
 0xE1

	)

300 
	#RF_FDEVMSB_180000_HZ
 0x0B

	)

301 
	#RF_FDEVLSB_180000_HZ
 0x85

	)

302 
	#RF_FDEVMSB_190000_HZ
 0x0C

	)

303 
	#RF_FDEVLSB_190000_HZ
 0x29

	)

304 
	#RF_FDEVMSB_200000_HZ
 0x0C

	)

305 
	#RF_FDEVLSB_200000_HZ
 0xCD

	)

310 
	#RF_FRFMSB_863_MHZ
 0xD7

	)

311 
	#RF_FRFMID_863_MHZ
 0xC0

	)

312 
	#RF_FRFLSB_863_MHZ
 0x00

	)

313 
	#RF_FRFMSB_864_MHZ
 0xD8

	)

314 
	#RF_FRFMID_864_MHZ
 0x00

	)

315 
	#RF_FRFLSB_864_MHZ
 0x00

	)

316 
	#RF_FRFMSB_865_MHZ
 0xD8

	)

317 
	#RF_FRFMID_865_MHZ
 0x40

	)

318 
	#RF_FRFLSB_865_MHZ
 0x00

	)

319 
	#RF_FRFMSB_866_MHZ
 0xD8

	)

320 
	#RF_FRFMID_866_MHZ
 0x80

	)

321 
	#RF_FRFLSB_866_MHZ
 0x00

	)

322 
	#RF_FRFMSB_867_MHZ
 0xD8

	)

323 
	#RF_FRFMID_867_MHZ
 0xC0

	)

324 
	#RF_FRFLSB_867_MHZ
 0x00

	)

325 
	#RF_FRFMSB_868_MHZ
 0xD9

	)

326 
	#RF_FRFMID_868_MHZ
 0x00

	)

327 
	#RF_FRFLSB_868_MHZ
 0x00

	)

328 
	#RF_FRFMSB_869_MHZ
 0xD9

	)

329 
	#RF_FRFMID_869_MHZ
 0x40

	)

330 
	#RF_FRFLSB_869_MHZ
 0x00

	)

331 
	#RF_FRFMSB_870_MHZ
 0xD9

	)

332 
	#RF_FRFMID_870_MHZ
 0x80

	)

333 
	#RF_FRFLSB_870_MHZ
 0x00

	)

335 
	#RF_FRFMSB_902_MHZ
 0xE1

	)

336 
	#RF_FRFMID_902_MHZ
 0x80

	)

337 
	#RF_FRFLSB_902_MHZ
 0x00

	)

338 
	#RF_FRFMSB_903_MHZ
 0xE1

	)

339 
	#RF_FRFMID_903_MHZ
 0xC0

	)

340 
	#RF_FRFLSB_903_MHZ
 0x00

	)

341 
	#RF_FRFMSB_904_MHZ
 0xE2

	)

342 
	#RF_FRFMID_904_MHZ
 0x00

	)

343 
	#RF_FRFLSB_904_MHZ
 0x00

	)

344 
	#RF_FRFMSB_905_MHZ
 0xE2

	)

345 
	#RF_FRFMID_905_MHZ
 0x40

	)

346 
	#RF_FRFLSB_905_MHZ
 0x00

	)

347 
	#RF_FRFMSB_906_MHZ
 0xE2

	)

348 
	#RF_FRFMID_906_MHZ
 0x80

	)

349 
	#RF_FRFLSB_906_MHZ
 0x00

	)

350 
	#RF_FRFMSB_907_MHZ
 0xE2

	)

351 
	#RF_FRFMID_907_MHZ
 0xC0

	)

352 
	#RF_FRFLSB_907_MHZ
 0x00

	)

353 
	#RF_FRFMSB_908_MHZ
 0xE3

	)

354 
	#RF_FRFMID_908_MHZ
 0x00

	)

355 
	#RF_FRFLSB_908_MHZ
 0x00

	)

356 
	#RF_FRFMSB_909_MHZ
 0xE3

	)

357 
	#RF_FRFMID_909_MHZ
 0x40

	)

358 
	#RF_FRFLSB_909_MHZ
 0x00

	)

359 
	#RF_FRFMSB_910_MHZ
 0xE3

	)

360 
	#RF_FRFMID_910_MHZ
 0x80

	)

361 
	#RF_FRFLSB_910_MHZ
 0x00

	)

362 
	#RF_FRFMSB_911_MHZ
 0xE3

	)

363 
	#RF_FRFMID_911_MHZ
 0xC0

	)

364 
	#RF_FRFLSB_911_MHZ
 0x00

	)

365 
	#RF_FRFMSB_912_MHZ
 0xE4

	)

366 
	#RF_FRFMID_912_MHZ
 0x00

	)

367 
	#RF_FRFLSB_912_MHZ
 0x00

	)

368 
	#RF_FRFMSB_913_MHZ
 0xE4

	)

369 
	#RF_FRFMID_913_MHZ
 0x40

	)

370 
	#RF_FRFLSB_913_MHZ
 0x00

	)

371 
	#RF_FRFMSB_914_MHZ
 0xE4

	)

372 
	#RF_FRFMID_914_MHZ
 0x80

	)

373 
	#RF_FRFLSB_914_MHZ
 0x00

	)

374 
	#RF_FRFMSB_915_MHZ
 0xE4

375 
	#RF_FRFMID_915_MHZ
 0xC0

376 
	#RF_FRFLSB_915_MHZ
 0x00

377 
	#RF_FRFMSB_916_MHZ
 0xE5

	)

378 
	#RF_FRFMID_916_MHZ
 0x00

	)

379 
	#RF_FRFLSB_916_MHZ
 0x00

	)

380 
	#RF_FRFMSB_917_MHZ
 0xE5

	)

381 
	#RF_FRFMID_917_MHZ
 0x40

	)

382 
	#RF_FRFLSB_917_MHZ
 0x00

	)

383 
	#RF_FRFMSB_918_MHZ
 0xE5

	)

384 
	#RF_FRFMID_918_MHZ
 0x80

	)

385 
	#RF_FRFLSB_918_MHZ
 0x00

	)

386 
	#RF_FRFMSB_919_MHZ
 0xE5

	)

387 
	#RF_FRFMID_919_MHZ
 0xC0

	)

388 
	#RF_FRFLSB_919_MHZ
 0x00

	)

389 
	#RF_FRFMSB_920_MHZ
 0xE6

	)

390 
	#RF_FRFMID_920_MHZ
 0x00

	)

391 
	#RF_FRFLSB_920_MHZ
 0x00

	)

392 
	#RF_FRFMSB_921_MHZ
 0xE6

	)

393 
	#RF_FRFMID_921_MHZ
 0x40

	)

394 
	#RF_FRFLSB_921_MHZ
 0x00

	)

395 
	#RF_FRFMSB_922_MHZ
 0xE6

	)

396 
	#RF_FRFMID_922_MHZ
 0x80

	)

397 
	#RF_FRFLSB_922_MHZ
 0x00

	)

398 
	#RF_FRFMSB_923_MHZ
 0xE6

	)

399 
	#RF_FRFMID_923_MHZ
 0xC0

	)

400 
	#RF_FRFLSB_923_MHZ
 0x00

	)

401 
	#RF_FRFMSB_924_MHZ
 0xE7

	)

402 
	#RF_FRFMID_924_MHZ
 0x00

	)

403 
	#RF_FRFLSB_924_MHZ
 0x00

	)

404 
	#RF_FRFMSB_925_MHZ
 0xE7

	)

405 
	#RF_FRFMID_925_MHZ
 0x40

	)

406 
	#RF_FRFLSB_925_MHZ
 0x00

	)

407 
	#RF_FRFMSB_926_MHZ
 0xE7

	)

408 
	#RF_FRFMID_926_MHZ
 0x80

	)

409 
	#RF_FRFLSB_926_MHZ
 0x00

	)

410 
	#RF_FRFMSB_927_MHZ
 0xE7

	)

411 
	#RF_FRFMID_927_MHZ
 0xC0

	)

412 
	#RF_FRFLSB_927_MHZ
 0x00

	)

413 
	#RF_FRFMSB_928_MHZ
 0xE8

	)

414 
	#RF_FRFMID_928_MHZ
 0x00

	)

415 
	#RF_FRFLSB_928_MHZ
 0x00

	)

420 
	#RF_PACONFIG_PASELECT_MASK
 0x7F

	)

421 
	#RF_PACONFIG_PASELECT_PABOOST
 0x80

	)

422 
	#RF_PACONFIG_PASELECT_RFO
 0x00

423 

	)

424 
	#RF_PACONFIG_OUTPUTPOWER_MASK
 0xF0

	)

429 
	#RF_PARAMP_LOWPNTXPLL_MASK
 0xE0

	)

430 
	#RF_PARAMP_LOWPNTXPLL_OFF
 0x10

431 
	#RF_PARAMP_LOWPNTXPLL_ON
 0x00

	)

433 
	#RF_PARAMP_MASK
 0xF0

	)

434 
	#RF_PARAMP_3400_US
 0x00

	)

435 
	#RF_PARAMP_2000_US
 0x01

	)

436 
	#RF_PARAMP_1000_US
 0x02

	)

437 
	#RF_PARAMP_0500_US
 0x03

	)

438 
	#RF_PARAMP_0250_US
 0x04

	)

439 
	#RF_PARAMP_0125_US
 0x05

	)

440 
	#RF_PARAMP_0100_US
 0x06

	)

441 
	#RF_PARAMP_0062_US
 0x07

	)

442 
	#RF_PARAMP_0050_US
 0x08

	)

443 
	#RF_PARAMP_0040_US
 0x09

444 
	#RF_PARAMP_0031_US
 0x0A

	)

445 
	#RF_PARAMP_0025_US
 0x0B

	)

446 
	#RF_PARAMP_0020_US
 0x0C

	)

447 
	#RF_PARAMP_0015_US
 0x0D

	)

448 
	#RF_PARAMP_0012_US
 0x0E

	)

449 
	#RF_PARAMP_0010_US
 0x0F

	)

454 
	#RF_OCP_MASK
 0xDF

	)

455 
	#RF_OCP_ON
 0x20

456 
	#RF_OCP_OFF
 0x00

	)

458 
	#RF_OCP_TRIM_MASK
 0xE0

	)

459 
	#RF_OCP_TRIM_045_MA
 0x00

	)

460 
	#RF_OCP_TRIM_050_MA
 0x01

	)

461 
	#RF_OCP_TRIM_055_MA
 0x02

	)

462 
	#RF_OCP_TRIM_060_MA
 0x03

	)

463 
	#RF_OCP_TRIM_065_MA
 0x04

	)

464 
	#RF_OCP_TRIM_070_MA
 0x05

	)

465 
	#RF_OCP_TRIM_075_MA
 0x06

	)

466 
	#RF_OCP_TRIM_080_MA
 0x07

	)

467 
	#RF_OCP_TRIM_085_MA
 0x08

	)

468 
	#RF_OCP_TRIM_090_MA
 0x09

	)

469 
	#RF_OCP_TRIM_095_MA
 0x0A

	)

470 
	#RF_OCP_TRIM_100_MA
 0x0B

471 
	#RF_OCP_TRIM_105_MA
 0x0C

	)

472 
	#RF_OCP_TRIM_110_MA
 0x0D

	)

473 
	#RF_OCP_TRIM_115_MA
 0x0E

	)

474 
	#RF_OCP_TRIM_120_MA
 0x0F

	)

475 
	#RF_OCP_TRIM_130_MA
 0x10

	)

476 
	#RF_OCP_TRIM_140_MA
 0x11

	)

477 
	#RF_OCP_TRIM_150_MA
 0x12

	)

478 
	#RF_OCP_TRIM_160_MA
 0x13

	)

479 
	#RF_OCP_TRIM_170_MA
 0x14

	)

480 
	#RF_OCP_TRIM_180_MA
 0x15

	)

481 
	#RF_OCP_TRIM_190_MA
 0x16

	)

482 
	#RF_OCP_TRIM_200_MA
 0x17

	)

483 
	#RF_OCP_TRIM_210_MA
 0x18

	)

484 
	#RF_OCP_TRIM_220_MA
 0x19

	)

485 
	#RF_OCP_TRIM_230_MA
 0x1A

	)

486 
	#RF_OCP_TRIM_240_MA
 0x1B

	)

491 
	#RF_LNA_GAIN_MASK
 0x1F

	)

492 
	#RF_LNA_GAIN_G1
 0x20

493 
	#RF_LNA_GAIN_G2
 0x40

	)

494 
	#RF_LNA_GAIN_G3
 0x60

	)

495 
	#RF_LNA_GAIN_G4
 0x80

	)

496 
	#RF_LNA_GAIN_G5
 0xA0

	)

497 
	#RF_LNA_GAIN_G6
 0xC0

	)

499 
	#RF_LNA_BOOST_MASK
 0xFC

	)

500 
	#RF_LNA_BOOST_OFF
 0x00

501 
	#RF_LNA_BOOST_ON
 0x03

	)

506 
	#RF_RXCONFIG_RESTARTRXONCOLLISION_MASK
 0x7F

	)

507 
	#RF_RXCONFIG_RESTARTRXONCOLLISION_ON
 0x80

	)

508 
	#RF_RXCONFIG_RESTARTRXONCOLLISION_OFF
 0x00

509 

	)

510 
	#RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK
 0x40

511 

	)

512 
	#RF_RXCONFIG_RESTARTRXWITHPLLLOCK
 0x20

513 

	)

514 
	#RF_RXCONFIG_AFCAUTO_MASK
 0xEF

	)

515 
	#RF_RXCONFIG_AFCAUTO_ON
 0x10

	)

516 
	#RF_RXCONFIG_AFCAUTO_OFF
 0x00

517 

	)

518 
	#RF_RXCONFIG_AGCAUTO_MASK
 0xF7

	)

519 
	#RF_RXCONFIG_AGCAUTO_ON
 0x08

520 
	#RF_RXCONFIG_AGCAUTO_OFF
 0x00

	)

522 
	#RF_RXCONFIG_RXTRIGER_MASK
 0xF8

	)

523 
	#RF_RXCONFIG_RXTRIGER_OFF
 0x00

	)

524 
	#RF_RXCONFIG_RXTRIGER_RSSI
 0x01

	)

525 
	#RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT
 0x06

526 
	#RF_RXCONFIG_RXTRIGER_RSSI_PREAMBLEDETECT
 0x07

	)

531 
	#RF_RSSICONFIG_OFFSET_MASK
 0x07

	)

532 
	#RF_RSSICONFIG_OFFSET_P_00_DB
 0x00

533 
	#RF_RSSICONFIG_OFFSET_P_01_DB
 0x08

	)

534 
	#RF_RSSICONFIG_OFFSET_P_02_DB
 0x10

	)

535 
	#RF_RSSICONFIG_OFFSET_P_03_DB
 0x18

	)

536 
	#RF_RSSICONFIG_OFFSET_P_04_DB
 0x20

	)

537 
	#RF_RSSICONFIG_OFFSET_P_05_DB
 0x28

	)

538 
	#RF_RSSICONFIG_OFFSET_P_06_DB
 0x30

	)

539 
	#RF_RSSICONFIG_OFFSET_P_07_DB
 0x38

	)

540 
	#RF_RSSICONFIG_OFFSET_P_08_DB
 0x40

	)

541 
	#RF_RSSICONFIG_OFFSET_P_09_DB
 0x48

	)

542 
	#RF_RSSICONFIG_OFFSET_P_10_DB
 0x50

	)

543 
	#RF_RSSICONFIG_OFFSET_P_11_DB
 0x58

	)

544 
	#RF_RSSICONFIG_OFFSET_P_12_DB
 0x60

	)

545 
	#RF_RSSICONFIG_OFFSET_P_13_DB
 0x68

	)

546 
	#RF_RSSICONFIG_OFFSET_P_14_DB
 0x70

	)

547 
	#RF_RSSICONFIG_OFFSET_P_15_DB
 0x78

	)

548 
	#RF_RSSICONFIG_OFFSET_M_16_DB
 0x80

	)

549 
	#RF_RSSICONFIG_OFFSET_M_15_DB
 0x88

	)

550 
	#RF_RSSICONFIG_OFFSET_M_14_DB
 0x90

	)

551 
	#RF_RSSICONFIG_OFFSET_M_13_DB
 0x98

	)

552 
	#RF_RSSICONFIG_OFFSET_M_12_DB
 0xA0

	)

553 
	#RF_RSSICONFIG_OFFSET_M_11_DB
 0xA8

	)

554 
	#RF_RSSICONFIG_OFFSET_M_10_DB
 0xB0

	)

555 
	#RF_RSSICONFIG_OFFSET_M_09_DB
 0xB8

	)

556 
	#RF_RSSICONFIG_OFFSET_M_08_DB
 0xC0

	)

557 
	#RF_RSSICONFIG_OFFSET_M_07_DB
 0xC8

	)

558 
	#RF_RSSICONFIG_OFFSET_M_06_DB
 0xD0

	)

559 
	#RF_RSSICONFIG_OFFSET_M_05_DB
 0xD8

	)

560 
	#RF_RSSICONFIG_OFFSET_M_04_DB
 0xE0

	)

561 
	#RF_RSSICONFIG_OFFSET_M_03_DB
 0xE8

	)

562 
	#RF_RSSICONFIG_OFFSET_M_02_DB
 0xF0

	)

563 
	#RF_RSSICONFIG_OFFSET_M_01_DB
 0xF8

	)

565 
	#RF_RSSICONFIG_SMOOTHING_MASK
 0xF8

	)

566 
	#RF_RSSICONFIG_SMOOTHING_2
 0x00

	)

567 
	#RF_RSSICONFIG_SMOOTHING_4
 0x01

	)

568 
	#RF_RSSICONFIG_SMOOTHING_8
 0x02

569 
	#RF_RSSICONFIG_SMOOTHING_16
 0x03

	)

570 
	#RF_RSSICONFIG_SMOOTHING_32
 0x04

	)

571 
	#RF_RSSICONFIG_SMOOTHING_64
 0x05

	)

572 
	#RF_RSSICONFIG_SMOOTHING_128
 0x06

	)

573 
	#RF_RSSICONFIG_SMOOTHING_256
 0x07

	)

578 
	#RF_RSSICOLISION_THRESHOLD
 0x0A

579 

	)

583 
	#RF_RSSITHRESH_THRESHOLD
 0xFF

584 

	)

592 
	#RF_RXBW_MANT_MASK
 0xE7

	)

593 
	#RF_RXBW_MANT_16
 0x00

	)

594 
	#RF_RXBW_MANT_20
 0x08

	)

595 
	#RF_RXBW_MANT_24
 0x10

596 

	)

597 
	#RF_RXBW_EXP_MASK
 0xF8

	)

598 
	#RF_RXBW_EXP_0
 0x00

	)

599 
	#RF_RXBW_EXP_1
 0x01

	)

600 
	#RF_RXBW_EXP_2
 0x02

	)

601 
	#RF_RXBW_EXP_3
 0x03

	)

602 
	#RF_RXBW_EXP_4
 0x04

	)

603 
	#RF_RXBW_EXP_5
 0x05

604 
	#RF_RXBW_EXP_6
 0x06

	)

605 
	#RF_RXBW_EXP_7
 0x07

	)

610 
	#RF_AFCBW_MANTAFC_MASK
 0xE7

	)

611 
	#RF_AFCBW_MANTAFC_16
 0x00

	)

612 
	#RF_AFCBW_MANTAFC_20
 0x08

613 
	#RF_AFCBW_MANTAFC_24
 0x10

	)

615 
	#RF_AFCBW_EXPAFC_MASK
 0xF8

	)

616 
	#RF_AFCBW_EXPAFC_0
 0x00

	)

617 
	#RF_AFCBW_EXPAFC_1
 0x01

	)

618 
	#RF_AFCBW_EXPAFC_2
 0x02

	)

619 
	#RF_AFCBW_EXPAFC_3
 0x03

620 
	#RF_AFCBW_EXPAFC_4
 0x04

	)

621 
	#RF_AFCBW_EXPAFC_5
 0x05

	)

622 
	#RF_AFCBW_EXPAFC_6
 0x06

	)

623 
	#RF_AFCBW_EXPAFC_7
 0x07

	)

628 
	#RF_OOKPEAK_BITSYNC_MASK
 0xDF

629 
	#RF_OOKPEAK_BITSYNC_ON
 0x20

630 
	#RF_OOKPEAK_BITSYNC_OFF
 0x00

	)

632 
	#RF_OOKPEAK_OOKTHRESHTYPE_MASK
 0xE7

	)

633 
	#RF_OOKPEAK_OOKTHRESHTYPE_FIXED
 0x00

	)

634 
	#RF_OOKPEAK_OOKTHRESHTYPE_PEAK
 0x08

635 
	#RF_OOKPEAK_OOKTHRESHTYPE_AVERAGE
 0x10

	)

637 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_MASK
 0xF8

	)

638 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_0_5_DB
 0x00

639 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_1_0_DB
 0x01

	)

640 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_1_5_DB
 0x02

	)

641 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_2_0_DB
 0x03

	)

642 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_3_0_DB
 0x04

	)

643 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_4_0_DB
 0x05

	)

644 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_5_0_DB
 0x06

	)

645 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_6_0_DB
 0x07

	)

650 
	#RF_OOKFIX_OOKFIXEDTHRESHOLD
 0x0C

651 

	)

655 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_MASK
 0x1F

	)

656 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_000
 0x00

657 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_001
 0x20

	)

658 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_010
 0x40

	)

659 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_011
 0x60

	)

660 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_100
 0x80

	)

661 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_101
 0xA0

	)

662 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_110
 0xC0

	)

663 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_111
 0xE0

	)

665 
	#RF_OOKAVG_AVERAGEOFFSET_MASK
 0xF3

	)

666 
	#RF_OOKAVG_AVERAGEOFFSET_0_DB
 0x00

667 
	#RF_OOKAVG_AVERAGEOFFSET_2_DB
 0x04

	)

668 
	#RF_OOKAVG_AVERAGEOFFSET_4_DB
 0x08

	)

669 
	#RF_OOKAVG_AVERAGEOFFSET_6_DB
 0x0C

	)

671 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_MASK
 0xFC

	)

672 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_00
 0x00

	)

673 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_01
 0x01

	)

674 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_10
 0x02

675 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_11
 0x03

	)

680 
	#RF_AFCFEI_AGCSTART
 0x10

	)

682 
	#RF_AFCFEI_AFCCLEAR
 0x02

	)

684 
	#RF_AFCFEI_AFCAUTOCLEAR_MASK
 0xFE

	)

685 
	#RF_AFCFEI_AFCAUTOCLEAR_ON
 0x01

	)

686 
	#RF_AFCFEI_AFCAUTOCLEAR_OFF
 0x00

687 

	)

707 
	#RF_PREAMBLEDETECT_DETECTOR_MASK
 0x7F

	)

708 
	#RF_PREAMBLEDETECT_DETECTOR_ON
 0x80

709 
	#RF_PREAMBLEDETECT_DETECTOR_OFF
 0x00

	)

711 
	#RF_PREAMBLEDETECT_DETECTORSIZE_MASK
 0x9F

	)

712 
	#RF_PREAMBLEDETECT_DETECTORSIZE_1
 0x00

	)

713 
	#RF_PREAMBLEDETECT_DETECTORSIZE_2
 0x20

714 
	#RF_PREAMBLEDETECT_DETECTORSIZE_3
 0x40

	)

716 
	#RF_PREAMBLEDETECT_DETECTORTOL_MASK
 0xE0

	)

717 
	#RF_PREAMBLEDETECT_DETECTORTOL_0
 0x00

	)

718 
	#RF_PREAMBLEDETECT_DETECTORTOL_1
 0x01

	)

719 
	#RF_PREAMBLEDETECT_DETECTORTOL_2
 0x02

	)

720 
	#RF_PREAMBLEDETECT_DETECTORTOL_3
 0x03

	)

721 
	#RF_PREAMBLEDETECT_DETECTORTOL_4
 0x04

	)

722 
	#RF_PREAMBLEDETECT_DETECTORTOL_5
 0x05

	)

723 
	#RF_PREAMBLEDETECT_DETECTORTOL_6
 0x06

	)

724 
	#RF_PREAMBLEDETECT_DETECTORTOL_7
 0x07

	)

725 
	#RF_PREAMBLEDETECT_DETECTORTOL_8
 0x08

	)

726 
	#RF_PREAMBLEDETECT_DETECTORTOL_9
 0x09

	)

727 
	#RF_PREAMBLEDETECT_DETECTORTOL_10
 0x0A

728 
	#RF_PREAMBLEDETECT_DETECTORTOL_11
 0x0B

	)

729 
	#RF_PREAMBLEDETECT_DETECTORTOL_12
 0x0C

	)

730 
	#RF_PREAMBLEDETECT_DETECTORTOL_13
 0x0D

	)

731 
	#RF_PREAMBLEDETECT_DETECTORTOL_14
 0x0E

	)

732 
	#RF_PREAMBLEDETECT_DETECTORTOL_15
 0x0F

	)

733 
	#RF_PREAMBLEDETECT_DETECTORTOL_16
 0x10

	)

734 
	#RF_PREAMBLEDETECT_DETECTORTOL_17
 0x11

	)

735 
	#RF_PREAMBLEDETECT_DETECTORTOL_18
 0x12

	)

736 
	#RF_PREAMBLEDETECT_DETECTORTOL_19
 0x13

	)

737 
	#RF_PREAMBLEDETECT_DETECTORTOL_20
 0x14

	)

738 
	#RF_PREAMBLEDETECT_DETECTORTOL_21
 0x15

	)

739 
	#RF_PREAMBLEDETECT_DETECTORTOL_22
 0x16

	)

740 
	#RF_PREAMBLEDETECT_DETECTORTOL_23
 0x17

	)

741 
	#RF_PREAMBLEDETECT_DETECTORTOL_24
 0x18

	)

742 
	#RF_PREAMBLEDETECT_DETECTORTOL_25
 0x19

	)

743 
	#RF_PREAMBLEDETECT_DETECTORTOL_26
 0x1A

	)

744 
	#RF_PREAMBLEDETECT_DETECTORTOL_27
 0x1B

	)

745 
	#RF_PREAMBLEDETECT_DETECTORTOL_28
 0x1C

	)

746 
	#RF_PREAMBLEDETECT_DETECTORTOL_29
 0x1D

	)

747 
	#RF_PREAMBLEDETECT_DETECTORTOL_30
 0x1E

	)

748 
	#RF_PREAMBLEDETECT_DETECTORTOL_31
 0x1F

	)

753 
	#RF_RXTIMEOUT1_TIMEOUTRXRSSI
 0x00

754 

	)

758 
	#RF_RXTIMEOUT2_TIMEOUTRXPREAMBLE
 0x00

759 

	)

763 
	#RF_RXTIMEOUT3_TIMEOUTSIGNALSYNC
 0x00

764 

	)

768 
	#RF_RXDELAY_INTERPACKETRXDELAY
 0x00

769 

	)

773 
	#RF_OSC_RCCALSTART
 0x08

	)

775 
	#RF_OSC_CLKOUT_MASK
 0xF8

	)

776 
	#RF_OSC_CLKOUT_32_MHZ
 0x00

	)

777 
	#RF_OSC_CLKOUT_16_MHZ
 0x01

	)

778 
	#RF_OSC_CLKOUT_8_MHZ
 0x02

	)

779 
	#RF_OSC_CLKOUT_4_MHZ
 0x03

	)

780 
	#RF_OSC_CLKOUT_2_MHZ
 0x04

	)

781 
	#RF_OSC_CLKOUT_1_MHZ
 0x05

	)

782 
	#RF_OSC_CLKOUT_RC
 0x06

	)

783 
	#RF_OSC_CLKOUT_OFF
 0x07

784 

	)

788 
	#RF_PREAMBLEMSB_SIZE
 0x00

789 
	#RF_PREAMBLELSB_SIZE
 0x03

790 

	)

794 
	#RF_SYNCCONFIG_AUTORESTARTRXMODE_MASK
 0x3F

	)

795 
	#RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_ON
 0x80

796 
	#RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_OFF
 0x40

	)

797 
	#RF_SYNCCONFIG_AUTORESTARTRXMODE_OFF
 0x00

	)

800 
	#RF_SYNCCONFIG_PREAMBLEPOLARITY_MASK
 0xDF

	)

801 
	#RF_SYNCCONFIG_PREAMBLEPOLARITY_55
 0x20

	)

802 
	#RF_SYNCCONFIG_PREAMBLEPOLARITY_AA
 0x00

803 

	)

804 
	#RF_SYNCCONFIG_SYNC_MASK
 0xEF

	)

805 
	#RF_SYNCCONFIG_SYNC_ON
 0x10

806 
	#RF_SYNCCONFIG_SYNC_OFF
 0x00

	)

808 
	#RF_SYNCCONFIG_FIFOFILLCONDITION_MASK
 0xF7

	)

809 
	#RF_SYNCCONFIG_FIFOFILLCONDITION_AUTO
 0x00

810 
	#RF_SYNCCONFIG_FIFOFILLCONDITION_MANUAL
 0x08

	)

812 
	#RF_SYNCCONFIG_SYNCSIZE_MASK
 0xF8

	)

813 
	#RF_SYNCCONFIG_SYNCSIZE_1
 0x00

	)

814 
	#RF_SYNCCONFIG_SYNCSIZE_2
 0x01

	)

815 
	#RF_SYNCCONFIG_SYNCSIZE_3
 0x02

	)

816 
	#RF_SYNCCONFIG_SYNCSIZE_4
 0x03

817 
	#RF_SYNCCONFIG_SYNCSIZE_5
 0x04

	)

818 
	#RF_SYNCCONFIG_SYNCSIZE_6
 0x05

	)

819 
	#RF_SYNCCONFIG_SYNCSIZE_7
 0x06

	)

820 
	#RF_SYNCCONFIG_SYNCSIZE_8
 0x07

	)

825 
	#RF_SYNCVALUE1_SYNCVALUE
 0x01

826 
	#RF_SYNCVALUE2_SYNCVALUE
 0x01

827 
	#RF_SYNCVALUE3_SYNCVALUE
 0x01

828 
	#RF_SYNCVALUE4_SYNCVALUE
 0x01

829 
	#RF_SYNCVALUE5_SYNCVALUE
 0x01

830 
	#RF_SYNCVALUE6_SYNCVALUE
 0x01

831 
	#RF_SYNCVALUE7_SYNCVALUE
 0x01

832 
	#RF_SYNCVALUE8_SYNCVALUE
 0x01

833 

	)

837 
	#RF_PACKETCONFIG1_PACKETFORMAT_MASK
 0x7F

	)

838 
	#RF_PACKETCONFIG1_PACKETFORMAT_FIXED
 0x00

	)

839 
	#RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 0x80

840 

	)

841 
	#RF_PACKETCONFIG1_DCFREE_MASK
 0x9F

	)

842 
	#RF_PACKETCONFIG1_DCFREE_OFF
 0x00

843 
	#RF_PACKETCONFIG1_DCFREE_MANCHESTER
 0x20

	)

844 
	#RF_PACKETCONFIG1_DCFREE_WHITENING
 0x40

	)

846 
	#RF_PACKETCONFIG1_CRC_MASK
 0xEF

	)

847 
	#RF_PACKETCONFIG1_CRC_ON
 0x10

848 
	#RF_PACKETCONFIG1_CRC_OFF
 0x00

	)

850 
	#RF_PACKETCONFIG1_CRCAUTOCLEAR_MASK
 0xF7

	)

851 
	#RF_PACKETCONFIG1_CRCAUTOCLEAR_ON
 0x00

852 
	#RF_PACKETCONFIG1_CRCAUTOCLEAR_OFF
 0x08

	)

854 
	#RF_PACKETCONFIG1_ADDRSFILTERING_MASK
 0xF9

	)

855 
	#RF_PACKETCONFIG1_ADDRSFILTERING_OFF
 0x00

856 
	#RF_PACKETCONFIG1_ADDRSFILTERING_NODE
 0x02

	)

857 
	#RF_PACKETCONFIG1_ADDRSFILTERING_NODEBROADCAST
 0x04

	)

859 
	#RF_PACKETCONFIG1_CRCWHITENINGTYPE_MASK
 0xFE

	)

860 
	#RF_PACKETCONFIG1_CRCWHITENINGTYPE_CCITT
 0x00

861 
	#RF_PACKETCONFIG1_CRCWHITENINGTYPE_IBM
 0x01

	)

866 
	#RF_PACKETCONFIG2_DATAMODE_MASK
 0xBF

	)

867 
	#RF_PACKETCONFIG2_DATAMODE_CONTINUOUS
 0x00

	)

868 
	#RF_PACKETCONFIG2_DATAMODE_PACKET
 0x40

869 

	)

870 
	#RF_PACKETCONFIG2_IOHOME_MASK
 0xDF

	)

871 
	#RF_PACKETCONFIG2_IOHOME_ON
 0x20

	)

872 
	#RF_PACKETCONFIG2_IOHOME_OFF
 0x00

873 

	)

874 
	#RF_PACKETCONFIG2_BEACON_MASK
 0xF7

	)

875 
	#RF_PACKETCONFIG2_BEACON_ON
 0x08

	)

876 
	#RF_PACKETCONFIG2_BEACON_OFF
 0x00

877 

	)

878 
	#RF_PACKETCONFIG2_PAYLOADLENGTH_MSB_MASK
 0xF8

	)

883 
	#RF_PAYLOADLENGTH_LENGTH
 0x40

884 

	)

888 
	#RF_NODEADDRESS_ADDRESS
 0x00

	)

893 
	#RF_BROADCASTADDRESS_ADDRESS
 0x00

	)

898 
	#RF_FIFOTHRESH_TXSTARTCONDITION_MASK
 0x7F

	)

899 
	#RF_FIFOTHRESH_TXSTARTCONDITION_FIFOTHRESH
 0x00

	)

900 
	#RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY
 0x80

901 

	)

902 
	#RF_FIFOTHRESH_FIFOTHRESHOLD_MASK
 0xC0

	)

903 
	#RF_FIFOTHRESH_FIFOTHRESHOLD_THRESHOLD
 0x0F

904 

	)

908 
	#RF_SEQCONFIG1_SEQUENCER_START
 0x80

	)

910 
	#RF_SEQCONFIG1_SEQUENCER_STOP
 0x40

	)

912 
	#RF_SEQCONFIG1_IDLEMODE_MASK
 0xDF

	)

913 
	#RF_SEQCONFIG1_IDLEMODE_SLEEP
 0x20

	)

914 
	#RF_SEQCONFIG1_IDLEMODE_STANDBY
 0x00

915 

	)

916 
	#RF_SEQCONFIG1_FROMSTART_MASK
 0xE7

	)

917 
	#RF_SEQCONFIG1_FROMSTART_TOLPS
 0x00

918 
	#RF_SEQCONFIG1_FROMSTART_TORX
 0x08

	)

919 
	#RF_SEQCONFIG1_FROMSTART_TOTX
 0x10

	)

920 
	#RF_SEQCONFIG1_FROMSTART_TOTX_ONFIFOLEVEL
 0x18

	)

922 
	#RF_SEQCONFIG1_LPS_MASK
 0xFB

	)

923 
	#RF_SEQCONFIG1_LPS_SEQUENCER_OFF
 0x00

924 
	#RF_SEQCONFIG1_LPS_IDLE
 0x04

	)

926 
	#RF_SEQCONFIG1_FROMIDLE_MASK
 0xFD

	)

927 
	#RF_SEQCONFIG1_FROMIDLE_TOTX
 0x00

928 
	#RF_SEQCONFIG1_FROMIDLE_TORX
 0x02

	)

930 
	#RF_SEQCONFIG1_FROMTX_MASK
 0xFE

	)

931 
	#RF_SEQCONFIG1_FROMTX_TOLPS
 0x00

932 
	#RF_SEQCONFIG1_FROMTX_TORX
 0x01

	)

937 
	#RF_SEQCONFIG2_FROMRX_MASK
 0x1F

	)

938 
	#RF_SEQCONFIG2_FROMRX_TOUNUSED_000
 0x00

939 
	#RF_SEQCONFIG2_FROMRX_TORXPKT_ONPLDRDY
 0x20

	)

940 
	#RF_SEQCONFIG2_FROMRX_TOLPS_ONPLDRDY
 0x40

	)

941 
	#RF_SEQCONFIG2_FROMRX_TORXPKT_ONCRCOK
 0x60

	)

942 
	#RF_SEQCONFIG2_FROMRX_TOSEQUENCEROFF_ONRSSI
 0x80

	)

943 
	#RF_SEQCONFIG2_FROMRX_TOSEQUENCEROFF_ONSYNC
 0xA0

	)

944 
	#RF_SEQCONFIG2_FROMRX_TOSEQUENCEROFF_ONPREAMBLE
 0xC0

	)

945 
	#RF_SEQCONFIG2_FROMRX_TOUNUSED_111
 0xE0

	)

947 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_MASK
 0xE7

	)

948 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_TORXRESTART
 0x00

949 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_TOTX
 0x08

	)

950 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_TOLPS
 0x10

	)

951 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_TOSEQUENCEROFF
 0x18

	)

953 
	#RF_SEQCONFIG2_FROMRXPKT_MASK
 0xF8

	)

954 
	#RF_SEQCONFIG2_FROMRXPKT_TOSEQUENCEROFF
 0x00

955 
	#RF_SEQCONFIG2_FROMRXPKT_TOTX_ONFIFOEMPTY
 0x01

	)

956 
	#RF_SEQCONFIG2_FROMRXPKT_TOLPS
 0x02

	)

957 
	#RF_SEQCONFIG2_FROMRXPKT_TOSYNTHESIZERRX
 0x03

	)

958 
	#RF_SEQCONFIG2_FROMRXPKT_TORX
 0x04

	)

963 
	#RF_TIMERRESOL_TIMER1RESOL_MASK
 0xF3

	)

964 
	#RF_TIMERRESOL_TIMER1RESOL_OFF
 0x00

965 
	#RF_TIMERRESOL_TIMER1RESOL_000064_US
 0x04

	)

966 
	#RF_TIMERRESOL_TIMER1RESOL_004100_US
 0x08

	)

967 
	#RF_TIMERRESOL_TIMER1RESOL_262000_US
 0x0C

	)

969 
	#RF_TIMERRESOL_TIMER2RESOL_MASK
 0xFC

	)

970 
	#RF_TIMERRESOL_TIMER2RESOL_OFF
 0x00

971 
	#RF_TIMERRESOL_TIMER2RESOL_000064_US
 0x01

	)

972 
	#RF_TIMERRESOL_TIMER2RESOL_004100_US
 0x02

	)

973 
	#RF_TIMERRESOL_TIMER2RESOL_262000_US
 0x03

	)

978 
	#RF_TIMER1COEF_TIMER1COEFFICIENT
 0xF5

979 

	)

983 
	#RF_TIMER2COEF_TIMER2COEFFICIENT
 0x20

984 

	)

988 
	#RF_IMAGECAL_AUTOIMAGECAL_MASK
 0x7F

	)

989 
	#RF_IMAGECAL_AUTOIMAGECAL_ON
 0x80

	)

990 
	#RF_IMAGECAL_AUTOIMAGECAL_OFF
 0x00

991 

	)

992 
	#RF_IMAGECAL_IMAGECAL_MASK
 0xBF

	)

993 
	#RF_IMAGECAL_IMAGECAL_START
 0x40

	)

995 
	#RF_IMAGECAL_IMAGECAL_RUNNING
 0x20

	)

996 
	#RF_IMAGECAL_IMAGECAL_DONE
 0x00

997 

	)

998 
	#RF_IMAGECAL_TEMPCHANGE_HIGHER
 0x08

	)

999 
	#RF_IMAGECAL_TEMPCHANGE_LOWER
 0x00

	)

1001 
	#RF_IMAGECAL_TEMPTHRESHOLD_MASK
 0xF9

	)

1002 
	#RF_IMAGECAL_TEMPTHRESHOLD_05
 0x00

	)

1003 
	#RF_IMAGECAL_TEMPTHRESHOLD_10
 0x02

1004 
	#RF_IMAGECAL_TEMPTHRESHOLD_15
 0x04

	)

1005 
	#RF_IMAGECAL_TEMPTHRESHOLD_20
 0x06

	)

1007 
	#RF_IMAGECAL_TEMPMONITOR_MASK
 0xFE

	)

1008 
	#RF_IMAGECAL_TEMPMONITOR_ON
 0x00

1009 
	#RF_IMAGECAL_TEMPMONITOR_OFF
 0x01

	)

1018 
	#RF_LOWBAT_MASK
 0xF7

	)

1019 
	#RF_LOWBAT_ON
 0x08

	)

1020 
	#RF_LOWBAT_OFF
 0x00

1021 

	)

1022 
	#RF_LOWBAT_TRIM_MASK
 0xF8

	)

1023 
	#RF_LOWBAT_TRIM_1695
 0x00

	)

1024 
	#RF_LOWBAT_TRIM_1764
 0x01

	)

1025 
	#RF_LOWBAT_TRIM_1835
 0x02

1026 
	#RF_LOWBAT_TRIM_1905
 0x03

	)

1027 
	#RF_LOWBAT_TRIM_1976
 0x04

	)

1028 
	#RF_LOWBAT_TRIM_2045
 0x05

	)

1029 
	#RF_LOWBAT_TRIM_2116
 0x06

	)

1030 
	#RF_LOWBAT_TRIM_2185
 0x07

	)

1035 
	#RF_IRQFLAGS1_MODEREADY
 0x80

	)

1037 
	#RF_IRQFLAGS1_RXREADY
 0x40

	)

1039 
	#RF_IRQFLAGS1_TXREADY
 0x20

	)

1041 
	#RF_IRQFLAGS1_PLLLOCK
 0x10

	)

1043 
	#RF_IRQFLAGS1_RSSI
 0x08

	)

1045 
	#RF_IRQFLAGS1_TIMEOUT
 0x04

	)

1047 
	#RF_IRQFLAGS1_PREAMBLEDETECT
 0x02

	)

1049 
	#RF_IRQFLAGS1_SYNCADDRESSMATCH
 0x01

	)

1054 
	#RF_IRQFLAGS2_FIFOFULL
 0x80

	)

1056 
	#RF_IRQFLAGS2_FIFOEMPTY
 0x40

	)

1058 
	#RF_IRQFLAGS2_FIFOLEVEL
 0x20

	)

1060 
	#RF_IRQFLAGS2_FIFOOVERRUN
 0x10

	)

1062 
	#RF_IRQFLAGS2_PACKETSENT
 0x08

	)

1064 
	#RF_IRQFLAGS2_PAYLOADREADY
 0x04

	)

1066 
	#RF_IRQFLAGS2_CRCOK
 0x02

	)

1068 
	#RF_IRQFLAGS2_LOWBAT
 0x01

	)

1073 
	#RF_DIOMAPPING1_DIO0_MASK
 0x3F

	)

1074 
	#RF_DIOMAPPING1_DIO0_00
 0x00

1075 
	#RF_DIOMAPPING1_DIO0_01
 0x40

	)

1076 
	#RF_DIOMAPPING1_DIO0_10
 0x80

	)

1077 
	#RF_DIOMAPPING1_DIO0_11
 0xC0

	)

1079 
	#RF_DIOMAPPING1_DIO1_MASK
 0xCF

	)

1080 
	#RF_DIOMAPPING1_DIO1_00
 0x00

1081 
	#RF_DIOMAPPING1_DIO1_01
 0x10

	)

1082 
	#RF_DIOMAPPING1_DIO1_10
 0x20

	)

1083 
	#RF_DIOMAPPING1_DIO1_11
 0x30

	)

1085 
	#RF_DIOMAPPING1_DIO2_MASK
 0xF3

	)

1086 
	#RF_DIOMAPPING1_DIO2_00
 0x00

1087 
	#RF_DIOMAPPING1_DIO2_01
 0x04

	)

1088 
	#RF_DIOMAPPING1_DIO2_10
 0x08

	)

1089 
	#RF_DIOMAPPING1_DIO2_11
 0x0C

	)

1091 
	#RF_DIOMAPPING1_DIO3_MASK
 0xFC

	)

1092 
	#RF_DIOMAPPING1_DIO3_00
 0x00

1093 
	#RF_DIOMAPPING1_DIO3_01
 0x01

	)

1094 
	#RF_DIOMAPPING1_DIO3_10
 0x02

	)

1095 
	#RF_DIOMAPPING1_DIO3_11
 0x03

	)

1100 
	#RF_DIOMAPPING2_DIO4_MASK
 0x3F

	)

1101 
	#RF_DIOMAPPING2_DIO4_00
 0x00

1102 
	#RF_DIOMAPPING2_DIO4_01
 0x40

	)

1103 
	#RF_DIOMAPPING2_DIO4_10
 0x80

	)

1104 
	#RF_DIOMAPPING2_DIO4_11
 0xC0

	)

1106 
	#RF_DIOMAPPING2_DIO5_MASK
 0xCF

	)

1107 
	#RF_DIOMAPPING2_DIO5_00
 0x00

1108 
	#RF_DIOMAPPING2_DIO5_01
 0x10

	)

1109 
	#RF_DIOMAPPING2_DIO5_10
 0x20

	)

1110 
	#RF_DIOMAPPING2_DIO5_11
 0x30

	)

1112 
	#RF_DIOMAPPING2_MAP_MASK
 0xFE

	)

1113 
	#RF_DIOMAPPING2_MAP_PREAMBLEDETECT
 0x01

	)

1114 
	#RF_DIOMAPPING2_MAP_RSSI
 0x00

1115 

	)

1139 
	#RF_PLLHOP_FASTHOP_MASK
 0x7F

	)

1140 
	#RF_PLLHOP_FASTHOP_ON
 0x80

	)

1141 
	#RF_PLLHOP_FASTHOP_OFF
 0x00

1142 

	)

1146 
	#RF_TCXO_TCXOINPUT_MASK
 0xEF

	)

1147 
	#RF_TCXO_TCXOINPUT_ON
 0x10

	)

1148 
	#RF_TCXO_TCXOINPUT_OFF
 0x00

1149 

	)

1153 
	#RF_PADAC_20DBM_MASK
 0xF8

	)

1154 
	#RF_PADAC_20DBM_ON
 0x07

	)

1155 
	#RF_PADAC_20DBM_OFF
 0x04

1156 

	)

1160 
	#RF_PLL_BANDWIDTH_MASK
 0x3F

	)

1161 
	#RF_PLL_BANDWIDTH_75
 0x00

	)

1162 
	#RF_PLL_BANDWIDTH_150
 0x40

	)

1163 
	#RF_PLL_BANDWIDTH_225
 0x80

	)

1164 
	#RF_PLL_BANDWIDTH_300
 0xC0

1165 

	)

1169 
	#RF_PLLLOWPN_BANDWIDTH_MASK
 0x3F

	)

1170 
	#RF_PLLLOWPN_BANDWIDTH_75
 0x00

	)

1171 
	#RF_PLLLOWPN_BANDWIDTH_150
 0x40

	)

1172 
	#RF_PLLLOWPN_BANDWIDTH_225
 0x80

	)

1173 
	#RF_PLLLOWPN_BANDWIDTH_300
 0xC0

1174 

	)

1182 
	#RF_BITRATEFRAC_MASK
 0xF0

	)

1184 
	ssSX1272


1186 
uöt8_t
 
	mRegFifo
;

1188 
uöt8_t
 
	mRegOpMode
;

1189 
uöt8_t
 
	mRegBôøãMsb
;

1190 
uöt8_t
 
	mRegBôøãLsb
;

1191 
uöt8_t
 
	mRegFdevMsb
;

1192 
uöt8_t
 
	mRegFdevLsb
;

1193 
uöt8_t
 
	mRegFrfMsb
;

1194 
uöt8_t
 
	mRegFrfMid
;

1195 
uöt8_t
 
	mRegFrfLsb
;

1197 
uöt8_t
 
	mRegPaC⁄fig
;

1198 
uöt8_t
 
	mRegPaRamp
;

1199 
uöt8_t
 
	mRegO˝
;

1201 
uöt8_t
 
	mRegL«
;

1202 
uöt8_t
 
	mRegRxC⁄fig
;

1203 
uöt8_t
 
	mRegRssiC⁄fig
;

1204 
uöt8_t
 
	mRegRssiCﬁlisi⁄
;

1205 
uöt8_t
 
	mRegRssiThªsh
;

1206 
uöt8_t
 
	mRegRssiVÆue
;

1207 
uöt8_t
 
	mRegRxBw
;

1208 
uöt8_t
 
	mRegAfcBw
;

1209 
uöt8_t
 
	mRegOokPók
;

1210 
uöt8_t
 
	mRegOokFix
;

1211 
uöt8_t
 
	mRegOokAvg
;

1212 
uöt8_t
 
	mRegRes17
;

1213 
uöt8_t
 
	mRegRes18
;

1214 
uöt8_t
 
	mRegRes19
;

1215 
uöt8_t
 
	mRegAfcFei
;

1216 
uöt8_t
 
	mRegAfcMsb
;

1217 
uöt8_t
 
	mRegAfcLsb
;

1218 
uöt8_t
 
	mRegFeiMsb
;

1219 
uöt8_t
 
	mRegFeiLsb
;

1220 
uöt8_t
 
	mRegPªambÀDëe˘
;

1221 
uöt8_t
 
	mRegRxTimeout1
;

1222 
uöt8_t
 
	mRegRxTimeout2
;

1223 
uöt8_t
 
	mRegRxTimeout3
;

1224 
uöt8_t
 
	mRegRxDñay
;

1226 
uöt8_t
 
	mRegOsc
;

1228 
uöt8_t
 
	mRegPªambÀMsb
;

1229 
uöt8_t
 
	mRegPªambÀLsb
;

1230 
uöt8_t
 
	mRegSyncC⁄fig
;

1231 
uöt8_t
 
	mRegSyncVÆue1
;

1232 
uöt8_t
 
	mRegSyncVÆue2
;

1233 
uöt8_t
 
	mRegSyncVÆue3
;

1234 
uöt8_t
 
	mRegSyncVÆue4
;

1235 
uöt8_t
 
	mRegSyncVÆue5
;

1236 
uöt8_t
 
	mRegSyncVÆue6
;

1237 
uöt8_t
 
	mRegSyncVÆue7
;

1238 
uöt8_t
 
	mRegSyncVÆue8
;

1239 
uöt8_t
 
	mRegPackëC⁄fig1
;

1240 
uöt8_t
 
	mRegPackëC⁄fig2
;

1241 
uöt8_t
 
	mRegPaylﬂdLígth
;

1242 
uöt8_t
 
	mRegNodeAdrs
;

1243 
uöt8_t
 
	mRegBrﬂdˇ°Adrs
;

1244 
uöt8_t
 
	mRegFifoThªsh
;

1246 
uöt8_t
 
	mRegSeqC⁄fig1
;

1247 
uöt8_t
 
	mRegSeqC⁄fig2
;

1248 
uöt8_t
 
	mRegTimîResﬁ
;

1249 
uöt8_t
 
	mRegTimî1C€f
;

1250 
uöt8_t
 
	mRegTimî2C€f
;

1252 
uöt8_t
 
	mRegImageCÆ
;

1253 
uöt8_t
 
	mRegTemp
;

1254 
uöt8_t
 
	mRegLowB©
;

1256 
uöt8_t
 
	mRegIrqFœgs1
;

1257 
uöt8_t
 
	mRegIrqFœgs2
;

1259 
uöt8_t
 
	mRegDioM≠pög1
;

1260 
uöt8_t
 
	mRegDioM≠pög2
;

1262 
uöt8_t
 
	mRegVîsi⁄
;

1264 
uöt8_t
 
	mRegAgcRef
;

1265 
uöt8_t
 
	mRegAgcThªsh1
;

1266 
uöt8_t
 
	mRegAgcThªsh2
;

1267 
uöt8_t
 
	mRegAgcThªsh3
;

1269 
uöt8_t
 
	mRegTe°Re£rved47
[0x4B - 0x47];

1271 
uöt8_t
 
	mRegPŒH›
;

1273 
uöt8_t
 
	mRegTe°Re£rved4C
[0x58-0x4C];

1275 
uöt8_t
 
	mRegTcxo
;

1277 
uöt8_t
 
	mRegTe°Re£rved59
;

1279 
uöt8_t
 
	mRegPaDac
;

1281 
uöt8_t
 
	mRegTe°Re£rved5B
;

1283 
uöt8_t
 
	mRegPŒ
;

1285 
uöt8_t
 
	mRegTe°Re£rved5D
;

1287 
uöt8_t
 
	mRegPŒLowPn
;

1289 
uöt8_t
 
	mRegTe°Re£rved5F
[0x6C - 0x5F];

1291 
uöt8_t
 
	mRegF‹mîTemp
;

1293 
uöt8_t
 
	mRegTe°Re£rved6D
[0x70 - 0x6D];

1295 
uöt8_t
 
	mRegBôøãFøc
;

1296 }
	ttSX1272
;

1298 
tSX1272
* 
SX1272
;

1303 
SX1272FskInô
( );

1308 
SX1272FskSëDeÁu…s
( );

1313 
SX1272FskRe£t
( );

1320 
SX1272FskSëLoRaOn
–
boﬁ
 
íabÀ
 );

1327 
SX1272FskSëOpMode
–
uöt8_t
 
›Mode
 );

1334 
uöt8_t
 
SX1272FskGëOpMode
( );

1341 
öt32_t
 
SX1272FskRódFei
( );

1348 
öt32_t
 
SX1272FskRódAfc
( );

1355 
uöt8_t
 
SX1272FskRódRxGaö
( );

1362 
SX1272FskRódRssi
( );

1369 
uöt8_t
 
SX1272FskGëPackëRxGaö
( );

1376 
SX1272FskGëPackëRssi
( );

1383 
uöt32_t
 
SX1272FskGëPackëAfc
( );

1388 
SX1272FskSèπRx
( );

1396 
SX1272FskGëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 );

1405 
SX1272FskSëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 );

1414 
uöt8_t
 
SX1272FskGëRFSèã
( );

1421 
SX1272FskSëRFSèã
–
uöt8_t
 
°©e
 );

1431 
uöt32_t
 
SX1272FskPro˚ss
( );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-FskMisc.c

29 
	~<m©h.h
>

31 
	~"∂©f‹m.h
"

33 #i‡
deföed
–
USE_SX1272_RADIO
 )

35 
	~"sx1272-HÆ.h
"

36 
	~"sx1272.h
"

38 
	~"sx1272-Fsk.h
"

39 
	~"sx1272-FskMisc.h
"

41 
tFskSëtögs
 
FskSëtögs
;

43 
	$SX1272FskSëRFFªquícy
–
uöt32_t
 
‰eq
 )

45 
FskSëtögs
.
RFFªquícy
 = 
‰eq
;

47 
‰eq
 = ( 
uöt32_t
 )––)‰eq / ( )
FREQ_STEP
 );

48 
SX1272
->
RegFrfMsb
 = ( 
uöt8_t
 )––
‰eq
 >> 16 ) & 0xFF );

49 
SX1272
->
RegFrfMid
 = ( 
uöt8_t
 )––
‰eq
 >> 8 ) & 0xFF );

50 
SX1272
->
RegFrfLsb
 = ( 
uöt8_t
 )–
‰eq
 & 0xFF );

51 
	`SX1272WrôeBuf„r
–
REG_FRFMSB
, &
SX1272
->
RegFrfMsb
, 3 );

52 
	}
}

54 
uöt32_t
 
	$SX1272FskGëRFFªquícy
( )

56 
	`SX1272RódBuf„r
–
REG_FRFMSB
, &
SX1272
->
RegFrfMsb
, 3 );

57 
FskSëtögs
.
RFFªquícy
 = ( ( 
uöt32_t
 )
SX1272
->
RegFrfMsb
 << 16 ) | ( ( uöt32_à)SX1272->
RegFrfMid
 << 8 ) | ( ( uöt32_à)SX1272->
RegFrfLsb
 );

58 
FskSëtögs
.
RFFªquícy
 = ( 
uöt32_t
 )––)FskSëtögs.RFFªquícy * ( )
FREQ_STEP
 );

60  
FskSëtögs
.
RFFªquícy
;

61 
	}
}

63 
	$SX1272FskRxCÆibøã
( )

65 
uöt32_t
 
°¨tTick
;

67 
	`SX1272Wrôe
–
REG_IMAGECAL
, 
RF_IMAGECAL_AUTOIMAGECAL_OFF
 |

68 
RF_IMAGECAL_IMAGECAL_START
 |

69 
RF_IMAGECAL_TEMPTHRESHOLD_10
 |

70 
RF_IMAGECAL_TEMPMONITOR_OFF
 );

73 
°¨tTick
 = 
	`GET_TICK_COUNT
( );

74  ( 
	`GET_TICK_COUNT
–Ë- 
°¨tTick
 ) < 
	`TICK_RATE_MS
( 8 ) );

75 
	}
}

77 
	$SX1272FskSëBôøã
–
uöt32_t
 
bôøã
 )

79 
FskSëtögs
.
Bôøã
 = 
bôøã
;

81 
bôøã
 = ( 
uöt16_t
 )––)
XTAL_FREQ
 / ( )bitrate );

82 
SX1272
->
RegBôøãMsb
 = ( 
uöt8_t
 )–
bôøã
 >> 8 );

83 
SX1272
->
RegBôøãLsb
 = ( 
uöt8_t
 )–
bôøã
 & 0xFF );

84 
	`SX1272WrôeBuf„r
–
REG_BITRATEMSB
, &
SX1272
->
RegBôøãMsb
, 2 );

85 
	}
}

87 
uöt32_t
 
	$SX1272FskGëBôøã
( )

89 
	`SX1272RódBuf„r
–
REG_BITRATEMSB
, &
SX1272
->
RegBôøãMsb
, 2 );

90 
FskSëtögs
.
Bôøã
 = ( ( ( 
uöt32_t
 )
SX1272
->
RegBôøãMsb
 << 8 ) | ( ( uöt32_à)SX1272->
RegBôøãLsb
 ) );

91 
FskSëtögs
.
Bôøã
 = ( 
uöt16_t
 )––)
XTAL_FREQ
 / ( )FskSettings.Bitrate );

93  
FskSëtögs
.
Bôøã
;

94 
	}
}

96 
	$SX1272FskSëFdev
–
uöt32_t
 
fdev
 )

98 
FskSëtögs
.
Fdev
 = 
fdev
;

100 
fdev
 = ( 
uöt16_t
 )––)fdev / ( )
FREQ_STEP
 );

101 
SX1272
->
RegFdevMsb
 = ( 
uöt8_t
 )–
fdev
 >> 8 );

102 
SX1272
->
RegFdevLsb
 = ( 
uöt8_t
 )–
fdev
 & 0xFF );

103 
	`SX1272WrôeBuf„r
–
REG_FDEVMSB
, &
SX1272
->
RegFdevMsb
, 2 );

104 
	}
}

106 
uöt32_t
 
	$SX1272FskGëFdev
( )

108 
	`SX1272RódBuf„r
–
REG_FDEVMSB
, &
SX1272
->
RegFdevMsb
, 2 );

109 
FskSëtögs
.
Fdev
 = ( ( ( 
uöt32_t
 )
SX1272
->
RegFdevMsb
 << 8 ) | ( ( uöt32_à)SX1272->
RegFdevLsb
 ) );

110 
FskSëtögs
.
Fdev
 = ( 
uöt16_t
 )––)FskSëtögs.Fdev * ( )
FREQ_STEP
 );

112  
FskSëtögs
.
Fdev
;

113 
	}
}

115 
	$SX1272FskSëRFPowî
–
öt8_t
 
powî
 )

117 
	`SX1272Ród
–
REG_PACONFIG
, &
SX1272
->
RegPaC⁄fig
 );

118 
	`SX1272Ród
–
REG_PADAC
, &
SX1272
->
RegPaDac
 );

120 if––
SX1272
->
RegPaC⁄fig
 & 
RF_PACONFIG_PASELECT_PABOOST
 ) == RF_PACONFIG_PASELECT_PABOOST )

122 if––
SX1272
->
RegPaDac
 & 0x07 ) == 0x07 )

124 if–
powî
 < 5 )

126 
powî
 = 5;

128 if–
powî
 > 20 )

130 
powî
 = 20;

132 
SX1272
->
RegPaC⁄fig
 = ( SX1272->RegPaC⁄fig & 
RF_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 - 5 ) & 0x0F );

136 if–
powî
 < 2 )

138 
powî
 = 2;

140 if–
powî
 > 17 )

142 
powî
 = 17;

144 
SX1272
->
RegPaC⁄fig
 = ( SX1272->RegPaC⁄fig & 
RF_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 - 2 ) & 0x0F );

149 if–
powî
 < -1 )

151 
powî
 = -1;

153 if–
powî
 > 14 )

155 
powî
 = 14;

157 
SX1272
->
RegPaC⁄fig
 = ( SX1272->RegPaC⁄fig & 
RF_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 + 1 ) & 0x0F );

159 
	`SX1272Wrôe
–
REG_PACONFIG
, 
SX1272
->
RegPaC⁄fig
 );

160 
FskSëtögs
.
Powî
 = 
powî
;

161 
	}
}

163 
öt8_t
 
	$SX1272FskGëRFPowî
( )

165 
	`SX1272Ród
–
REG_PACONFIG
, &
SX1272
->
RegPaC⁄fig
 );

166 
	`SX1272Ród
–
REG_PADAC
, &
SX1272
->
RegPaDac
 );

168 if––
SX1272
->
RegPaC⁄fig
 & 
RF_PACONFIG_PASELECT_PABOOST
 ) == RF_PACONFIG_PASELECT_PABOOST )

170 if––
SX1272
->
RegPaDac
 & 0x07 ) == 0x07 )

172 
FskSëtögs
.
Powî
 = 5 + ( 
SX1272
->
RegPaC⁄fig
 & 
RF_PACONFIG_OUTPUTPOWER_MASK
 );

176 
FskSëtögs
.
Powî
 = 2 + ( 
SX1272
->
RegPaC⁄fig
 & 
RF_PACONFIG_OUTPUTPOWER_MASK
 );

181 
FskSëtögs
.
Powî
 = -1 + ( 
SX1272
->
RegPaC⁄fig
 & 
RF_PACONFIG_OUTPUTPOWER_MASK
 );

183  
FskSëtögs
.
Powî
;

184 
	}
}

193 
uöt32_t
 
	$SX1272FskCompuãRxBw
–
uöt8_t
 
m™tis£
, uöt8_à
exp⁄ít
 )

196 if––
SX1272
->
RegOpMode
 & 
RF_OPMODE_MODULATIONTYPE_FSK
 ) == RF_OPMODE_MODULATIONTYPE_FSK )

198  ( 
uöt32_t
 )––)
XTAL_FREQ
 / ( 
m™tis£
 * ( )
	`pow
–2, 
exp⁄ít
 + 2 ) ) );

202  ( 
uöt32_t
 )––)
XTAL_FREQ
 / ( 
m™tis£
 * ( )
	`pow
–2, 
exp⁄ít
 + 3 ) ) );

204 
	}
}

213 
	$SX1272FskCompuãRxBwM™tExp
–
uöt32_t
 
rxBwVÆue
, 
uöt8_t
* 
m™tis£
, uöt8_t* 
exp⁄ít
 )

215 
uöt8_t
 
tmpExp
 = 0;

216 
uöt8_t
 
tmpM™t
 = 0;

218 
tmpRxBw
 = 0;

219 
rxBwMö
 = 10e6;

221  
tmpExp
 = 0;ÅmpExp < 8;ÅmpExp++ )

223  
tmpM™t
 = 16;ÅmpMant <= 24;ÅmpMant += 4 )

225 if––
SX1272
->
RegOpMode
 & 
RF_OPMODE_MODULATIONTYPE_FSK
 ) == RF_OPMODE_MODULATIONTYPE_FSK )

227 
tmpRxBw
 = ( )
XTAL_FREQ
 / ( 
tmpM™t
 * ( )
	`pow
–2, 
tmpExp
 + 2 ) );

231 
tmpRxBw
 = ( )
XTAL_FREQ
 / ( 
tmpM™t
 * ( )
	`pow
–2, 
tmpExp
 + 3 ) );

233 if–
	`Ábs
–
tmpRxBw
 - 
rxBwVÆue
 ) < 
rxBwMö
 )

235 
rxBwMö
 = 
	`Ábs
–
tmpRxBw
 - 
rxBwVÆue
 );

236 *
m™tis£
 = 
tmpM™t
;

237 *
exp⁄ít
 = 
tmpExp
;

241 
	}
}

243 
	$SX1272FskSëDccBw
–
uöt8_t
* 
ªg
, 
uöt32_t
 
dccVÆue
, uöt32_à
rxBwVÆue
 )

245 
uöt8_t
 
m™tis£
 = 0;

246 
uöt8_t
 
exp⁄ít
 = 0;

248 if–
ªg
 =&
SX1272
->
RegRxBw
 )

250 *
ªg
 = ( 
uöt8_t
 )
dccVÆue
 & 0x60;

254 *
ªg
 = 0;

257 
	`SX1272FskCompuãRxBwM™tExp
–
rxBwVÆue
, &
m™tis£
, &
exp⁄ít
 );

259  
m™tis£
 )

262 *
ªg
 |–
uöt8_t
 )–0x00 | ( 
exp⁄ít
 & 0x07 ) );

265 *
ªg
 |–
uöt8_t
 )–0x08 | ( 
exp⁄ít
 & 0x07 ) );

268 *
ªg
 |–
uöt8_t
 )–0x10 | ( 
exp⁄ít
 & 0x07 ) );

275 if–
ªg
 =&
SX1272
->
RegRxBw
 )

277 
	`SX1272Wrôe
–
REG_RXBW
, *
ªg
 );

278 
FskSëtögs
.
RxBw
 = 
rxBwVÆue
;

282 
	`SX1272Wrôe
–
REG_AFCBW
, *
ªg
 );

283 
FskSëtögs
.
RxBwAfc
 = 
rxBwVÆue
;

285 
	}
}

287 
uöt32_t
 
	$SX1272FskGëBw
–
uöt8_t
* 
ªg
 )

289 
uöt32_t
 
rxBwVÆue
 = 0;

290 
uöt8_t
 
m™tis£
 = 0;

291  ( *
ªg
 & 0x18 ) >> 3 )

294 
m™tis£
 = 16;

297 
m™tis£
 = 20;

300 
m™tis£
 = 24;

305 
rxBwVÆue
 = 
	`SX1272FskCompuãRxBw
–
m™tis£
, ( 
uöt8_t
 )*
ªg
 & 0x07 );

306 if–
ªg
 =&
SX1272
->
RegRxBw
 )

308  
FskSëtögs
.
RxBw
 = 
rxBwVÆue
;

312  
FskSëtögs
.
RxBwAfc
 = 
rxBwVÆue
;

314 
	}
}

316 
	$SX1272FskSëPackëCrcOn
–
boﬁ
 
íabÀ
 )

318 
	`SX1272Ród
–
REG_PACKETCONFIG1
, &
SX1272
->
RegPackëC⁄fig1
 );

319 
SX1272
->
RegPackëC⁄fig1
 = ( SX1272->RegPackëC⁄fig1 & 
RF_PACKETCONFIG1_CRC_MASK
 ) | ( 
íabÀ
 << 4 );

320 
	`SX1272Wrôe
–
REG_PACKETCONFIG1
, 
SX1272
->
RegPackëC⁄fig1
 );

321 
FskSëtögs
.
CrcOn
 = 
íabÀ
;

322 
	}
}

324 
boﬁ
 
	$SX1272FskGëPackëCrcOn
( )

326 
	`SX1272Ród
–
REG_PACKETCONFIG1
, &
SX1272
->
RegPackëC⁄fig1
 );

327 
FskSëtögs
.
CrcOn
 = ( 
SX1272
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_CRC_ON
 ) >> 4;

328  
FskSëtögs
.
CrcOn
;

329 
	}
}

331 
	$SX1272FskSëAfcOn
–
boﬁ
 
íabÀ
 )

333 
	`SX1272Ród
–
REG_RXCONFIG
, &
SX1272
->
RegRxC⁄fig
 );

334 
SX1272
->
RegRxC⁄fig
 = ( SX1272->RegRxC⁄fig & 
RF_RXCONFIG_AFCAUTO_MASK
 ) | ( 
íabÀ
 << 4 );

335 
	`SX1272Wrôe
–
REG_RXCONFIG
, 
SX1272
->
RegRxC⁄fig
 );

336 
FskSëtögs
.
AfcOn
 = 
íabÀ
;

337 
	}
}

339 
boﬁ
 
	$SX1272FskGëAfcOn
( )

341 
	`SX1272Ród
–
REG_RXCONFIG
, &
SX1272
->
RegRxC⁄fig
 );

342 
FskSëtögs
.
AfcOn
 = ( 
SX1272
->
RegRxC⁄fig
 & 
RF_RXCONFIG_AFCAUTO_ON
 ) >> 4;

343  
FskSëtögs
.
AfcOn
;

344 
	}
}

346 
	$SX1272FskSëPaylﬂdLígth
–
uöt8_t
 
vÆue
 )

348 
SX1272
->
RegPaylﬂdLígth
 = 
vÆue
;

349 
	`SX1272Wrôe
–
REG_PAYLOADLENGTH
, 
SX1272
->
RegPaylﬂdLígth
 );

350 
FskSëtögs
.
PaylﬂdLígth
 = 
vÆue
;

351 
	}
}

353 
uöt8_t
 
	$SX1272FskGëPaylﬂdLígth
( )

355 
	`SX1272Ród
–
REG_PAYLOADLENGTH
, &
SX1272
->
RegPaylﬂdLígth
 );

356 
FskSëtögs
.
PaylﬂdLígth
 = 
SX1272
->
RegPaylﬂdLígth
;

357  
FskSëtögs
.
PaylﬂdLígth
;

358 
	}
}

360 
	$SX1272FskSëPa20dBm
–
boﬁ
 
íÆe
 )

362 
	`SX1272Ród
–
REG_PADAC
, &
SX1272
->
RegPaDac
 );

364 if–
íÆe
 =
åue
 )

366 
SX1272
->
RegPaDac
 = 0x87;

370 
SX1272
->
RegPaDac
 = 0x84;

372 
	`SX1272Wrôe
–
REG_PADAC
, 
SX1272
->
RegPaDac
 );

373 
	}
}

375 
boﬁ
 
	$SX1272FskGëPa20dBm
( )

377 
	`SX1272Ród
–
REG_PADAC
, &
SX1272
->
RegPaDac
 );

379  ( ( 
SX1272
->
RegPaDac
 & 0x07 ) =0x07 ) ? 
åue
 : 
Ál£
;

380 
	}
}

382 
	$SX1272FskSëPaRamp
–
uöt8_t
 
vÆue
 )

384 
	`SX1272Ród
–
REG_PARAMP
, &
SX1272
->
RegPaRamp
 );

385 
SX1272
->
RegPaRamp
 = ( SX1272->RegPaRam∞& 
RF_PARAMP_MASK
 ) | ( 
vÆue
 & ~RF_PARAMP_MASK );

386 
	`SX1272Wrôe
–
REG_PARAMP
, 
SX1272
->
RegPaRamp
 );

387 
	}
}

389 
uöt8_t
 
	$SX1272FskGëPaRamp
( )

391 
	`SX1272Ród
–
REG_PARAMP
, &
SX1272
->
RegPaRamp
 );

392  
SX1272
->
RegPaRamp
 & ~
RF_PARAMP_MASK
;

393 
	}
}

395 
	$SX1272FskSëRssiOff£t
–
öt8_t
 
off£t
 )

397 
	`SX1272Ród
–
REG_RSSICONFIG
, &
SX1272
->
RegRssiC⁄fig
 );

398 if–
off£t
 < 0 )

400 
off£t
 = ( ~offset & 0x1F );

401 
off£t
 += 1;

402 
off£t
 = -offset;

404 
SX1272
->
RegRssiC⁄fig
 |–
uöt8_t
 )––
off£t
 & 0x1F ) << 3 );

405 
	`SX1272Wrôe
–
REG_RSSICONFIG
, 
SX1272
->
RegRssiC⁄fig
 );

406 
	}
}

408 
öt8_t
 
	$SX1272FskGëRssiOff£t
( )

410 
öt8_t
 
off£t
;

412 
	`SX1272Ród
–
REG_RSSICONFIG
, &
SX1272
->
RegRssiC⁄fig
 );

413 
off£t
 = 
SX1272
->
RegRssiC⁄fig
 >> 3;

414 if––
off£t
 & 0x10 ) == 0x10 )

416 
off£t
 = ( ~offset & 0x1F );

417 
off£t
 += 1;

418 
off£t
 = -offset;

420  
off£t
;

421 
	}
}

423 
öt8_t
 
	$SX1272FskGëRawTemp
( )

425 
öt8_t
 
ãmp
 = 0;

426 
uöt8_t
 
ªgVÆue
 = 0;

428 
	`SX1272Ród
–
REG_TEMP
, &
SX1272
->
RegTemp
 );

430 
ãmp
 = 
ªgVÆue
 & 0x7F;

432 if––
ªgVÆue
 & 0x80 ) == 0x80 )

434 
ãmp
 *= -1;

436  
ãmp
;

437 
	}
}

439 
öt8_t
 
	$SX1272FskCÆibª©eTemp
–
öt8_t
 
a˘uÆTemp
 )

441  
a˘uÆTemp
 - 
	`SX1272FskGëRawTemp
( );

442 
	}
}

444 
öt8_t
 
	$SX1272FskGëTemp
–
öt8_t
 
com≥nßti⁄Fa˘‹
 )

446  
	`SX1272FskGëRawTemp
–Ë+ 
com≥nßti⁄Fa˘‹
;

447 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-FskMisc.h

29 #i‚de‡
__SX1272_FSK_MISC_H__


30 
	#__SX1272_FSK_MISC_H__


	)

37 
SX1272FskSëRFFªquícy
–
uöt32_t
 
‰eq
 );

44 
uöt32_t
 
SX1272FskGëRFFªquícy
( );

51 
SX1272FskRxCÆibøã
( );

58 
SX1272FskSëBôøã
–
uöt32_t
 
bôøã
 );

65 
uöt32_t
 
SX1272FskGëBôøã
( );

72 
SX1272FskSëFdev
–
uöt32_t
 
fdev
 );

79 
uöt32_t
 
SX1272FskGëFdev
( );

86 
SX1272FskSëRFPowî
–
öt8_t
 
powî
 );

93 
öt8_t
 
SX1272FskGëRFPowî
( );

105 
SX1272FskSëDccBw
–
uöt8_t
* 
ªg
, 
uöt32_t
 
dccVÆue
, uöt32_à
rxBwVÆue
 );

114 
uöt32_t
 
SX1272FskGëBw
–
uöt8_t
* 
ªg
 );

121 
SX1272FskSëPackëCrcOn
–
boﬁ
 
íabÀ
 );

128 
boﬁ
 
SX1272FskGëPackëCrcOn
( );

135 
SX1272FskSëAfcOn
–
boﬁ
 
íabÀ
 );

142 
boﬁ
 
SX1272FskGëAfcOn
( );

149 
SX1272FskSëPaylﬂdLígth
–
uöt8_t
 
vÆue
 );

156 
uöt8_t
 
SX1272FskGëPaylﬂdLígth
( );

163 
SX1272FskSëPa20dBm
–
boﬁ
 
íÆe
 );

170 
boﬁ
 
SX1272FskGëPa20dBm
( );

177 
SX1272FskSëPaRamp
–
uöt8_t
 
vÆue
 );

184 
uöt8_t
 
SX1272FskGëPaRamp
( );

191 
SX1272FskSëRssiOff£t
–
öt8_t
 
off£t
 );

198 
öt8_t
 
SX1272FskGëRssiOff£t
( );

205 
SX1272FskSëPªambÀSize
–
uöt16_t
 
size
 );

211 
öt8_t
 
SX1272FskGëRawTemp
( );

218 
öt8_t
 
SX1272FskCÆibª©eTemp
–öt8_à
a˘uÆTemp
 );

225 
öt8_t
 
SX1272FskGëTemp
–öt8_à
com≥nßti⁄Fa˘‹
 );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-Hal.h

21 #i‚de‡
__SX1272_HAL_H__


22 
	#__SX1272_HAL_H__


	)

27 
	#DIO0
 
	`SX1272RódDio0
–)

	)

28 
	#DIO1
 
	`SX1272RódDio1
–)

	)

29 
	#DIO2
 
	`SX1272RódDio2
–)

	)

30 
	#DIO3
 
	`SX1272RódDio3
–)

	)

31 
	#DIO4
 
	`SX1272RódDio4
–)

	)

32 
	#DIO5
 
	`SX1272RódDio5
–)

	)

35 
	#RXTX
–
txE«bÀ
 ) 
	`SX1272WrôeRxTx
–txE«bÀ );

	)

37 
	#GET_TICK_COUNT
–Ë–
TickCou¡î
 )

	)

38 
	#TICK_RATE_MS
–
ms
 ) ( m†)

	)

42 
	mRADIO_RESET_OFF
,

43 
	mRADIO_RESET_ON
,

44 }
	ttRadioRe£tSèã
;

49 
SX1272InôIo
( );

56 
SX1272SëRe£t
–
uöt8_t
 
°©e
 );

64 
SX1272Wrôe
–
uöt8_t
 
addr
, uöt8_à
d©a
 );

72 
SX1272Ród
–
uöt8_t
 
addr
, uöt8_à*
d©a
 );

81 
SX1272WrôeBuf„r
–
uöt8_t
 
addr
, uöt8_à*
buf„r
, uöt8_à
size
 );

90 
SX1272RódBuf„r
–
uöt8_t
 
addr
, uöt8_à*
buf„r
, uöt8_à
size
 );

98 
SX1272WrôeFifo
–
uöt8_t
 *
buf„r
, uöt8_à
size
 );

106 
SX1272RódFifo
–
uöt8_t
 *
buf„r
, uöt8_à
size
 );

113 
ölöe
 
uöt8_t
 
SX1272RódDio0
( );

120 
ölöe
 
uöt8_t
 
SX1272RódDio1
( );

127 
ölöe
 
uöt8_t
 
SX1272RódDio2
( );

134 
ölöe
 
uöt8_t
 
SX1272RódDio3
( );

141 
ölöe
 
uöt8_t
 
SX1272RódDio4
( );

148 
ölöe
 
uöt8_t
 
SX1272RódDio5
( );

157 
ölöe
 
SX1272WrôeRxTx
–
uöt8_t
 
txE«bÀ
 );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-LoRa.c

21 
	~<°rög.h
>

23 
	~"∂©f‹m.h
"

25 #i‡
deföed
–
USE_SX1272_RADIO
 )

27 
	~"ødio.h
"

29 
	~"sx1272-HÆ.h
"

30 
	~"sx1272.h
"

32 
	~"sx1272-LoRaMisc.h
"

33 
	~"sx1272-LoRa.h
"

38 
	#RSSI_OFFSET
 -137.0

	)

39 
	#NOISE_ABSOLUTE_ZERO
 -174.0

	)

40 
	#NOISE_FIGURE
 6.0

	)

46 c⁄° 
	gSig«lBwLog
[] =

53 c⁄° 
	gRssiOff£t
[] =

63 c⁄° 
öt32_t
 
	gH›pögFªquícõs
[] =

120 
tLoRaSëtögs
 
	gLoRaSëtögs
 =

127 
åue
,

128 
Ál£
,

143 
tLoRaSëtögs
 
	gLoRaSëtögs
 =

150 
åue
,

151 
Ál£
,

163 
tSX1272LR
* 
	gSX1272LR
;

168 
uöt8_t
 
	gRFBuf„r
[
RF_BUFFER_SIZE
];

173 
uöt8_t
 
	gRFLRSèã
 = 
RFLR_STATE_IDLE
;

178 
uöt16_t
 
	gRxPackëSize
 = 0;

179 
öt8_t
 
	gRxPackëSƒE°im©e
;

180 
	gRxPackëRssiVÆue
;

181 
uöt8_t
 
	gRxGaö
 = 1;

182 
uöt32_t
 
	gRxTimeoutTimî
 = 0;

186 
uöt32_t
 
	gPackëTimeout
;

191 
uöt16_t
 
	gTxPackëSize
 = 0;

193 
	$SX1272LoRaInô
( )

195 
RFLRSèã
 = 
RFLR_STATE_IDLE
;

197 
	`SX1272LoRaSëDeÁu…s
( );

199 
	`SX1272RódBuf„r
–
REG_LR_OPMODE
, 
SX1272Regs
 + 1, 0x70 - 1 );

201 #i‡–
PLATFORM
 =
SX12xxEigî
 )

202 
SX1272LR
->
RegPaC⁄fig
 = ( SX1272LR->RegPaC⁄fig & 
RFLR_PACONFIG_PASELECT_PABOOST
 ) |

203 
RFLR_PACONFIG_PASELECT_PABOOST
;

205 
SX1272LR
->
RegPaC⁄fig
 = ( SX1272LR->RegPaC⁄fig & 
RFLR_PACONFIG_PASELECT_PABOOST
 ) |

206 
RFLR_PACONFIG_PASELECT_RFO
;

209 
SX1272LR
->
RegL«
 = 
RFLR_LNA_GAIN_G1
 | 
RFLR_LNA_BOOST_ON
;

211 
	`SX1272WrôeBuf„r
–
REG_LR_OPMODE
, 
SX1272Regs
 + 1, 0x70 - 1 );

214 
	`SX1272LoRaSëRFFªquícy
–
LoRaSëtögs
.
RFFªquícy
 );

215 
	`SX1272LoRaSëPa20dBm
–
åue
 );

216 
	`SX1272LoRaSëRFPowî
–
LoRaSëtögs
.
Powî
 );

217 
	`SX1272LoRaSëS¥ódögFa˘‹
–
LoRaSëtögs
.
S¥ódögFa˘‹
 );

218 
	`SX1272LoRaSëEº‹Codög
–
LoRaSëtögs
.
Eº‹Codög
 );

219 
	`SX1272LoRaSëPackëCrcOn
–
LoRaSëtögs
.
CrcOn
 );

220 
	`SX1272LoRaSëSig«lB™dwidth
–
LoRaSëtögs
.
Sig«lBw
 );

222 
	`SX1272LoRaSëIm∂icôHódîOn
–
LoRaSëtögs
.
Im∂icôHódîOn
 );

223 
	`SX1272LoRaSëSymbTimeout
( 0x3FF );

224 
	`SX1272LoRaSëPaylﬂdLígth
–
LoRaSëtögs
.
PaylﬂdLígth
 );

225 
	`SX1272LoRaSëLowD©¨©eO±imize
–
åue
 );

227 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

234 
	}
}

236 
	$SX1272LoRaSëDeÁu…s
( )

241 
SX1272LR
->
RegTe°Re£rved31
 = 0x43;

242 
	`SX1272Wrôe
–0x31, 
SX1272LR
->
RegTe°Re£rved31
 );

244 
	`SX1272Ród
–
REG_LR_VERSION
, &
SX1272LR
->
RegVîsi⁄
 );

245 
	}
}

247 
	$SX1272LoRaRe£t
( )

249 
uöt32_t
 
°¨tTick
;

251 
	`SX1272SëRe£t
–
RADIO_RESET_ON
 );

254 
°¨tTick
 = 
	`GET_TICK_COUNT
( );

255  ( 
	`GET_TICK_COUNT
–Ë- 
°¨tTick
 ) < 
	`TICK_RATE_MS
( 1 ) );

257 
	`SX1272SëRe£t
–
RADIO_RESET_OFF
 );

260 
°¨tTick
 = 
	`GET_TICK_COUNT
( );

261  ( 
	`GET_TICK_COUNT
–Ë- 
°¨tTick
 ) < 
	`TICK_RATE_MS
( 6 ) );

262 
	}
}

264 
	$SX1272LoRaSëOpMode
–
uöt8_t
 
›Mode
 )

266 
uöt8_t
 
›ModePªv
 = 
RFLR_OPMODE_STANDBY
;

267 
boﬁ
 
™ã¬aSwôchTxOnPªv
 = 
åue
;

268 
boﬁ
 
™ã¬aSwôchTxOn
 = 
Ál£
;

270 
›ModePªv
 = 
SX1272LR
->
RegOpMode
 & ~
RFLR_OPMODE_MASK
;

272 if–
›Mode
 !
›ModePªv
 )

274 if–
›Mode
 =
RFLR_OPMODE_TRANSMITTER
 )

276 
™ã¬aSwôchTxOn
 = 
åue
;

280 
™ã¬aSwôchTxOn
 = 
Ál£
;

282 if–
™ã¬aSwôchTxOn
 !
™ã¬aSwôchTxOnPªv
 )

284 
™ã¬aSwôchTxOnPªv
 = 
™ã¬aSwôchTxOn
;

285 
	`RXTX
–
™ã¬aSwôchTxOn
 );

287 
SX1272LR
->
RegOpMode
 = ( SX1272LR->RegOpModê& 
RFLR_OPMODE_MASK
 ) | 
›Mode
;

289 
	`SX1272Wrôe
–
REG_LR_OPMODE
, 
SX1272LR
->
RegOpMode
 );

291 
	}
}

293 
uöt8_t
 
	$SX1272LoRaGëOpMode
( )

295 
	`SX1272Ród
–
REG_LR_OPMODE
, &
SX1272LR
->
RegOpMode
 );

297  
SX1272LR
->
RegOpMode
 & ~
RFLR_OPMODE_MASK
;

298 
	}
}

300 
uöt8_t
 
	$SX1272LoRaGëRegi°î
(
uöt8_t
 
ªg
 )

302 
uöt8_t
 
ªs
;

303 
	`SX1272Ród
–
ªg
, &
ªs
 );

305  
ªs
;

306 
	}
}

309 
uöt8_t
 
	$SX1272LoRaRódRxGaö
( )

311 
	`SX1272Ród
–
REG_LR_LNA
, &
SX1272LR
->
RegL«
 );

312 –
SX1272LR
->
RegL«
 >> 5 ) & 0x07;

313 
	}
}

315 
	$SX1272LoRaRódRssi
( )

318 
	`SX1272Ród
–
REG_LR_RSSIVALUE
, &
SX1272LR
->
RegRssiVÆue
 );

320  
RssiOff£t
[
LoRaSëtögs
.
Sig«lBw
] + ( )
SX1272LR
->
RegRssiVÆue
;

321 
	}
}

323 
uöt8_t
 
	$SX1272LoRaGëPackëRxGaö
( )

325  
RxGaö
;

326 
	}
}

328 
öt8_t
 
	$SX1272LoRaGëPackëSƒ
( )

330  
RxPackëSƒE°im©e
;

331 
	}
}

333 
	$SX1272LoRaGëPackëRssi
( )

335  
RxPackëRssiVÆue
;

336 
	}
}

338 
	$SX1272LoRaSèπRx
( )

340 
	`SX1272LoRaSëRFSèã
–
RFLR_STATE_RX_INIT
 );

341 
	}
}

343 
	$SX1272LoRaGëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 )

345 *
size
 = 
RxPackëSize
;

346 
RxPackëSize
 = 0;

347 
	`mem˝y
––* )
buf„r
, ( * )
RFBuf„r
, ( 
size_t
 )*
size
 );

348 
	}
}

350 
	$SX1272LoRaSëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 )

352 if–
LoRaSëtögs
.
FªqH›On
 =
Ál£
 )

354 
TxPackëSize
 = 
size
;

358 
TxPackëSize
 = 255;

360 
	`mem˝y
––* )
RFBuf„r
, 
buf„r
, ( 
size_t
 )
TxPackëSize
 );

362 
RFLRSèã
 = 
RFLR_STATE_TX_INIT
;

363 
	}
}

365 
uöt8_t
 
	$SX1272LoRaGëRFSèã
( )

367  
RFLRSèã
;

368 
	}
}

370 
	$SX1272LoRaSëRFSèã
–
uöt8_t
 
°©e
 )

372 
RFLRSèã
 = 
°©e
;

373 
	}
}

383 
uöt32_t
 
	$SX1272LoRaPro˚ss
( )

385 
uöt32_t
 
ªsu…
 = 
RF_BUSY
;

387  
RFLRSèã
 )

389 
RFLR_STATE_IDLE
:

391 
RFLR_STATE_RX_INIT
:

393 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

395 
SX1272LR
->
RegIrqFœgsMask
 = 
RFLR_IRQFLAGS_RXTIMEOUT
 |

398 
RFLR_IRQFLAGS_VALIDHEADER
 |

399 
RFLR_IRQFLAGS_TXDONE
 |

400 
RFLR_IRQFLAGS_CADDONE
 |

402 
RFLR_IRQFLAGS_CADDETECTED
;

403 
	`SX1272Wrôe
–
REG_LR_IRQFLAGSMASK
, 
SX1272LR
->
RegIrqFœgsMask
 );

405 if–
LoRaSëtögs
.
FªqH›On
 =
åue
 )

407 
SX1272LR
->
RegH›Pîiod
 = 
LoRaSëtögs
.
H›Pîiod
;

409 
	`SX1272Ród
–
REG_LR_HOPCHANNEL
, &
SX1272LR
->
RegH›Ch™√l
 );

410 
	`SX1272LoRaSëRFFªquícy
–
H›pögFªquícõs
[
SX1272LR
->
RegH›Ch™√l
 & 
RFLR_HOPCHANNEL_CHANNEL_MASK
] );

414 
SX1272LR
->
RegH›Pîiod
 = 255;

417 
	`SX1272Wrôe
–
REG_LR_HOPPERIOD
, 
SX1272LR
->
RegH›Pîiod
 );

420 
SX1272LR
->
RegDioM≠pög1
 = 
RFLR_DIOMAPPING1_DIO0_00
 | 
RFLR_DIOMAPPING1_DIO1_00
 | 
RFLR_DIOMAPPING1_DIO2_00
 | 
RFLR_DIOMAPPING1_DIO3_00
;

422 
SX1272LR
->
RegDioM≠pög2
 = 
RFLR_DIOMAPPING2_DIO4_00
 | 
RFLR_DIOMAPPING2_DIO5_00
;

423 
	`SX1272WrôeBuf„r
–
REG_LR_DIOMAPPING1
, &
SX1272LR
->
RegDioM≠pög1
, 2 );

425 if–
LoRaSëtögs
.
RxSögÀOn
 =
åue
 )

428 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_RECEIVER_SINGLE
 );

432 
SX1272LR
->
RegFifoAddrPå
 = SX1272LR->
RegFifoRxBa£Addr
;

433 
	`SX1272Wrôe
–
REG_LR_FIFOADDRPTR
, 
SX1272LR
->
RegFifoAddrPå
 );

435 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_RECEIVER
 );

438 
	`mem£t
–
RFBuf„r
, 0, ( 
size_t
 )
RF_BUFFER_SIZE
 );

440 
PackëTimeout
 = 
LoRaSëtögs
.
RxPackëTimeout
;

441 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

442 
RFLRSèã
 = 
RFLR_STATE_RX_RUNNING
;

444 
RFLR_STATE_RX_RUNNING
:

446 if–
DIO0
 == 1 )

448 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

449 if–
LoRaSëtögs
.
FªqH›On
 =
åue
 )

451 
	`SX1272Ród
–
REG_LR_HOPCHANNEL
, &
SX1272LR
->
RegH›Ch™√l
 );

452 
	`SX1272LoRaSëRFFªquícy
–
H›pögFªquícõs
[
SX1272LR
->
RegH›Ch™√l
 & 
RFLR_HOPCHANNEL_CHANNEL_MASK
] );

455 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_RXDONE
 );

456 
RFLRSèã
 = 
RFLR_STATE_RX_DONE
;

458 if–
DIO2
 == 1 )

460 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

461 if–
LoRaSëtögs
.
FªqH›On
 =
åue
 )

463 
	`SX1272Ród
–
REG_LR_HOPCHANNEL
, &
SX1272LR
->
RegH›Ch™√l
 );

464 
	`SX1272LoRaSëRFFªquícy
–
H›pögFªquícõs
[
SX1272LR
->
RegH›Ch™√l
 & 
RFLR_HOPCHANNEL_CHANNEL_MASK
] );

467 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 );

469 
RxGaö
 = 
	`SX1272LoRaRódRxGaö
( );

472 if–
LoRaSëtögs
.
RxSögÀOn
 =
åue
 )

474 if––
	`GET_TICK_COUNT
–Ë- 
RxTimeoutTimî
 ) > 
PackëTimeout
 )

476 
RFLRSèã
 = 
RFLR_STATE_RX_TIMEOUT
;

480 
RFLR_STATE_RX_DONE
:

481 
	`SX1272Ród
–
REG_LR_IRQFLAGS
, &
SX1272LR
->
RegIrqFœgs
 );

482 if––
SX1272LR
->
RegIrqFœgs
 & 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )

485 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 );

487 if–
LoRaSëtögs
.
RxSögÀOn
 =
åue
 )

489 
RFLRSèã
 = 
RFLR_STATE_RX_INIT
;

493 
RFLRSèã
 = 
RFLR_STATE_RX_RUNNING
;

499 
uöt8_t
 
rxSƒE°im©e
;

500 
	`SX1272Ród
–
REG_LR_PKTSNRVALUE
, &
rxSƒE°im©e
 );

501 if–
rxSƒE°im©e
 & 0x80 )

504 
RxPackëSƒE°im©e
 = ( ( ~
rxSƒE°im©e
 + 1 ) & 0xFF ) >> 2;

505 
RxPackëSƒE°im©e
 = -RxPacketSnrEstimate;

510 
RxPackëSƒE°im©e
 = ( 
rxSƒE°im©e
 & 0xFF ) >> 2;

514 if–
RxPackëSƒE°im©e
 < 0 )

516 
RxPackëRssiVÆue
 = 
NOISE_ABSOLUTE_ZERO
 + 10.0 * 
Sig«lBwLog
[
LoRaSëtögs
.
Sig«lBw
] + 
NOISE_FIGURE
 + ( )
RxPackëSƒE°im©e
;

520 
	`SX1272Ród
–
REG_LR_PKTRSSIVALUE
, &
SX1272LR
->
RegPktRssiVÆue
 );

521 
RxPackëRssiVÆue
 = 
RssiOff£t
[
LoRaSëtögs
.
Sig«lBw
] + ( )
SX1272LR
->
RegPktRssiVÆue
;

524 if–
LoRaSëtögs
.
RxSögÀOn
 =
åue
 )

526 
SX1272LR
->
RegFifoAddrPå
 = SX1272LR->
RegFifoRxBa£Addr
;

527 
	`SX1272Wrôe
–
REG_LR_FIFOADDRPTR
, 
SX1272LR
->
RegFifoAddrPå
 );

529 if–
LoRaSëtögs
.
Im∂icôHódîOn
 =
åue
 )

531 
RxPackëSize
 = 
SX1272LR
->
RegPaylﬂdLígth
;

532 
	`SX1272RódFifo
–
RFBuf„r
, 
SX1272LR
->
RegPaylﬂdLígth
 );

536 
	`SX1272Ród
–
REG_LR_NBRXBYTES
, &
SX1272LR
->
RegNbRxByãs
 );

537 
RxPackëSize
 = 
SX1272LR
->
RegNbRxByãs
;

538 
	`SX1272RódFifo
–
RFBuf„r
, 
SX1272LR
->
RegNbRxByãs
 );

543 
	`SX1272Ród
–
REG_LR_FIFORXCURRENTADDR
, &
SX1272LR
->
RegFifoRxCuºítAddr
 );

545 if–
LoRaSëtögs
.
Im∂icôHódîOn
 =
åue
 )

547 
RxPackëSize
 = 
SX1272LR
->
RegPaylﬂdLígth
;

548 
SX1272LR
->
RegFifoAddrPå
 = SX1272LR->
RegFifoRxCuºítAddr
;

549 
	`SX1272Wrôe
–
REG_LR_FIFOADDRPTR
, 
SX1272LR
->
RegFifoAddrPå
 );

550 
	`SX1272RódFifo
–
RFBuf„r
, 
SX1272LR
->
RegPaylﬂdLígth
 );

554 
	`SX1272Ród
–
REG_LR_NBRXBYTES
, &
SX1272LR
->
RegNbRxByãs
 );

555 
RxPackëSize
 = 
SX1272LR
->
RegNbRxByãs
;

556 
SX1272LR
->
RegFifoAddrPå
 = SX1272LR->
RegFifoRxCuºítAddr
;

557 
	`SX1272Wrôe
–
REG_LR_FIFOADDRPTR
, 
SX1272LR
->
RegFifoAddrPå
 );

558 
	`SX1272RódFifo
–
RFBuf„r
, 
SX1272LR
->
RegNbRxByãs
 );

562 if–
LoRaSëtögs
.
RxSögÀOn
 =
åue
 )

564 
RFLRSèã
 = 
RFLR_STATE_RX_INIT
;

568 
RFLRSèã
 = 
RFLR_STATE_RX_RUNNING
;

570 
ªsu…
 = 
RF_RX_DONE
;

572 
RFLR_STATE_RX_TIMEOUT
:

573 
RFLRSèã
 = 
RFLR_STATE_RX_INIT
;

574 
ªsu…
 = 
RF_RX_TIMEOUT
;

576 
RFLR_STATE_TX_INIT
:

578 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

580 if–
LoRaSëtögs
.
FªqH›On
 =
åue
 )

582 
SX1272LR
->
RegIrqFœgsMask
 = 
RFLR_IRQFLAGS_RXTIMEOUT
 |

583 
RFLR_IRQFLAGS_RXDONE
 |

584 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 |

585 
RFLR_IRQFLAGS_VALIDHEADER
 |

587 
RFLR_IRQFLAGS_CADDONE
 |

589 
RFLR_IRQFLAGS_CADDETECTED
;

590 
SX1272LR
->
RegH›Pîiod
 = 
LoRaSëtögs
.
H›Pîiod
;

592 
	`SX1272Ród
–
REG_LR_HOPCHANNEL
, &
SX1272LR
->
RegH›Ch™√l
 );

593 
	`SX1272LoRaSëRFFªquícy
–
H›pögFªquícõs
[
SX1272LR
->
RegH›Ch™√l
 & 
RFLR_HOPCHANNEL_CHANNEL_MASK
] );

597 
SX1272LR
->
RegIrqFœgsMask
 = 
RFLR_IRQFLAGS_RXTIMEOUT
 |

598 
RFLR_IRQFLAGS_RXDONE
 |

599 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 |

600 
RFLR_IRQFLAGS_VALIDHEADER
 |

602 
RFLR_IRQFLAGS_CADDONE
 |

603 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 |

604 
RFLR_IRQFLAGS_CADDETECTED
;

605 
SX1272LR
->
RegH›Pîiod
 = 0;

607 
	`SX1272Wrôe
–
REG_LR_HOPPERIOD
, 
SX1272LR
->
RegH›Pîiod
 );

608 
	`SX1272Wrôe
–
REG_LR_IRQFLAGSMASK
, 
SX1272LR
->
RegIrqFœgsMask
 );

611 
SX1272LR
->
RegPaylﬂdLígth
 = 
TxPackëSize
;

612 
	`SX1272Wrôe
–
REG_LR_PAYLOADLENGTH
, 
SX1272LR
->
RegPaylﬂdLígth
 );

614 
SX1272LR
->
RegFifoTxBa£Addr
 = 0x00;

615 
	`SX1272Wrôe
–
REG_LR_FIFOTXBASEADDR
, 
SX1272LR
->
RegFifoTxBa£Addr
 );

617 
SX1272LR
->
RegFifoAddrPå
 = SX1272LR->
RegFifoTxBa£Addr
;

618 
	`SX1272Wrôe
–
REG_LR_FIFOADDRPTR
, 
SX1272LR
->
RegFifoAddrPå
 );

621 
	`SX1272WrôeFifo
–
RFBuf„r
, 
SX1272LR
->
RegPaylﬂdLígth
 );

623 
SX1272LR
->
RegDioM≠pög1
 = 
RFLR_DIOMAPPING1_DIO0_01
 | 
RFLR_DIOMAPPING1_DIO1_00
 | 
RFLR_DIOMAPPING1_DIO2_00
 | 
RFLR_DIOMAPPING1_DIO3_01
;

625 
SX1272LR
->
RegDioM≠pög2
 = 
RFLR_DIOMAPPING2_DIO4_01
 | 
RFLR_DIOMAPPING2_DIO5_00
;

626 
	`SX1272WrôeBuf„r
–
REG_LR_DIOMAPPING1
, &
SX1272LR
->
RegDioM≠pög1
, 2 );

628 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_TRANSMITTER
 );

630 
RFLRSèã
 = 
RFLR_STATE_TX_RUNNING
;

632 
RFLR_STATE_TX_RUNNING
:

633 if–
DIO0
 == 1 )

636 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_TXDONE
 );

637 
RFLRSèã
 = 
RFLR_STATE_TX_DONE
;

639 if–
DIO2
 == 1 )

641 if–
LoRaSëtögs
.
FªqH›On
 =
åue
 )

643 
	`SX1272Ród
–
REG_LR_HOPCHANNEL
, &
SX1272LR
->
RegH›Ch™√l
 );

644 
	`SX1272LoRaSëRFFªquícy
–
H›pögFªquícõs
[
SX1272LR
->
RegH›Ch™√l
 & 
RFLR_HOPCHANNEL_CHANNEL_MASK
] );

647 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 );

650 
RFLR_STATE_TX_DONE
:

652 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

654 
RFLRSèã
 = 
RFLR_STATE_IDLE
;

655 
ªsu…
 = 
RF_TX_DONE
;

657 
RFLR_STATE_CAD_INIT
:

658 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

660 
SX1272LR
->
RegIrqFœgsMask
 = 
RFLR_IRQFLAGS_RXTIMEOUT
 |

661 
RFLR_IRQFLAGS_RXDONE
 |

662 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 |

663 
RFLR_IRQFLAGS_VALIDHEADER
 |

664 
RFLR_IRQFLAGS_TXDONE
 |

666 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
;

668 
	`SX1272Wrôe
–
REG_LR_IRQFLAGSMASK
, 
SX1272LR
->
RegIrqFœgsMask
 );

671 
SX1272LR
->
RegDioM≠pög1
 = 
RFLR_DIOMAPPING1_DIO0_00
 | 
RFLR_DIOMAPPING1_DIO1_00
 | 
RFLR_DIOMAPPING1_DIO2_00
 | 
RFLR_DIOMAPPING1_DIO3_00
;

673 
SX1272LR
->
RegDioM≠pög2
 = 
RFLR_DIOMAPPING2_DIO4_00
 | 
RFLR_DIOMAPPING2_DIO5_00
;

674 
	`SX1272WrôeBuf„r
–
REG_LR_DIOMAPPING1
, &
SX1272LR
->
RegDioM≠pög1
, 2 );

676 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_CAD
 );

677 
RFLRSèã
 = 
RFLR_STATE_CAD_RUNNING
;

679 
RFLR_STATE_CAD_RUNNING
:

680 if–
DIO3
 == 1 )

683 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_CADDONE
 );

684 if–
DIO4
 == 1 )

687 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_CADDETECTED
 );

689 
RFLRSèã
 = 
RFLR_STATE_RX_INIT
;

690 
ªsu…
 = 
RF_CHANNEL_ACTIVITY_DETECTED
;

695 
RFLRSèã
 = 
RFLR_STATE_IDLE
;

696 
ªsu…
 = 
RF_CHANNEL_EMPTY
;

704  
ªsu…
;

705 
	}
}

707 
uöt32_t
 
	$SX1272LoRaGëRFFªquícy2
( )

709 
uöt32_t
 
RFFªquícy
;

710 
uöt8_t
 
RegFrfMsb
[3];

711 
	`SX1272RódBuf„r
–
REG_LR_FRFMSB
, 
RegFrfMsb
, 3 );

712 
RFFªquícy
 = ( ( 
uöt32_t
 )
RegFrfMsb
[0] << 16 ) | ( ( uint32_t )RegFrfMsb[1]<< 8 ) | ( ( uint32_t )RegFrfMsb[2] );

713 
RFFªquícy
 = ( 
uöt32_t
 )––ËRFFªquícy * ( )
FREQ_STEP
 );

715  
RFFªquícy
;

716 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-LoRa.h

21 #i‚de‡
__SX1272_LORA_H__


22 
	#__SX1272_LORA_H__


	)

27 
	ssLoRaSëtögs


29 
uöt32_t
 
	mRFFªquícy
;

30 
öt8_t
 
	mPowî
;

31 
uöt8_t
 
	mSig«lBw
;

32 
uöt8_t
 
	mS¥ódögFa˘‹
;

33 
uöt8_t
 
	mEº‹Codög
;

34 
boﬁ
 
	mCrcOn
;

35 
boﬁ
 
	mIm∂icôHódîOn
;

36 
boﬁ
 
	mRxSögÀOn
;

37 
boﬁ
 
	mFªqH›On
;

38 
uöt8_t
 
	mH›Pîiod
;

39 
uöt32_t
 
	mTxPackëTimeout
;

40 
uöt32_t
 
	mRxPackëTimeout
;

41 
uöt8_t
 
	mPaylﬂdLígth
;

42 }
	ttLoRaSëtögs
;

47 
	#RF_BUFFER_SIZE_MAX
 256

	)

48 
	#RF_BUFFER_SIZE
 256

	)

56 
	mRFLR_STATE_IDLE
,

57 
	mRFLR_STATE_RX_INIT
,

58 
	mRFLR_STATE_RX_RUNNING
,

59 
	mRFLR_STATE_RX_DONE
,

60 
	mRFLR_STATE_RX_TIMEOUT
,

61 
	mRFLR_STATE_TX_INIT
,

62 
	mRFLR_STATE_TX_RUNNING
,

63 
	mRFLR_STATE_TX_DONE
,

64 
	mRFLR_STATE_TX_TIMEOUT
,

65 
	mRFLR_STATE_CAD_INIT
,

66 
	mRFLR_STATE_CAD_RUNNING
,

67 }
	ttRFLRSèãs
;

72 
	#XTAL_FREQ
 32000000

	)

73 
	#FREQ_STEP
 61.03515625

	)

78 
	#REG_LR_FIFO
 0x00

	)

80 
	#REG_LR_OPMODE
 0x01

	)

81 
	#REG_LR_FRFMSB
 0x06

	)

82 
	#REG_LR_FRFMID
 0x07

	)

83 
	#REG_LR_FRFLSB
 0x08

	)

85 
	#REG_LR_PACONFIG
 0x09

	)

86 
	#REG_LR_PARAMP
 0x0A

	)

87 
	#REG_LR_OCP
 0x0B

	)

89 
	#REG_LR_LNA
 0x0C

	)

91 
	#REG_LR_FIFOADDRPTR
 0x0D

	)

92 
	#REG_LR_FIFOTXBASEADDR
 0x0E

	)

93 
	#REG_LR_FIFORXBASEADDR
 0x0F

	)

94 
	#REG_LR_FIFORXCURRENTADDR
 0x10

	)

95 
	#REG_LR_IRQFLAGSMASK
 0x11

	)

96 
	#REG_LR_IRQFLAGS
 0x12

	)

97 
	#REG_LR_NBRXBYTES
 0x13

	)

98 
	#REG_LR_RXHEADERCNTVALUEMSB
 0x14

	)

99 
	#REG_LR_RXHEADERCNTVALUELSB
 0x15

	)

100 
	#REG_LR_RXPACKETCNTVALUEMSB
 0x16

	)

101 
	#REG_LR_RXPACKETCNTVALUELSB
 0x17

	)

102 
	#REG_LR_MODEMSTAT
 0x18

	)

103 
	#REG_LR_PKTSNRVALUE
 0x19

	)

104 
	#REG_LR_PKTRSSIVALUE
 0x1A

	)

105 
	#REG_LR_RSSIVALUE
 0x1B

	)

106 
	#REG_LR_HOPCHANNEL
 0x1C

	)

107 
	#REG_LR_MODEMCONFIG1
 0x1D

	)

108 
	#REG_LR_MODEMCONFIG2
 0x1E

	)

109 
	#REG_LR_SYMBTIMEOUTLSB
 0x1F

	)

110 
	#REG_LR_PREAMBLEMSB
 0x20

	)

111 
	#REG_LR_PREAMBLELSB
 0x21

	)

112 
	#REG_LR_PAYLOADLENGTH
 0x22

	)

113 
	#REG_LR_PAYLOADMAXLENGTH
 0x23

	)

114 
	#REG_LR_HOPPERIOD
 0x24

	)

115 
	#REG_LR_FIFORXBYTEADDR
 0x25

	)

118 
	#REG_LR_DIOMAPPING1
 0x40

	)

119 
	#REG_LR_DIOMAPPING2
 0x41

	)

121 
	#REG_LR_VERSION
 0x42

	)

123 
	#REG_LR_AGCREF
 0x43

	)

124 
	#REG_LR_AGCTHRESH1
 0x44

	)

125 
	#REG_LR_AGCTHRESH2
 0x45

	)

126 
	#REG_LR_AGCTHRESH3
 0x46

	)

127 
	#REG_LR_PLLHOP
 0x4B

	)

128 
	#REG_LR_TCXO
 0x58

	)

129 
	#REG_LR_PADAC
 0x5A

	)

130 
	#REG_LR_PLL
 0x5C

	)

131 
	#REG_LR_PLLLOWPN
 0x5E

	)

132 
	#REG_LR_FORMERTEMP
 0x6C

	)

145 
	#RFLR_OPMODE_LONGRANGEMODE_MASK
 0x7F

	)

146 
	#RFLR_OPMODE_LONGRANGEMODE_OFF
 0x00

147 
	#RFLR_OPMODE_LONGRANGEMODE_ON
 0x80

	)

149 
	#RFLR_OPMODE_ACCESSSHAREDREG_MASK
 0xBF

	)

150 
	#RFLR_OPMODE_ACCESSSHAREDREG_ENABLE
 0x40

	)

151 
	#RFLR_OPMODE_ACCESSSHAREDREG_DISABLE
 0x00

152 

	)

153 
	#RFLR_OPMODE_MASK
 0xF8

	)

154 
	#RFLR_OPMODE_SLEEP
 0x00

	)

155 
	#RFLR_OPMODE_STANDBY
 0x01

156 
	#RFLR_OPMODE_SYNTHESIZER_TX
 0x02

	)

157 
	#RFLR_OPMODE_TRANSMITTER
 0x03

	)

158 
	#RFLR_OPMODE_SYNTHESIZER_RX
 0x04

	)

159 
	#RFLR_OPMODE_RECEIVER
 0x05

	)

161 
	#RFLR_OPMODE_RECEIVER_SINGLE
 0x06

	)

162 
	#RFLR_OPMODE_CAD
 0x07

	)

167 
	#RFLR_FRFMSB_863_MHZ
 0xD7

	)

168 
	#RFLR_FRFMID_863_MHZ
 0xC0

	)

169 
	#RFLR_FRFLSB_863_MHZ
 0x00

	)

170 
	#RFLR_FRFMSB_864_MHZ
 0xD8

	)

171 
	#RFLR_FRFMID_864_MHZ
 0x00

	)

172 
	#RFLR_FRFLSB_864_MHZ
 0x00

	)

173 
	#RFLR_FRFMSB_865_MHZ
 0xD8

	)

174 
	#RFLR_FRFMID_865_MHZ
 0x40

	)

175 
	#RFLR_FRFLSB_865_MHZ
 0x00

	)

176 
	#RFLR_FRFMSB_866_MHZ
 0xD8

	)

177 
	#RFLR_FRFMID_866_MHZ
 0x80

	)

178 
	#RFLR_FRFLSB_866_MHZ
 0x00

	)

179 
	#RFLR_FRFMSB_867_MHZ
 0xD8

	)

180 
	#RFLR_FRFMID_867_MHZ
 0xC0

	)

181 
	#RFLR_FRFLSB_867_MHZ
 0x00

	)

182 
	#RFLR_FRFMSB_868_MHZ
 0xD9

	)

183 
	#RFLR_FRFMID_868_MHZ
 0x00

	)

184 
	#RFLR_FRFLSB_868_MHZ
 0x00

	)

185 
	#RFLR_FRFMSB_869_MHZ
 0xD9

	)

186 
	#RFLR_FRFMID_869_MHZ
 0x40

	)

187 
	#RFLR_FRFLSB_869_MHZ
 0x00

	)

188 
	#RFLR_FRFMSB_870_MHZ
 0xD9

	)

189 
	#RFLR_FRFMID_870_MHZ
 0x80

	)

190 
	#RFLR_FRFLSB_870_MHZ
 0x00

	)

192 
	#RFLR_FRFMSB_902_MHZ
 0xE1

	)

193 
	#RFLR_FRFMID_902_MHZ
 0x80

	)

194 
	#RFLR_FRFLSB_902_MHZ
 0x00

	)

195 
	#RFLR_FRFMSB_903_MHZ
 0xE1

	)

196 
	#RFLR_FRFMID_903_MHZ
 0xC0

	)

197 
	#RFLR_FRFLSB_903_MHZ
 0x00

	)

198 
	#RFLR_FRFMSB_904_MHZ
 0xE2

	)

199 
	#RFLR_FRFMID_904_MHZ
 0x00

	)

200 
	#RFLR_FRFLSB_904_MHZ
 0x00

	)

201 
	#RFLR_FRFMSB_905_MHZ
 0xE2

	)

202 
	#RFLR_FRFMID_905_MHZ
 0x40

	)

203 
	#RFLR_FRFLSB_905_MHZ
 0x00

	)

204 
	#RFLR_FRFMSB_906_MHZ
 0xE2

	)

205 
	#RFLR_FRFMID_906_MHZ
 0x80

	)

206 
	#RFLR_FRFLSB_906_MHZ
 0x00

	)

207 
	#RFLR_FRFMSB_907_MHZ
 0xE2

	)

208 
	#RFLR_FRFMID_907_MHZ
 0xC0

	)

209 
	#RFLR_FRFLSB_907_MHZ
 0x00

	)

210 
	#RFLR_FRFMSB_908_MHZ
 0xE3

	)

211 
	#RFLR_FRFMID_908_MHZ
 0x00

	)

212 
	#RFLR_FRFLSB_908_MHZ
 0x00

	)

213 
	#RFLR_FRFMSB_909_MHZ
 0xE3

	)

214 
	#RFLR_FRFMID_909_MHZ
 0x40

	)

215 
	#RFLR_FRFLSB_909_MHZ
 0x00

	)

216 
	#RFLR_FRFMSB_910_MHZ
 0xE3

	)

217 
	#RFLR_FRFMID_910_MHZ
 0x80

	)

218 
	#RFLR_FRFLSB_910_MHZ
 0x00

	)

219 
	#RFLR_FRFMSB_911_MHZ
 0xE3

	)

220 
	#RFLR_FRFMID_911_MHZ
 0xC0

	)

221 
	#RFLR_FRFLSB_911_MHZ
 0x00

	)

222 
	#RFLR_FRFMSB_912_MHZ
 0xE4

	)

223 
	#RFLR_FRFMID_912_MHZ
 0x00

	)

224 
	#RFLR_FRFLSB_912_MHZ
 0x00

	)

225 
	#RFLR_FRFMSB_913_MHZ
 0xE4

	)

226 
	#RFLR_FRFMID_913_MHZ
 0x40

	)

227 
	#RFLR_FRFLSB_913_MHZ
 0x00

	)

228 
	#RFLR_FRFMSB_914_MHZ
 0xE4

	)

229 
	#RFLR_FRFMID_914_MHZ
 0x80

	)

230 
	#RFLR_FRFLSB_914_MHZ
 0x00

	)

231 
	#RFLR_FRFMSB_915_MHZ
 0xE4

232 
	#RFLR_FRFMID_915_MHZ
 0xC0

233 
	#RFLR_FRFLSB_915_MHZ
 0x00

234 
	#RFLR_FRFMSB_916_MHZ
 0xE5

	)

235 
	#RFLR_FRFMID_916_MHZ
 0x00

	)

236 
	#RFLR_FRFLSB_916_MHZ
 0x00

	)

237 
	#RFLR_FRFMSB_917_MHZ
 0xE5

	)

238 
	#RFLR_FRFMID_917_MHZ
 0x40

	)

239 
	#RFLR_FRFLSB_917_MHZ
 0x00

	)

240 
	#RFLR_FRFMSB_918_MHZ
 0xE5

	)

241 
	#RFLR_FRFMID_918_MHZ
 0x80

	)

242 
	#RFLR_FRFLSB_918_MHZ
 0x00

	)

243 
	#RFLR_FRFMSB_919_MHZ
 0xE5

	)

244 
	#RFLR_FRFMID_919_MHZ
 0xC0

	)

245 
	#RFLR_FRFLSB_919_MHZ
 0x00

	)

246 
	#RFLR_FRFMSB_920_MHZ
 0xE6

	)

247 
	#RFLR_FRFMID_920_MHZ
 0x00

	)

248 
	#RFLR_FRFLSB_920_MHZ
 0x00

	)

249 
	#RFLR_FRFMSB_921_MHZ
 0xE6

	)

250 
	#RFLR_FRFMID_921_MHZ
 0x40

	)

251 
	#RFLR_FRFLSB_921_MHZ
 0x00

	)

252 
	#RFLR_FRFMSB_922_MHZ
 0xE6

	)

253 
	#RFLR_FRFMID_922_MHZ
 0x80

	)

254 
	#RFLR_FRFLSB_922_MHZ
 0x00

	)

255 
	#RFLR_FRFMSB_923_MHZ
 0xE6

	)

256 
	#RFLR_FRFMID_923_MHZ
 0xC0

	)

257 
	#RFLR_FRFLSB_923_MHZ
 0x00

	)

258 
	#RFLR_FRFMSB_924_MHZ
 0xE7

	)

259 
	#RFLR_FRFMID_924_MHZ
 0x00

	)

260 
	#RFLR_FRFLSB_924_MHZ
 0x00

	)

261 
	#RFLR_FRFMSB_925_MHZ
 0xE7

	)

262 
	#RFLR_FRFMID_925_MHZ
 0x40

	)

263 
	#RFLR_FRFLSB_925_MHZ
 0x00

	)

264 
	#RFLR_FRFMSB_926_MHZ
 0xE7

	)

265 
	#RFLR_FRFMID_926_MHZ
 0x80

	)

266 
	#RFLR_FRFLSB_926_MHZ
 0x00

	)

267 
	#RFLR_FRFMSB_927_MHZ
 0xE7

	)

268 
	#RFLR_FRFMID_927_MHZ
 0xC0

	)

269 
	#RFLR_FRFLSB_927_MHZ
 0x00

	)

270 
	#RFLR_FRFMSB_928_MHZ
 0xE8

	)

271 
	#RFLR_FRFMID_928_MHZ
 0x00

	)

272 
	#RFLR_FRFLSB_928_MHZ
 0x00

	)

277 
	#RFLR_PACONFIG_PASELECT_MASK
 0x7F

	)

278 
	#RFLR_PACONFIG_PASELECT_PABOOST
 0x80

	)

279 
	#RFLR_PACONFIG_PASELECT_RFO
 0x00

280 

	)

281 
	#RFLR_PACONFIG_OUTPUTPOWER_MASK
 0xF0

	)

286 
	#RFLR_PARAMP_LOWPNTXPLL_MASK
 0xE0

	)

287 
	#RFLR_PARAMP_LOWPNTXPLL_OFF
 0x10

288 
	#RFLR_PARAMP_LOWPNTXPLL_ON
 0x00

	)

290 
	#RFLR_PARAMP_MASK
 0xF0

	)

291 
	#RFLR_PARAMP_3400_US
 0x00

	)

292 
	#RFLR_PARAMP_2000_US
 0x01

	)

293 
	#RFLR_PARAMP_1000_US
 0x02

	)

294 
	#RFLR_PARAMP_0500_US
 0x03

	)

295 
	#RFLR_PARAMP_0250_US
 0x04

	)

296 
	#RFLR_PARAMP_0125_US
 0x05

	)

297 
	#RFLR_PARAMP_0100_US
 0x06

	)

298 
	#RFLR_PARAMP_0062_US
 0x07

	)

299 
	#RFLR_PARAMP_0050_US
 0x08

	)

300 
	#RFLR_PARAMP_0040_US
 0x09

301 
	#RFLR_PARAMP_0031_US
 0x0A

	)

302 
	#RFLR_PARAMP_0025_US
 0x0B

	)

303 
	#RFLR_PARAMP_0020_US
 0x0C

	)

304 
	#RFLR_PARAMP_0015_US
 0x0D

	)

305 
	#RFLR_PARAMP_0012_US
 0x0E

	)

306 
	#RFLR_PARAMP_0010_US
 0x0F

	)

311 
	#RFLR_OCP_MASK
 0xDF

	)

312 
	#RFLR_OCP_ON
 0x20

313 
	#RFLR_OCP_OFF
 0x00

	)

315 
	#RFLR_OCP_TRIM_MASK
 0xE0

	)

316 
	#RFLR_OCP_TRIM_045_MA
 0x00

	)

317 
	#RFLR_OCP_TRIM_050_MA
 0x01

	)

318 
	#RFLR_OCP_TRIM_055_MA
 0x02

	)

319 
	#RFLR_OCP_TRIM_060_MA
 0x03

	)

320 
	#RFLR_OCP_TRIM_065_MA
 0x04

	)

321 
	#RFLR_OCP_TRIM_070_MA
 0x05

	)

322 
	#RFLR_OCP_TRIM_075_MA
 0x06

	)

323 
	#RFLR_OCP_TRIM_080_MA
 0x07

	)

324 
	#RFLR_OCP_TRIM_085_MA
 0x08

	)

325 
	#RFLR_OCP_TRIM_090_MA
 0x09

	)

326 
	#RFLR_OCP_TRIM_095_MA
 0x0A

	)

327 
	#RFLR_OCP_TRIM_100_MA
 0x0B

328 
	#RFLR_OCP_TRIM_105_MA
 0x0C

	)

329 
	#RFLR_OCP_TRIM_110_MA
 0x0D

	)

330 
	#RFLR_OCP_TRIM_115_MA
 0x0E

	)

331 
	#RFLR_OCP_TRIM_120_MA
 0x0F

	)

332 
	#RFLR_OCP_TRIM_130_MA
 0x10

	)

333 
	#RFLR_OCP_TRIM_140_MA
 0x11

	)

334 
	#RFLR_OCP_TRIM_150_MA
 0x12

	)

335 
	#RFLR_OCP_TRIM_160_MA
 0x13

	)

336 
	#RFLR_OCP_TRIM_170_MA
 0x14

	)

337 
	#RFLR_OCP_TRIM_180_MA
 0x15

	)

338 
	#RFLR_OCP_TRIM_190_MA
 0x16

	)

339 
	#RFLR_OCP_TRIM_200_MA
 0x17

	)

340 
	#RFLR_OCP_TRIM_210_MA
 0x18

	)

341 
	#RFLR_OCP_TRIM_220_MA
 0x19

	)

342 
	#RFLR_OCP_TRIM_230_MA
 0x1A

	)

343 
	#RFLR_OCP_TRIM_240_MA
 0x1B

	)

348 
	#RFLR_LNA_GAIN_MASK
 0x1F

	)

349 
	#RFLR_LNA_GAIN_G1
 0x20

350 
	#RFLR_LNA_GAIN_G2
 0x40

	)

351 
	#RFLR_LNA_GAIN_G3
 0x60

	)

352 
	#RFLR_LNA_GAIN_G4
 0x80

	)

353 
	#RFLR_LNA_GAIN_G5
 0xA0

	)

354 
	#RFLR_LNA_GAIN_G6
 0xC0

	)

356 
	#RFLR_LNA_BOOST_MASK
 0xFC

	)

357 
	#RFLR_LNA_BOOST_OFF
 0x00

358 
	#RFLR_LNA_BOOST_ON
 0x03

	)

363 
	#RFLR_FIFOADDRPTR
 0x00

364 

	)

368 
	#RFLR_FIFOTXBASEADDR
 0x80

369 

	)

373 
	#RFLR_FIFORXBASEADDR
 0x00

374 

	)

382 
	#RFLR_IRQFLAGS_RXTIMEOUT_MASK
 0x80

	)

383 
	#RFLR_IRQFLAGS_RXDONE_MASK
 0x40

	)

384 
	#RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK
 0x20

	)

385 
	#RFLR_IRQFLAGS_VALIDHEADER_MASK
 0x10

	)

386 
	#RFLR_IRQFLAGS_TXDONE_MASK
 0x08

	)

387 
	#RFLR_IRQFLAGS_CADDONE_MASK
 0x04

	)

388 
	#RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL_MASK
 0x02

	)

389 
	#RFLR_IRQFLAGS_CADDETECTED_MASK
 0x01

	)

394 
	#RFLR_IRQFLAGS_RXTIMEOUT
 0x80

	)

395 
	#RFLR_IRQFLAGS_RXDONE
 0x40

	)

396 
	#RFLR_IRQFLAGS_PAYLOADCRCERROR
 0x20

	)

397 
	#RFLR_IRQFLAGS_VALIDHEADER
 0x10

	)

398 
	#RFLR_IRQFLAGS_TXDONE
 0x08

	)

399 
	#RFLR_IRQFLAGS_CADDONE
 0x04

	)

400 
	#RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 0x02

	)

401 
	#RFLR_IRQFLAGS_CADDETECTED
 0x01

	)

433 
	#RFLR_MODEMSTAT_RX_CR_MASK
 0x1F

	)

434 
	#RFLR_MODEMSTAT_MODEM_STATUS_MASK
 0xE0

	)

454 
	#RFLR_MODEMCONFIG1_BW_MASK
 0x3F

	)

455 
	#RFLR_MODEMCONFIG1_BW_125_KHZ
 0x00

456 
	#RFLR_MODEMCONFIG1_BW_250_KHZ
 0x40

	)

457 
	#RFLR_MODEMCONFIG1_BW_500_KHZ
 0x80

	)

459 
	#RFLR_MODEMCONFIG1_CODINGRATE_MASK
 0xC7

	)

460 
	#RFLR_MODEMCONFIG1_CODINGRATE_4_5
 0x08

	)

461 
	#RFLR_MODEMCONFIG1_CODINGRATE_4_6
 0x10

462 
	#RFLR_MODEMCONFIG1_CODINGRATE_4_7
 0x18

	)

463 
	#RFLR_MODEMCONFIG1_CODINGRATE_4_8
 0x20

	)

465 
	#RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK
 0xFB

	)

466 
	#RFLR_MODEMCONFIG1_IMPLICITHEADER_ON
 0x04

	)

467 
	#RFLR_MODEMCONFIG1_IMPLICITHEADER_OFF
 0x00

468 

	)

469 
	#RFLR_MODEMCONFIG1_RXPAYLOADCRC_MASK
 0xFD

	)

470 
	#RFLR_MODEMCONFIG1_RXPAYLOADCRC_ON
 0x02

	)

471 
	#RFLR_MODEMCONFIG1_RXPAYLOADCRC_OFF
 0x00

472 

	)

473 
	#RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_MASK
 0xFE

	)

474 
	#RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_ON
 0x01

	)

475 
	#RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_OFF
 0x00

476 

	)

480 
	#RFLR_MODEMCONFIG2_SF_MASK
 0x0F

	)

481 
	#RFLR_MODEMCONFIG2_SF_6
 0x60

	)

482 
	#RFLR_MODEMCONFIG2_SF_7
 0x70

483 
	#RFLR_MODEMCONFIG2_SF_8
 0x80

	)

484 
	#RFLR_MODEMCONFIG2_SF_9
 0x90

	)

485 
	#RFLR_MODEMCONFIG2_SF_10
 0xA0

	)

486 
	#RFLR_MODEMCONFIG2_SF_11
 0xB0

	)

487 
	#RFLR_MODEMCONFIG2_SF_12
 0xC0

	)

489 
	#RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_MASK
 0xF7

	)

490 
	#RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_ON
 0x08

	)

491 
	#RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_OFF
 0x00

	)

493 
	#RFLR_MODEMCONFIG2_AGCAUTO_MASK
 0xFB

	)

494 
	#RFLR_MODEMCONFIG2_AGCAUTO_ON
 0x04

495 
	#RFLR_MODEMCONFIG2_AGCAUTO_OFF
 0x00

	)

497 
	#RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK
 0xFC

	)

498 
	#RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB
 0x00

499 

	)

504 
	#RFLR_HOPCHANNEL_PLL_LOCK_TIMEOUT_MASK
 0x7F

	)

505 
	#RFLR_HOPCHANNEL_PLL_LOCK_FAIL
 0x80

	)

506 
	#RFLR_HOPCHANNEL_PLL_LOCK_SUCCEED
 0x00

507 

	)

508 
	#RFLR_HOPCHANNEL_PAYLOAD_CRC16_MASK
 0xBF

	)

509 
	#RFLR_HOPCHANNEL_PAYLOAD_CRC16_ON
 0x40

	)

510 
	#RFLR_HOPCHANNEL_PAYLOAD_CRC16_OFF
 0x00

511 

	)

512 
	#RFLR_HOPCHANNEL_CHANNEL_MASK
 0x3F

	)

518 
	#RFLR_SYMBTIMEOUTLSB_SYMBTIMEOUT
 0x64

519 

	)

523 
	#RFLR_PREAMBLELENGTHMSB
 0x00

524 

	)

528 
	#RFLR_PREAMBLELENGTHLSB
 0x08

529 

	)

533 
	#RFLR_PAYLOADLENGTH
 0x0E

534 

	)

538 
	#RFLR_PAYLOADMAXLENGTH
 0xFF

539 

	)

543 
	#RFLR_HOPPERIOD_FREQFOPPINGPERIOD
 0x00

544 

	)

549 
	#RFLR_DIOMAPPING1_DIO0_MASK
 0x3F

	)

550 
	#RFLR_DIOMAPPING1_DIO0_00
 0x00

551 
	#RFLR_DIOMAPPING1_DIO0_01
 0x40

	)

552 
	#RFLR_DIOMAPPING1_DIO0_10
 0x80

	)

553 
	#RFLR_DIOMAPPING1_DIO0_11
 0xC0

	)

555 
	#RFLR_DIOMAPPING1_DIO1_MASK
 0xCF

	)

556 
	#RFLR_DIOMAPPING1_DIO1_00
 0x00

557 
	#RFLR_DIOMAPPING1_DIO1_01
 0x10

	)

558 
	#RFLR_DIOMAPPING1_DIO1_10
 0x20

	)

559 
	#RFLR_DIOMAPPING1_DIO1_11
 0x30

	)

561 
	#RFLR_DIOMAPPING1_DIO2_MASK
 0xF3

	)

562 
	#RFLR_DIOMAPPING1_DIO2_00
 0x00

563 
	#RFLR_DIOMAPPING1_DIO2_01
 0x04

	)

564 
	#RFLR_DIOMAPPING1_DIO2_10
 0x08

	)

565 
	#RFLR_DIOMAPPING1_DIO2_11
 0x0C

	)

567 
	#RFLR_DIOMAPPING1_DIO3_MASK
 0xFC

	)

568 
	#RFLR_DIOMAPPING1_DIO3_00
 0x00

569 
	#RFLR_DIOMAPPING1_DIO3_01
 0x01

	)

570 
	#RFLR_DIOMAPPING1_DIO3_10
 0x02

	)

571 
	#RFLR_DIOMAPPING1_DIO3_11
 0x03

	)

576 
	#RFLR_DIOMAPPING2_DIO4_MASK
 0x3F

	)

577 
	#RFLR_DIOMAPPING2_DIO4_00
 0x00

578 
	#RFLR_DIOMAPPING2_DIO4_01
 0x40

	)

579 
	#RFLR_DIOMAPPING2_DIO4_10
 0x80

	)

580 
	#RFLR_DIOMAPPING2_DIO4_11
 0xC0

	)

582 
	#RFLR_DIOMAPPING2_DIO5_MASK
 0xCF

	)

583 
	#RFLR_DIOMAPPING2_DIO5_00
 0x00

584 
	#RFLR_DIOMAPPING2_DIO5_01
 0x10

	)

585 
	#RFLR_DIOMAPPING2_DIO5_10
 0x20

	)

586 
	#RFLR_DIOMAPPING2_DIO5_11
 0x30

	)

588 
	#RFLR_DIOMAPPING2_MAP_MASK
 0xFE

	)

589 
	#RFLR_DIOMAPPING2_MAP_PREAMBLEDETECT
 0x01

	)

590 
	#RFLR_DIOMAPPING2_MAP_RSSI
 0x00

591 

	)

619 
	#RFLR_PLLHOP_FASTHOP_MASK
 0x7F

	)

620 
	#RFLR_PLLHOP_FASTHOP_ON
 0x80

	)

621 
	#RFLR_PLLHOP_FASTHOP_OFF
 0x00

622 

	)

626 
	#RFLR_TCXO_TCXOINPUT_MASK
 0xEF

	)

627 
	#RFLR_TCXO_TCXOINPUT_ON
 0x10

	)

628 
	#RFLR_TCXO_TCXOINPUT_OFF
 0x00

629 

	)

633 
	#RFLR_PADAC_20DBM_MASK
 0xF8

	)

634 
	#RFLR_PADAC_20DBM_ON
 0x07

	)

635 
	#RFLR_PADAC_20DBM_OFF
 0x04

636 

	)

640 
	#RFLR_PLL_BANDWIDTH_MASK
 0x3F

	)

641 
	#RFLR_PLL_BANDWIDTH_75
 0x00

	)

642 
	#RFLR_PLL_BANDWIDTH_150
 0x40

	)

643 
	#RFLR_PLL_BANDWIDTH_225
 0x80

	)

644 
	#RFLR_PLL_BANDWIDTH_300
 0xC0

645 

	)

649 
	#RFLR_PLLLOWPN_BANDWIDTH_MASK
 0x3F

	)

650 
	#RFLR_PLLLOWPN_BANDWIDTH_75
 0x00

	)

651 
	#RFLR_PLLLOWPN_BANDWIDTH_150
 0x40

	)

652 
	#RFLR_PLLLOWPN_BANDWIDTH_225
 0x80

	)

653 
	#RFLR_PLLLOWPN_BANDWIDTH_300
 0xC0

654 

	)

659 
	ssSX1272LR


661 
uöt8_t
 
	mRegFifo
;

663 
uöt8_t
 
	mRegOpMode
;

664 
uöt8_t
 
	mRegRes02
;

665 
uöt8_t
 
	mRegRes03
;

666 
uöt8_t
 
	mRegRes04
;

667 
uöt8_t
 
	mRegRes05
;

668 
uöt8_t
 
	mRegFrfMsb
;

669 
uöt8_t
 
	mRegFrfMid
;

670 
uöt8_t
 
	mRegFrfLsb
;

672 
uöt8_t
 
	mRegPaC⁄fig
;

673 
uöt8_t
 
	mRegPaRamp
;

674 
uöt8_t
 
	mRegO˝
;

676 
uöt8_t
 
	mRegL«
;

678 
uöt8_t
 
	mRegFifoAddrPå
;

679 
uöt8_t
 
	mRegFifoTxBa£Addr
;

680 
uöt8_t
 
	mRegFifoRxBa£Addr
;

681 
uöt8_t
 
	mRegFifoRxCuºítAddr
;

682 
uöt8_t
 
	mRegIrqFœgsMask
;

683 
uöt8_t
 
	mRegIrqFœgs
;

684 
uöt8_t
 
	mRegNbRxByãs
;

685 
uöt8_t
 
	mRegRxHódîC¡VÆueMsb
;

686 
uöt8_t
 
	mRegRxHódîC¡VÆueLsb
;

687 
uöt8_t
 
	mRegRxPackëC¡VÆueMsb
;

688 
uöt8_t
 
	mRegRxPackëC¡VÆueLsb
;

689 
uöt8_t
 
	mRegModemSèt
;

690 
uöt8_t
 
	mRegPktSƒVÆue
;

691 
uöt8_t
 
	mRegPktRssiVÆue
;

692 
uöt8_t
 
	mRegRssiVÆue
;

693 
uöt8_t
 
	mRegH›Ch™√l
;

694 
uöt8_t
 
	mRegModemC⁄fig1
;

695 
uöt8_t
 
	mRegModemC⁄fig2
;

696 
uöt8_t
 
	mRegSymbTimeoutLsb
;

697 
uöt8_t
 
	mRegPªambÀMsb
;

698 
uöt8_t
 
	mRegPªambÀLsb
;

699 
uöt8_t
 
	mRegPaylﬂdLígth
;

700 
uöt8_t
 
	mRegMaxPaylﬂdLígth
;

701 
uöt8_t
 
	mRegH›Pîiod
;

702 
uöt8_t
 
	mRegFifoRxByãAddr
;

703 
uöt8_t
 
	mRegTe°Re£rved26
[0x30 - 0x26];

704 
uöt8_t
 
	mRegTe°Re£rved31
;

705 
uöt8_t
 
	mRegTe°Re£rved32
[0x40 - 0x32];

707 
uöt8_t
 
	mRegDioM≠pög1
;

708 
uöt8_t
 
	mRegDioM≠pög2
;

710 
uöt8_t
 
	mRegVîsi⁄
;

712 
uöt8_t
 
	mRegAgcRef
;

713 
uöt8_t
 
	mRegAgcThªsh1
;

714 
uöt8_t
 
	mRegAgcThªsh2
;

715 
uöt8_t
 
	mRegAgcThªsh3
;

717 
uöt8_t
 
	mRegTe°Re£rved47
[0x4B - 0x47];

719 
uöt8_t
 
	mRegPŒH›
;

721 
uöt8_t
 
	mRegTe°Re£rved4C
[0x58-0x4C];

723 
uöt8_t
 
	mRegTcxo
;

725 
uöt8_t
 
	mRegTe°Re£rved59
;

727 
uöt8_t
 
	mRegPaDac
;

729 
uöt8_t
 
	mRegTe°Re£rved5B
;

731 
uöt8_t
 
	mRegPŒ
;

733 
uöt8_t
 
	mRegTe°Re£rved5D
;

735 
uöt8_t
 
	mRegPŒLowPn
;

737 
uöt8_t
 
	mRegTe°Re£rved5F
[0x6C - 0x5F];

739 
uöt8_t
 
	mRegF‹mîTemp
;

741 
uöt8_t
 
	mRegTe°Re£rved6D
[0x71 - 0x6D];

742 }
	ttSX1272LR
;

744 
tSX1272LR
* 
SX1272LR
;

749 
SX1272LoRaInô
( );

754 
SX1272LoRaSëDeÁu…s
( );

761 
SX1272LoRaSëLoRaOn
–
boﬁ
 
íabÀ
 );

768 
SX1272LoRaSëOpMode
–
uöt8_t
 
›Mode
 );

775 
uöt8_t
 
SX1272LoRaGëOpMode
( );

782 
uöt8_t
 
SX1272LoRaRódRxGaö
( );

789 
SX1272LoRaRódRssi
( );

796 
uöt8_t
 
SX1272LoRaGëPackëRxGaö
( );

803 
öt8_t
 
SX1272LoRaGëPackëSƒ
( );

810 
SX1272LoRaGëPackëRssi
( );

815 
SX1272LoRaSèπRx
( );

823 
SX1272LoRaGëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 );

831 
SX1272LoRaSëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 );

840 
uöt8_t
 
SX1272LoRaGëRFSèã
( );

847 
SX1272LoRaSëRFSèã
–
uöt8_t
 
°©e
 );

857 
uöt32_t
 
SX1272LoRaPro˚ss
( );

859 
uöt8_t
 
SX1272LoRaGëRegi°î
(uöt8_à
ªg
 );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-LoRaMisc.c

29 
	~"∂©f‹m.h
"

31 #i‡
deföed
–
USE_SX1272_RADIO
 )

33 
	~"sx1272-HÆ.h
"

34 
	~"sx1272.h
"

36 
	~"sx1272-LoRa.h
"

37 
	~"sx1272-LoRaMisc.h
"

42 
	#XTAL_FREQ
 32000000

	)

43 
	#FREQ_STEP
 61.03515625

	)

45 
tLoRaSëtögs
 
LoRaSëtögs
;

47 
	$SX1272LoRaSëRFFªquícy
–
uöt32_t
 
‰eq
 )

49 
LoRaSëtögs
.
RFFªquícy
 = 
‰eq
;

51 
‰eq
 = ( 
uöt32_t
 )––)‰eq / ( )
FREQ_STEP
 );

52 
SX1272LR
->
RegFrfMsb
 = ( 
uöt8_t
 )––
‰eq
 >> 16 ) & 0xFF );

53 
SX1272LR
->
RegFrfMid
 = ( 
uöt8_t
 )––
‰eq
 >> 8 ) & 0xFF );

54 
SX1272LR
->
RegFrfLsb
 = ( 
uöt8_t
 )–
‰eq
 & 0xFF );

55 
	`SX1272WrôeBuf„r
–
REG_LR_FRFMSB
, &
SX1272LR
->
RegFrfMsb
, 3 );

56 
	}
}

58 
uöt32_t
 
	$SX1272LoRaGëRFFªquícy
( )

61 
	`SX1272RódBuf„r
–
REG_LR_FRFMSB
, &
SX1272LR
->
RegFrfMsb
, 3 );

62 
LoRaSëtögs
.
RFFªquícy
 = ( ( 
uöt32_t
 )
SX1272LR
->
RegFrfMsb
 << 16 ) | ( ( uöt32_à)SX1272LR->
RegFrfMid
 << 8 ) | ( ( uöt32_à)SX1272LR->
RegFrfLsb
 );

63 
LoRaSëtögs
.
RFFªquícy
 = ( 
uöt32_t
 )––)LoRaSëtögs.RFFªquícy * ( )
FREQ_STEP
 );

65  
LoRaSëtögs
.
RFFªquícy
;

66 
	}
}

68 
	$SX1272LoRaSëRFPowî
–
öt8_t
 
powî
 )

70 
	`SX1272Ród
–
REG_LR_PACONFIG
, &
SX1272LR
->
RegPaC⁄fig
 );

71 
	`SX1272Ród
–
REG_LR_PADAC
, &
SX1272LR
->
RegPaDac
 );

73 if––
SX1272LR
->
RegPaC⁄fig
 & 
RFLR_PACONFIG_PASELECT_PABOOST
 ) == RFLR_PACONFIG_PASELECT_PABOOST )

75 if––
SX1272LR
->
RegPaDac
 & 0x07 ) == 0x07 )

77 if–
powî
 < 5 )

79 
powî
 = 5;

81 if–
powî
 > 20 )

83 
powî
 = 20;

85 
SX1272LR
->
RegPaC⁄fig
 = ( SX1272LR->RegPaC⁄fig & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 - 5 ) & 0x0F );

89 if–
powî
 < 2 )

91 
powî
 = 2;

93 if–
powî
 > 17 )

95 
powî
 = 17;

97 
SX1272LR
->
RegPaC⁄fig
 = ( SX1272LR->RegPaC⁄fig & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 - 2 ) & 0x0F );

102 if–
powî
 < -1 )

104 
powî
 = -1;

106 if–
powî
 > 14 )

108 
powî
 = 14;

110 
SX1272LR
->
RegPaC⁄fig
 = ( SX1272LR->RegPaC⁄fig & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 + 1 ) & 0x0F );

112 
	`SX1272Wrôe
–
REG_LR_PACONFIG
, 
SX1272LR
->
RegPaC⁄fig
 );

113 
LoRaSëtögs
.
Powî
 = 
powî
;

114 
	}
}

116 
öt8_t
 
	$SX1272LoRaGëRFPowî
( )

118 
	`SX1272Ród
–
REG_LR_PACONFIG
, &
SX1272LR
->
RegPaC⁄fig
 );

119 
	`SX1272Ród
–
REG_LR_PADAC
, &
SX1272LR
->
RegPaDac
 );

121 if––
SX1272LR
->
RegPaC⁄fig
 & 
RFLR_PACONFIG_PASELECT_PABOOST
 ) == RFLR_PACONFIG_PASELECT_PABOOST )

123 if––
SX1272LR
->
RegPaDac
 & 0x07 ) == 0x07 )

125 
LoRaSëtögs
.
Powî
 = 5 + ( 
SX1272LR
->
RegPaC⁄fig
 & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 );

129 
LoRaSëtögs
.
Powî
 = 2 + ( 
SX1272LR
->
RegPaC⁄fig
 & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 );

134 
LoRaSëtögs
.
Powî
 = -1 + ( 
SX1272LR
->
RegPaC⁄fig
 & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 );

136  
LoRaSëtögs
.
Powî
;

137 
	}
}

139 
	$SX1272LoRaSëSig«lB™dwidth
–
uöt8_t
 
bw
 )

141 
	`SX1272Ród
–
REG_LR_MODEMCONFIG1
, &
SX1272LR
->
RegModemC⁄fig1
 );

142 
SX1272LR
->
RegModemC⁄fig1
 = ( SX1272LR->RegModemC⁄fig1 & 
RFLR_MODEMCONFIG1_BW_MASK
 ) | ( 
bw
 << 6 );

143 
	`SX1272Wrôe
–
REG_LR_MODEMCONFIG1
, 
SX1272LR
->
RegModemC⁄fig1
 );

144 
LoRaSëtögs
.
Sig«lBw
 = 
bw
;

145 
	}
}

147 
uöt8_t
 
	$SX1272LoRaGëSig«lB™dwidth
( )

149 
	`SX1272Ród
–
REG_LR_MODEMCONFIG1
, &
SX1272LR
->
RegModemC⁄fig1
 );

150 
LoRaSëtögs
.
Sig«lBw
 = ( 
SX1272LR
->
RegModemC⁄fig1
 & ~
RFLR_MODEMCONFIG1_BW_MASK
 ) >> 6;

151  
LoRaSëtögs
.
Sig«lBw
;

152 
	}
}

154 
	$SX1272LoRaSëS¥ódögFa˘‹
–
uöt8_t
 
Á˘‹
 )

157 if–
Á˘‹
 > 12 )

159 
Á˘‹
 = 12;

161 if–
Á˘‹
 < 6 )

163 
Á˘‹
 = 6;

166 if–
Á˘‹
 == 6 )

168 
	`SX1272LoRaSëNbTrigPóks
( 5 );

172 
	`SX1272LoRaSëNbTrigPóks
( 3 );

175 
	`SX1272Ród
–
REG_LR_MODEMCONFIG2
, &
SX1272LR
->
RegModemC⁄fig2
 );

176 
SX1272LR
->
RegModemC⁄fig2
 = ( SX1272LR->RegModemC⁄fig2 & 
RFLR_MODEMCONFIG2_SF_MASK
 ) | ( 
Á˘‹
 << 4 );

177 
	`SX1272Wrôe
–
REG_LR_MODEMCONFIG2
, 
SX1272LR
->
RegModemC⁄fig2
 );

178 
LoRaSëtögs
.
S¥ódögFa˘‹
 = 
Á˘‹
;

179 
	}
}

181 
uöt8_t
 
	$SX1272LoRaGëS¥ódögFa˘‹
( )

183 
	`SX1272Ród
–
REG_LR_MODEMCONFIG2
, &
SX1272LR
->
RegModemC⁄fig2
 );

184 
LoRaSëtögs
.
S¥ódögFa˘‹
 = ( 
SX1272LR
->
RegModemC⁄fig2
 & ~
RFLR_MODEMCONFIG2_SF_MASK
 ) >> 4;

185  
LoRaSëtögs
.
S¥ódögFa˘‹
;

186 
	}
}

188 
	$SX1272LoRaSëEº‹Codög
–
uöt8_t
 
vÆue
 )

190 
	`SX1272Ród
–
REG_LR_MODEMCONFIG1
, &
SX1272LR
->
RegModemC⁄fig1
 );

191 
SX1272LR
->
RegModemC⁄fig1
 = ( SX1272LR->RegModemC⁄fig1 & 
RFLR_MODEMCONFIG1_CODINGRATE_MASK
 ) | ( 
vÆue
 << 3 );

192 
	`SX1272Wrôe
–
REG_LR_MODEMCONFIG1
, 
SX1272LR
->
RegModemC⁄fig1
 );

193 
LoRaSëtögs
.
Eº‹Codög
 = 
vÆue
;

194 
	}
}

196 
uöt8_t
 
	$SX1272LoRaGëEº‹Codög
( )

198 
	`SX1272Ród
–
REG_LR_MODEMCONFIG1
, &
SX1272LR
->
RegModemC⁄fig1
 );

199 
LoRaSëtögs
.
Eº‹Codög
 = ( 
SX1272LR
->
RegModemC⁄fig1
 & ~
RFLR_MODEMCONFIG1_CODINGRATE_MASK
 ) >> 3;

200  
LoRaSëtögs
.
Eº‹Codög
;

201 
	}
}

203 
	$SX1272LoRaSëPackëCrcOn
–
boﬁ
 
íabÀ
 )

205 
	`SX1272Ród
–
REG_LR_MODEMCONFIG1
, &
SX1272LR
->
RegModemC⁄fig1
 );

206 
SX1272LR
->
RegModemC⁄fig1
 = ( SX1272LR->RegModemC⁄fig1 & 
RFLR_MODEMCONFIG1_RXPAYLOADCRC_MASK
 ) | ( 
íabÀ
 << 1 );

207 
	`SX1272Wrôe
–
REG_LR_MODEMCONFIG1
, 
SX1272LR
->
RegModemC⁄fig1
 );

208 
LoRaSëtögs
.
CrcOn
 = 
íabÀ
;

209 
	}
}

211 
	$SX1272LoRaSëPªambÀLígth
–
uöt16_t
 
vÆue
 )

213 
	`SX1272RódBuf„r
–
REG_LR_PREAMBLEMSB
, &
SX1272LR
->
RegPªambÀMsb
, 2 );

215 
SX1272LR
->
RegPªambÀMsb
 = ( 
vÆue
 >> 8 ) & 0x00FF;

216 
SX1272LR
->
RegPªambÀLsb
 = 
vÆue
 & 0xFF;

217 
	`SX1272WrôeBuf„r
–
REG_LR_PREAMBLEMSB
, &
SX1272LR
->
RegPªambÀMsb
, 2 );

218 
	}
}

220 
uöt16_t
 
	$SX1272LoRaGëPªambÀLígth
( )

222 
	`SX1272RódBuf„r
–
REG_LR_PREAMBLEMSB
, &
SX1272LR
->
RegPªambÀMsb
, 2 );

223  ( ( 
SX1272LR
->
RegPªambÀMsb
 & 0x00FF ) << 8 ) | SX1272LR->
RegPªambÀLsb
;

224 
	}
}

226 
boﬁ
 
	$SX1272LoRaGëPackëCrcOn
( )

228 
	`SX1272Ród
–
REG_LR_MODEMCONFIG1
, &
SX1272LR
->
RegModemC⁄fig1
 );

229 
LoRaSëtögs
.
CrcOn
 = ( 
SX1272LR
->
RegModemC⁄fig1
 & 
RFLR_MODEMCONFIG1_RXPAYLOADCRC_ON
 ) >> 1;

230  
LoRaSëtögs
.
CrcOn
;

231 
	}
}

233 
	$SX1272LoRaSëIm∂icôHódîOn
–
boﬁ
 
íabÀ
 )

235 
	`SX1272Ród
–
REG_LR_MODEMCONFIG1
, &
SX1272LR
->
RegModemC⁄fig1
 );

236 
SX1272LR
->
RegModemC⁄fig1
 = ( SX1272LR->RegModemC⁄fig1 & 
RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK
 ) | ( 
íabÀ
 << 2 );

237 
	`SX1272Wrôe
–
REG_LR_MODEMCONFIG1
, 
SX1272LR
->
RegModemC⁄fig1
 );

238 
LoRaSëtögs
.
Im∂icôHódîOn
 = 
íabÀ
;

239 
	}
}

241 
boﬁ
 
	$SX1272LoRaGëIm∂icôHódîOn
( )

243 
	`SX1272Ród
–
REG_LR_MODEMCONFIG1
, &
SX1272LR
->
RegModemC⁄fig1
 );

244 
LoRaSëtögs
.
Im∂icôHódîOn
 = ( 
SX1272LR
->
RegModemC⁄fig1
 & 
RFLR_MODEMCONFIG1_IMPLICITHEADER_ON
 ) >> 2;

245  
LoRaSëtögs
.
Im∂icôHódîOn
;

246 
	}
}

248 
	$SX1272LoRaSëRxSögÀOn
–
boﬁ
 
íabÀ
 )

250 
LoRaSëtögs
.
RxSögÀOn
 = 
íabÀ
;

251 
	}
}

253 
boﬁ
 
	$SX1272LoRaGëRxSögÀOn
( )

255  
LoRaSëtögs
.
RxSögÀOn
;

256 
	}
}

258 
	$SX1272LoRaSëFªqH›On
–
boﬁ
 
íabÀ
 )

260 
LoRaSëtögs
.
FªqH›On
 = 
íabÀ
;

261 
	}
}

263 
boﬁ
 
	$SX1272LoRaGëFªqH›On
( )

265  
LoRaSëtögs
.
FªqH›On
;

266 
	}
}

268 
	$SX1272LoRaSëH›Pîiod
–
uöt8_t
 
vÆue
 )

270 
SX1272LR
->
RegH›Pîiod
 = 
vÆue
;

271 
	`SX1272Wrôe
–
REG_LR_HOPPERIOD
, 
SX1272LR
->
RegH›Pîiod
 );

272 
LoRaSëtögs
.
H›Pîiod
 = 
vÆue
;

273 
	}
}

275 
uöt8_t
 
	$SX1272LoRaGëH›Pîiod
( )

277 
	`SX1272Ród
–
REG_LR_HOPPERIOD
, &
SX1272LR
->
RegH›Pîiod
 );

278 
LoRaSëtögs
.
H›Pîiod
 = 
SX1272LR
->
RegH›Pîiod
;

279  
LoRaSëtögs
.
H›Pîiod
;

280 
	}
}

282 
	$SX1272LoRaSëTxPackëTimeout
–
uöt32_t
 
vÆue
 )

284 
LoRaSëtögs
.
TxPackëTimeout
 = 
vÆue
;

285 
	}
}

287 
uöt32_t
 
	$SX1272LoRaGëTxPackëTimeout
( )

289  
LoRaSëtögs
.
TxPackëTimeout
;

290 
	}
}

292 
	$SX1272LoRaSëRxPackëTimeout
–
uöt32_t
 
vÆue
 )

294 
LoRaSëtögs
.
RxPackëTimeout
 = 
vÆue
;

295 
	}
}

297 
uöt32_t
 
	$SX1272LoRaGëRxPackëTimeout
( )

299  
LoRaSëtögs
.
RxPackëTimeout
;

300 
	}
}

302 
	$SX1272LoRaSëPaylﬂdLígth
–
uöt8_t
 
vÆue
 )

304 
SX1272LR
->
RegPaylﬂdLígth
 = 
vÆue
;

305 
	`SX1272Wrôe
–
REG_LR_PAYLOADLENGTH
, 
SX1272LR
->
RegPaylﬂdLígth
 );

306 
LoRaSëtögs
.
PaylﬂdLígth
 = 
vÆue
;

307 
	}
}

309 
uöt8_t
 
	$SX1272LoRaGëPaylﬂdLígth
( )

311 
	`SX1272Ród
–
REG_LR_PAYLOADLENGTH
, &
SX1272LR
->
RegPaylﬂdLígth
 );

312 
LoRaSëtögs
.
PaylﬂdLígth
 = 
SX1272LR
->
RegPaylﬂdLígth
;

313  
LoRaSëtögs
.
PaylﬂdLígth
;

314 
	}
}

316 
	$SX1272LoRaSëPa20dBm
–
boﬁ
 
íÆe
 )

318 
	`SX1272Ród
–
REG_LR_PADAC
, &
SX1272LR
->
RegPaDac
 );

320 if–
íÆe
 =
åue
 )

322 
SX1272LR
->
RegPaDac
 = 0x87;

326 
SX1272LR
->
RegPaDac
 = 0x84;

328 
	`SX1272Wrôe
–
REG_LR_PADAC
, 
SX1272LR
->
RegPaDac
 );

329 
	}
}

331 
boﬁ
 
	$SX1272LoRaGëPa20dBm
( )

333 
	`SX1272Ród
–
REG_LR_PADAC
, &
SX1272LR
->
RegPaDac
 );

335  ( ( 
SX1272LR
->
RegPaDac
 & 0x07 ) =0x07 ) ? 
åue
 : 
Ál£
;

336 
	}
}

338 
	$SX1272LoRaSëPaRamp
–
uöt8_t
 
vÆue
 )

340 
	`SX1272Ród
–
REG_LR_PARAMP
, &
SX1272LR
->
RegPaRamp
 );

341 
SX1272LR
->
RegPaRamp
 = ( SX1272LR->RegPaRam∞& 
RFLR_PARAMP_MASK
 ) | ( 
vÆue
 & ~RFLR_PARAMP_MASK );

342 
	`SX1272Wrôe
–
REG_LR_PARAMP
, 
SX1272LR
->
RegPaRamp
 );

343 
	}
}

345 
uöt8_t
 
	$SX1272LoRaGëPaRamp
( )

347 
	`SX1272Ród
–
REG_LR_PARAMP
, &
SX1272LR
->
RegPaRamp
 );

348  
SX1272LR
->
RegPaRamp
 & ~
RFLR_PARAMP_MASK
;

349 
	}
}

351 
	$SX1272LoRaSëSymbTimeout
–
uöt16_t
 
vÆue
 )

353 
	`SX1272RódBuf„r
–
REG_LR_MODEMCONFIG2
, &
SX1272LR
->
RegModemC⁄fig2
, 2 );

355 
SX1272LR
->
RegModemC⁄fig2
 = ( SX1272LR->RegModemC⁄fig2 & 
RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK
 ) | ( ( 
vÆue
 >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK );

356 
SX1272LR
->
RegSymbTimeoutLsb
 = 
vÆue
 & 0xFF;

357 
	`SX1272WrôeBuf„r
–
REG_LR_MODEMCONFIG2
, &
SX1272LR
->
RegModemC⁄fig2
, 2 );

358 
	}
}

360 
uöt16_t
 
	$SX1272LoRaGëSymbTimeout
( )

362 
	`SX1272RódBuf„r
–
REG_LR_MODEMCONFIG2
, &
SX1272LR
->
RegModemC⁄fig2
, 2 );

363  ( ( 
SX1272LR
->
RegModemC⁄fig2
 & ~
RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK
 ) << 8 ) | SX1272LR->
RegSymbTimeoutLsb
;

364 
	}
}

366 
	$SX1272LoRaSëLowD©¨©eO±imize
–
boﬁ
 
íabÀ
 )

368 
	`SX1272Ród
–
REG_LR_MODEMCONFIG1
, &
SX1272LR
->
RegModemC⁄fig1
 );

369 
SX1272LR
->
RegModemC⁄fig1
 = ( SX1272LR->RegModemC⁄fig1 & 
RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_MASK
 ) | 
íabÀ
;

370 
	`SX1272Wrôe
–
REG_LR_MODEMCONFIG1
, 
SX1272LR
->
RegModemC⁄fig1
 );

371 
	}
}

373 
boﬁ
 
	$SX1272LoRaGëLowD©¨©eO±imize
( )

375 
	`SX1272Ród
–
REG_LR_MODEMCONFIG1
, &
SX1272LR
->
RegModemC⁄fig1
 );

376  ( 
SX1272LR
->
RegModemC⁄fig1
 & 
RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_ON
 );

377 
	}
}

379 
	$SX1272LoRaSëNbTrigPóks
–
uöt8_t
 
vÆue
 )

381 
	`SX1272Ród
–0x31, &
SX1272LR
->
RegTe°Re£rved31
 );

382 
SX1272LR
->
RegTe°Re£rved31
 = ( SX1272LR->RegTe°Re£rved31 & 0xF8 ) | 
vÆue
;

383 
	`SX1272Wrôe
–0x31, 
SX1272LR
->
RegTe°Re£rved31
 );

384 
	}
}

386 
uöt8_t
 
	$SX1272LoRaGëNbTrigPóks
( )

388 
	`SX1272Ród
–0x31, &
SX1272LR
->
RegTe°Re£rved31
 );

389  ( 
SX1272LR
->
RegTe°Re£rved31
 & 0x07 );

390 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-LoRaMisc.h

29 #i‚de‡
__SX1272_LORA_MISC_H__


30 
	#__SX1272_LORA_MISC_H__


	)

38 
SX1272LoRaSëRFFªquícy
–
uöt32_t
 
‰eq
 );

45 
uöt32_t
 
SX1272LoRaGëRFFªquícy
( );

52 
SX1272LoRaSëRFPowî
–
öt8_t
 
powî
 );

59 
öt8_t
 
SX1272LoRaGëRFPowî
( );

68 
SX1272LoRaSëSig«lB™dwidth
–
uöt8_t
 
bw
 );

75 
uöt8_t
 
SX1272LoRaGëSig«lB™dwidth
( );

82 
SX1272LoRaSëS¥ódögFa˘‹
–
uöt8_t
 
Á˘‹
 );

89 
uöt8_t
 
SX1272LoRaGëS¥ódögFa˘‹
( );

96 
SX1272LoRaSëEº‹Codög
–
uöt8_t
 
vÆue
 );

103 
uöt8_t
 
SX1272LoRaGëEº‹Codög
( );

110 
SX1272LoRaSëPackëCrcOn
–
boﬁ
 
íabÀ
 );

117 
boﬁ
 
SX1272LoRaGëPackëCrcOn
( );

124 
SX1272LoRaSëIm∂icôHódîOn
–
boﬁ
 
íabÀ
 );

131 
boﬁ
 
SX1272LoRaGëIm∂icôHódîOn
( );

138 
SX1272LoRaSëRxSögÀOn
–
boﬁ
 
íabÀ
 );

145 
boﬁ
 
SX1272LoRaGëRxSögÀOn
( );

153 
SX1272LoRaSëFªqH›On
–
boﬁ
 
íabÀ
 );

160 
boﬁ
 
SX1272LoRaGëFªqH›On
( );

167 
SX1272LoRaSëH›Pîiod
–
uöt8_t
 
vÆue
 );

174 
uöt8_t
 
SX1272LoRaGëH›Pîiod
( );

181 
SX1272LoRaSëTxPackëTimeout
–
uöt32_t
 
vÆue
 );

188 
uöt32_t
 
SX1272LoRaGëTxPackëTimeout
( );

195 
SX1272LoRaSëRxPackëTimeout
–
uöt32_t
 
vÆue
 );

202 
uöt32_t
 
SX1272LoRaGëRxPackëTimeout
( );

209 
SX1272LoRaSëPaylﬂdLígth
–
uöt8_t
 
vÆue
 );

216 
uöt8_t
 
SX1272LoRaGëPaylﬂdLígth
( );

223 
SX1272LoRaSëPa20dBm
–
boﬁ
 
íÆe
 );

230 
boﬁ
 
SX1272LoRaGëPa20dBm
( );

237 
SX1272LoRaSëPaRamp
–
uöt8_t
 
vÆue
 );

244 
uöt8_t
 
SX1272LoRaGëPaRamp
( );

251 
SX1272LoRaSëSymbTimeout
–
uöt16_t
 
vÆue
 );

258 
uöt16_t
 
SX1272LoRaGëSymbTimeout
( );

265 
SX1272LoRaSëLowD©¨©eO±imize
–
boﬁ
 
íabÀ
 );

272 
boﬁ
 
SX1272LoRaGëLowD©¨©eO±imize
( );

279 
uöt16_t
 
SX1272LoRaGëPªambÀLígth
( );

286 
SX1272LoRaSëPªambÀLígth
–
uöt16_t
 
vÆue
 );

293 
SX1272LoRaSëNbTrigPóks
–
uöt8_t
 
vÆue
 );

300 
uöt8_t
 
SX1272LoRaGëNbTrigPóks
( );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272.c

21 
	~"∂©f‹m.h
"

22 
	~"ødio.h
"

24 #i‡
deföed
–
USE_SX1272_RADIO
 )

26 
	~"sx1272.h
"

28 
	~"sx1272-HÆ.h
"

29 
	~"sx1272-Fsk.h
"

30 
	~"sx1272-LoRa.h
"

35 
uöt8_t
 
	gSX1272Regs
[0x70];

38 
boﬁ
 
	gLoRaOn
 = 
Ál£
;

39 
boﬁ
 
	gLoRaOnSèã
 = 
Ál£
;

41 
	$SX1272Inô
( )

44 
SX1272
 = ( 
tSX1272
* )
SX1272Regs
;

45 
SX1272LR
 = ( 
tSX1272LR
* )
SX1272Regs
;

47 
	`SX1272InôIo
( );

49 
	`SX1272Re£t
( );

53 #i‡–
LORA
 == 0 )

55 
LoRaOn
 = 
Ál£
;

56 
	`SX1272SëLoRaOn
–
LoRaOn
 );

58 
	`SX1272FskInô
( );

62 
LoRaOn
 = 
åue
;

63 
	`SX1272SëLoRaOn
–
LoRaOn
 );

65 
	`SX1272LoRaInô
( );

69 
	}
}

71 
	$SX1272Re£t
( )

73 
uöt32_t
 
°¨tTick
;

75 
	`SX1272SëRe£t
–
RADIO_RESET_ON
 );

78 
°¨tTick
 = 
	`GET_TICK_COUNT
( );

79  ( 
	`GET_TICK_COUNT
–Ë- 
°¨tTick
 ) < 
	`TICK_RATE_MS
( 1 ) );

81 
	`SX1272SëRe£t
–
RADIO_RESET_OFF
 );

84 
°¨tTick
 = 
	`GET_TICK_COUNT
( );

85  ( 
	`GET_TICK_COUNT
–Ë- 
°¨tTick
 ) < 
	`TICK_RATE_MS
( 6 ) );

86 
	}
}

88 
	$SX1272SëLoRaOn
–
boﬁ
 
íabÀ
 )

90 if–
LoRaOnSèã
 =
íabÀ
 )

94 
LoRaOnSèã
 = 
íabÀ
;

95 
LoRaOn
 = 
íabÀ
;

97 if–
LoRaOn
 =
åue
 )

99 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_SLEEP
 );

101 
SX1272LR
->
RegOpMode
 = ( SX1272LR->RegOpModê& 
RFLR_OPMODE_LONGRANGEMODE_MASK
 ) | 
RFLR_OPMODE_LONGRANGEMODE_ON
;

102 
	`SX1272Wrôe
–
REG_LR_OPMODE
, 
SX1272LR
->
RegOpMode
 );

104 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

106 
SX1272LR
->
RegDioM≠pög1
 = 
RFLR_DIOMAPPING1_DIO0_00
 | 
RFLR_DIOMAPPING1_DIO1_00
 | 
RFLR_DIOMAPPING1_DIO2_00
 | 
RFLR_DIOMAPPING1_DIO3_00
;

108 
SX1272LR
->
RegDioM≠pög2
 = 
RFLR_DIOMAPPING2_DIO4_00
 | 
RFLR_DIOMAPPING2_DIO5_00
;

109 
	`SX1272WrôeBuf„r
–
REG_LR_DIOMAPPING1
, &
SX1272LR
->
RegDioM≠pög1
, 2 );

111 
	`SX1272RódBuf„r
–
REG_LR_OPMODE
, 
SX1272Regs
 + 1, 0x70 - 1 );

115 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_SLEEP
 );

117 
SX1272LR
->
RegOpMode
 = ( SX1272LR->RegOpModê& 
RFLR_OPMODE_LONGRANGEMODE_MASK
 ) | 
RFLR_OPMODE_LONGRANGEMODE_OFF
;

118 
	`SX1272Wrôe
–
REG_LR_OPMODE
, 
SX1272LR
->
RegOpMode
 );

120 
	`SX1272LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

122 
	`SX1272RódBuf„r
–
REG_OPMODE
, 
SX1272Regs
 + 1, 0x70 - 1 );

124 
	}
}

126 
boﬁ
 
	$SX1272GëLoRaOn
( )

128  
LoRaOn
;

129 
	}
}

131 
	$SX1272SëOpMode
–
uöt8_t
 
›Mode
 )

133 if–
LoRaOn
 =
Ál£
 )

135 
	`SX1272FskSëOpMode
–
›Mode
 );

139 
	`SX1272LoRaSëOpMode
–
›Mode
 );

141 
	}
}

143 
uöt8_t
 
	$SX1272GëOpMode
( )

145 if–
LoRaOn
 =
Ál£
 )

147  
	`SX1272FskGëOpMode
( );

151  
	`SX1272LoRaGëOpMode
( );

153 
	}
}

155 
	$SX1272RódRssi
( )

157 if–
LoRaOn
 =
Ál£
 )

159  
	`SX1272FskRódRssi
( );

163  
	`SX1272LoRaRódRssi
( );

165 
	}
}

167 
uöt8_t
 
	$SX1272RódRxGaö
( )

169 if–
LoRaOn
 =
Ál£
 )

171  
	`SX1272FskRódRxGaö
( );

175  
	`SX1272LoRaRódRxGaö
( );

177 
	}
}

179 
uöt8_t
 
	$SX1272GëPackëRxGaö
( )

181 if–
LoRaOn
 =
Ál£
 )

183  
	`SX1272FskGëPackëRxGaö
( );

187  
	`SX1272LoRaGëPackëRxGaö
( );

189 
	}
}

191 
öt8_t
 
	$SX1272GëPackëSƒ
( )

193 if–
LoRaOn
 =
Ál£
 )

203  
	`SX1272LoRaGëPackëSƒ
( );

205 
	}
}

207 
	$SX1272GëPackëRssi
( )

209 if–
LoRaOn
 =
Ál£
 )

211  
	`SX1272FskGëPackëRssi
( );

215  
	`SX1272LoRaGëPackëRssi
( );

217 
	}
}

219 
uöt32_t
 
	$SX1272GëPackëAfc
( )

221 if–
LoRaOn
 =
Ál£
 )

223  
	`SX1272FskGëPackëAfc
( );

233 
	}
}

235 
	$SX1272SèπRx
( )

237 if–
LoRaOn
 =
Ál£
 )

239 
	`SX1272FskSëRFSèã
–
RF_STATE_RX_INIT
 );

243 
	`SX1272LoRaSëRFSèã
–
RFLR_STATE_RX_INIT
 );

245 
	}
}

247 
	$SX1272GëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 )

249 if–
LoRaOn
 =
Ál£
 )

251 
	`SX1272FskGëRxPackë
–
buf„r
, 
size
 );

255 
	`SX1272LoRaGëRxPackë
–
buf„r
, 
size
 );

257 
	}
}

259 
	$SX1272SëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 )

261 if–
LoRaOn
 =
Ál£
 )

263 
	`SX1272FskSëTxPackë
–
buf„r
, 
size
 );

267 
	`SX1272LoRaSëTxPackë
–
buf„r
, 
size
 );

269 
	}
}

271 
uöt8_t
 
	$SX1272GëRFSèã
( )

273 if–
LoRaOn
 =
Ál£
 )

275  
	`SX1272FskGëRFSèã
( );

279  
	`SX1272LoRaGëRFSèã
( );

281 
	}
}

283 
	$SX1272SëRFSèã
–
uöt8_t
 
°©e
 )

285 if–
LoRaOn
 =
Ál£
 )

287 
	`SX1272FskSëRFSèã
–
°©e
 );

291 
	`SX1272LoRaSëRFSèã
–
°©e
 );

293 
	}
}

295 
uöt32_t
 
	$SX1272Pro˚ss
( )

297 if–
LoRaOn
 =
Ál£
 )

299  
	`SX1272FskPro˚ss
( );

303  
	`SX1272LoRaPro˚ss
( );

305 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272.h

21 #i‚de‡
__SX1272_H__


22 
	#__SX1272_H__


	)

27 
uöt8_t
 
SX1272Regs
[0x70];

34 
SX1272SëLoRaOn
–
boﬁ
 
íabÀ
 );

41 
boﬁ
 
SX1272GëLoRaOn
( );

46 
SX1272Inô
( );

51 
SX1272Re£t
( );

58 
SX1272SëOpMode
–
uöt8_t
 
›Mode
 );

65 
uöt8_t
 
SX1272GëOpMode
( );

73 
uöt8_t
 
SX1272RódRxGaö
( );

80 
SX1272RódRssi
( );

87 
uöt8_t
 
SX1272GëPackëRxGaö
( );

94 
öt8_t
 
SX1272GëPackëSƒ
( );

101 
SX1272GëPackëRssi
( );

108 
uöt32_t
 
SX1272GëPackëAfc
( );

113 
SX1272SèπRx
( );

121 
SX1272GëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 );

130 
SX1272SëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 );

139 
uöt8_t
 
SX1272GëRFSèã
( );

146 
SX1272SëRFSèã
–
uöt8_t
 
°©e
 );

156 
uöt32_t
 
SX1272Pro˚ss
( );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-Fsk.c

21 
	~<°rög.h
>

22 
	~<m©h.h
>

24 
	~"∂©f‹m.h
"

26 #i‡
deföed
–
USE_SX1276_RADIO
 )

28 
	~"ødio.h
"

30 
	~"sx1276-HÆ.h
"

31 
	~"sx1276.h
"

33 
	~"sx1276-FskMisc.h
"

34 
	~"sx1276-Fsk.h
"

37 
tFskSëtögs
 
	gFskSëtögs
 =

45 
åue
,

46 
åue
,

53 
tSX1276
* 
	gSX1276
;

58 
uöt8_t
 
	gRFBuf„r
[
RF_BUFFER_SIZE
];

63 
uöt8_t
 
	gD©aChunkSize
 = 32;

69 
uöt8_t
 
	gRFSèã
 = 
RF_STATE_IDLE
;

85 
uöt32_t
 
	gPackëTimeout
;

92 
uöt32_t
 
	gPªambÀ2SyncTimeout
;

94 
boﬁ
 
	gPªambÀDëe˘ed
 = 
Ál£
;

95 
boﬁ
 
	gSyncW‹dDëe˘ed
 = 
Ál£
;

96 
boﬁ
 
	gPackëDëe˘ed
 = 
Ál£
;

97 
uöt16_t
 
	gRxPackëSize
 = 0;

98 
uöt8_t
 
	gRxByãsRód
 = 0;

99 
uöt8_t
 
	gTxByãsSít
 = 0;

100 
	gRxPackëRssiVÆue
;

101 
uöt32_t
 
	gRxPackëAfcVÆue
;

102 
uöt8_t
 
	gRxGaö
 = 1;

103 
uöt32_t
 
	gRxTimeoutTimî
 = 0;

104 
uöt32_t
 
	gPªambÀ2SyncTimî
 = 0;

109 
uöt16_t
 
	gTxPackëSize
 = 0;

110 
uöt32_t
 
	gTxTimeoutTimî
 = 0;

112 
	$SX1276FskInô
( )

114 
RFSèã
 = 
RF_STATE_IDLE
;

116 
	`SX1276FskSëDeÁu…s
( );

118 
	`SX1276RódBuf„r
–
REG_OPMODE
, 
SX1276Regs
 + 1, 0x70 - 1 );

121 
SX1276
->
RegOpMode
 = 
RF_OPMODE_MODULATIONTYPE_FSK
 | 
RF_OPMODE_SLEEP
;

122 
	`SX1276Wrôe
–
REG_OPMODE
, 
SX1276
->
RegOpMode
 );

124 
SX1276
->
RegOpMode
 = 
RF_OPMODE_MODULATIONTYPE_FSK
 | 
RF_OPMODE_SLEEP
;

125 
	`SX1276Wrôe
–
REG_OPMODE
, 
SX1276
->
RegOpMode
 );

127 
SX1276
->
RegPaRamp
 = 
RF_PARAMP_MODULATIONSHAPING_01
;

128 
	`SX1276Wrôe
–
REG_PARAMP
, 
SX1276
->
RegPaRamp
 );

130 
SX1276
->
RegL«
 = 
RF_LNA_GAIN_G1
;

131 
	`SX1276Wrôe
–
REG_LNA
, 
SX1276
->
RegL«
 );

133 if–
FskSëtögs
.
AfcOn
 =
åue
 )

135 
SX1276
->
RegRxC⁄fig
 = 
RF_RXCONFIG_RESTARTRXONCOLLISION_OFF
 | 
RF_RXCONFIG_AFCAUTO_ON
 |

136 
RF_RXCONFIG_AGCAUTO_ON
 | 
RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT
;

140 
SX1276
->
RegRxC⁄fig
 = 
RF_RXCONFIG_RESTARTRXONCOLLISION_OFF
 | 
RF_RXCONFIG_AFCAUTO_OFF
 |

141 
RF_RXCONFIG_AGCAUTO_ON
 | 
RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT
;

144 
SX1276
->
RegPªambÀLsb
 = 8;

146 
SX1276
->
RegPªambÀDëe˘
 = 
RF_PREAMBLEDETECT_DETECTOR_ON
 | 
RF_PREAMBLEDETECT_DETECTORSIZE_2
 |

147 
RF_PREAMBLEDETECT_DETECTORTOL_10
;

149 
SX1276
->
RegRssiThªsh
 = 0xFF;

151 
SX1276
->
RegSyncC⁄fig
 = 
RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_ON
 | 
RF_SYNCCONFIG_PREAMBLEPOLARITY_AA
 |

152 
RF_SYNCCONFIG_SYNC_ON
 |

153 
RF_SYNCCONFIG_SYNCSIZE_4
;

155 
SX1276
->
RegSyncVÆue1
 = 0x69;

156 
SX1276
->
RegSyncVÆue2
 = 0x81;

157 
SX1276
->
RegSyncVÆue3
 = 0x7E;

158 
SX1276
->
RegSyncVÆue4
 = 0x96;

160 
SX1276
->
RegPackëC⁄fig1
 = 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 | 
RF_PACKETCONFIG1_DCFREE_OFF
 |

161 –
FskSëtögs
.
CrcOn
 << 4 ) | 
RF_PACKETCONFIG1_CRCAUTOCLEAR_ON
 |

162 
RF_PACKETCONFIG1_ADDRSFILTERING_OFF
 | 
RF_PACKETCONFIG1_CRCWHITENINGTYPE_CCITT
;

163 
	`SX1276FskGëPackëCrcOn
( );

165 
SX1276
->
RegPaylﬂdLígth
 = 
FskSëtögs
.
PaylﬂdLígth
;

168 
	`SX1276WrôeBuf„r
–
REG_OPMODE
, 
SX1276Regs
 + 1, 0x70 - 1 );

171 
	`SX1276FskSëRFFªquícy
–
FskSëtögs
.
RFFªquícy
 );

172 
	`SX1276FskSëBôøã
–
FskSëtögs
.
Bôøã
 );

173 
	`SX1276FskSëFdev
–
FskSëtögs
.
Fdev
 );

174 
	`SX1276FskSëPa20dBm
–
Ál£
 );

175 
	`SX1276FskSëRFPowî
–
FskSëtögs
.
Powî
 );

176 
	`SX1276FskSëDccBw
–&
SX1276
->
RegRxBw
, 0, 
FskSëtögs
.
RxBw
 );

177 
	`SX1276FskSëDccBw
–&
SX1276
->
RegAfcBw
, 0, 
FskSëtögs
.
RxBwAfc
 );

178 
	`SX1276FskSëRssiOff£t
( 0 );

180 
	`SX1276FskSëOpMode
–
RF_OPMODE_STANDBY
 );

183 
	`SX1276FskRxCÆibøã
( );

184 
	}
}

186 
	$SX1276FskSëDeÁu…s
( )

190 
	`SX1276Ród
–
REG_VERSION
, &
SX1276
->
RegVîsi⁄
 );

191 
	}
}

193 
	$SX1276FskSëOpMode
–
uöt8_t
 
›Mode
 )

195 
uöt8_t
 
›ModePªv
 = 
RF_OPMODE_STANDBY
;

196 
boﬁ
 
™ã¬aSwôchTxOnPªv
 = 
åue
;

197 
boﬁ
 
™ã¬aSwôchTxOn
 = 
Ál£
;

199 
›ModePªv
 = 
SX1276
->
RegOpMode
 & ~
RF_OPMODE_MASK
;

201 if–
›Mode
 !
›ModePªv
 )

203 if–
›Mode
 =
RF_OPMODE_TRANSMITTER
 )

205 
™ã¬aSwôchTxOn
 = 
åue
;

209 
™ã¬aSwôchTxOn
 = 
Ál£
;

211 if–
™ã¬aSwôchTxOn
 !
™ã¬aSwôchTxOnPªv
 )

213 
™ã¬aSwôchTxOnPªv
 = 
™ã¬aSwôchTxOn
;

214 
	`RXTX
–
™ã¬aSwôchTxOn
 );

216 
SX1276
->
RegOpMode
 = ( SX1276->RegOpModê& 
RF_OPMODE_MASK
 ) | 
›Mode
;

218 
	`SX1276Wrôe
–
REG_OPMODE
, 
SX1276
->
RegOpMode
 );

220 
	}
}

222 
uöt8_t
 
	$SX1276FskGëOpMode
( )

224 
	`SX1276Ród
–
REG_OPMODE
, &
SX1276
->
RegOpMode
 );

226  
SX1276
->
RegOpMode
 & ~
RF_OPMODE_MASK
;

227 
	}
}

229 
öt32_t
 
	$SX1276FskRódFei
( )

231 
	`SX1276RódBuf„r
–
REG_FEIMSB
, &
SX1276
->
RegFeiMsb
, 2 );

233  ( 
öt32_t
 )–)–––
uöt16_t
 )
SX1276
->
RegFeiMsb
 << 8 ) | ( uöt16_à)SX1276->
RegFeiLsb
 ) * ( )
FREQ_STEP
;

234 
	}
}

236 
öt32_t
 
	$SX1276FskRódAfc
( )

238 
	`SX1276RódBuf„r
–
REG_AFCMSB
, &
SX1276
->
RegAfcMsb
, 2 );

239  ( 
öt32_t
 )–)–––
uöt16_t
 )
SX1276
->
RegAfcMsb
 << 8 ) | ( uöt16_à)SX1276->
RegAfcLsb
 ) * ( )
FREQ_STEP
;

240 
	}
}

242 
uöt8_t
 
	$SX1276FskRódRxGaö
( )

244 
	`SX1276Ród
–
REG_LNA
, &
SX1276
->
RegL«
 );

245 –
SX1276
->
RegL«
 >> 5 ) & 0x07;

246 
	}
}

248 
	$SX1276FskRódRssi
( )

250 
	`SX1276Ród
–
REG_RSSIVALUE
, &
SX1276
->
RegRssiVÆue
 );

252  -–)––)
SX1276
->
RegRssiVÆue
 / 2.0 );

253 
	}
}

255 
uöt8_t
 
	$SX1276FskGëPackëRxGaö
( )

257  
RxGaö
;

258 
	}
}

260 
	$SX1276FskGëPackëRssi
( )

262  
RxPackëRssiVÆue
;

263 
	}
}

265 
uöt32_t
 
	$SX1276FskGëPackëAfc
( )

267  
RxPackëAfcVÆue
;

268 
	}
}

270 
	$SX1276FskSèπRx
( )

272 
	`SX1276FskSëRFSèã
–
RF_STATE_RX_INIT
 );

273 
	}
}

275 
	$SX1276FskGëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 )

277 *
size
 = 
RxPackëSize
;

278 
RxPackëSize
 = 0;

279 
	`mem˝y
––* )
buf„r
, ( * )
RFBuf„r
, ( 
size_t
 )*
size
 );

280 
	}
}

282 
	$SX1276FskSëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 )

284 
TxPackëSize
 = 
size
;

285 
	`mem˝y
––* )
RFBuf„r
, 
buf„r
, ( 
size_t
 )
TxPackëSize
 );

287 
RFSèã
 = 
RF_STATE_TX_INIT
;

288 
	}
}

291 
uöt16_t
 
	$SX1276FskGëPackëPaylﬂdSize
( )

293 
uöt16_t
 
syncSize
;

294 
uöt16_t
 
v¨übÀSize
;

295 
uöt16_t
 
addªssSize
;

296 
uöt16_t
 
∑ylﬂdSize
;

297 
uöt16_t
 
¸cSize
;

299 
syncSize
 = ( 
SX1276
->
RegSyncC⁄fig
 & 0x07 ) + 1;

300 
v¨übÀSize
 = ( ( 
SX1276
->
RegPackëC⁄fig1
 & 0x80 ) == 0x80 ) ? 1 : 0;

301 
addªssSize
 = ( ( 
SX1276
->
RegPackëC⁄fig1
 & 0x06 ) != 0x00 ) ? 1 : 0;

302 
∑ylﬂdSize
 = 
SX1276
->
RegPaylﬂdLígth
;

303 
¸cSize
 = ( ( 
SX1276
->
RegPackëC⁄fig1
 & 0x10 ) == 0x10 ) ? 2 : 0;

305  
syncSize
 + 
v¨übÀSize
 + 
addªssSize
 + 
∑ylﬂdSize
 + 
¸cSize
;

306 
	}
}

309 
uöt16_t
 
	$SX1276FskGëPackëHódîSize
( )

311 
uöt16_t
 
¥ómbÀSize
;

312 
uöt16_t
 
syncSize
;

314 
¥ómbÀSize
 = ( ( 
uöt16_t
 )
SX1276
->
RegPªambÀMsb
 << 8 ) | ( uöt16_à)SX1276->
RegPªambÀLsb
;

315 
syncSize
 = ( 
SX1276
->
RegSyncC⁄fig
 & 0x07 ) + 1;

317  
¥ómbÀSize
 + 
syncSize
;

318 
	}
}

320 
uöt8_t
 
	$SX1276FskGëRFSèã
( )

322  
RFSèã
;

323 
	}
}

325 
	$SX1276FskSëRFSèã
–
uöt8_t
 
°©e
 )

327 
RFSèã
 = 
°©e
;

328 
	}
}

330 
uöt32_t
 
	$SX1276FskPro˚ss
( )

332 
uöt32_t
 
ªsu…
 = 
RF_BUSY
;

334  
RFSèã
 )

336 
RF_STATE_IDLE
:

339 
RF_STATE_RX_INIT
:

341 if––
SX1276
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_CRC_ON
 ) == RF_PACKETCONFIG1_CRC_ON )

344 
SX1276
->
RegDioM≠pög1
 = 
RF_DIOMAPPING1_DIO0_01
 | 
RF_DIOMAPPING1_DIO1_00
 | 
RF_DIOMAPPING1_DIO2_11
 | 
RF_DIOMAPPING1_DIO3_00
;

349 
SX1276
->
RegDioM≠pög1
 = 
RF_DIOMAPPING1_DIO0_00
 | 
RF_DIOMAPPING1_DIO1_00
 | 
RF_DIOMAPPING1_DIO2_11
 | 
RF_DIOMAPPING1_DIO3_00
;

352 
SX1276
->
RegDioM≠pög2
 = 
RF_DIOMAPPING2_DIO4_11
 | 
RF_DIOMAPPING2_DIO5_10
 | 
RF_DIOMAPPING2_MAP_PREAMBLEDETECT
;

353 
	`SX1276WrôeBuf„r
–
REG_DIOMAPPING1
, &
SX1276
->
RegDioM≠pög1
, 2 );

355 
	`SX1276FskSëOpMode
–
RF_OPMODE_RECEIVER
 );

357 
	`mem£t
–
RFBuf„r
, 0, ( 
size_t
 )
RF_BUFFER_SIZE
 );

359 
PackëTimeout
 = ( 
uöt16_t
 )–
	`round
––8.0 * ( ( )
	`SX1276FskGëPackëPaylﬂdSize
–ËË/ ( )
FskSëtögs
.
Bôøã
 ) * 1000.0 ) + 1.0 );

360 
PackëTimeout
 = PacketTimeout + ( PacketTimeout >> 1 );

362 
PªambÀ2SyncTimeout
 = 
PackëTimeout
;

364 
PªambÀ2SyncTimî
 = 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

366 
SX1276
->
RegFifoThªsh
 = 
RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY
 | 0x20;

367 
	`SX1276Wrôe
–
REG_FIFOTHRESH
, 
SX1276
->
RegFifoThªsh
 );

369 
PªambÀDëe˘ed
 = 
Ál£
;

370 
SyncW‹dDëe˘ed
 = 
Ál£
;

371 
PackëDëe˘ed
 = 
Ál£
;

372 
RxByãsRód
 = 0;

373 
RxPackëSize
 = 0;

374 
RFSèã
 = 
RF_STATE_RX_SYNC
;

376 
RF_STATE_RX_SYNC
:

377 if––
DIO4
 =1 ) && ( 
PªambÀDëe˘ed
 =
Ál£
 ) )

379 
PªambÀDëe˘ed
 = 
åue
;

380 
PªambÀ2SyncTimî
 = 
	`GET_TICK_COUNT
( );

382 if––
DIO2
 =1 ) && ( 
PªambÀDëe˘ed
 =
åue
 ) && ( 
SyncW‹dDëe˘ed
 =
Ál£
 ) )

384 
SyncW‹dDëe˘ed
 = 
åue
;

386 
RxPackëRssiVÆue
 = 
	`SX1276FskRódRssi
( );

388 
RxPackëAfcVÆue
 = 
	`SX1276FskRódAfc
( );

389 
RxGaö
 = 
	`SX1276FskRódRxGaö
( );

391 
PªambÀ2SyncTimî
 = 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

393 
RFSèã
 = 
RF_STATE_RX_RUNNING
;

397 if––
SyncW‹dDëe˘ed
 =
Ál£
 ) && ( 
PªambÀDëe˘ed
 =
åue
 ) && ( ( 
	`GET_TICK_COUNT
–Ë- 
PªambÀ2SyncTimî
 ) > 
PªambÀ2SyncTimeout
 ) )

399 
RFSèã
 = 
RF_STATE_RX_INIT
;

400 
	`SX1276Wrôe
–
REG_RXCONFIG
, 
SX1276
->
RegRxC⁄fig
 | 
RF_RXCONFIG_RESTARTRXWITHPLLLOCK
 );

402 if––
SyncW‹dDëe˘ed
 =
Ál£
 ) &&

403 –
PªambÀDëe˘ed
 =
Ál£
 ) &&

404 –
PackëDëe˘ed
 =
Ál£
 ) &&

405 ––
	`GET_TICK_COUNT
–Ë- 
RxTimeoutTimî
 ) > 
PackëTimeout
 ) )

407 
RFSèã
 = 
RF_STATE_RX_TIMEOUT
;

410 
RF_STATE_RX_RUNNING
:

411 if–
RxPackëSize
 > 
RF_BUFFER_SIZE_MAX
 )

413 
RFSèã
 = 
RF_STATE_RX_LEN_ERROR
;

417 if–
DIO1
 == 1 )

419 if––
RxPackëSize
 =0 ) && ( 
RxByãsRód
 == 0 ) )

421 if––
SX1276
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 ) == RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE )

423 
	`SX1276RódFifo
––
uöt8_t
* )&
RxPackëSize
, 1 );

427 
RxPackëSize
 = 
SX1276
->
RegPaylﬂdLígth
;

431 if––
RxPackëSize
 - 
RxByãsRód
 ) > ( 
SX1276
->
RegFifoThªsh
 & 0x3F ) )

433 
	`SX1276RódFifo
––
RFBuf„r
 + 
RxByãsRód
 ), ( 
SX1276
->
RegFifoThªsh
 & 0x3F ) );

434 
RxByãsRód
 +–
SX1276
->
RegFifoThªsh
 & 0x3F );

438 
	`SX1276RódFifo
––
RFBuf„r
 + 
RxByãsRód
 ), 
RxPackëSize
 - RxBytesRead );

439 
RxByãsRód
 +–
RxPackëSize
 - RxBytesRead );

443 if–
DIO0
 == 1 )

445 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

446 if––
RxPackëSize
 =0 ) && ( 
RxByãsRód
 == 0 ) )

448 if––
SX1276
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 ) == RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE )

450 
	`SX1276RódFifo
––
uöt8_t
* )&
RxPackëSize
, 1 );

454 
RxPackëSize
 = 
SX1276
->
RegPaylﬂdLígth
;

456 
	`SX1276RódFifo
–
RFBuf„r
 + 
RxByãsRód
, 
RxPackëSize
 - RxBytesRead );

457 
RxByãsRód
 +–
RxPackëSize
 - RxBytesRead );

458 
PackëDëe˘ed
 = 
åue
;

459 
RFSèã
 = 
RF_STATE_RX_DONE
;

463 
	`SX1276RódFifo
–
RFBuf„r
 + 
RxByãsRód
, 
RxPackëSize
 - RxBytesRead );

464 
RxByãsRód
 +–
RxPackëSize
 - RxBytesRead );

465 
PackëDëe˘ed
 = 
åue
;

466 
RFSèã
 = 
RF_STATE_RX_DONE
;

471 if––
PackëDëe˘ed
 =
Ál£
 ) && ( ( 
	`GET_TICK_COUNT
–Ë- 
RxTimeoutTimî
 ) > 
PackëTimeout
 ) )

473 
RFSèã
 = 
RF_STATE_RX_TIMEOUT
;

476 
RF_STATE_RX_DONE
:

477 
RxByãsRód
 = 0;

478 
RFSèã
 = 
RF_STATE_RX_INIT
;

479 
ªsu…
 = 
RF_RX_DONE
;

481 
RF_STATE_RX_TIMEOUT
:

482 
RxByãsRód
 = 0;

483 
RxPackëSize
 = 0;

484 
	`SX1276Wrôe
–
REG_RXCONFIG
, 
SX1276
->
RegRxC⁄fig
 | 
RF_RXCONFIG_RESTARTRXWITHPLLLOCK
 );

485 
RFSèã
 = 
RF_STATE_RX_INIT
;

486 
ªsu…
 = 
RF_RX_TIMEOUT
;

488 
RF_STATE_RX_LEN_ERROR
:

489 
RxByãsRód
 = 0;

490 
RxPackëSize
 = 0;

491 
	`SX1276Wrôe
–
REG_RXCONFIG
, 
SX1276
->
RegRxC⁄fig
 | 
RF_RXCONFIG_RESTARTRXWITHPLLLOCK
 );

492 
RFSèã
 = 
RF_STATE_RX_INIT
;

493 
ªsu…
 = 
RF_LEN_ERROR
;

496 
RF_STATE_TX_INIT
:

499 
SX1276
->
RegDioM≠pög1
 = 
RF_DIOMAPPING1_DIO0_00
 | 
RF_DIOMAPPING1_DIO1_00
 | 
RF_DIOMAPPING1_DIO2_00
 | 
RF_DIOMAPPING1_DIO3_01
;

501 
SX1276
->
RegDioM≠pög2
 = 
RF_DIOMAPPING2_DIO4_00
 | 
RF_DIOMAPPING2_DIO5_10
;

502 
	`SX1276WrôeBuf„r
–
REG_DIOMAPPING1
, &
SX1276
->
RegDioM≠pög1
, 2 );

504 
SX1276
->
RegFifoThªsh
 = 
RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY
 | 0x18;

505 
	`SX1276Wrôe
–
REG_FIFOTHRESH
, 
SX1276
->
RegFifoThªsh
 );

507 
	`SX1276FskSëOpMode
–
RF_OPMODE_TRANSMITTER
 );

508 
RFSèã
 = 
RF_STATE_TX_READY_WAIT
;

509 
TxByãsSít
 = 0;

511 
RF_STATE_TX_READY_WAIT
:

512 if–
DIO3
 == 1 )

514 if––
SX1276
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 ) == RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE )

516 
	`SX1276WrôeFifo
––
uöt8_t
* )&
TxPackëSize
, 1 );

519 if––
TxPackëSize
 > 0 ) && ( TxPacketSize <= 64 ) )

521 
D©aChunkSize
 = 
TxPackëSize
;

525 
D©aChunkSize
 = 32;

528 
	`SX1276WrôeFifo
–
RFBuf„r
, 
D©aChunkSize
 );

529 
TxByãsSít
 +
D©aChunkSize
;

530 
TxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

531 
RFSèã
 = 
RF_STATE_TX_RUNNING
;

535 
RF_STATE_TX_RUNNING
:

536 if–
DIO1
 == 0 )

538 if––
TxPackëSize
 - 
TxByãsSít
 ) > 
D©aChunkSize
 )

540 
	`SX1276WrôeFifo
––
RFBuf„r
 + 
TxByãsSít
 ), 
D©aChunkSize
 );

541 
TxByãsSít
 +
D©aChunkSize
;

546 
	`SX1276WrôeFifo
–
RFBuf„r
 + 
TxByãsSít
, 
TxPackëSize
 - TxBytesSent );

547 
TxByãsSít
 +
TxPackëSize
 - TxBytesSent;

551 if–
DIO0
 == 1 )

553 
TxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

554 
RFSèã
 = 
RF_STATE_TX_DONE
;

555 
	`SX1276FskSëOpMode
–
RF_OPMODE_STANDBY
 );

559 if––
	`GET_TICK_COUNT
–Ë- 
TxTimeoutTimî
 ) > 
	`TICK_RATE_MS
( 1000 ) )

561 
RFSèã
 = 
RF_STATE_TX_TIMEOUT
;

564 
RF_STATE_TX_DONE
:

565 
RFSèã
 = 
RF_STATE_IDLE
;

566 
ªsu…
 = 
RF_TX_DONE
;

568 
RF_STATE_TX_TIMEOUT
:

569 
RFSèã
 = 
RF_STATE_IDLE
;

570 
ªsu…
 = 
RF_TX_TIMEOUT
;

575  
ªsu…
;

576 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-Fsk.h

21 #i‚de‡
__SX1276_FSK_H__


22 
	#__SX1276_FSK_H__


	)

28 
	ssFskSëtögs


30 
uöt32_t
 
	mRFFªquícy
;

31 
uöt32_t
 
	mBôøã
;

32 
uöt32_t
 
	mFdev
;

33 
öt8_t
 
	mPowî
;

34 
uöt32_t
 
	mRxBw
;

35 
uöt32_t
 
	mRxBwAfc
;

36 
boﬁ
 
	mCrcOn
;

37 
boﬁ
 
	mAfcOn
;

38 
uöt8_t
 
	mPaylﬂdLígth
;

39 }
	ttFskSëtögs
;

44 
	#RF_BUFFER_SIZE_MAX
 256

	)

45 
	#RF_BUFFER_SIZE
 256

	)

53 
	mRF_STATE_IDLE
,

54 
	mRF_STATE_RX_INIT
,

55 
	mRF_STATE_RX_SYNC
,

56 
	mRF_STATE_RX_RUNNING
,

57 
	mRF_STATE_RX_DONE
,

58 
	mRF_STATE_RX_TIMEOUT
,

59 
	mRF_STATE_RX_LEN_ERROR
,

60 
	mRF_STATE_TX_INIT
,

61 
	mRF_STATE_TX_READY_WAIT
,

62 
	mRF_STATE_TX_RUNNING
,

63 
	mRF_STATE_TX_DONE
,

64 
	mRF_STATE_TX_TIMEOUT
,

65 }
	ttRFSèãs
;

70 
	#XTAL_FREQ
 32000000

	)

71 
	#FREQ_STEP
 61.03515625

	)

76 
	#REG_FIFO
 0x00

	)

78 
	#REG_OPMODE
 0x01

	)

79 
	#REG_BITRATEMSB
 0x02

	)

80 
	#REG_BITRATELSB
 0x03

	)

81 
	#REG_FDEVMSB
 0x04

	)

82 
	#REG_FDEVLSB
 0x05

	)

83 
	#REG_FRFMSB
 0x06

	)

84 
	#REG_FRFMID
 0x07

	)

85 
	#REG_FRFLSB
 0x08

	)

87 
	#REG_PACONFIG
 0x09

	)

88 
	#REG_PARAMP
 0x0A

	)

89 
	#REG_OCP
 0x0B

	)

91 
	#REG_LNA
 0x0C

	)

92 
	#REG_RXCONFIG
 0x0D

	)

93 
	#REG_RSSICONFIG
 0x0E

	)

94 
	#REG_RSSICOLLISION
 0x0F

	)

95 
	#REG_RSSITHRESH
 0x10

	)

96 
	#REG_RSSIVALUE
 0x11

	)

97 
	#REG_RXBW
 0x12

	)

98 
	#REG_AFCBW
 0x13

	)

99 
	#REG_OOKPEAK
 0x14

	)

100 
	#REG_OOKFIX
 0x15

	)

101 
	#REG_OOKAVG
 0x16

	)

102 
	#REG_RES17
 0x17

	)

103 
	#REG_RES18
 0x18

	)

104 
	#REG_RES19
 0x19

	)

105 
	#REG_AFCFEI
 0x1A

	)

106 
	#REG_AFCMSB
 0x1B

	)

107 
	#REG_AFCLSB
 0x1C

	)

108 
	#REG_FEIMSB
 0x1D

	)

109 
	#REG_FEILSB
 0x1E

	)

110 
	#REG_PREAMBLEDETECT
 0x1F

	)

111 
	#REG_RXTIMEOUT1
 0x20

	)

112 
	#REG_RXTIMEOUT2
 0x21

	)

113 
	#REG_RXTIMEOUT3
 0x22

	)

114 
	#REG_RXDELAY
 0x23

	)

116 
	#REG_OSC
 0x24

	)

118 
	#REG_PREAMBLEMSB
 0x25

	)

119 
	#REG_PREAMBLELSB
 0x26

	)

120 
	#REG_SYNCCONFIG
 0x27

	)

121 
	#REG_SYNCVALUE1
 0x28

	)

122 
	#REG_SYNCVALUE2
 0x29

	)

123 
	#REG_SYNCVALUE3
 0x2A

	)

124 
	#REG_SYNCVALUE4
 0x2B

	)

125 
	#REG_SYNCVALUE5
 0x2C

	)

126 
	#REG_SYNCVALUE6
 0x2D

	)

127 
	#REG_SYNCVALUE7
 0x2E

	)

128 
	#REG_SYNCVALUE8
 0x2F

	)

129 
	#REG_PACKETCONFIG1
 0x30

	)

130 
	#REG_PACKETCONFIG2
 0x31

	)

131 
	#REG_PAYLOADLENGTH
 0x32

	)

132 
	#REG_NODEADRS
 0x33

	)

133 
	#REG_BROADCASTADRS
 0x34

	)

134 
	#REG_FIFOTHRESH
 0x35

	)

136 
	#REG_SEQCONFIG1
 0x36

	)

137 
	#REG_SEQCONFIG2
 0x37

	)

138 
	#REG_TIMERRESOL
 0x38

	)

139 
	#REG_TIMER1COEF
 0x39

	)

140 
	#REG_TIMER2COEF
 0x3A

	)

142 
	#REG_IMAGECAL
 0x3B

	)

143 
	#REG_TEMP
 0x3C

	)

144 
	#REG_LOWBAT
 0x3D

	)

146 
	#REG_IRQFLAGS1
 0x3E

	)

147 
	#REG_IRQFLAGS2
 0x3F

	)

149 
	#REG_DIOMAPPING1
 0x40

	)

150 
	#REG_DIOMAPPING2
 0x41

	)

152 
	#REG_VERSION
 0x42

	)

154 
	#REG_PLLHOP
 0x44

	)

155 
	#REG_TCXO
 0x4B

	)

156 
	#REG_PADAC
 0x4D

	)

157 
	#REG_FORMERTEMP
 0x5B

	)

158 
	#REG_BITRATEFRAC
 0x5D

	)

159 
	#REG_AGCREF
 0x61

	)

160 
	#REG_AGCTHRESH1
 0x62

	)

161 
	#REG_AGCTHRESH2
 0x63

	)

162 
	#REG_AGCTHRESH3
 0x64

	)

176 
	#RF_OPMODE_LONGRANGEMODE_MASK
 0x7F

	)

177 
	#RF_OPMODE_LONGRANGEMODE_OFF
 0x00

178 
	#RF_OPMODE_LONGRANGEMODE_ON
 0x80

	)

180 
	#RF_OPMODE_MODULATIONTYPE_MASK
 0x9F

	)

181 
	#RF_OPMODE_MODULATIONTYPE_FSK
 0x00

182 
	#RF_OPMODE_MODULATIONTYPE_OOK
 0x20

	)

184 
	#RF_OPMODE_FREQMODE_ACCESS_MASK
 0xF7

	)

185 
	#RF_OPMODE_FREQMODE_ACCESS_LF
 0x08

186 
	#RF_OPMODE_FREQMODE_ACCESS_HF
 0x00

	)

188 
	#RF_OPMODE_MASK
 0xF8

	)

189 
	#RF_OPMODE_SLEEP
 0x00

	)

190 
	#RF_OPMODE_STANDBY
 0x01

191 
	#RF_OPMODE_SYNTHESIZER_TX
 0x02

	)

192 
	#RF_OPMODE_TRANSMITTER
 0x03

	)

193 
	#RF_OPMODE_SYNTHESIZER_RX
 0x04

	)

194 
	#RF_OPMODE_RECEIVER
 0x05

	)

199 
	#RF_BITRATEMSB_1200_BPS
 0x68

	)

200 
	#RF_BITRATELSB_1200_BPS
 0x2B

	)

201 
	#RF_BITRATEMSB_2400_BPS
 0x34

	)

202 
	#RF_BITRATELSB_2400_BPS
 0x15

	)

203 
	#RF_BITRATEMSB_4800_BPS
 0x1A

204 
	#RF_BITRATELSB_4800_BPS
 0x0B

205 
	#RF_BITRATEMSB_9600_BPS
 0x0D

	)

206 
	#RF_BITRATELSB_9600_BPS
 0x05

	)

207 
	#RF_BITRATEMSB_15000_BPS
 0x08

	)

208 
	#RF_BITRATELSB_15000_BPS
 0x55

	)

209 
	#RF_BITRATEMSB_19200_BPS
 0x06

	)

210 
	#RF_BITRATELSB_19200_BPS
 0x83

	)

211 
	#RF_BITRATEMSB_38400_BPS
 0x03

	)

212 
	#RF_BITRATELSB_38400_BPS
 0x41

	)

213 
	#RF_BITRATEMSB_76800_BPS
 0x01

	)

214 
	#RF_BITRATELSB_76800_BPS
 0xA1

	)

215 
	#RF_BITRATEMSB_153600_BPS
 0x00

	)

216 
	#RF_BITRATELSB_153600_BPS
 0xD0

	)

217 
	#RF_BITRATEMSB_57600_BPS
 0x02

	)

218 
	#RF_BITRATELSB_57600_BPS
 0x2C

	)

219 
	#RF_BITRATEMSB_115200_BPS
 0x01

	)

220 
	#RF_BITRATELSB_115200_BPS
 0x16

	)

221 
	#RF_BITRATEMSB_12500_BPS
 0x0A

	)

222 
	#RF_BITRATELSB_12500_BPS
 0x00

	)

223 
	#RF_BITRATEMSB_25000_BPS
 0x05

	)

224 
	#RF_BITRATELSB_25000_BPS
 0x00

	)

225 
	#RF_BITRATEMSB_50000_BPS
 0x02

	)

226 
	#RF_BITRATELSB_50000_BPS
 0x80

	)

227 
	#RF_BITRATEMSB_100000_BPS
 0x01

	)

228 
	#RF_BITRATELSB_100000_BPS
 0x40

	)

229 
	#RF_BITRATEMSB_150000_BPS
 0x00

	)

230 
	#RF_BITRATELSB_150000_BPS
 0xD5

	)

231 
	#RF_BITRATEMSB_200000_BPS
 0x00

	)

232 
	#RF_BITRATELSB_200000_BPS
 0xA0

	)

233 
	#RF_BITRATEMSB_250000_BPS
 0x00

	)

234 
	#RF_BITRATELSB_250000_BPS
 0x80

	)

235 
	#RF_BITRATEMSB_32768_BPS
 0x03

	)

236 
	#RF_BITRATELSB_32768_BPS
 0xD1

	)

242 
	#RF_FDEVMSB_BANDREG_MASK
 0x3F

	)

243 
	#RF_FDEVMSB_BANDREG_AUTO
 0x00

244 
	#RF_FDEVMSB_BANDREG_DIV_BY_1
 0x40

	)

245 
	#RF_FDEVMSB_BANDREG_DIV_BY_2
 0x80

	)

246 
	#RF_FDEVMSB_BANDREG_DIV_BY_6
 0xC0

	)

248 
	#RF_FDEVMSB_FDEV_MASK
 0xC0

	)

250 
	#RF_FDEVMSB_2000_HZ
 0x00

	)

251 
	#RF_FDEVLSB_2000_HZ
 0x21

	)

252 
	#RF_FDEVMSB_5000_HZ
 0x00

253 
	#RF_FDEVLSB_5000_HZ
 0x52

254 
	#RF_FDEVMSB_10000_HZ
 0x00

	)

255 
	#RF_FDEVLSB_10000_HZ
 0xA4

	)

256 
	#RF_FDEVMSB_15000_HZ
 0x00

	)

257 
	#RF_FDEVLSB_15000_HZ
 0xF6

	)

258 
	#RF_FDEVMSB_20000_HZ
 0x01

	)

259 
	#RF_FDEVLSB_20000_HZ
 0x48

	)

260 
	#RF_FDEVMSB_25000_HZ
 0x01

	)

261 
	#RF_FDEVLSB_25000_HZ
 0x9A

	)

262 
	#RF_FDEVMSB_30000_HZ
 0x01

	)

263 
	#RF_FDEVLSB_30000_HZ
 0xEC

	)

264 
	#RF_FDEVMSB_35000_HZ
 0x02

	)

265 
	#RF_FDEVLSB_35000_HZ
 0x3D

	)

266 
	#RF_FDEVMSB_40000_HZ
 0x02

	)

267 
	#RF_FDEVLSB_40000_HZ
 0x8F

	)

268 
	#RF_FDEVMSB_45000_HZ
 0x02

	)

269 
	#RF_FDEVLSB_45000_HZ
 0xE1

	)

270 
	#RF_FDEVMSB_50000_HZ
 0x03

	)

271 
	#RF_FDEVLSB_50000_HZ
 0x33

	)

272 
	#RF_FDEVMSB_55000_HZ
 0x03

	)

273 
	#RF_FDEVLSB_55000_HZ
 0x85

	)

274 
	#RF_FDEVMSB_60000_HZ
 0x03

	)

275 
	#RF_FDEVLSB_60000_HZ
 0xD7

	)

276 
	#RF_FDEVMSB_65000_HZ
 0x04

	)

277 
	#RF_FDEVLSB_65000_HZ
 0x29

	)

278 
	#RF_FDEVMSB_70000_HZ
 0x04

	)

279 
	#RF_FDEVLSB_70000_HZ
 0x7B

	)

280 
	#RF_FDEVMSB_75000_HZ
 0x04

	)

281 
	#RF_FDEVLSB_75000_HZ
 0xCD

	)

282 
	#RF_FDEVMSB_80000_HZ
 0x05

	)

283 
	#RF_FDEVLSB_80000_HZ
 0x1F

	)

284 
	#RF_FDEVMSB_85000_HZ
 0x05

	)

285 
	#RF_FDEVLSB_85000_HZ
 0x71

	)

286 
	#RF_FDEVMSB_90000_HZ
 0x05

	)

287 
	#RF_FDEVLSB_90000_HZ
 0xC3

	)

288 
	#RF_FDEVMSB_95000_HZ
 0x06

	)

289 
	#RF_FDEVLSB_95000_HZ
 0x14

	)

290 
	#RF_FDEVMSB_100000_HZ
 0x06

	)

291 
	#RF_FDEVLSB_100000_HZ
 0x66

	)

292 
	#RF_FDEVMSB_110000_HZ
 0x07

	)

293 
	#RF_FDEVLSB_110000_HZ
 0x0A

	)

294 
	#RF_FDEVMSB_120000_HZ
 0x07

	)

295 
	#RF_FDEVLSB_120000_HZ
 0xAE

	)

296 
	#RF_FDEVMSB_130000_HZ
 0x08

	)

297 
	#RF_FDEVLSB_130000_HZ
 0x52

	)

298 
	#RF_FDEVMSB_140000_HZ
 0x08

	)

299 
	#RF_FDEVLSB_140000_HZ
 0xF6

	)

300 
	#RF_FDEVMSB_150000_HZ
 0x09

	)

301 
	#RF_FDEVLSB_150000_HZ
 0x9A

	)

302 
	#RF_FDEVMSB_160000_HZ
 0x0A

	)

303 
	#RF_FDEVLSB_160000_HZ
 0x3D

	)

304 
	#RF_FDEVMSB_170000_HZ
 0x0A

	)

305 
	#RF_FDEVLSB_170000_HZ
 0xE1

	)

306 
	#RF_FDEVMSB_180000_HZ
 0x0B

	)

307 
	#RF_FDEVLSB_180000_HZ
 0x85

	)

308 
	#RF_FDEVMSB_190000_HZ
 0x0C

	)

309 
	#RF_FDEVLSB_190000_HZ
 0x29

	)

310 
	#RF_FDEVMSB_200000_HZ
 0x0C

	)

311 
	#RF_FDEVLSB_200000_HZ
 0xCD

	)

316 
	#RF_FRFMSB_863_MHZ
 0xD7

	)

317 
	#RF_FRFMID_863_MHZ
 0xC0

	)

318 
	#RF_FRFLSB_863_MHZ
 0x00

	)

319 
	#RF_FRFMSB_864_MHZ
 0xD8

	)

320 
	#RF_FRFMID_864_MHZ
 0x00

	)

321 
	#RF_FRFLSB_864_MHZ
 0x00

	)

322 
	#RF_FRFMSB_865_MHZ
 0xD8

	)

323 
	#RF_FRFMID_865_MHZ
 0x40

	)

324 
	#RF_FRFLSB_865_MHZ
 0x00

	)

325 
	#RF_FRFMSB_866_MHZ
 0xD8

	)

326 
	#RF_FRFMID_866_MHZ
 0x80

	)

327 
	#RF_FRFLSB_866_MHZ
 0x00

	)

328 
	#RF_FRFMSB_867_MHZ
 0xD8

	)

329 
	#RF_FRFMID_867_MHZ
 0xC0

	)

330 
	#RF_FRFLSB_867_MHZ
 0x00

	)

331 
	#RF_FRFMSB_868_MHZ
 0xD9

	)

332 
	#RF_FRFMID_868_MHZ
 0x00

	)

333 
	#RF_FRFLSB_868_MHZ
 0x00

	)

334 
	#RF_FRFMSB_869_MHZ
 0xD9

	)

335 
	#RF_FRFMID_869_MHZ
 0x40

	)

336 
	#RF_FRFLSB_869_MHZ
 0x00

	)

337 
	#RF_FRFMSB_870_MHZ
 0xD9

	)

338 
	#RF_FRFMID_870_MHZ
 0x80

	)

339 
	#RF_FRFLSB_870_MHZ
 0x00

	)

341 
	#RF_FRFMSB_902_MHZ
 0xE1

	)

342 
	#RF_FRFMID_902_MHZ
 0x80

	)

343 
	#RF_FRFLSB_902_MHZ
 0x00

	)

344 
	#RF_FRFMSB_903_MHZ
 0xE1

	)

345 
	#RF_FRFMID_903_MHZ
 0xC0

	)

346 
	#RF_FRFLSB_903_MHZ
 0x00

	)

347 
	#RF_FRFMSB_904_MHZ
 0xE2

	)

348 
	#RF_FRFMID_904_MHZ
 0x00

	)

349 
	#RF_FRFLSB_904_MHZ
 0x00

	)

350 
	#RF_FRFMSB_905_MHZ
 0xE2

	)

351 
	#RF_FRFMID_905_MHZ
 0x40

	)

352 
	#RF_FRFLSB_905_MHZ
 0x00

	)

353 
	#RF_FRFMSB_906_MHZ
 0xE2

	)

354 
	#RF_FRFMID_906_MHZ
 0x80

	)

355 
	#RF_FRFLSB_906_MHZ
 0x00

	)

356 
	#RF_FRFMSB_907_MHZ
 0xE2

	)

357 
	#RF_FRFMID_907_MHZ
 0xC0

	)

358 
	#RF_FRFLSB_907_MHZ
 0x00

	)

359 
	#RF_FRFMSB_908_MHZ
 0xE3

	)

360 
	#RF_FRFMID_908_MHZ
 0x00

	)

361 
	#RF_FRFLSB_908_MHZ
 0x00

	)

362 
	#RF_FRFMSB_909_MHZ
 0xE3

	)

363 
	#RF_FRFMID_909_MHZ
 0x40

	)

364 
	#RF_FRFLSB_909_MHZ
 0x00

	)

365 
	#RF_FRFMSB_910_MHZ
 0xE3

	)

366 
	#RF_FRFMID_910_MHZ
 0x80

	)

367 
	#RF_FRFLSB_910_MHZ
 0x00

	)

368 
	#RF_FRFMSB_911_MHZ
 0xE3

	)

369 
	#RF_FRFMID_911_MHZ
 0xC0

	)

370 
	#RF_FRFLSB_911_MHZ
 0x00

	)

371 
	#RF_FRFMSB_912_MHZ
 0xE4

	)

372 
	#RF_FRFMID_912_MHZ
 0x00

	)

373 
	#RF_FRFLSB_912_MHZ
 0x00

	)

374 
	#RF_FRFMSB_913_MHZ
 0xE4

	)

375 
	#RF_FRFMID_913_MHZ
 0x40

	)

376 
	#RF_FRFLSB_913_MHZ
 0x00

	)

377 
	#RF_FRFMSB_914_MHZ
 0xE4

	)

378 
	#RF_FRFMID_914_MHZ
 0x80

	)

379 
	#RF_FRFLSB_914_MHZ
 0x00

	)

380 
	#RF_FRFMSB_915_MHZ
 0xE4

381 
	#RF_FRFMID_915_MHZ
 0xC0

382 
	#RF_FRFLSB_915_MHZ
 0x00

383 
	#RF_FRFMSB_916_MHZ
 0xE5

	)

384 
	#RF_FRFMID_916_MHZ
 0x00

	)

385 
	#RF_FRFLSB_916_MHZ
 0x00

	)

386 
	#RF_FRFMSB_917_MHZ
 0xE5

	)

387 
	#RF_FRFMID_917_MHZ
 0x40

	)

388 
	#RF_FRFLSB_917_MHZ
 0x00

	)

389 
	#RF_FRFMSB_918_MHZ
 0xE5

	)

390 
	#RF_FRFMID_918_MHZ
 0x80

	)

391 
	#RF_FRFLSB_918_MHZ
 0x00

	)

392 
	#RF_FRFMSB_919_MHZ
 0xE5

	)

393 
	#RF_FRFMID_919_MHZ
 0xC0

	)

394 
	#RF_FRFLSB_919_MHZ
 0x00

	)

395 
	#RF_FRFMSB_920_MHZ
 0xE6

	)

396 
	#RF_FRFMID_920_MHZ
 0x00

	)

397 
	#RF_FRFLSB_920_MHZ
 0x00

	)

398 
	#RF_FRFMSB_921_MHZ
 0xE6

	)

399 
	#RF_FRFMID_921_MHZ
 0x40

	)

400 
	#RF_FRFLSB_921_MHZ
 0x00

	)

401 
	#RF_FRFMSB_922_MHZ
 0xE6

	)

402 
	#RF_FRFMID_922_MHZ
 0x80

	)

403 
	#RF_FRFLSB_922_MHZ
 0x00

	)

404 
	#RF_FRFMSB_923_MHZ
 0xE6

	)

405 
	#RF_FRFMID_923_MHZ
 0xC0

	)

406 
	#RF_FRFLSB_923_MHZ
 0x00

	)

407 
	#RF_FRFMSB_924_MHZ
 0xE7

	)

408 
	#RF_FRFMID_924_MHZ
 0x00

	)

409 
	#RF_FRFLSB_924_MHZ
 0x00

	)

410 
	#RF_FRFMSB_925_MHZ
 0xE7

	)

411 
	#RF_FRFMID_925_MHZ
 0x40

	)

412 
	#RF_FRFLSB_925_MHZ
 0x00

	)

413 
	#RF_FRFMSB_926_MHZ
 0xE7

	)

414 
	#RF_FRFMID_926_MHZ
 0x80

	)

415 
	#RF_FRFLSB_926_MHZ
 0x00

	)

416 
	#RF_FRFMSB_927_MHZ
 0xE7

	)

417 
	#RF_FRFMID_927_MHZ
 0xC0

	)

418 
	#RF_FRFLSB_927_MHZ
 0x00

	)

419 
	#RF_FRFMSB_928_MHZ
 0xE8

	)

420 
	#RF_FRFMID_928_MHZ
 0x00

	)

421 
	#RF_FRFLSB_928_MHZ
 0x00

	)

426 
	#RF_PACONFIG_PASELECT_MASK
 0x7F

	)

427 
	#RF_PACONFIG_PASELECT_PABOOST
 0x80

	)

428 
	#RF_PACONFIG_PASELECT_RFO
 0x00

429 

	)

430 
	#RF_PACONFIG_MAX_POWER_MASK
 0x8F

	)

432 
	#RF_PACONFIG_OUTPUTPOWER_MASK
 0xF0

	)

437 
	#RF_PARAMP_MODULATIONSHAPING_MASK
 0x9F

	)

438 
	#RF_PARAMP_MODULATIONSHAPING_00
 0x00

439 
	#RF_PARAMP_MODULATIONSHAPING_01
 0x20

	)

440 
	#RF_PARAMP_MODULATIONSHAPING_10
 0x40

	)

441 
	#RF_PARAMP_MODULATIONSHAPING_11
 0x60

	)

443 
	#RF_PARAMP_TXBANDFORCE_MASK
 0xEF

	)

444 
	#RF_PARAMP_TXBANDFORCE_BAND_SEL
 0x10

	)

445 
	#RF_PARAMP_TXBANDFORCE_AUTO
 0x00

446 

	)

447 
	#RF_PARAMP_MASK
 0xF0

	)

448 
	#RF_PARAMP_3400_US
 0x00

	)

449 
	#RF_PARAMP_2000_US
 0x01

	)

450 
	#RF_PARAMP_1000_US
 0x02

	)

451 
	#RF_PARAMP_0500_US
 0x03

	)

452 
	#RF_PARAMP_0250_US
 0x04

	)

453 
	#RF_PARAMP_0125_US
 0x05

	)

454 
	#RF_PARAMP_0100_US
 0x06

	)

455 
	#RF_PARAMP_0062_US
 0x07

	)

456 
	#RF_PARAMP_0050_US
 0x08

	)

457 
	#RF_PARAMP_0040_US
 0x09

458 
	#RF_PARAMP_0031_US
 0x0A

	)

459 
	#RF_PARAMP_0025_US
 0x0B

	)

460 
	#RF_PARAMP_0020_US
 0x0C

	)

461 
	#RF_PARAMP_0015_US
 0x0D

	)

462 
	#RF_PARAMP_0012_US
 0x0E

	)

463 
	#RF_PARAMP_0010_US
 0x0F

	)

468 
	#RF_OCP_MASK
 0xDF

	)

469 
	#RF_OCP_ON
 0x20

470 
	#RF_OCP_OFF
 0x00

	)

472 
	#RF_OCP_TRIM_MASK
 0xE0

	)

473 
	#RF_OCP_TRIM_045_MA
 0x00

	)

474 
	#RF_OCP_TRIM_050_MA
 0x01

	)

475 
	#RF_OCP_TRIM_055_MA
 0x02

	)

476 
	#RF_OCP_TRIM_060_MA
 0x03

	)

477 
	#RF_OCP_TRIM_065_MA
 0x04

	)

478 
	#RF_OCP_TRIM_070_MA
 0x05

	)

479 
	#RF_OCP_TRIM_075_MA
 0x06

	)

480 
	#RF_OCP_TRIM_080_MA
 0x07

	)

481 
	#RF_OCP_TRIM_085_MA
 0x08

	)

482 
	#RF_OCP_TRIM_090_MA
 0x09

	)

483 
	#RF_OCP_TRIM_095_MA
 0x0A

	)

484 
	#RF_OCP_TRIM_100_MA
 0x0B

485 
	#RF_OCP_TRIM_105_MA
 0x0C

	)

486 
	#RF_OCP_TRIM_110_MA
 0x0D

	)

487 
	#RF_OCP_TRIM_115_MA
 0x0E

	)

488 
	#RF_OCP_TRIM_120_MA
 0x0F

	)

489 
	#RF_OCP_TRIM_130_MA
 0x10

	)

490 
	#RF_OCP_TRIM_140_MA
 0x11

	)

491 
	#RF_OCP_TRIM_150_MA
 0x12

	)

492 
	#RF_OCP_TRIM_160_MA
 0x13

	)

493 
	#RF_OCP_TRIM_170_MA
 0x14

	)

494 
	#RF_OCP_TRIM_180_MA
 0x15

	)

495 
	#RF_OCP_TRIM_190_MA
 0x16

	)

496 
	#RF_OCP_TRIM_200_MA
 0x17

	)

497 
	#RF_OCP_TRIM_210_MA
 0x18

	)

498 
	#RF_OCP_TRIM_220_MA
 0x19

	)

499 
	#RF_OCP_TRIM_230_MA
 0x1A

	)

500 
	#RF_OCP_TRIM_240_MA
 0x1B

	)

505 
	#RF_LNA_GAIN_MASK
 0x1F

	)

506 
	#RF_LNA_GAIN_G1
 0x20

507 
	#RF_LNA_GAIN_G2
 0x40

	)

508 
	#RF_LNA_GAIN_G3
 0x60

	)

509 
	#RF_LNA_GAIN_G4
 0x80

	)

510 
	#RF_LNA_GAIN_G5
 0xA0

	)

511 
	#RF_LNA_GAIN_G6
 0xC0

	)

513 
	#RF_LNA_BOOST_LF_MASK
 0xE7

	)

514 
	#RF_LNA_BOOST_LF_DEFAULT
 0x00

515 
	#RF_LNA_BOOST_LF_GAIN
 0x08

	)

516 
	#RF_LNA_BOOST_LF_IP3
 0x10

	)

517 
	#RF_LNA_BOOST_LF_BOOST
 0x18

	)

519 
	#RF_LNA_RXBANDFORCE_MASK
 0xFB

	)

520 
	#RF_LNA_RXBANDFORCE_BAND_SEL
 0x04

	)

521 
	#RF_LNA_RXBANDFORCE_AUTO
 0x00

522 

	)

523 
	#RF_LNA_BOOST_HF_MASK
 0xFC

	)

524 
	#RF_LNA_BOOST_HF_OFF
 0x00

525 
	#RF_LNA_BOOST_HF_ON
 0x03

	)

530 
	#RF_RXCONFIG_RESTARTRXONCOLLISION_MASK
 0x7F

	)

531 
	#RF_RXCONFIG_RESTARTRXONCOLLISION_ON
 0x80

	)

532 
	#RF_RXCONFIG_RESTARTRXONCOLLISION_OFF
 0x00

533 

	)

534 
	#RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK
 0x40

535 

	)

536 
	#RF_RXCONFIG_RESTARTRXWITHPLLLOCK
 0x20

537 

	)

538 
	#RF_RXCONFIG_AFCAUTO_MASK
 0xEF

	)

539 
	#RF_RXCONFIG_AFCAUTO_ON
 0x10

	)

540 
	#RF_RXCONFIG_AFCAUTO_OFF
 0x00

541 

	)

542 
	#RF_RXCONFIG_AGCAUTO_MASK
 0xF7

	)

543 
	#RF_RXCONFIG_AGCAUTO_ON
 0x08

544 
	#RF_RXCONFIG_AGCAUTO_OFF
 0x00

	)

546 
	#RF_RXCONFIG_RXTRIGER_MASK
 0xF8

	)

547 
	#RF_RXCONFIG_RXTRIGER_OFF
 0x00

	)

548 
	#RF_RXCONFIG_RXTRIGER_RSSI
 0x01

	)

549 
	#RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT
 0x06

550 
	#RF_RXCONFIG_RXTRIGER_RSSI_PREAMBLEDETECT
 0x07

	)

555 
	#RF_RSSICONFIG_OFFSET_MASK
 0x07

	)

556 
	#RF_RSSICONFIG_OFFSET_P_00_DB
 0x00

557 
	#RF_RSSICONFIG_OFFSET_P_01_DB
 0x08

	)

558 
	#RF_RSSICONFIG_OFFSET_P_02_DB
 0x10

	)

559 
	#RF_RSSICONFIG_OFFSET_P_03_DB
 0x18

	)

560 
	#RF_RSSICONFIG_OFFSET_P_04_DB
 0x20

	)

561 
	#RF_RSSICONFIG_OFFSET_P_05_DB
 0x28

	)

562 
	#RF_RSSICONFIG_OFFSET_P_06_DB
 0x30

	)

563 
	#RF_RSSICONFIG_OFFSET_P_07_DB
 0x38

	)

564 
	#RF_RSSICONFIG_OFFSET_P_08_DB
 0x40

	)

565 
	#RF_RSSICONFIG_OFFSET_P_09_DB
 0x48

	)

566 
	#RF_RSSICONFIG_OFFSET_P_10_DB
 0x50

	)

567 
	#RF_RSSICONFIG_OFFSET_P_11_DB
 0x58

	)

568 
	#RF_RSSICONFIG_OFFSET_P_12_DB
 0x60

	)

569 
	#RF_RSSICONFIG_OFFSET_P_13_DB
 0x68

	)

570 
	#RF_RSSICONFIG_OFFSET_P_14_DB
 0x70

	)

571 
	#RF_RSSICONFIG_OFFSET_P_15_DB
 0x78

	)

572 
	#RF_RSSICONFIG_OFFSET_M_16_DB
 0x80

	)

573 
	#RF_RSSICONFIG_OFFSET_M_15_DB
 0x88

	)

574 
	#RF_RSSICONFIG_OFFSET_M_14_DB
 0x90

	)

575 
	#RF_RSSICONFIG_OFFSET_M_13_DB
 0x98

	)

576 
	#RF_RSSICONFIG_OFFSET_M_12_DB
 0xA0

	)

577 
	#RF_RSSICONFIG_OFFSET_M_11_DB
 0xA8

	)

578 
	#RF_RSSICONFIG_OFFSET_M_10_DB
 0xB0

	)

579 
	#RF_RSSICONFIG_OFFSET_M_09_DB
 0xB8

	)

580 
	#RF_RSSICONFIG_OFFSET_M_08_DB
 0xC0

	)

581 
	#RF_RSSICONFIG_OFFSET_M_07_DB
 0xC8

	)

582 
	#RF_RSSICONFIG_OFFSET_M_06_DB
 0xD0

	)

583 
	#RF_RSSICONFIG_OFFSET_M_05_DB
 0xD8

	)

584 
	#RF_RSSICONFIG_OFFSET_M_04_DB
 0xE0

	)

585 
	#RF_RSSICONFIG_OFFSET_M_03_DB
 0xE8

	)

586 
	#RF_RSSICONFIG_OFFSET_M_02_DB
 0xF0

	)

587 
	#RF_RSSICONFIG_OFFSET_M_01_DB
 0xF8

	)

589 
	#RF_RSSICONFIG_SMOOTHING_MASK
 0xF8

	)

590 
	#RF_RSSICONFIG_SMOOTHING_2
 0x00

	)

591 
	#RF_RSSICONFIG_SMOOTHING_4
 0x01

	)

592 
	#RF_RSSICONFIG_SMOOTHING_8
 0x02

593 
	#RF_RSSICONFIG_SMOOTHING_16
 0x03

	)

594 
	#RF_RSSICONFIG_SMOOTHING_32
 0x04

	)

595 
	#RF_RSSICONFIG_SMOOTHING_64
 0x05

	)

596 
	#RF_RSSICONFIG_SMOOTHING_128
 0x06

	)

597 
	#RF_RSSICONFIG_SMOOTHING_256
 0x07

	)

602 
	#RF_RSSICOLISION_THRESHOLD
 0x0A

603 

	)

607 
	#RF_RSSITHRESH_THRESHOLD
 0xFF

608 

	)

616 
	#RF_RXBW_MANT_MASK
 0xE7

	)

617 
	#RF_RXBW_MANT_16
 0x00

	)

618 
	#RF_RXBW_MANT_20
 0x08

	)

619 
	#RF_RXBW_MANT_24
 0x10

620 

	)

621 
	#RF_RXBW_EXP_MASK
 0xF8

	)

622 
	#RF_RXBW_EXP_0
 0x00

	)

623 
	#RF_RXBW_EXP_1
 0x01

	)

624 
	#RF_RXBW_EXP_2
 0x02

	)

625 
	#RF_RXBW_EXP_3
 0x03

	)

626 
	#RF_RXBW_EXP_4
 0x04

	)

627 
	#RF_RXBW_EXP_5
 0x05

628 
	#RF_RXBW_EXP_6
 0x06

	)

629 
	#RF_RXBW_EXP_7
 0x07

	)

634 
	#RF_AFCBW_MANTAFC_MASK
 0xE7

	)

635 
	#RF_AFCBW_MANTAFC_16
 0x00

	)

636 
	#RF_AFCBW_MANTAFC_20
 0x08

637 
	#RF_AFCBW_MANTAFC_24
 0x10

	)

639 
	#RF_AFCBW_EXPAFC_MASK
 0xF8

	)

640 
	#RF_AFCBW_EXPAFC_0
 0x00

	)

641 
	#RF_AFCBW_EXPAFC_1
 0x01

	)

642 
	#RF_AFCBW_EXPAFC_2
 0x02

	)

643 
	#RF_AFCBW_EXPAFC_3
 0x03

644 
	#RF_AFCBW_EXPAFC_4
 0x04

	)

645 
	#RF_AFCBW_EXPAFC_5
 0x05

	)

646 
	#RF_AFCBW_EXPAFC_6
 0x06

	)

647 
	#RF_AFCBW_EXPAFC_7
 0x07

	)

652 
	#RF_OOKPEAK_BITSYNC_MASK
 0xDF

653 
	#RF_OOKPEAK_BITSYNC_ON
 0x20

654 
	#RF_OOKPEAK_BITSYNC_OFF
 0x00

	)

656 
	#RF_OOKPEAK_OOKTHRESHTYPE_MASK
 0xE7

	)

657 
	#RF_OOKPEAK_OOKTHRESHTYPE_FIXED
 0x00

	)

658 
	#RF_OOKPEAK_OOKTHRESHTYPE_PEAK
 0x08

659 
	#RF_OOKPEAK_OOKTHRESHTYPE_AVERAGE
 0x10

	)

661 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_MASK
 0xF8

	)

662 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_0_5_DB
 0x00

663 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_1_0_DB
 0x01

	)

664 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_1_5_DB
 0x02

	)

665 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_2_0_DB
 0x03

	)

666 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_3_0_DB
 0x04

	)

667 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_4_0_DB
 0x05

	)

668 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_5_0_DB
 0x06

	)

669 
	#RF_OOKPEAK_OOKPEAKTHRESHSTEP_6_0_DB
 0x07

	)

674 
	#RF_OOKFIX_OOKFIXEDTHRESHOLD
 0x0C

675 

	)

679 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_MASK
 0x1F

	)

680 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_000
 0x00

681 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_001
 0x20

	)

682 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_010
 0x40

	)

683 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_011
 0x60

	)

684 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_100
 0x80

	)

685 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_101
 0xA0

	)

686 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_110
 0xC0

	)

687 
	#RF_OOKAVG_OOKPEAKTHRESHDEC_111
 0xE0

	)

689 
	#RF_OOKAVG_AVERAGEOFFSET_MASK
 0xF3

	)

690 
	#RF_OOKAVG_AVERAGEOFFSET_0_DB
 0x00

691 
	#RF_OOKAVG_AVERAGEOFFSET_2_DB
 0x04

	)

692 
	#RF_OOKAVG_AVERAGEOFFSET_4_DB
 0x08

	)

693 
	#RF_OOKAVG_AVERAGEOFFSET_6_DB
 0x0C

	)

695 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_MASK
 0xFC

	)

696 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_00
 0x00

	)

697 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_01
 0x01

	)

698 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_10
 0x02

699 
	#RF_OOKAVG_OOKAVERAGETHRESHFILT_11
 0x03

	)

704 
	#RF_AFCFEI_AGCSTART
 0x10

	)

706 
	#RF_AFCFEI_AFCCLEAR
 0x02

	)

708 
	#RF_AFCFEI_AFCAUTOCLEAR_MASK
 0xFE

	)

709 
	#RF_AFCFEI_AFCAUTOCLEAR_ON
 0x01

	)

710 
	#RF_AFCFEI_AFCAUTOCLEAR_OFF
 0x00

711 

	)

731 
	#RF_PREAMBLEDETECT_DETECTOR_MASK
 0x7F

	)

732 
	#RF_PREAMBLEDETECT_DETECTOR_ON
 0x80

733 
	#RF_PREAMBLEDETECT_DETECTOR_OFF
 0x00

	)

735 
	#RF_PREAMBLEDETECT_DETECTORSIZE_MASK
 0x9F

	)

736 
	#RF_PREAMBLEDETECT_DETECTORSIZE_1
 0x00

	)

737 
	#RF_PREAMBLEDETECT_DETECTORSIZE_2
 0x20

738 
	#RF_PREAMBLEDETECT_DETECTORSIZE_3
 0x40

	)

739 
	#RF_PREAMBLEDETECT_DETECTORSIZE_4
 0x60

	)

741 
	#RF_PREAMBLEDETECT_DETECTORTOL_MASK
 0xE0

	)

742 
	#RF_PREAMBLEDETECT_DETECTORTOL_0
 0x00

	)

743 
	#RF_PREAMBLEDETECT_DETECTORTOL_1
 0x01

	)

744 
	#RF_PREAMBLEDETECT_DETECTORTOL_2
 0x02

	)

745 
	#RF_PREAMBLEDETECT_DETECTORTOL_3
 0x03

	)

746 
	#RF_PREAMBLEDETECT_DETECTORTOL_4
 0x04

	)

747 
	#RF_PREAMBLEDETECT_DETECTORTOL_5
 0x05

	)

748 
	#RF_PREAMBLEDETECT_DETECTORTOL_6
 0x06

	)

749 
	#RF_PREAMBLEDETECT_DETECTORTOL_7
 0x07

	)

750 
	#RF_PREAMBLEDETECT_DETECTORTOL_8
 0x08

	)

751 
	#RF_PREAMBLEDETECT_DETECTORTOL_9
 0x09

	)

752 
	#RF_PREAMBLEDETECT_DETECTORTOL_10
 0x0A

753 
	#RF_PREAMBLEDETECT_DETECTORTOL_11
 0x0B

	)

754 
	#RF_PREAMBLEDETECT_DETECTORTOL_12
 0x0C

	)

755 
	#RF_PREAMBLEDETECT_DETECTORTOL_13
 0x0D

	)

756 
	#RF_PREAMBLEDETECT_DETECTORTOL_14
 0x0E

	)

757 
	#RF_PREAMBLEDETECT_DETECTORTOL_15
 0x0F

	)

758 
	#RF_PREAMBLEDETECT_DETECTORTOL_16
 0x10

	)

759 
	#RF_PREAMBLEDETECT_DETECTORTOL_17
 0x11

	)

760 
	#RF_PREAMBLEDETECT_DETECTORTOL_18
 0x12

	)

761 
	#RF_PREAMBLEDETECT_DETECTORTOL_19
 0x13

	)

762 
	#RF_PREAMBLEDETECT_DETECTORTOL_20
 0x14

	)

763 
	#RF_PREAMBLEDETECT_DETECTORTOL_21
 0x15

	)

764 
	#RF_PREAMBLEDETECT_DETECTORTOL_22
 0x16

	)

765 
	#RF_PREAMBLEDETECT_DETECTORTOL_23
 0x17

	)

766 
	#RF_PREAMBLEDETECT_DETECTORTOL_24
 0x18

	)

767 
	#RF_PREAMBLEDETECT_DETECTORTOL_25
 0x19

	)

768 
	#RF_PREAMBLEDETECT_DETECTORTOL_26
 0x1A

	)

769 
	#RF_PREAMBLEDETECT_DETECTORTOL_27
 0x1B

	)

770 
	#RF_PREAMBLEDETECT_DETECTORTOL_28
 0x1C

	)

771 
	#RF_PREAMBLEDETECT_DETECTORTOL_29
 0x1D

	)

772 
	#RF_PREAMBLEDETECT_DETECTORTOL_30
 0x1E

	)

773 
	#RF_PREAMBLEDETECT_DETECTORTOL_31
 0x1F

	)

778 
	#RF_RXTIMEOUT1_TIMEOUTRXRSSI
 0x00

779 

	)

783 
	#RF_RXTIMEOUT2_TIMEOUTRXPREAMBLE
 0x00

784 

	)

788 
	#RF_RXTIMEOUT3_TIMEOUTSIGNALSYNC
 0x00

789 

	)

793 
	#RF_RXDELAY_INTERPACKETRXDELAY
 0x00

794 

	)

798 
	#RF_OSC_RCCALSTART
 0x08

	)

800 
	#RF_OSC_CLKOUT_MASK
 0xF8

	)

801 
	#RF_OSC_CLKOUT_32_MHZ
 0x00

	)

802 
	#RF_OSC_CLKOUT_16_MHZ
 0x01

	)

803 
	#RF_OSC_CLKOUT_8_MHZ
 0x02

	)

804 
	#RF_OSC_CLKOUT_4_MHZ
 0x03

	)

805 
	#RF_OSC_CLKOUT_2_MHZ
 0x04

	)

806 
	#RF_OSC_CLKOUT_1_MHZ
 0x05

807 
	#RF_OSC_CLKOUT_RC
 0x06

	)

808 
	#RF_OSC_CLKOUT_OFF
 0x07

	)

813 
	#RF_PREAMBLEMSB_SIZE
 0x00

814 
	#RF_PREAMBLELSB_SIZE
 0x03

815 

	)

819 
	#RF_SYNCCONFIG_AUTORESTARTRXMODE_MASK
 0x3F

	)

820 
	#RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_ON
 0x80

821 
	#RF_SYNCCONFIG_AUTORESTARTRXMODE_WAITPLL_OFF
 0x40

	)

822 
	#RF_SYNCCONFIG_AUTORESTARTRXMODE_OFF
 0x00

	)

825 
	#RF_SYNCCONFIG_PREAMBLEPOLARITY_MASK
 0xDF

	)

826 
	#RF_SYNCCONFIG_PREAMBLEPOLARITY_55
 0x20

	)

827 
	#RF_SYNCCONFIG_PREAMBLEPOLARITY_AA
 0x00

828 

	)

829 
	#RF_SYNCCONFIG_SYNC_MASK
 0xEF

	)

830 
	#RF_SYNCCONFIG_SYNC_ON
 0x10

831 
	#RF_SYNCCONFIG_SYNC_OFF
 0x00

	)

834 
	#RF_SYNCCONFIG_SYNCSIZE_MASK
 0xF8

	)

835 
	#RF_SYNCCONFIG_SYNCSIZE_1
 0x00

	)

836 
	#RF_SYNCCONFIG_SYNCSIZE_2
 0x01

	)

837 
	#RF_SYNCCONFIG_SYNCSIZE_3
 0x02

	)

838 
	#RF_SYNCCONFIG_SYNCSIZE_4
 0x03

839 
	#RF_SYNCCONFIG_SYNCSIZE_5
 0x04

	)

840 
	#RF_SYNCCONFIG_SYNCSIZE_6
 0x05

	)

841 
	#RF_SYNCCONFIG_SYNCSIZE_7
 0x06

	)

842 
	#RF_SYNCCONFIG_SYNCSIZE_8
 0x07

	)

847 
	#RF_SYNCVALUE1_SYNCVALUE
 0x01

848 
	#RF_SYNCVALUE2_SYNCVALUE
 0x01

849 
	#RF_SYNCVALUE3_SYNCVALUE
 0x01

850 
	#RF_SYNCVALUE4_SYNCVALUE
 0x01

851 
	#RF_SYNCVALUE5_SYNCVALUE
 0x01

852 
	#RF_SYNCVALUE6_SYNCVALUE
 0x01

853 
	#RF_SYNCVALUE7_SYNCVALUE
 0x01

854 
	#RF_SYNCVALUE8_SYNCVALUE
 0x01

855 

	)

859 
	#RF_PACKETCONFIG1_PACKETFORMAT_MASK
 0x7F

	)

860 
	#RF_PACKETCONFIG1_PACKETFORMAT_FIXED
 0x00

	)

861 
	#RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 0x80

862 

	)

863 
	#RF_PACKETCONFIG1_DCFREE_MASK
 0x9F

	)

864 
	#RF_PACKETCONFIG1_DCFREE_OFF
 0x00

865 
	#RF_PACKETCONFIG1_DCFREE_MANCHESTER
 0x20

	)

866 
	#RF_PACKETCONFIG1_DCFREE_WHITENING
 0x40

	)

868 
	#RF_PACKETCONFIG1_CRC_MASK
 0xEF

	)

869 
	#RF_PACKETCONFIG1_CRC_ON
 0x10

870 
	#RF_PACKETCONFIG1_CRC_OFF
 0x00

	)

872 
	#RF_PACKETCONFIG1_CRCAUTOCLEAR_MASK
 0xF7

	)

873 
	#RF_PACKETCONFIG1_CRCAUTOCLEAR_ON
 0x00

874 
	#RF_PACKETCONFIG1_CRCAUTOCLEAR_OFF
 0x08

	)

876 
	#RF_PACKETCONFIG1_ADDRSFILTERING_MASK
 0xF9

	)

877 
	#RF_PACKETCONFIG1_ADDRSFILTERING_OFF
 0x00

878 
	#RF_PACKETCONFIG1_ADDRSFILTERING_NODE
 0x02

	)

879 
	#RF_PACKETCONFIG1_ADDRSFILTERING_NODEBROADCAST
 0x04

	)

881 
	#RF_PACKETCONFIG1_CRCWHITENINGTYPE_MASK
 0xFE

	)

882 
	#RF_PACKETCONFIG1_CRCWHITENINGTYPE_CCITT
 0x00

883 
	#RF_PACKETCONFIG1_CRCWHITENINGTYPE_IBM
 0x01

	)

889 
	#RF_PACKETCONFIG2_WMBUS_CRC_ENABLE_MASK
 0x7F

	)

890 
	#RF_PACKETCONFIG2_WMBUS_CRC_ENABLE
 0x80

	)

891 
	#RF_PACKETCONFIG2_WMBUS_CRC_DISABLE
 0x00

892 

	)

893 
	#RF_PACKETCONFIG2_DATAMODE_MASK
 0xBF

	)

894 
	#RF_PACKETCONFIG2_DATAMODE_CONTINUOUS
 0x00

	)

895 
	#RF_PACKETCONFIG2_DATAMODE_PACKET
 0x40

896 

	)

897 
	#RF_PACKETCONFIG2_IOHOME_MASK
 0xDF

	)

898 
	#RF_PACKETCONFIG2_IOHOME_ON
 0x20

	)

899 
	#RF_PACKETCONFIG2_IOHOME_OFF
 0x00

900 

	)

901 
	#RF_PACKETCONFIG2_BEACON_MASK
 0xF7

	)

902 
	#RF_PACKETCONFIG2_BEACON_ON
 0x08

	)

903 
	#RF_PACKETCONFIG2_BEACON_OFF
 0x00

904 

	)

905 
	#RF_PACKETCONFIG2_PAYLOADLENGTH_MSB_MASK
 0xF8

	)

910 
	#RF_PAYLOADLENGTH_LENGTH
 0x40

911 

	)

915 
	#RF_NODEADDRESS_ADDRESS
 0x00

	)

920 
	#RF_BROADCASTADDRESS_ADDRESS
 0x00

	)

925 
	#RF_FIFOTHRESH_TXSTARTCONDITION_MASK
 0x7F

	)

926 
	#RF_FIFOTHRESH_TXSTARTCONDITION_FIFOTHRESH
 0x00

927 
	#RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY
 0x80

	)

929 
	#RF_FIFOTHRESH_FIFOTHRESHOLD_MASK
 0xC0

	)

930 
	#RF_FIFOTHRESH_FIFOTHRESHOLD_THRESHOLD
 0x0F

931 

	)

935 
	#RF_SEQCONFIG1_SEQUENCER_START
 0x80

	)

937 
	#RF_SEQCONFIG1_SEQUENCER_STOP
 0x40

	)

939 
	#RF_SEQCONFIG1_IDLEMODE_MASK
 0xDF

	)

940 
	#RF_SEQCONFIG1_IDLEMODE_SLEEP
 0x20

	)

941 
	#RF_SEQCONFIG1_IDLEMODE_STANDBY
 0x00

942 

	)

943 
	#RF_SEQCONFIG1_FROMSTART_MASK
 0xE7

	)

944 
	#RF_SEQCONFIG1_FROMSTART_TOLPS
 0x00

945 
	#RF_SEQCONFIG1_FROMSTART_TORX
 0x08

	)

946 
	#RF_SEQCONFIG1_FROMSTART_TOTX
 0x10

	)

947 
	#RF_SEQCONFIG1_FROMSTART_TOTX_ONFIFOLEVEL
 0x18

	)

949 
	#RF_SEQCONFIG1_LPS_MASK
 0xFB

	)

950 
	#RF_SEQCONFIG1_LPS_SEQUENCER_OFF
 0x00

951 
	#RF_SEQCONFIG1_LPS_IDLE
 0x04

	)

953 
	#RF_SEQCONFIG1_FROMIDLE_MASK
 0xFD

	)

954 
	#RF_SEQCONFIG1_FROMIDLE_TOTX
 0x00

955 
	#RF_SEQCONFIG1_FROMIDLE_TORX
 0x02

	)

957 
	#RF_SEQCONFIG1_FROMTX_MASK
 0xFE

	)

958 
	#RF_SEQCONFIG1_FROMTX_TOLPS
 0x00

959 
	#RF_SEQCONFIG1_FROMTX_TORX
 0x01

	)

964 
	#RF_SEQCONFIG2_FROMRX_MASK
 0x1F

	)

965 
	#RF_SEQCONFIG2_FROMRX_TOUNUSED_000
 0x00

966 
	#RF_SEQCONFIG2_FROMRX_TORXPKT_ONPLDRDY
 0x20

	)

967 
	#RF_SEQCONFIG2_FROMRX_TOLPS_ONPLDRDY
 0x40

	)

968 
	#RF_SEQCONFIG2_FROMRX_TORXPKT_ONCRCOK
 0x60

	)

969 
	#RF_SEQCONFIG2_FROMRX_TOSEQUENCEROFF_ONRSSI
 0x80

	)

970 
	#RF_SEQCONFIG2_FROMRX_TOSEQUENCEROFF_ONSYNC
 0xA0

	)

971 
	#RF_SEQCONFIG2_FROMRX_TOSEQUENCEROFF_ONPREAMBLE
 0xC0

	)

972 
	#RF_SEQCONFIG2_FROMRX_TOUNUSED_111
 0xE0

	)

974 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_MASK
 0xE7

	)

975 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_TORXRESTART
 0x00

976 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_TOTX
 0x08

	)

977 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_TOLPS
 0x10

	)

978 
	#RF_SEQCONFIG2_FROMRXTIMEOUT_TOSEQUENCEROFF
 0x18

	)

980 
	#RF_SEQCONFIG2_FROMRXPKT_MASK
 0xF8

	)

981 
	#RF_SEQCONFIG2_FROMRXPKT_TOSEQUENCEROFF
 0x00

982 
	#RF_SEQCONFIG2_FROMRXPKT_TOTX_ONFIFOEMPTY
 0x01

	)

983 
	#RF_SEQCONFIG2_FROMRXPKT_TOLPS
 0x02

	)

984 
	#RF_SEQCONFIG2_FROMRXPKT_TOSYNTHESIZERRX
 0x03

	)

985 
	#RF_SEQCONFIG2_FROMRXPKT_TORX
 0x04

	)

990 
	#RF_TIMERRESOL_TIMER1RESOL_MASK
 0xF3

	)

991 
	#RF_TIMERRESOL_TIMER1RESOL_OFF
 0x00

992 
	#RF_TIMERRESOL_TIMER1RESOL_000064_US
 0x04

	)

993 
	#RF_TIMERRESOL_TIMER1RESOL_004100_US
 0x08

	)

994 
	#RF_TIMERRESOL_TIMER1RESOL_262000_US
 0x0C

	)

996 
	#RF_TIMERRESOL_TIMER2RESOL_MASK
 0xFC

	)

997 
	#RF_TIMERRESOL_TIMER2RESOL_OFF
 0x00

998 
	#RF_TIMERRESOL_TIMER2RESOL_000064_US
 0x01

	)

999 
	#RF_TIMERRESOL_TIMER2RESOL_004100_US
 0x02

	)

1000 
	#RF_TIMERRESOL_TIMER2RESOL_262000_US
 0x03

	)

1005 
	#RF_TIMER1COEF_TIMER1COEFFICIENT
 0xF5

1006 

	)

1010 
	#RF_TIMER2COEF_TIMER2COEFFICIENT
 0x20

1011 

	)

1015 
	#RF_IMAGECAL_AUTOIMAGECAL_MASK
 0x7F

	)

1016 
	#RF_IMAGECAL_AUTOIMAGECAL_ON
 0x80

	)

1017 
	#RF_IMAGECAL_AUTOIMAGECAL_OFF
 0x00

1018 

	)

1019 
	#RF_IMAGECAL_IMAGECAL_MASK
 0xBF

	)

1020 
	#RF_IMAGECAL_IMAGECAL_START
 0x40

	)

1022 
	#RF_IMAGECAL_IMAGECAL_RUNNING
 0x20

	)

1023 
	#RF_IMAGECAL_IMAGECAL_DONE
 0x00

1024 

	)

1025 
	#RF_IMAGECAL_TEMPCHANGE_HIGHER
 0x08

	)

1026 
	#RF_IMAGECAL_TEMPCHANGE_LOWER
 0x00

	)

1028 
	#RF_IMAGECAL_TEMPTHRESHOLD_MASK
 0xF9

	)

1029 
	#RF_IMAGECAL_TEMPTHRESHOLD_05
 0x00

	)

1030 
	#RF_IMAGECAL_TEMPTHRESHOLD_10
 0x02

1031 
	#RF_IMAGECAL_TEMPTHRESHOLD_15
 0x04

	)

1032 
	#RF_IMAGECAL_TEMPTHRESHOLD_20
 0x06

	)

1034 
	#RF_IMAGECAL_TEMPMONITOR_MASK
 0xFE

	)

1035 
	#RF_IMAGECAL_TEMPMONITOR_ON
 0x00

1036 
	#RF_IMAGECAL_TEMPMONITOR_OFF
 0x01

	)

1045 
	#RF_LOWBAT_MASK
 0xF7

	)

1046 
	#RF_LOWBAT_ON
 0x08

	)

1047 
	#RF_LOWBAT_OFF
 0x00

1048 

	)

1049 
	#RF_LOWBAT_TRIM_MASK
 0xF8

	)

1050 
	#RF_LOWBAT_TRIM_1695
 0x00

	)

1051 
	#RF_LOWBAT_TRIM_1764
 0x01

	)

1052 
	#RF_LOWBAT_TRIM_1835
 0x02

1053 
	#RF_LOWBAT_TRIM_1905
 0x03

	)

1054 
	#RF_LOWBAT_TRIM_1976
 0x04

	)

1055 
	#RF_LOWBAT_TRIM_2045
 0x05

	)

1056 
	#RF_LOWBAT_TRIM_2116
 0x06

	)

1057 
	#RF_LOWBAT_TRIM_2185
 0x07

	)

1062 
	#RF_IRQFLAGS1_MODEREADY
 0x80

	)

1064 
	#RF_IRQFLAGS1_RXREADY
 0x40

	)

1066 
	#RF_IRQFLAGS1_TXREADY
 0x20

	)

1068 
	#RF_IRQFLAGS1_PLLLOCK
 0x10

	)

1070 
	#RF_IRQFLAGS1_RSSI
 0x08

	)

1072 
	#RF_IRQFLAGS1_TIMEOUT
 0x04

	)

1074 
	#RF_IRQFLAGS1_PREAMBLEDETECT
 0x02

	)

1076 
	#RF_IRQFLAGS1_SYNCADDRESSMATCH
 0x01

	)

1081 
	#RF_IRQFLAGS2_FIFOFULL
 0x80

	)

1083 
	#RF_IRQFLAGS2_FIFOEMPTY
 0x40

	)

1085 
	#RF_IRQFLAGS2_FIFOLEVEL
 0x20

	)

1087 
	#RF_IRQFLAGS2_FIFOOVERRUN
 0x10

	)

1089 
	#RF_IRQFLAGS2_PACKETSENT
 0x08

	)

1091 
	#RF_IRQFLAGS2_PAYLOADREADY
 0x04

	)

1093 
	#RF_IRQFLAGS2_CRCOK
 0x02

	)

1095 
	#RF_IRQFLAGS2_LOWBAT
 0x01

	)

1100 
	#RF_DIOMAPPING1_DIO0_MASK
 0x3F

	)

1101 
	#RF_DIOMAPPING1_DIO0_00
 0x00

1102 
	#RF_DIOMAPPING1_DIO0_01
 0x40

	)

1103 
	#RF_DIOMAPPING1_DIO0_10
 0x80

	)

1104 
	#RF_DIOMAPPING1_DIO0_11
 0xC0

	)

1106 
	#RF_DIOMAPPING1_DIO1_MASK
 0xCF

	)

1107 
	#RF_DIOMAPPING1_DIO1_00
 0x00

1108 
	#RF_DIOMAPPING1_DIO1_01
 0x10

	)

1109 
	#RF_DIOMAPPING1_DIO1_10
 0x20

	)

1110 
	#RF_DIOMAPPING1_DIO1_11
 0x30

	)

1112 
	#RF_DIOMAPPING1_DIO2_MASK
 0xF3

	)

1113 
	#RF_DIOMAPPING1_DIO2_00
 0x00

1114 
	#RF_DIOMAPPING1_DIO2_01
 0x04

	)

1115 
	#RF_DIOMAPPING1_DIO2_10
 0x08

	)

1116 
	#RF_DIOMAPPING1_DIO2_11
 0x0C

	)

1118 
	#RF_DIOMAPPING1_DIO3_MASK
 0xFC

	)

1119 
	#RF_DIOMAPPING1_DIO3_00
 0x00

1120 
	#RF_DIOMAPPING1_DIO3_01
 0x01

	)

1121 
	#RF_DIOMAPPING1_DIO3_10
 0x02

	)

1122 
	#RF_DIOMAPPING1_DIO3_11
 0x03

	)

1127 
	#RF_DIOMAPPING2_DIO4_MASK
 0x3F

	)

1128 
	#RF_DIOMAPPING2_DIO4_00
 0x00

1129 
	#RF_DIOMAPPING2_DIO4_01
 0x40

	)

1130 
	#RF_DIOMAPPING2_DIO4_10
 0x80

	)

1131 
	#RF_DIOMAPPING2_DIO4_11
 0xC0

	)

1133 
	#RF_DIOMAPPING2_DIO5_MASK
 0xCF

	)

1134 
	#RF_DIOMAPPING2_DIO5_00
 0x00

1135 
	#RF_DIOMAPPING2_DIO5_01
 0x10

	)

1136 
	#RF_DIOMAPPING2_DIO5_10
 0x20

	)

1137 
	#RF_DIOMAPPING2_DIO5_11
 0x30

	)

1139 
	#RF_DIOMAPPING2_MAP_MASK
 0xFE

	)

1140 
	#RF_DIOMAPPING2_MAP_PREAMBLEDETECT
 0x01

	)

1141 
	#RF_DIOMAPPING2_MAP_RSSI
 0x00

1142 

	)

1166 
	#RF_PLLHOP_FASTHOP_MASK
 0x7F

	)

1167 
	#RF_PLLHOP_FASTHOP_ON
 0x80

	)

1168 
	#RF_PLLHOP_FASTHOP_OFF
 0x00

1169 

	)

1173 
	#RF_TCXO_TCXOINPUT_MASK
 0xEF

	)

1174 
	#RF_TCXO_TCXOINPUT_ON
 0x10

	)

1175 
	#RF_TCXO_TCXOINPUT_OFF
 0x00

1176 

	)

1180 
	#RF_PADAC_20DBM_MASK
 0xF8

	)

1181 
	#RF_PADAC_20DBM_ON
 0x07

	)

1182 
	#RF_PADAC_20DBM_OFF
 0x04

1183 

	)

1187 
	#RF_PLL_BANDWIDTH_MASK
 0x3F

	)

1188 
	#RF_PLL_BANDWIDTH_75
 0x00

	)

1189 
	#RF_PLL_BANDWIDTH_150
 0x40

	)

1190 
	#RF_PLL_BANDWIDTH_225
 0x80

	)

1191 
	#RF_PLL_BANDWIDTH_300
 0xC0

1192 

	)

1196 
	#RF_PLLLOWPN_BANDWIDTH_MASK
 0x3F

	)

1197 
	#RF_PLLLOWPN_BANDWIDTH_75
 0x00

	)

1198 
	#RF_PLLLOWPN_BANDWIDTH_150
 0x40

	)

1199 
	#RF_PLLLOWPN_BANDWIDTH_225
 0x80

	)

1200 
	#RF_PLLLOWPN_BANDWIDTH_300
 0xC0

1201 

	)

1209 
	#RF_BITRATEFRAC_MASK
 0xF0

	)

1211 
	ssSX1276


1213 
uöt8_t
 
	mRegFifo
;

1215 
uöt8_t
 
	mRegOpMode
;

1216 
uöt8_t
 
	mRegBôøãMsb
;

1217 
uöt8_t
 
	mRegBôøãLsb
;

1218 
uöt8_t
 
	mRegFdevMsb
;

1219 
uöt8_t
 
	mRegFdevLsb
;

1220 
uöt8_t
 
	mRegFrfMsb
;

1221 
uöt8_t
 
	mRegFrfMid
;

1222 
uöt8_t
 
	mRegFrfLsb
;

1224 
uöt8_t
 
	mRegPaC⁄fig
;

1225 
uöt8_t
 
	mRegPaRamp
;

1226 
uöt8_t
 
	mRegO˝
;

1228 
uöt8_t
 
	mRegL«
;

1229 
uöt8_t
 
	mRegRxC⁄fig
;

1230 
uöt8_t
 
	mRegRssiC⁄fig
;

1231 
uöt8_t
 
	mRegRssiCﬁlisi⁄
;

1232 
uöt8_t
 
	mRegRssiThªsh
;

1233 
uöt8_t
 
	mRegRssiVÆue
;

1234 
uöt8_t
 
	mRegRxBw
;

1235 
uöt8_t
 
	mRegAfcBw
;

1236 
uöt8_t
 
	mRegOokPók
;

1237 
uöt8_t
 
	mRegOokFix
;

1238 
uöt8_t
 
	mRegOokAvg
;

1239 
uöt8_t
 
	mRegRes17
;

1240 
uöt8_t
 
	mRegRes18
;

1241 
uöt8_t
 
	mRegRes19
;

1242 
uöt8_t
 
	mRegAfcFei
;

1243 
uöt8_t
 
	mRegAfcMsb
;

1244 
uöt8_t
 
	mRegAfcLsb
;

1245 
uöt8_t
 
	mRegFeiMsb
;

1246 
uöt8_t
 
	mRegFeiLsb
;

1247 
uöt8_t
 
	mRegPªambÀDëe˘
;

1248 
uöt8_t
 
	mRegRxTimeout1
;

1249 
uöt8_t
 
	mRegRxTimeout2
;

1250 
uöt8_t
 
	mRegRxTimeout3
;

1251 
uöt8_t
 
	mRegRxDñay
;

1253 
uöt8_t
 
	mRegOsc
;

1255 
uöt8_t
 
	mRegPªambÀMsb
;

1256 
uöt8_t
 
	mRegPªambÀLsb
;

1257 
uöt8_t
 
	mRegSyncC⁄fig
;

1258 
uöt8_t
 
	mRegSyncVÆue1
;

1259 
uöt8_t
 
	mRegSyncVÆue2
;

1260 
uöt8_t
 
	mRegSyncVÆue3
;

1261 
uöt8_t
 
	mRegSyncVÆue4
;

1262 
uöt8_t
 
	mRegSyncVÆue5
;

1263 
uöt8_t
 
	mRegSyncVÆue6
;

1264 
uöt8_t
 
	mRegSyncVÆue7
;

1265 
uöt8_t
 
	mRegSyncVÆue8
;

1266 
uöt8_t
 
	mRegPackëC⁄fig1
;

1267 
uöt8_t
 
	mRegPackëC⁄fig2
;

1268 
uöt8_t
 
	mRegPaylﬂdLígth
;

1269 
uöt8_t
 
	mRegNodeAdrs
;

1270 
uöt8_t
 
	mRegBrﬂdˇ°Adrs
;

1271 
uöt8_t
 
	mRegFifoThªsh
;

1273 
uöt8_t
 
	mRegSeqC⁄fig1
;

1274 
uöt8_t
 
	mRegSeqC⁄fig2
;

1275 
uöt8_t
 
	mRegTimîResﬁ
;

1276 
uöt8_t
 
	mRegTimî1C€f
;

1277 
uöt8_t
 
	mRegTimî2C€f
;

1279 
uöt8_t
 
	mRegImageCÆ
;

1280 
uöt8_t
 
	mRegTemp
;

1281 
uöt8_t
 
	mRegLowB©
;

1283 
uöt8_t
 
	mRegIrqFœgs1
;

1284 
uöt8_t
 
	mRegIrqFœgs2
;

1286 
uöt8_t
 
	mRegDioM≠pög1
;

1287 
uöt8_t
 
	mRegDioM≠pög2
;

1289 
uöt8_t
 
	mRegVîsi⁄
;

1291 
uöt8_t
 
	mRegAgcRef
;

1292 
uöt8_t
 
	mRegAgcThªsh1
;

1293 
uöt8_t
 
	mRegAgcThªsh2
;

1294 
uöt8_t
 
	mRegAgcThªsh3
;

1296 
uöt8_t
 
	mRegTe°Re£rved47
[0x4B - 0x47];

1298 
uöt8_t
 
	mRegPŒH›
;

1299 
uöt8_t
 
	mRegTe°Re£rved4C
;

1300 
uöt8_t
 
	mRegPaDac
;

1302 
uöt8_t
 
	mRegTe°Re£rved4E
[0x58-0x4E];

1304 
uöt8_t
 
	mRegTcxo
;

1306 
uöt8_t
 
	mRegTe°Re£rved59
;

1308 
uöt8_t
 
	mRegTe°Re£rved5B
;

1310 
uöt8_t
 
	mRegPŒ
;

1312 
uöt8_t
 
	mRegTe°Re£rved5D
;

1314 
uöt8_t
 
	mRegPŒLowPn
;

1316 
uöt8_t
 
	mRegTe°Re£rved5F
[0x6C - 0x5F];

1318 
uöt8_t
 
	mRegF‹mîTemp
;

1320 
uöt8_t
 
	mRegTe°Re£rved6D
[0x70 - 0x6D];

1322 
uöt8_t
 
	mRegBôøãFøc
;

1323 }
	ttSX1276
;

1325 
tSX1276
* 
SX1276
;

1330 
SX1276FskInô
( );

1335 
SX1276FskSëDeÁu…s
( );

1340 
SX1276FskRe£t
( );

1347 
SX1276FskSëLoRaOn
–
boﬁ
 
íabÀ
 );

1354 
SX1276FskSëOpMode
–
uöt8_t
 
›Mode
 );

1361 
uöt8_t
 
SX1276FskGëOpMode
( );

1368 
öt32_t
 
SX1276FskRódFei
( );

1375 
öt32_t
 
SX1276FskRódAfc
( );

1382 
uöt8_t
 
SX1276FskRódRxGaö
( );

1389 
SX1276FskRódRssi
( );

1396 
uöt8_t
 
SX1276FskGëPackëRxGaö
( );

1403 
SX1276FskGëPackëRssi
( );

1410 
uöt32_t
 
SX1276FskGëPackëAfc
( );

1415 
SX1276FskSèπRx
( );

1423 
SX1276FskGëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 );

1432 
SX1276FskSëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 );

1441 
uöt8_t
 
SX1276FskGëRFSèã
( );

1448 
SX1276FskSëRFSèã
–
uöt8_t
 
°©e
 );

1458 
uöt32_t
 
SX1276FskPro˚ss
( );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-FskMisc.c

29 
	~<m©h.h
>

31 
	~"∂©f‹m.h
"

33 #i‡
deföed
–
USE_SX1276_RADIO
 )

35 
	~"sx1276-HÆ.h
"

36 
	~"sx1276.h
"

38 
	~"sx1276-Fsk.h
"

39 
	~"sx1276-FskMisc.h
"

41 
tFskSëtögs
 
FskSëtögs
;

43 
	$SX1276FskSëRFFªquícy
–
uöt32_t
 
‰eq
 )

45 
FskSëtögs
.
RFFªquícy
 = 
‰eq
;

47 
‰eq
 = ( 
uöt32_t
 )––)‰eq / ( )
FREQ_STEP
 );

48 
SX1276
->
RegFrfMsb
 = ( 
uöt8_t
 )––
‰eq
 >> 16 ) & 0xFF );

49 
SX1276
->
RegFrfMid
 = ( 
uöt8_t
 )––
‰eq
 >> 8 ) & 0xFF );

50 
SX1276
->
RegFrfLsb
 = ( 
uöt8_t
 )–
‰eq
 & 0xFF );

51 
	`SX1276WrôeBuf„r
–
REG_FRFMSB
, &
SX1276
->
RegFrfMsb
, 3 );

53 
	`SX1276Ród
–
REG_PACONFIG
, &
SX1276
->
RegPaC⁄fig
 );

55 if–
FskSëtögs
.
RFFªquícy
 > 860000000 )

57 
SX1276
->
RegPaC⁄fig
 = ( SX1276->RegPaC⁄fig & 
RF_PACONFIG_PASELECT_MASK
 ) | 
RF_PACONFIG_PASELECT_RFO
;

58 
	`SX1276Wrôe
–
REG_PACONFIG
, 
SX1276
->
RegPaC⁄fig
 );

60 if–
	`SX1276FskGëPa20dBm
–Ë=
åue
 )

62 
	`SX1276FskSëPa20dBm
–
Ál£
 );

67 
SX1276
->
RegPaC⁄fig
 = ( SX1276->RegPaC⁄fig & 
RF_PACONFIG_PASELECT_MASK
 ) | 
RF_PACONFIG_PASELECT_PABOOST
;

68 
	`SX1276Wrôe
–
REG_PACONFIG
, 
SX1276
->
RegPaC⁄fig
 );

70 
	}
}

72 
uöt32_t
 
	$SX1276FskGëRFFªquícy
( )

74 
	`SX1276RódBuf„r
–
REG_FRFMSB
, &
SX1276
->
RegFrfMsb
, 3 );

75 
FskSëtögs
.
RFFªquícy
 = ( ( 
uöt32_t
 )
SX1276
->
RegFrfMsb
 << 16 ) | ( ( uöt32_à)SX1276->
RegFrfMid
 << 8 ) | ( ( uöt32_à)SX1276->
RegFrfLsb
 );

76 
FskSëtögs
.
RFFªquícy
 = ( 
uöt32_t
 )––)FskSëtögs.RFFªquícy * ( )
FREQ_STEP
 );

78  
FskSëtögs
.
RFFªquícy
;

79 
	}
}

81 
	$SX1276FskRxCÆibøã
( )

84 
uöt8_t
 
ªgPaC⁄figInôVÆ
;

85 
uöt32_t
 
öôülFªq
;

88 
	`SX1276Ród
–
REG_PACONFIG
, &
ªgPaC⁄figInôVÆ
 );

89 
öôülFªq
 = 
	`SX1276FskGëRFFªquícy
( );

92 
SX1276
->
RegPaC⁄fig
 = 0x00;

93 
	`SX1276Wrôe
–
REG_PACONFIG
, 
SX1276
->
RegPaC⁄fig
 );

96 
	`SX1276FskSëRFFªquícy
( 860000000 );

99 
	`SX1276Ród
–
REG_IMAGECAL
, &
SX1276
->
RegImageCÆ
 );

100 
SX1276
->
RegImageCÆ
 = ( SX1276->RegImageCÆ & 
RF_IMAGECAL_IMAGECAL_MASK
 ) | 
RF_IMAGECAL_IMAGECAL_START
;

101 
	`SX1276Wrôe
–
REG_IMAGECAL
, 
SX1276
->
RegImageCÆ
 );

103 
	`SX1276Ród
–
REG_IMAGECAL
, &
SX1276
->
RegImageCÆ
 );

105  ( 
SX1276
->
RegImageCÆ
 & 
RF_IMAGECAL_IMAGECAL_RUNNING
 ) == RF_IMAGECAL_IMAGECAL_RUNNING )

107 
	`SX1276Ród
–
REG_IMAGECAL
, &
SX1276
->
RegImageCÆ
 );

111 
SX1276
->
RegPaC⁄fig
 = 
ªgPaC⁄figInôVÆ
;

112 
	`SX1276Wrôe
–
REG_PACONFIG
, 
SX1276
->
RegPaC⁄fig
 );

114 
	`SX1276FskSëRFFªquícy
–
öôülFªq
 );

116 
	}
}

118 
	$SX1276FskSëBôøã
–
uöt32_t
 
bôøã
 )

120 
FskSëtögs
.
Bôøã
 = 
bôøã
;

122 
bôøã
 = ( 
uöt16_t
 )––)
XTAL_FREQ
 / ( )bitrate );

123 
SX1276
->
RegBôøãMsb
 = ( 
uöt8_t
 )–
bôøã
 >> 8 );

124 
SX1276
->
RegBôøãLsb
 = ( 
uöt8_t
 )–
bôøã
 & 0xFF );

125 
	`SX1276WrôeBuf„r
–
REG_BITRATEMSB
, &
SX1276
->
RegBôøãMsb
, 2 );

126 
	}
}

128 
uöt32_t
 
	$SX1276FskGëBôøã
( )

130 
	`SX1276RódBuf„r
–
REG_BITRATEMSB
, &
SX1276
->
RegBôøãMsb
, 2 );

131 
FskSëtögs
.
Bôøã
 = ( ( ( 
uöt32_t
 )
SX1276
->
RegBôøãMsb
 << 8 ) | ( ( uöt32_à)SX1276->
RegBôøãLsb
 ) );

132 
FskSëtögs
.
Bôøã
 = ( 
uöt16_t
 )––)
XTAL_FREQ
 / ( )FskSettings.Bitrate );

134  
FskSëtögs
.
Bôøã
;

135 
	}
}

137 
	$SX1276FskSëFdev
–
uöt32_t
 
fdev
 )

139 
FskSëtögs
.
Fdev
 = 
fdev
;

141 
	`SX1276Ród
–
REG_FDEVMSB
, &
SX1276
->
RegFdevMsb
 );

143 
fdev
 = ( 
uöt16_t
 )––)fdev / ( )
FREQ_STEP
 );

144 
SX1276
->
RegFdevMsb
 = ( ( SX1276->RegFdevMsb & 
RF_FDEVMSB_FDEV_MASK
 ) | ( ( ( 
uöt8_t
 )–
fdev
 >> 8 ) ) & ~RF_FDEVMSB_FDEV_MASK ) );

145 
SX1276
->
RegFdevLsb
 = ( 
uöt8_t
 )–
fdev
 & 0xFF );

146 
	`SX1276WrôeBuf„r
–
REG_FDEVMSB
, &
SX1276
->
RegFdevMsb
, 2 );

147 
	}
}

149 
uöt32_t
 
	$SX1276FskGëFdev
( )

151 
	`SX1276RódBuf„r
–
REG_FDEVMSB
, &
SX1276
->
RegFdevMsb
, 2 );

152 
FskSëtögs
.
Fdev
 = ( ( ( 
uöt32_t
 )––
SX1276
->
RegFdevMsb
 << 8 ) & ~
RF_FDEVMSB_FDEV_MASK
 ) ) | ( ( uöt32_à)SX1276->
RegFdevLsb
 ) );

153 
FskSëtögs
.
Fdev
 = ( 
uöt16_t
 )––)FskSëtögs.Fdev * ( )
FREQ_STEP
 );

155  
FskSëtögs
.
Fdev
;

156 
	}
}

158 
	$SX1276FskSëRFPowî
–
öt8_t
 
powî
 )

160 
	`SX1276Ród
–
REG_PACONFIG
, &
SX1276
->
RegPaC⁄fig
 );

161 
	`SX1276Ród
–
REG_PADAC
, &
SX1276
->
RegPaDac
 );

163 if––
SX1276
->
RegPaC⁄fig
 & 
RF_PACONFIG_PASELECT_PABOOST
 ) == RF_PACONFIG_PASELECT_PABOOST )

165 if––
SX1276
->
RegPaDac
 & 0x87 ) == 0x87 )

167 if–
powî
 < 5 )

169 
powî
 = 5;

171 if–
powî
 > 20 )

173 
powî
 = 20;

175 
SX1276
->
RegPaC⁄fig
 = ( SX1276->RegPaC⁄fig & 
RF_PACONFIG_MAX_POWER_MASK
 ) | 0x70;

176 
SX1276
->
RegPaC⁄fig
 = ( SX1276->RegPaC⁄fig & 
RF_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 - 5 ) & 0x0F );

180 if–
powî
 < 2 )

182 
powî
 = 2;

184 if–
powî
 > 17 )

186 
powî
 = 17;

188 
SX1276
->
RegPaC⁄fig
 = ( SX1276->RegPaC⁄fig & 
RF_PACONFIG_MAX_POWER_MASK
 ) | 0x70;

189 
SX1276
->
RegPaC⁄fig
 = ( SX1276->RegPaC⁄fig & 
RF_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 - 2 ) & 0x0F );

194 if–
powî
 < -1 )

196 
powî
 = -1;

198 if–
powî
 > 14 )

200 
powî
 = 14;

202 
SX1276
->
RegPaC⁄fig
 = ( SX1276->RegPaC⁄fig & 
RF_PACONFIG_MAX_POWER_MASK
 ) | 0x70;

203 
SX1276
->
RegPaC⁄fig
 = ( SX1276->RegPaC⁄fig & 
RF_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 + 1 ) & 0x0F );

205 
	`SX1276Wrôe
–
REG_PACONFIG
, 
SX1276
->
RegPaC⁄fig
 );

206 
FskSëtögs
.
Powî
 = 
powî
;

207 
	}
}

209 
öt8_t
 
	$SX1276FskGëRFPowî
( )

211 
	`SX1276Ród
–
REG_PACONFIG
, &
SX1276
->
RegPaC⁄fig
 );

212 
	`SX1276Ród
–
REG_PADAC
, &
SX1276
->
RegPaDac
 );

214 if––
SX1276
->
RegPaC⁄fig
 & 
RF_PACONFIG_PASELECT_PABOOST
 ) == RF_PACONFIG_PASELECT_PABOOST )

216 if––
SX1276
->
RegPaDac
 & 0x07 ) == 0x07 )

218 
FskSëtögs
.
Powî
 = 5 + ( 
SX1276
->
RegPaC⁄fig
 & 
RF_PACONFIG_OUTPUTPOWER_MASK
 );

222 
FskSëtögs
.
Powî
 = 2 + ( 
SX1276
->
RegPaC⁄fig
 & 
RF_PACONFIG_OUTPUTPOWER_MASK
 );

227 
FskSëtögs
.
Powî
 = -1 + ( 
SX1276
->
RegPaC⁄fig
 & 
RF_PACONFIG_OUTPUTPOWER_MASK
 );

229  
FskSëtögs
.
Powî
;

230 
	}
}

239 
uöt32_t
 
	$SX1276FskCompuãRxBw
–
uöt8_t
 
m™tis£
, uöt8_à
exp⁄ít
 )

242 if––
SX1276
->
RegOpMode
 & 
RF_OPMODE_MODULATIONTYPE_FSK
 ) == RF_OPMODE_MODULATIONTYPE_FSK )

244  ( 
uöt32_t
 )––)
XTAL_FREQ
 / ( 
m™tis£
 * ( )
	`pow
–2, 
exp⁄ít
 + 2 ) ) );

248  ( 
uöt32_t
 )––)
XTAL_FREQ
 / ( 
m™tis£
 * ( )
	`pow
–2, 
exp⁄ít
 + 3 ) ) );

250 
	}
}

259 
	$SX1276FskCompuãRxBwM™tExp
–
uöt32_t
 
rxBwVÆue
, 
uöt8_t
* 
m™tis£
, uöt8_t* 
exp⁄ít
 )

261 
uöt8_t
 
tmpExp
 = 0;

262 
uöt8_t
 
tmpM™t
 = 0;

264 
tmpRxBw
 = 0;

265 
rxBwMö
 = 10e6;

267  
tmpExp
 = 0;ÅmpExp < 8;ÅmpExp++ )

269  
tmpM™t
 = 16;ÅmpMant <= 24;ÅmpMant += 4 )

271 if––
SX1276
->
RegOpMode
 & 
RF_OPMODE_MODULATIONTYPE_FSK
 ) == RF_OPMODE_MODULATIONTYPE_FSK )

273 
tmpRxBw
 = ( )
XTAL_FREQ
 / ( 
tmpM™t
 * ( )
	`pow
–2, 
tmpExp
 + 2 ) );

277 
tmpRxBw
 = ( )
XTAL_FREQ
 / ( 
tmpM™t
 * ( )
	`pow
–2, 
tmpExp
 + 3 ) );

279 if–
	`Ábs
–
tmpRxBw
 - 
rxBwVÆue
 ) < 
rxBwMö
 )

281 
rxBwMö
 = 
	`Ábs
–
tmpRxBw
 - 
rxBwVÆue
 );

282 *
m™tis£
 = 
tmpM™t
;

283 *
exp⁄ít
 = 
tmpExp
;

287 
	}
}

289 
	$SX1276FskSëDccBw
–
uöt8_t
* 
ªg
, 
uöt32_t
 
dccVÆue
, uöt32_à
rxBwVÆue
 )

291 
uöt8_t
 
m™tis£
 = 0;

292 
uöt8_t
 
exp⁄ít
 = 0;

294 if–
ªg
 =&
SX1276
->
RegRxBw
 )

296 *
ªg
 = ( 
uöt8_t
 )
dccVÆue
 & 0x60;

300 *
ªg
 = 0;

303 
	`SX1276FskCompuãRxBwM™tExp
–
rxBwVÆue
, &
m™tis£
, &
exp⁄ít
 );

305  
m™tis£
 )

308 *
ªg
 |–
uöt8_t
 )–0x00 | ( 
exp⁄ít
 & 0x07 ) );

311 *
ªg
 |–
uöt8_t
 )–0x08 | ( 
exp⁄ít
 & 0x07 ) );

314 *
ªg
 |–
uöt8_t
 )–0x10 | ( 
exp⁄ít
 & 0x07 ) );

321 if–
ªg
 =&
SX1276
->
RegRxBw
 )

323 
	`SX1276Wrôe
–
REG_RXBW
, *
ªg
 );

324 
FskSëtögs
.
RxBw
 = 
rxBwVÆue
;

328 
	`SX1276Wrôe
–
REG_AFCBW
, *
ªg
 );

329 
FskSëtögs
.
RxBwAfc
 = 
rxBwVÆue
;

331 
	}
}

333 
uöt32_t
 
	$SX1276FskGëBw
–
uöt8_t
* 
ªg
 )

335 
uöt32_t
 
rxBwVÆue
 = 0;

336 
uöt8_t
 
m™tis£
 = 0;

337  ( *
ªg
 & 0x18 ) >> 3 )

340 
m™tis£
 = 16;

343 
m™tis£
 = 20;

346 
m™tis£
 = 24;

351 
rxBwVÆue
 = 
	`SX1276FskCompuãRxBw
–
m™tis£
, ( 
uöt8_t
 )*
ªg
 & 0x07 );

352 if–
ªg
 =&
SX1276
->
RegRxBw
 )

354  
FskSëtögs
.
RxBw
 = 
rxBwVÆue
;

358  
FskSëtögs
.
RxBwAfc
 = 
rxBwVÆue
;

360 
	}
}

362 
	$SX1276FskSëPackëCrcOn
–
boﬁ
 
íabÀ
 )

364 
	`SX1276Ród
–
REG_PACKETCONFIG1
, &
SX1276
->
RegPackëC⁄fig1
 );

365 
SX1276
->
RegPackëC⁄fig1
 = ( SX1276->RegPackëC⁄fig1 & 
RF_PACKETCONFIG1_CRC_MASK
 ) | ( 
íabÀ
 << 4 );

366 
	`SX1276Wrôe
–
REG_PACKETCONFIG1
, 
SX1276
->
RegPackëC⁄fig1
 );

367 
FskSëtögs
.
CrcOn
 = 
íabÀ
;

368 
	}
}

370 
boﬁ
 
	$SX1276FskGëPackëCrcOn
( )

372 
	`SX1276Ród
–
REG_PACKETCONFIG1
, &
SX1276
->
RegPackëC⁄fig1
 );

373 
FskSëtögs
.
CrcOn
 = ( 
SX1276
->
RegPackëC⁄fig1
 & 
RF_PACKETCONFIG1_CRC_ON
 ) >> 4;

374  
FskSëtögs
.
CrcOn
;

375 
	}
}

377 
	$SX1276FskSëAfcOn
–
boﬁ
 
íabÀ
 )

379 
	`SX1276Ród
–
REG_RXCONFIG
, &
SX1276
->
RegRxC⁄fig
 );

380 
SX1276
->
RegRxC⁄fig
 = ( SX1276->RegRxC⁄fig & 
RF_RXCONFIG_AFCAUTO_MASK
 ) | ( 
íabÀ
 << 4 );

381 
	`SX1276Wrôe
–
REG_RXCONFIG
, 
SX1276
->
RegRxC⁄fig
 );

382 
FskSëtögs
.
AfcOn
 = 
íabÀ
;

383 
	}
}

385 
boﬁ
 
	$SX1276FskGëAfcOn
( )

387 
	`SX1276Ród
–
REG_RXCONFIG
, &
SX1276
->
RegRxC⁄fig
 );

388 
FskSëtögs
.
AfcOn
 = ( 
SX1276
->
RegRxC⁄fig
 & 
RF_RXCONFIG_AFCAUTO_ON
 ) >> 4;

389  
FskSëtögs
.
AfcOn
;

390 
	}
}

392 
	$SX1276FskSëPaylﬂdLígth
–
uöt8_t
 
vÆue
 )

394 
SX1276
->
RegPaylﬂdLígth
 = 
vÆue
;

395 
	`SX1276Wrôe
–
REG_PAYLOADLENGTH
, 
SX1276
->
RegPaylﬂdLígth
 );

396 
FskSëtögs
.
PaylﬂdLígth
 = 
vÆue
;

397 
	}
}

399 
uöt8_t
 
	$SX1276FskGëPaylﬂdLígth
( )

401 
	`SX1276Ród
–
REG_PAYLOADLENGTH
, &
SX1276
->
RegPaylﬂdLígth
 );

402 
FskSëtögs
.
PaylﬂdLígth
 = 
SX1276
->
RegPaylﬂdLígth
;

403  
FskSëtögs
.
PaylﬂdLígth
;

404 
	}
}

406 
	$SX1276FskSëPa20dBm
–
boﬁ
 
íÆe
 )

408 
	`SX1276Ród
–
REG_PADAC
, &
SX1276
->
RegPaDac
 );

409 
	`SX1276Ród
–
REG_PACONFIG
, &
SX1276
->
RegPaC⁄fig
 );

411 if––
SX1276
->
RegPaC⁄fig
 & 
RF_PACONFIG_PASELECT_PABOOST
 ) == RF_PACONFIG_PASELECT_PABOOST )

413 if–
íÆe
 =
åue
 )

415 
SX1276
->
RegPaDac
 = 0x87;

420 
SX1276
->
RegPaDac
 = 0x84;

422 
	`SX1276Wrôe
–
REG_PADAC
, 
SX1276
->
RegPaDac
 );

423 
	}
}

425 
boﬁ
 
	$SX1276FskGëPa20dBm
( )

427 
	`SX1276Ród
–
REG_PADAC
, &
SX1276
->
RegPaDac
 );

429  ( ( 
SX1276
->
RegPaDac
 & 0x07 ) =0x07 ) ? 
åue
 : 
Ál£
;

430 
	}
}

432 
	$SX1276FskSëPaRamp
–
uöt8_t
 
vÆue
 )

434 
	`SX1276Ród
–
REG_PARAMP
, &
SX1276
->
RegPaRamp
 );

435 
SX1276
->
RegPaRamp
 = ( SX1276->RegPaRam∞& 
RF_PARAMP_MASK
 ) | ( 
vÆue
 & ~RF_PARAMP_MASK );

436 
	`SX1276Wrôe
–
REG_PARAMP
, 
SX1276
->
RegPaRamp
 );

437 
	}
}

439 
uöt8_t
 
	$SX1276FskGëPaRamp
( )

441 
	`SX1276Ród
–
REG_PARAMP
, &
SX1276
->
RegPaRamp
 );

442  
SX1276
->
RegPaRamp
 & ~
RF_PARAMP_MASK
;

443 
	}
}

445 
	$SX1276FskSëRssiOff£t
–
öt8_t
 
off£t
 )

447 
	`SX1276Ród
–
REG_RSSICONFIG
, &
SX1276
->
RegRssiC⁄fig
 );

448 if–
off£t
 < 0 )

450 
off£t
 = ( ~offset & 0x1F );

451 
off£t
 += 1;

452 
off£t
 = -offset;

454 
SX1276
->
RegRssiC⁄fig
 |–
uöt8_t
 )––
off£t
 & 0x1F ) << 3 );

455 
	`SX1276Wrôe
–
REG_RSSICONFIG
, 
SX1276
->
RegRssiC⁄fig
 );

456 
	}
}

458 
öt8_t
 
	$SX1276FskGëRssiOff£t
( )

460 
	`SX1276Ród
–
REG_RSSICONFIG
, &
SX1276
->
RegRssiC⁄fig
 );

461 
öt8_t
 
off£t
 = 
SX1276
->
RegRssiC⁄fig
 >> 3;

462 if––
off£t
 & 0x10 ) == 0x10 )

464 
off£t
 = ( ~offset & 0x1F );

465 
off£t
 += 1;

466 
off£t
 = -offset;

468  
off£t
;

469 
	}
}

471 
öt8_t
 
	$SX1276FskGëRawTemp
( )

473 
öt8_t
 
ãmp
 = 0;

474 
uöt8_t
 
ªgVÆue
 = 0;

476 
	`SX1276Ród
–
REG_TEMP
, &
SX1276
->
RegTemp
 );

478 
ãmp
 = 
ªgVÆue
 & 0x7F;

480 if––
ªgVÆue
 & 0x80 ) == 0x80 )

482 
ãmp
 *= -1;

484  
ãmp
;

485 
	}
}

487 
öt8_t
 
	$SX1276FskCÆibª©eTemp
–
öt8_t
 
a˘uÆTemp
 )

489  
a˘uÆTemp
 - 
	`SX1276FskGëRawTemp
( );

490 
	}
}

492 
öt8_t
 
	$SX1276FskGëTemp
–
öt8_t
 
com≥nßti⁄Fa˘‹
 )

494  
	`SX1276FskGëRawTemp
–Ë+ 
com≥nßti⁄Fa˘‹
;

495 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-FskMisc.h

29 #i‚de‡
__SX1276_FSK_MISC_H__


30 
	#__SX1276_FSK_MISC_H__


	)

37 
SX1276FskSëRFFªquícy
–
uöt32_t
 
‰eq
 );

44 
uöt32_t
 
SX1276FskGëRFFªquícy
( );

51 
SX1276FskRxCÆibøã
( );

58 
SX1276FskSëBôøã
–
uöt32_t
 
bôøã
 );

65 
uöt32_t
 
SX1276FskGëBôøã
( );

72 
SX1276FskSëFdev
–
uöt32_t
 
fdev
 );

79 
uöt32_t
 
SX1276FskGëFdev
( );

86 
SX1276FskSëRFPowî
–
öt8_t
 
powî
 );

93 
öt8_t
 
SX1276FskGëRFPowî
( );

105 
SX1276FskSëDccBw
–
uöt8_t
* 
ªg
, 
uöt32_t
 
dccVÆue
, uöt32_à
rxBwVÆue
 );

114 
uöt32_t
 
SX1276FskGëBw
–
uöt8_t
* 
ªg
 );

121 
SX1276FskSëPackëCrcOn
–
boﬁ
 
íabÀ
 );

128 
boﬁ
 
SX1276FskGëPackëCrcOn
( );

135 
SX1276FskSëAfcOn
–
boﬁ
 
íabÀ
 );

142 
boﬁ
 
SX1276FskGëAfcOn
( );

149 
SX1276FskSëPaylﬂdLígth
–
uöt8_t
 
vÆue
 );

156 
uöt8_t
 
SX1276FskGëPaylﬂdLígth
( );

163 
SX1276FskSëPa20dBm
–
boﬁ
 
íÆe
 );

170 
boﬁ
 
SX1276FskGëPa20dBm
( );

177 
SX1276FskSëPaRamp
–
uöt8_t
 
vÆue
 );

184 
uöt8_t
 
SX1276FskGëPaRamp
( );

191 
SX1276FskSëRssiOff£t
–
öt8_t
 
off£t
 );

198 
öt8_t
 
SX1276FskGëRssiOff£t
( );

205 
SX1276FskSëPªambÀSize
–
uöt16_t
 
size
 );

211 
öt8_t
 
SX1276FskGëRawTemp
( );

218 
öt8_t
 
SX1276FskCÆibª©eTemp
–öt8_à
a˘uÆTemp
 );

225 
öt8_t
 
SX1276FskGëTemp
–öt8_à
com≥nßti⁄Fa˘‹
 );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-Hal.h

21 #i‚de‡
__SX1276_HAL_H__


22 
	#__SX1276_HAL_H__


	)

24 
	~"i€.h
"

29 
	#DIO0
 
	`SX1276RódDio0
–)

	)

30 
	#DIO1
 
	`SX1276RódDio1
–)

	)

31 
	#DIO2
 
	`SX1276RódDio2
–)

	)

32 
	#DIO3
 
	`SX1276RódDio3
–)

	)

33 
	#DIO4
 
	`SX1276RódDio4
–)

	)

34 
	#DIO5
 
	`SX1276RódDio5
–)

	)

37 
	#RXTX
–
txE«bÀ
 ) 
	`SX1276WrôeRxTx
–txE«bÀ );

	)

39 
	#GET_TICK_COUNT
–Ë–
TickCou¡î
 )

	)

40 
	#TICK_RATE_MS
–
ms
 ) ( m†)

	)

44 
	mRADIO_RESET_OFF
,

45 
	mRADIO_RESET_ON
,

46 }
	ttRadioRe£tSèã
;

51 
SX1276InôIo
( );

58 
SX1276SëRe£t
–
uöt8_t
 
°©e
 );

66 
SX1276Wrôe
–
uöt8_t
 
addr
, uöt8_à
d©a
 );

74 
SX1276Ród
–
uöt8_t
 
addr
, uöt8_à*
d©a
 );

83 
SX1276WrôeBuf„r
–
uöt8_t
 
addr
, uöt8_à*
buf„r
, uöt8_à
size
 );

92 
SX1276RódBuf„r
–
uöt8_t
 
addr
, uöt8_à*
buf„r
, uöt8_à
size
 );

100 
SX1276WrôeFifo
–
uöt8_t
 *
buf„r
, uöt8_à
size
 );

108 
SX1276RódFifo
–
uöt8_t
 *
buf„r
, uöt8_à
size
 );

115 
ölöe
 
uöt8_t
 
SX1276RódDio0
( );

122 
ölöe
 
uöt8_t
 
SX1276RódDio1
( );

129 
ölöe
 
uöt8_t
 
SX1276RódDio2
( );

136 
ölöe
 
uöt8_t
 
SX1276RódDio3
( );

143 
ölöe
 
uöt8_t
 
SX1276RódDio4
( );

150 
ölöe
 
uöt8_t
 
SX1276RódDio5
( );

159 
ölöe
 
SX1276WrôeRxTx
–
uöt8_t
 
txE«bÀ
 );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-LoRa.c

21 
	~<°rög.h
>

23 
	~"∂©f‹m.h
"

25 #i‡
deföed
–
USE_SX1276_RADIO
 )

27 
	~"ødio.h
"

29 
	~"sx1276-HÆ.h
"

30 
	~"sx1276.h
"

32 
	~"sx1276-LoRaMisc.h
"

33 
	~"sx1276-LoRa.h
"

38 
	#RSSI_OFFSET_LF
 -155.0

	)

39 
	#RSSI_OFFSET_HF
 -150.0

	)

41 
	#NOISE_ABSOLUTE_ZERO
 -174.0

	)

43 
	#NOISE_FIGURE_LF
 4.0

	)

44 
	#NOISE_FIGURE_HF
 6.0

	)

50 c⁄° 
	gSig«lBwLog
[] =

64 c⁄° 
	gRssiOff£tLF
[] =

78 c⁄° 
	gRssiOff£tHF
[] =

95 c⁄° 
öt32_t
 
	gH›pögFªquícõs
[] =

151 
tLoRaSëtögs
 
	gLoRaSëtögs
 =

159 
åue
,

160 
Ál£
,

172 
tSX1276LR
* 
	gSX1276LR
;

177 
uöt8_t
 
	gRFBuf„r
[
RF_BUFFER_SIZE
];

182 
uöt8_t
 
	gRFLRSèã
 = 
RFLR_STATE_IDLE
;

187 
uöt16_t
 
	gRxPackëSize
 = 0;

188 
öt8_t
 
	gRxPackëSƒE°im©e
;

189 
	gRxPackëRssiVÆue
;

190 
uöt8_t
 
	gRxGaö
 = 1;

191 
uöt32_t
 
	gRxTimeoutTimî
 = 0;

195 
uöt32_t
 
	gPackëTimeout
;

200 
uöt16_t
 
	gTxPackëSize
 = 0;

202 
	$SX1276LoRaInô
( )

204 
RFLRSèã
 = 
RFLR_STATE_IDLE
;

206 
	`SX1276LoRaSëDeÁu…s
( );

208 
	`SX1276RódBuf„r
–
REG_LR_OPMODE
, 
SX1276Regs
 + 1, 0x70 - 1 );

210 
SX1276LR
->
RegL«
 = 
RFLR_LNA_GAIN_G1
;

212 
	`SX1276WrôeBuf„r
–
REG_LR_OPMODE
, 
SX1276Regs
 + 1, 0x70 - 1 );

215 
	`SX1276LoRaSëRFFªquícy
–
LoRaSëtögs
.
RFFªquícy
 );

216 
	`SX1276LoRaSëPa20dBm
–
Ál£
 );

217 
	`SX1276LoRaSëRFPowî
–
LoRaSëtögs
.
Powî
 );

218 
	`SX1276LoRaSëS¥ódögFa˘‹
–
LoRaSëtögs
.
S¥ódögFa˘‹
 );

219 
	`SX1276LoRaSëEº‹Codög
–
LoRaSëtögs
.
Eº‹Codög
 );

220 
	`SX1276LoRaSëPackëCrcOn
–
LoRaSëtögs
.
CrcOn
 );

221 
	`SX1276LoRaSëSig«lB™dwidth
–
LoRaSëtögs
.
Sig«lBw
 );

223 
	`SX1276LoRaSëIm∂icôHódîOn
–
LoRaSëtögs
.
Im∂icôHódîOn
 );

224 
	`SX1276LoRaSëSymbTimeout
( 0x3FF );

225 
	`SX1276LoRaSëPaylﬂdLígth
–
LoRaSëtögs
.
PaylﬂdLígth
 );

226 
	`SX1276LoRaSëLowD©¨©eO±imize
–
åue
 );

228 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

229 
	}
}

231 
	$SX1276LoRaSëDeÁu…s
( )

235 
	`SX1276Ród
–
REG_LR_VERSION
, &
SX1276LR
->
RegVîsi⁄
 );

236 
	}
}

238 
	$SX1276LoRaRe£t
( )

240 
	`SX1276SëRe£t
–
RADIO_RESET_ON
 );

243 
uöt32_t
 
°¨tTick
 = 
	`GET_TICK_COUNT
( );

244  ( 
	`GET_TICK_COUNT
–Ë- 
°¨tTick
 ) < 
	`TICK_RATE_MS
( 1 ) );

246 
	`SX1276SëRe£t
–
RADIO_RESET_OFF
 );

249 
°¨tTick
 = 
	`GET_TICK_COUNT
( );

250  ( 
	`GET_TICK_COUNT
–Ë- 
°¨tTick
 ) < 
	`TICK_RATE_MS
( 6 ) );

251 
	}
}

253 
	$SX1276LoRaSëOpMode
–
uöt8_t
 
›Mode
 )

255 
uöt8_t
 
›ModePªv
 = 
RFLR_OPMODE_STANDBY
;

256 
boﬁ
 
™ã¬aSwôchTxOnPªv
 = 
åue
;

257 
boﬁ
 
™ã¬aSwôchTxOn
 = 
Ál£
;

259 
›ModePªv
 = 
SX1276LR
->
RegOpMode
 & ~
RFLR_OPMODE_MASK
;

261 if–
›Mode
 !
›ModePªv
 )

263 if–
›Mode
 =
RFLR_OPMODE_TRANSMITTER
 )

265 
™ã¬aSwôchTxOn
 = 
åue
;

269 
™ã¬aSwôchTxOn
 = 
Ál£
;

271 if–
™ã¬aSwôchTxOn
 !
™ã¬aSwôchTxOnPªv
 )

273 
™ã¬aSwôchTxOnPªv
 = 
™ã¬aSwôchTxOn
;

274 
	`RXTX
–
™ã¬aSwôchTxOn
 );

276 
SX1276LR
->
RegOpMode
 = ( SX1276LR->RegOpModê& 
RFLR_OPMODE_MASK
 ) | 
›Mode
;

278 
	`SX1276Wrôe
–
REG_LR_OPMODE
, 
SX1276LR
->
RegOpMode
 );

280 
	}
}

282 
uöt8_t
 
	$SX1276LoRaGëOpMode
( )

284 
	`SX1276Ród
–
REG_LR_OPMODE
, &
SX1276LR
->
RegOpMode
 );

286  
SX1276LR
->
RegOpMode
 & ~
RFLR_OPMODE_MASK
;

287 
	}
}

289 
uöt8_t
 
	$SX1276LoRaRódRxGaö
( )

291 
	`SX1276Ród
–
REG_LR_LNA
, &
SX1276LR
->
RegL«
 );

292 –
SX1276LR
->
RegL«
 >> 5 ) & 0x07;

293 
	}
}

295 
	$SX1276LoRaRódRssi
( )

298 
	`SX1276Ród
–
REG_LR_RSSIVALUE
, &
SX1276LR
->
RegRssiVÆue
 );

300 if–
LoRaSëtögs
.
RFFªquícy
 < 860000000 )

302  
RssiOff£tLF
[
LoRaSëtögs
.
Sig«lBw
] + ( )
SX1276LR
->
RegRssiVÆue
;

306  
RssiOff£tHF
[
LoRaSëtögs
.
Sig«lBw
] + ( )
SX1276LR
->
RegRssiVÆue
;

308 
	}
}

310 
uöt8_t
 
	$SX1276LoRaGëPackëRxGaö
( )

312  
RxGaö
;

313 
	}
}

315 
öt8_t
 
	$SX1276LoRaGëPackëSƒ
( )

317  
RxPackëSƒE°im©e
;

318 
	}
}

320 
	$SX1276LoRaGëPackëRssi
( )

322  
RxPackëRssiVÆue
;

323 
	}
}

325 
	$SX1276LoRaSèπRx
( )

327 
	`SX1276LoRaSëRFSèã
–
RFLR_STATE_RX_INIT
 );

328 
	}
}

330 
	$SX1276LoRaGëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 )

332 *
size
 = 
RxPackëSize
;

333 
RxPackëSize
 = 0;

334 
	`mem˝y
––* )
buf„r
, ( * )
RFBuf„r
, ( 
size_t
 )*
size
 );

335 
	}
}

337 
	$SX1276LoRaSëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 )

339 if–
LoRaSëtögs
.
FªqH›On
 =
Ál£
 )

341 
TxPackëSize
 = 
size
;

345 
TxPackëSize
 = 255;

347 
	`mem˝y
––* )
RFBuf„r
, 
buf„r
, ( 
size_t
 )
TxPackëSize
 );

349 
RFLRSèã
 = 
RFLR_STATE_TX_INIT
;

350 
	}
}

352 
uöt8_t
 
	$SX1276LoRaGëRFSèã
( )

354  
RFLRSèã
;

355 
	}
}

357 
	$SX1276LoRaSëRFSèã
–
uöt8_t
 
°©e
 )

359 
RFLRSèã
 = 
°©e
;

360 
	}
}

370 
uöt32_t
 
	$SX1276LoRaPro˚ss
( )

372 
uöt32_t
 
ªsu…
 = 
RF_BUSY
;

374  
RFLRSèã
 )

376 
RFLR_STATE_IDLE
:

378 
RFLR_STATE_RX_INIT
:

380 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

382 
SX1276LR
->
RegIrqFœgsMask
 = 
RFLR_IRQFLAGS_RXTIMEOUT
 |

385 
RFLR_IRQFLAGS_VALIDHEADER
 |

386 
RFLR_IRQFLAGS_TXDONE
 |

387 
RFLR_IRQFLAGS_CADDONE
 |

389 
RFLR_IRQFLAGS_CADDETECTED
;

390 
	`SX1276Wrôe
–
REG_LR_IRQFLAGSMASK
, 
SX1276LR
->
RegIrqFœgsMask
 );

392 if–
LoRaSëtögs
.
FªqH›On
 =
åue
 )

394 
SX1276LR
->
RegH›Pîiod
 = 
LoRaSëtögs
.
H›Pîiod
;

396 
	`SX1276Ród
–
REG_LR_HOPCHANNEL
, &
SX1276LR
->
RegH›Ch™√l
 );

397 
	`SX1276LoRaSëRFFªquícy
–
H›pögFªquícõs
[
SX1276LR
->
RegH›Ch™√l
 & 
RFLR_HOPCHANNEL_CHANNEL_MASK
] );

401 
SX1276LR
->
RegH›Pîiod
 = 255;

404 
	`SX1276Wrôe
–
REG_LR_HOPPERIOD
, 
SX1276LR
->
RegH›Pîiod
 );

407 
SX1276LR
->
RegDioM≠pög1
 = 
RFLR_DIOMAPPING1_DIO0_00
 | 
RFLR_DIOMAPPING1_DIO1_00
 | 
RFLR_DIOMAPPING1_DIO2_00
 | 
RFLR_DIOMAPPING1_DIO3_00
;

409 
SX1276LR
->
RegDioM≠pög2
 = 
RFLR_DIOMAPPING2_DIO4_00
 | 
RFLR_DIOMAPPING2_DIO5_00
;

410 
	`SX1276WrôeBuf„r
–
REG_LR_DIOMAPPING1
, &
SX1276LR
->
RegDioM≠pög1
, 2 );

412 if–
LoRaSëtögs
.
RxSögÀOn
 =
åue
 )

415 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_RECEIVER_SINGLE
 );

419 
SX1276LR
->
RegFifoAddrPå
 = SX1276LR->
RegFifoRxBa£Addr
;

420 
	`SX1276Wrôe
–
REG_LR_FIFOADDRPTR
, 
SX1276LR
->
RegFifoAddrPå
 );

422 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_RECEIVER
 );

425 
	`mem£t
–
RFBuf„r
, 0, ( 
size_t
 )
RF_BUFFER_SIZE
 );

427 
PackëTimeout
 = 
LoRaSëtögs
.
RxPackëTimeout
;

428 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

429 
RFLRSèã
 = 
RFLR_STATE_RX_RUNNING
;

431 
RFLR_STATE_RX_RUNNING
:

433 if–
DIO0
 == 1 )

435 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

436 if–
LoRaSëtögs
.
FªqH›On
 =
åue
 )

438 
	`SX1276Ród
–
REG_LR_HOPCHANNEL
, &
SX1276LR
->
RegH›Ch™√l
 );

439 
	`SX1276LoRaSëRFFªquícy
–
H›pögFªquícõs
[
SX1276LR
->
RegH›Ch™√l
 & 
RFLR_HOPCHANNEL_CHANNEL_MASK
] );

442 
	`SX1276Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_RXDONE
 );

443 
RFLRSèã
 = 
RFLR_STATE_RX_DONE
;

445 if–
DIO2
 == 1 )

447 
RxTimeoutTimî
 = 
	`GET_TICK_COUNT
( );

448 if–
LoRaSëtögs
.
FªqH›On
 =
åue
 )

450 
	`SX1276Ród
–
REG_LR_HOPCHANNEL
, &
SX1276LR
->
RegH›Ch™√l
 );

451 
	`SX1276LoRaSëRFFªquícy
–
H›pögFªquícõs
[
SX1276LR
->
RegH›Ch™√l
 & 
RFLR_HOPCHANNEL_CHANNEL_MASK
] );

454 
	`SX1276Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 );

456 
RxGaö
 = 
	`SX1276LoRaRódRxGaö
( );

459 if–
LoRaSëtögs
.
RxSögÀOn
 =
åue
 )

461 if––
	`GET_TICK_COUNT
–Ë- 
RxTimeoutTimî
 ) > 
PackëTimeout
 )

463 
RFLRSèã
 = 
RFLR_STATE_RX_TIMEOUT
;

467 
RFLR_STATE_RX_DONE
:

468 
	`SX1276Ród
–
REG_LR_IRQFLAGS
, &
SX1276LR
->
RegIrqFœgs
 );

469 if––
SX1276LR
->
RegIrqFœgs
 & 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )

472 
	`SX1276Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 );

474 if–
LoRaSëtögs
.
RxSögÀOn
 =
åue
 )

476 
RFLRSèã
 = 
RFLR_STATE_RX_INIT
;

480 
RFLRSèã
 = 
RFLR_STATE_RX_RUNNING
;

486 
uöt8_t
 
rxSƒE°im©e
;

487 
	`SX1276Ród
–
REG_LR_PKTSNRVALUE
, &
rxSƒE°im©e
 );

488 if–
rxSƒE°im©e
 & 0x80 )

491 
RxPackëSƒE°im©e
 = ( ( ~
rxSƒE°im©e
 + 1 ) & 0xFF ) >> 2;

492 
RxPackëSƒE°im©e
 = -RxPacketSnrEstimate;

497 
RxPackëSƒE°im©e
 = ( 
rxSƒE°im©e
 & 0xFF ) >> 2;

501 if–
LoRaSëtögs
.
RFFªquícy
 < 860000000 )

503 if–
RxPackëSƒE°im©e
 < 0 )

505 
RxPackëRssiVÆue
 = 
NOISE_ABSOLUTE_ZERO
 + 10.0 * 
Sig«lBwLog
[
LoRaSëtögs
.
Sig«lBw
] + 
NOISE_FIGURE_LF
 + ( )
RxPackëSƒE°im©e
;

509 
	`SX1276Ród
–
REG_LR_PKTRSSIVALUE
, &
SX1276LR
->
RegPktRssiVÆue
 );

510 
RxPackëRssiVÆue
 = 
RssiOff£tLF
[
LoRaSëtögs
.
Sig«lBw
] + ( )
SX1276LR
->
RegPktRssiVÆue
;

515 if–
RxPackëSƒE°im©e
 < 0 )

517 
RxPackëRssiVÆue
 = 
NOISE_ABSOLUTE_ZERO
 + 10.0 * 
Sig«lBwLog
[
LoRaSëtögs
.
Sig«lBw
] + 
NOISE_FIGURE_HF
 + ( )
RxPackëSƒE°im©e
;

521 
	`SX1276Ród
–
REG_LR_PKTRSSIVALUE
, &
SX1276LR
->
RegPktRssiVÆue
 );

522 
RxPackëRssiVÆue
 = 
RssiOff£tHF
[
LoRaSëtögs
.
Sig«lBw
] + ( )
SX1276LR
->
RegPktRssiVÆue
;

526 if–
LoRaSëtögs
.
RxSögÀOn
 =
åue
 )

528 
SX1276LR
->
RegFifoAddrPå
 = SX1276LR->
RegFifoRxBa£Addr
;

529 
	`SX1276Wrôe
–
REG_LR_FIFOADDRPTR
, 
SX1276LR
->
RegFifoAddrPå
 );

531 if–
LoRaSëtögs
.
Im∂icôHódîOn
 =
åue
 )

533 
RxPackëSize
 = 
SX1276LR
->
RegPaylﬂdLígth
;

534 
	`SX1276RódFifo
–
RFBuf„r
, 
SX1276LR
->
RegPaylﬂdLígth
 );

538 
	`SX1276Ród
–
REG_LR_NBRXBYTES
, &
SX1276LR
->
RegNbRxByãs
 );

539 
RxPackëSize
 = 
SX1276LR
->
RegNbRxByãs
;

540 
	`SX1276RódFifo
–
RFBuf„r
, 
SX1276LR
->
RegNbRxByãs
 );

545 
	`SX1276Ród
–
REG_LR_FIFORXCURRENTADDR
, &
SX1276LR
->
RegFifoRxCuºítAddr
 );

547 if–
LoRaSëtögs
.
Im∂icôHódîOn
 =
åue
 )

549 
RxPackëSize
 = 
SX1276LR
->
RegPaylﬂdLígth
;

550 
SX1276LR
->
RegFifoAddrPå
 = SX1276LR->
RegFifoRxCuºítAddr
;

551 
	`SX1276Wrôe
–
REG_LR_FIFOADDRPTR
, 
SX1276LR
->
RegFifoAddrPå
 );

552 
	`SX1276RódFifo
–
RFBuf„r
, 
SX1276LR
->
RegPaylﬂdLígth
 );

556 
	`SX1276Ród
–
REG_LR_NBRXBYTES
, &
SX1276LR
->
RegNbRxByãs
 );

557 
RxPackëSize
 = 
SX1276LR
->
RegNbRxByãs
;

558 
SX1276LR
->
RegFifoAddrPå
 = SX1276LR->
RegFifoRxCuºítAddr
;

559 
	`SX1276Wrôe
–
REG_LR_FIFOADDRPTR
, 
SX1276LR
->
RegFifoAddrPå
 );

560 
	`SX1276RódFifo
–
RFBuf„r
, 
SX1276LR
->
RegNbRxByãs
 );

564 if–
LoRaSëtögs
.
RxSögÀOn
 =
åue
 )

566 
RFLRSèã
 = 
RFLR_STATE_RX_INIT
;

570 
RFLRSèã
 = 
RFLR_STATE_RX_RUNNING
;

572 
ªsu…
 = 
RF_RX_DONE
;

574 
RFLR_STATE_RX_TIMEOUT
:

575 
RFLRSèã
 = 
RFLR_STATE_RX_INIT
;

576 
ªsu…
 = 
RF_RX_TIMEOUT
;

578 
RFLR_STATE_TX_INIT
:

580 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

582 if–
LoRaSëtögs
.
FªqH›On
 =
åue
 )

584 
SX1276LR
->
RegIrqFœgsMask
 = 
RFLR_IRQFLAGS_RXTIMEOUT
 |

585 
RFLR_IRQFLAGS_RXDONE
 |

586 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 |

587 
RFLR_IRQFLAGS_VALIDHEADER
 |

589 
RFLR_IRQFLAGS_CADDONE
 |

591 
RFLR_IRQFLAGS_CADDETECTED
;

592 
SX1276LR
->
RegH›Pîiod
 = 
LoRaSëtögs
.
H›Pîiod
;

594 
	`SX1276Ród
–
REG_LR_HOPCHANNEL
, &
SX1276LR
->
RegH›Ch™√l
 );

595 
	`SX1276LoRaSëRFFªquícy
–
H›pögFªquícõs
[
SX1276LR
->
RegH›Ch™√l
 & 
RFLR_HOPCHANNEL_CHANNEL_MASK
] );

599 
SX1276LR
->
RegIrqFœgsMask
 = 
RFLR_IRQFLAGS_RXTIMEOUT
 |

600 
RFLR_IRQFLAGS_RXDONE
 |

601 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 |

602 
RFLR_IRQFLAGS_VALIDHEADER
 |

604 
RFLR_IRQFLAGS_CADDONE
 |

605 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 |

606 
RFLR_IRQFLAGS_CADDETECTED
;

607 
SX1276LR
->
RegH›Pîiod
 = 0;

609 
	`SX1276Wrôe
–
REG_LR_HOPPERIOD
, 
SX1276LR
->
RegH›Pîiod
 );

610 
	`SX1276Wrôe
–
REG_LR_IRQFLAGSMASK
, 
SX1276LR
->
RegIrqFœgsMask
 );

613 
SX1276LR
->
RegPaylﬂdLígth
 = 
TxPackëSize
;

614 
	`SX1276Wrôe
–
REG_LR_PAYLOADLENGTH
, 
SX1276LR
->
RegPaylﬂdLígth
 );

616 
SX1276LR
->
RegFifoTxBa£Addr
 = 0x00;

617 
	`SX1276Wrôe
–
REG_LR_FIFOTXBASEADDR
, 
SX1276LR
->
RegFifoTxBa£Addr
 );

619 
SX1276LR
->
RegFifoAddrPå
 = SX1276LR->
RegFifoTxBa£Addr
;

620 
	`SX1276Wrôe
–
REG_LR_FIFOADDRPTR
, 
SX1276LR
->
RegFifoAddrPå
 );

623 
	`SX1276WrôeFifo
–
RFBuf„r
, 
SX1276LR
->
RegPaylﬂdLígth
 );

625 
SX1276LR
->
RegDioM≠pög1
 = 
RFLR_DIOMAPPING1_DIO0_01
 | 
RFLR_DIOMAPPING1_DIO1_00
 | 
RFLR_DIOMAPPING1_DIO2_00
 | 
RFLR_DIOMAPPING1_DIO3_01
;

627 
SX1276LR
->
RegDioM≠pög2
 = 
RFLR_DIOMAPPING2_DIO4_01
 | 
RFLR_DIOMAPPING2_DIO5_00
;

628 
	`SX1276WrôeBuf„r
–
REG_LR_DIOMAPPING1
, &
SX1276LR
->
RegDioM≠pög1
, 2 );

630 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_TRANSMITTER
 );

632 
RFLRSèã
 = 
RFLR_STATE_TX_RUNNING
;

634 
RFLR_STATE_TX_RUNNING
:

635 if–
DIO0
 == 1 )

638 
	`SX1276Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_TXDONE
 );

639 
RFLRSèã
 = 
RFLR_STATE_TX_DONE
;

641 if–
DIO2
 == 1 )

643 if–
LoRaSëtögs
.
FªqH›On
 =
åue
 )

645 
	`SX1276Ród
–
REG_LR_HOPCHANNEL
, &
SX1276LR
->
RegH›Ch™√l
 );

646 
	`SX1276LoRaSëRFFªquícy
–
H›pögFªquícõs
[
SX1276LR
->
RegH›Ch™√l
 & 
RFLR_HOPCHANNEL_CHANNEL_MASK
] );

649 
	`SX1276Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 );

652 
RFLR_STATE_TX_DONE
:

654 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

656 
RFLRSèã
 = 
RFLR_STATE_IDLE
;

657 
ªsu…
 = 
RF_TX_DONE
;

659 
RFLR_STATE_CAD_INIT
:

660 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

662 
SX1276LR
->
RegIrqFœgsMask
 = 
RFLR_IRQFLAGS_RXTIMEOUT
 |

663 
RFLR_IRQFLAGS_RXDONE
 |

664 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 |

665 
RFLR_IRQFLAGS_VALIDHEADER
 |

666 
RFLR_IRQFLAGS_TXDONE
 |

668 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
;

670 
	`SX1276Wrôe
–
REG_LR_IRQFLAGSMASK
, 
SX1276LR
->
RegIrqFœgsMask
 );

673 
SX1276LR
->
RegDioM≠pög1
 = 
RFLR_DIOMAPPING1_DIO0_00
 | 
RFLR_DIOMAPPING1_DIO1_00
 | 
RFLR_DIOMAPPING1_DIO2_00
 | 
RFLR_DIOMAPPING1_DIO3_00
;

675 
SX1276LR
->
RegDioM≠pög2
 = 
RFLR_DIOMAPPING2_DIO4_00
 | 
RFLR_DIOMAPPING2_DIO5_00
;

676 
	`SX1276WrôeBuf„r
–
REG_LR_DIOMAPPING1
, &
SX1276LR
->
RegDioM≠pög1
, 2 );

678 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_CAD
 );

679 
RFLRSèã
 = 
RFLR_STATE_CAD_RUNNING
;

681 
RFLR_STATE_CAD_RUNNING
:

682 if–
DIO3
 == 1 )

685 
	`SX1276Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_CADDONE
 );

686 if–
DIO4
 == 1 )

689 
	`SX1276Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_CADDETECTED
 );

691 
RFLRSèã
 = 
RFLR_STATE_RX_INIT
;

692 
ªsu…
 = 
RF_CHANNEL_ACTIVITY_DETECTED
;

697 
RFLRSèã
 = 
RFLR_STATE_IDLE
;

698 
ªsu…
 = 
RF_CHANNEL_EMPTY
;

706  
ªsu…
;

707 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-LoRa.h

21 #i‚de‡
__SX1276_LORA_H__


22 
	#__SX1276_LORA_H__


	)

27 
	ssLoRaSëtögs


29 
uöt32_t
 
	mRFFªquícy
;

30 
öt8_t
 
	mPowî
;

31 
uöt8_t
 
	mSig«lBw
;

33 
uöt8_t
 
	mS¥ódögFa˘‹
;

34 
uöt8_t
 
	mEº‹Codög
;

35 
boﬁ
 
	mCrcOn
;

36 
boﬁ
 
	mIm∂icôHódîOn
;

37 
boﬁ
 
	mRxSögÀOn
;

38 
boﬁ
 
	mFªqH›On
;

39 
uöt8_t
 
	mH›Pîiod
;

40 
uöt32_t
 
	mTxPackëTimeout
;

41 
uöt32_t
 
	mRxPackëTimeout
;

42 
uöt8_t
 
	mPaylﬂdLígth
;

43 }
	ttLoRaSëtögs
;

48 
	#RF_BUFFER_SIZE_MAX
 256

	)

49 
	#RF_BUFFER_SIZE
 256

	)

57 
	mRFLR_STATE_IDLE
,

58 
	mRFLR_STATE_RX_INIT
,

59 
	mRFLR_STATE_RX_RUNNING
,

60 
	mRFLR_STATE_RX_DONE
,

61 
	mRFLR_STATE_RX_TIMEOUT
,

62 
	mRFLR_STATE_TX_INIT
,

63 
	mRFLR_STATE_TX_RUNNING
,

64 
	mRFLR_STATE_TX_DONE
,

65 
	mRFLR_STATE_TX_TIMEOUT
,

66 
	mRFLR_STATE_CAD_INIT
,

67 
	mRFLR_STATE_CAD_RUNNING
,

68 }
	ttRFLRSèãs
;

73 
	#XTAL_FREQ
 32000000

	)

74 
	#FREQ_STEP
 61.03515625

	)

79 
	#REG_LR_FIFO
 0x00

	)

81 
	#REG_LR_OPMODE
 0x01

	)

82 
	#REG_LR_BANDSETTING
 0x04

	)

83 
	#REG_LR_FRFMSB
 0x06

	)

84 
	#REG_LR_FRFMID
 0x07

	)

85 
	#REG_LR_FRFLSB
 0x08

	)

87 
	#REG_LR_PACONFIG
 0x09

	)

88 
	#REG_LR_PARAMP
 0x0A

	)

89 
	#REG_LR_OCP
 0x0B

	)

91 
	#REG_LR_LNA
 0x0C

	)

93 
	#REG_LR_FIFOADDRPTR
 0x0D

	)

94 
	#REG_LR_FIFOTXBASEADDR
 0x0E

	)

95 
	#REG_LR_FIFORXBASEADDR
 0x0F

	)

96 
	#REG_LR_FIFORXCURRENTADDR
 0x10

	)

97 
	#REG_LR_IRQFLAGSMASK
 0x11

	)

98 
	#REG_LR_IRQFLAGS
 0x12

	)

99 
	#REG_LR_NBRXBYTES
 0x13

	)

100 
	#REG_LR_RXHEADERCNTVALUEMSB
 0x14

	)

101 
	#REG_LR_RXHEADERCNTVALUELSB
 0x15

	)

102 
	#REG_LR_RXPACKETCNTVALUEMSB
 0x16

	)

103 
	#REG_LR_RXPACKETCNTVALUELSB
 0x17

	)

104 
	#REG_LR_MODEMSTAT
 0x18

	)

105 
	#REG_LR_PKTSNRVALUE
 0x19

	)

106 
	#REG_LR_PKTRSSIVALUE
 0x1A

	)

107 
	#REG_LR_RSSIVALUE
 0x1B

	)

108 
	#REG_LR_HOPCHANNEL
 0x1C

	)

109 
	#REG_LR_MODEMCONFIG1
 0x1D

	)

110 
	#REG_LR_MODEMCONFIG2
 0x1E

	)

111 
	#REG_LR_SYMBTIMEOUTLSB
 0x1F

	)

112 
	#REG_LR_PREAMBLEMSB
 0x20

	)

113 
	#REG_LR_PREAMBLELSB
 0x21

	)

114 
	#REG_LR_PAYLOADLENGTH
 0x22

	)

115 
	#REG_LR_PAYLOADMAXLENGTH
 0x23

	)

116 
	#REG_LR_HOPPERIOD
 0x24

	)

117 
	#REG_LR_FIFORXBYTEADDR
 0x25

	)

118 
	#REG_LR_MODEMCONFIG3
 0x26

	)

121 
	#REG_LR_DIOMAPPING1
 0x40

	)

122 
	#REG_LR_DIOMAPPING2
 0x41

	)

124 
	#REG_LR_VERSION
 0x42

	)

126 
	#REG_LR_PLLHOP
 0x44

	)

127 
	#REG_LR_TCXO
 0x4B

	)

128 
	#REG_LR_PADAC
 0x4D

	)

129 
	#REG_LR_FORMERTEMP
 0x5B

	)

130 
	#REG_LR_BITRATEFRAC
 0x5D

	)

131 
	#REG_LR_AGCREF
 0x61

	)

132 
	#REG_LR_AGCTHRESH1
 0x62

	)

133 
	#REG_LR_AGCTHRESH2
 0x63

	)

134 
	#REG_LR_AGCTHRESH3
 0x64

	)

148 
	#RFLR_OPMODE_LONGRANGEMODE_MASK
 0x7F

	)

149 
	#RFLR_OPMODE_LONGRANGEMODE_OFF
 0x00

150 
	#RFLR_OPMODE_LONGRANGEMODE_ON
 0x80

	)

152 
	#RFLR_OPMODE_ACCESSSHAREDREG_MASK
 0xBF

	)

153 
	#RFLR_OPMODE_ACCESSSHAREDREG_ENABLE
 0x40

	)

154 
	#RFLR_OPMODE_ACCESSSHAREDREG_DISABLE
 0x00

155 

	)

156 
	#RFLR_OPMODE_FREQMODE_ACCESS_MASK
 0xF7

	)

157 
	#RFLR_OPMODE_FREQMODE_ACCESS_LF
 0x08

158 
	#RFLR_OPMODE_FREQMODE_ACCESS_HF
 0x00

	)

160 
	#RFLR_OPMODE_MASK
 0xF8

	)

161 
	#RFLR_OPMODE_SLEEP
 0x00

	)

162 
	#RFLR_OPMODE_STANDBY
 0x01

163 
	#RFLR_OPMODE_SYNTHESIZER_TX
 0x02

	)

164 
	#RFLR_OPMODE_TRANSMITTER
 0x03

	)

165 
	#RFLR_OPMODE_SYNTHESIZER_RX
 0x04

	)

166 
	#RFLR_OPMODE_RECEIVER
 0x05

	)

168 
	#RFLR_OPMODE_RECEIVER_SINGLE
 0x06

	)

169 
	#RFLR_OPMODE_CAD
 0x07

	)

174 
	#RFLR_BANDSETTING_MASK
 0x3F

	)

175 
	#RFLR_BANDSETTING_AUTO
 0x00

176 
	#RFLR_BANDSETTING_DIV_BY_1
 0x40

	)

177 
	#RFLR_BANDSETTING_DIV_BY_2
 0x80

	)

178 
	#RFLR_BANDSETTING_DIV_BY_6
 0xC0

	)

184 
	#RFLR_FRFMSB_434_MHZ
 0x6C

185 
	#RFLR_FRFMID_434_MHZ
 0x80

186 
	#RFLR_FRFLSB_434_MHZ
 0x00

187 

	)

188 
	#RFLR_FRFMSB_863_MHZ
 0xD7

	)

189 
	#RFLR_FRFMID_863_MHZ
 0xC0

	)

190 
	#RFLR_FRFLSB_863_MHZ
 0x00

	)

191 
	#RFLR_FRFMSB_864_MHZ
 0xD8

	)

192 
	#RFLR_FRFMID_864_MHZ
 0x00

	)

193 
	#RFLR_FRFLSB_864_MHZ
 0x00

	)

194 
	#RFLR_FRFMSB_865_MHZ
 0xD8

	)

195 
	#RFLR_FRFMID_865_MHZ
 0x40

	)

196 
	#RFLR_FRFLSB_865_MHZ
 0x00

	)

197 
	#RFLR_FRFMSB_866_MHZ
 0xD8

	)

198 
	#RFLR_FRFMID_866_MHZ
 0x80

	)

199 
	#RFLR_FRFLSB_866_MHZ
 0x00

	)

200 
	#RFLR_FRFMSB_867_MHZ
 0xD8

	)

201 
	#RFLR_FRFMID_867_MHZ
 0xC0

	)

202 
	#RFLR_FRFLSB_867_MHZ
 0x00

	)

203 
	#RFLR_FRFMSB_868_MHZ
 0xD9

	)

204 
	#RFLR_FRFMID_868_MHZ
 0x00

	)

205 
	#RFLR_FRFLSB_868_MHZ
 0x00

	)

206 
	#RFLR_FRFMSB_869_MHZ
 0xD9

	)

207 
	#RFLR_FRFMID_869_MHZ
 0x40

	)

208 
	#RFLR_FRFLSB_869_MHZ
 0x00

	)

209 
	#RFLR_FRFMSB_870_MHZ
 0xD9

	)

210 
	#RFLR_FRFMID_870_MHZ
 0x80

	)

211 
	#RFLR_FRFLSB_870_MHZ
 0x00

	)

213 
	#RFLR_FRFMSB_902_MHZ
 0xE1

	)

214 
	#RFLR_FRFMID_902_MHZ
 0x80

	)

215 
	#RFLR_FRFLSB_902_MHZ
 0x00

	)

216 
	#RFLR_FRFMSB_903_MHZ
 0xE1

	)

217 
	#RFLR_FRFMID_903_MHZ
 0xC0

	)

218 
	#RFLR_FRFLSB_903_MHZ
 0x00

	)

219 
	#RFLR_FRFMSB_904_MHZ
 0xE2

	)

220 
	#RFLR_FRFMID_904_MHZ
 0x00

	)

221 
	#RFLR_FRFLSB_904_MHZ
 0x00

	)

222 
	#RFLR_FRFMSB_905_MHZ
 0xE2

	)

223 
	#RFLR_FRFMID_905_MHZ
 0x40

	)

224 
	#RFLR_FRFLSB_905_MHZ
 0x00

	)

225 
	#RFLR_FRFMSB_906_MHZ
 0xE2

	)

226 
	#RFLR_FRFMID_906_MHZ
 0x80

	)

227 
	#RFLR_FRFLSB_906_MHZ
 0x00

	)

228 
	#RFLR_FRFMSB_907_MHZ
 0xE2

	)

229 
	#RFLR_FRFMID_907_MHZ
 0xC0

	)

230 
	#RFLR_FRFLSB_907_MHZ
 0x00

	)

231 
	#RFLR_FRFMSB_908_MHZ
 0xE3

	)

232 
	#RFLR_FRFMID_908_MHZ
 0x00

	)

233 
	#RFLR_FRFLSB_908_MHZ
 0x00

	)

234 
	#RFLR_FRFMSB_909_MHZ
 0xE3

	)

235 
	#RFLR_FRFMID_909_MHZ
 0x40

	)

236 
	#RFLR_FRFLSB_909_MHZ
 0x00

	)

237 
	#RFLR_FRFMSB_910_MHZ
 0xE3

	)

238 
	#RFLR_FRFMID_910_MHZ
 0x80

	)

239 
	#RFLR_FRFLSB_910_MHZ
 0x00

	)

240 
	#RFLR_FRFMSB_911_MHZ
 0xE3

	)

241 
	#RFLR_FRFMID_911_MHZ
 0xC0

	)

242 
	#RFLR_FRFLSB_911_MHZ
 0x00

	)

243 
	#RFLR_FRFMSB_912_MHZ
 0xE4

	)

244 
	#RFLR_FRFMID_912_MHZ
 0x00

	)

245 
	#RFLR_FRFLSB_912_MHZ
 0x00

	)

246 
	#RFLR_FRFMSB_913_MHZ
 0xE4

	)

247 
	#RFLR_FRFMID_913_MHZ
 0x40

	)

248 
	#RFLR_FRFLSB_913_MHZ
 0x00

	)

249 
	#RFLR_FRFMSB_914_MHZ
 0xE4

	)

250 
	#RFLR_FRFMID_914_MHZ
 0x80

	)

251 
	#RFLR_FRFLSB_914_MHZ
 0x00

	)

252 
	#RFLR_FRFMSB_915_MHZ
 0xE4

253 
	#RFLR_FRFMID_915_MHZ
 0xC0

254 
	#RFLR_FRFLSB_915_MHZ
 0x00

255 
	#RFLR_FRFMSB_916_MHZ
 0xE5

	)

256 
	#RFLR_FRFMID_916_MHZ
 0x00

	)

257 
	#RFLR_FRFLSB_916_MHZ
 0x00

	)

258 
	#RFLR_FRFMSB_917_MHZ
 0xE5

	)

259 
	#RFLR_FRFMID_917_MHZ
 0x40

	)

260 
	#RFLR_FRFLSB_917_MHZ
 0x00

	)

261 
	#RFLR_FRFMSB_918_MHZ
 0xE5

	)

262 
	#RFLR_FRFMID_918_MHZ
 0x80

	)

263 
	#RFLR_FRFLSB_918_MHZ
 0x00

	)

264 
	#RFLR_FRFMSB_919_MHZ
 0xE5

	)

265 
	#RFLR_FRFMID_919_MHZ
 0xC0

	)

266 
	#RFLR_FRFLSB_919_MHZ
 0x00

	)

267 
	#RFLR_FRFMSB_920_MHZ
 0xE6

	)

268 
	#RFLR_FRFMID_920_MHZ
 0x00

	)

269 
	#RFLR_FRFLSB_920_MHZ
 0x00

	)

270 
	#RFLR_FRFMSB_921_MHZ
 0xE6

	)

271 
	#RFLR_FRFMID_921_MHZ
 0x40

	)

272 
	#RFLR_FRFLSB_921_MHZ
 0x00

	)

273 
	#RFLR_FRFMSB_922_MHZ
 0xE6

	)

274 
	#RFLR_FRFMID_922_MHZ
 0x80

	)

275 
	#RFLR_FRFLSB_922_MHZ
 0x00

	)

276 
	#RFLR_FRFMSB_923_MHZ
 0xE6

	)

277 
	#RFLR_FRFMID_923_MHZ
 0xC0

	)

278 
	#RFLR_FRFLSB_923_MHZ
 0x00

	)

279 
	#RFLR_FRFMSB_924_MHZ
 0xE7

	)

280 
	#RFLR_FRFMID_924_MHZ
 0x00

	)

281 
	#RFLR_FRFLSB_924_MHZ
 0x00

	)

282 
	#RFLR_FRFMSB_925_MHZ
 0xE7

	)

283 
	#RFLR_FRFMID_925_MHZ
 0x40

	)

284 
	#RFLR_FRFLSB_925_MHZ
 0x00

	)

285 
	#RFLR_FRFMSB_926_MHZ
 0xE7

	)

286 
	#RFLR_FRFMID_926_MHZ
 0x80

	)

287 
	#RFLR_FRFLSB_926_MHZ
 0x00

	)

288 
	#RFLR_FRFMSB_927_MHZ
 0xE7

	)

289 
	#RFLR_FRFMID_927_MHZ
 0xC0

	)

290 
	#RFLR_FRFLSB_927_MHZ
 0x00

	)

291 
	#RFLR_FRFMSB_928_MHZ
 0xE8

	)

292 
	#RFLR_FRFMID_928_MHZ
 0x00

	)

293 
	#RFLR_FRFLSB_928_MHZ
 0x00

	)

298 
	#RFLR_PACONFIG_PASELECT_MASK
 0x7F

	)

299 
	#RFLR_PACONFIG_PASELECT_PABOOST
 0x80

	)

300 
	#RFLR_PACONFIG_PASELECT_RFO
 0x00

301 

	)

302 
	#RFLR_PACONFIG_MAX_POWER_MASK
 0x8F

	)

304 
	#RFLR_PACONFIG_OUTPUTPOWER_MASK
 0xF0

	)

309 
	#RFLR_PARAMP_TXBANDFORCE_MASK
 0xEF

	)

310 
	#RFLR_PARAMP_TXBANDFORCE_BAND_SEL
 0x10

	)

311 
	#RFLR_PARAMP_TXBANDFORCE_AUTO
 0x00

312 

	)

313 
	#RFLR_PARAMP_MASK
 0xF0

	)

314 
	#RFLR_PARAMP_3400_US
 0x00

	)

315 
	#RFLR_PARAMP_2000_US
 0x01

	)

316 
	#RFLR_PARAMP_1000_US
 0x02

	)

317 
	#RFLR_PARAMP_0500_US
 0x03

	)

318 
	#RFLR_PARAMP_0250_US
 0x04

	)

319 
	#RFLR_PARAMP_0125_US
 0x05

	)

320 
	#RFLR_PARAMP_0100_US
 0x06

	)

321 
	#RFLR_PARAMP_0062_US
 0x07

	)

322 
	#RFLR_PARAMP_0050_US
 0x08

	)

323 
	#RFLR_PARAMP_0040_US
 0x09

324 
	#RFLR_PARAMP_0031_US
 0x0A

	)

325 
	#RFLR_PARAMP_0025_US
 0x0B

	)

326 
	#RFLR_PARAMP_0020_US
 0x0C

	)

327 
	#RFLR_PARAMP_0015_US
 0x0D

	)

328 
	#RFLR_PARAMP_0012_US
 0x0E

	)

329 
	#RFLR_PARAMP_0010_US
 0x0F

	)

334 
	#RFLR_OCP_MASK
 0xDF

	)

335 
	#RFLR_OCP_ON
 0x20

336 
	#RFLR_OCP_OFF
 0x00

	)

338 
	#RFLR_OCP_TRIM_MASK
 0xE0

	)

339 
	#RFLR_OCP_TRIM_045_MA
 0x00

	)

340 
	#RFLR_OCP_TRIM_050_MA
 0x01

	)

341 
	#RFLR_OCP_TRIM_055_MA
 0x02

	)

342 
	#RFLR_OCP_TRIM_060_MA
 0x03

	)

343 
	#RFLR_OCP_TRIM_065_MA
 0x04

	)

344 
	#RFLR_OCP_TRIM_070_MA
 0x05

	)

345 
	#RFLR_OCP_TRIM_075_MA
 0x06

	)

346 
	#RFLR_OCP_TRIM_080_MA
 0x07

	)

347 
	#RFLR_OCP_TRIM_085_MA
 0x08

	)

348 
	#RFLR_OCP_TRIM_090_MA
 0x09

	)

349 
	#RFLR_OCP_TRIM_095_MA
 0x0A

	)

350 
	#RFLR_OCP_TRIM_100_MA
 0x0B

351 
	#RFLR_OCP_TRIM_105_MA
 0x0C

	)

352 
	#RFLR_OCP_TRIM_110_MA
 0x0D

	)

353 
	#RFLR_OCP_TRIM_115_MA
 0x0E

	)

354 
	#RFLR_OCP_TRIM_120_MA
 0x0F

	)

355 
	#RFLR_OCP_TRIM_130_MA
 0x10

	)

356 
	#RFLR_OCP_TRIM_140_MA
 0x11

	)

357 
	#RFLR_OCP_TRIM_150_MA
 0x12

	)

358 
	#RFLR_OCP_TRIM_160_MA
 0x13

	)

359 
	#RFLR_OCP_TRIM_170_MA
 0x14

	)

360 
	#RFLR_OCP_TRIM_180_MA
 0x15

	)

361 
	#RFLR_OCP_TRIM_190_MA
 0x16

	)

362 
	#RFLR_OCP_TRIM_200_MA
 0x17

	)

363 
	#RFLR_OCP_TRIM_210_MA
 0x18

	)

364 
	#RFLR_OCP_TRIM_220_MA
 0x19

	)

365 
	#RFLR_OCP_TRIM_230_MA
 0x1A

	)

366 
	#RFLR_OCP_TRIM_240_MA
 0x1B

	)

371 
	#RFLR_LNA_GAIN_MASK
 0x1F

	)

372 
	#RFLR_LNA_GAIN_G1
 0x20

373 
	#RFLR_LNA_GAIN_G2
 0x40

	)

374 
	#RFLR_LNA_GAIN_G3
 0x60

	)

375 
	#RFLR_LNA_GAIN_G4
 0x80

	)

376 
	#RFLR_LNA_GAIN_G5
 0xA0

	)

377 
	#RFLR_LNA_GAIN_G6
 0xC0

	)

379 
	#RFLR_LNA_BOOST_LF_MASK
 0xE7

	)

380 
	#RFLR_LNA_BOOST_LF_DEFAULT
 0x00

381 
	#RFLR_LNA_BOOST_LF_GAIN
 0x08

	)

382 
	#RFLR_LNA_BOOST_LF_IP3
 0x10

	)

383 
	#RFLR_LNA_BOOST_LF_BOOST
 0x18

	)

385 
	#RFLR_LNA_RXBANDFORCE_MASK
 0xFB

	)

386 
	#RFLR_LNA_RXBANDFORCE_BAND_SEL
 0x04

	)

387 
	#RFLR_LNA_RXBANDFORCE_AUTO
 0x00

388 

	)

389 
	#RFLR_LNA_BOOST_HF_MASK
 0xFC

	)

390 
	#RFLR_LNA_BOOST_HF_OFF
 0x00

391 
	#RFLR_LNA_BOOST_HF_ON
 0x03

	)

396 
	#RFLR_FIFOADDRPTR
 0x00

397 

	)

401 
	#RFLR_FIFOTXBASEADDR
 0x80

402 

	)

406 
	#RFLR_FIFORXBASEADDR
 0x00

407 

	)

415 
	#RFLR_IRQFLAGS_RXTIMEOUT_MASK
 0x80

	)

416 
	#RFLR_IRQFLAGS_RXDONE_MASK
 0x40

	)

417 
	#RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK
 0x20

	)

418 
	#RFLR_IRQFLAGS_VALIDHEADER_MASK
 0x10

	)

419 
	#RFLR_IRQFLAGS_TXDONE_MASK
 0x08

	)

420 
	#RFLR_IRQFLAGS_CADDONE_MASK
 0x04

	)

421 
	#RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL_MASK
 0x02

	)

422 
	#RFLR_IRQFLAGS_CADDETECTED_MASK
 0x01

	)

427 
	#RFLR_IRQFLAGS_RXTIMEOUT
 0x80

	)

428 
	#RFLR_IRQFLAGS_RXDONE
 0x40

	)

429 
	#RFLR_IRQFLAGS_PAYLOADCRCERROR
 0x20

	)

430 
	#RFLR_IRQFLAGS_VALIDHEADER
 0x10

	)

431 
	#RFLR_IRQFLAGS_TXDONE
 0x08

	)

432 
	#RFLR_IRQFLAGS_CADDONE
 0x04

	)

433 
	#RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 0x02

	)

434 
	#RFLR_IRQFLAGS_CADDETECTED
 0x01

	)

466 
	#RFLR_MODEMSTAT_RX_CR_MASK
 0x1F

	)

467 
	#RFLR_MODEMSTAT_MODEM_STATUS_MASK
 0xE0

	)

487 
	#RFLR_MODEMCONFIG1_BW_MASK
 0x0F

	)

489 
	#RFLR_MODEMCONFIG1_BW_7_81_KHZ
 0x00

	)

490 
	#RFLR_MODEMCONFIG1_BW_10_41_KHZ
 0x10

	)

491 
	#RFLR_MODEMCONFIG1_BW_15_62_KHZ
 0x20

	)

492 
	#RFLR_MODEMCONFIG1_BW_20_83_KHZ
 0x30

	)

493 
	#RFLR_MODEMCONFIG1_BW_31_25_KHZ
 0x40

	)

494 
	#RFLR_MODEMCONFIG1_BW_41_66_KHZ
 0x50

	)

495 
	#RFLR_MODEMCONFIG1_BW_62_50_KHZ
 0x60

	)

496 
	#RFLR_MODEMCONFIG1_BW_125_KHZ
 0x70

497 
	#RFLR_MODEMCONFIG1_BW_250_KHZ
 0x80

	)

498 
	#RFLR_MODEMCONFIG1_BW_500_KHZ
 0x90

	)

500 
	#RFLR_MODEMCONFIG1_CODINGRATE_MASK
 0xF1

	)

501 
	#RFLR_MODEMCONFIG1_CODINGRATE_4_5
 0x02

	)

502 
	#RFLR_MODEMCONFIG1_CODINGRATE_4_6
 0x04

503 
	#RFLR_MODEMCONFIG1_CODINGRATE_4_7
 0x06

	)

504 
	#RFLR_MODEMCONFIG1_CODINGRATE_4_8
 0x08

	)

506 
	#RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK
 0xFE

	)

507 
	#RFLR_MODEMCONFIG1_IMPLICITHEADER_ON
 0x01

	)

508 
	#RFLR_MODEMCONFIG1_IMPLICITHEADER_OFF
 0x00

509 

	)

513 
	#RFLR_MODEMCONFIG2_SF_MASK
 0x0F

	)

514 
	#RFLR_MODEMCONFIG2_SF_6
 0x60

	)

515 
	#RFLR_MODEMCONFIG2_SF_7
 0x70

516 
	#RFLR_MODEMCONFIG2_SF_8
 0x80

	)

517 
	#RFLR_MODEMCONFIG2_SF_9
 0x90

	)

518 
	#RFLR_MODEMCONFIG2_SF_10
 0xA0

	)

519 
	#RFLR_MODEMCONFIG2_SF_11
 0xB0

	)

520 
	#RFLR_MODEMCONFIG2_SF_12
 0xC0

	)

522 
	#RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_MASK
 0xF7

	)

523 
	#RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_ON
 0x08

	)

524 
	#RFLR_MODEMCONFIG2_TXCONTINUOUSMODE_OFF
 0x00

	)

526 
	#RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK
 0xFB

	)

527 
	#RFLR_MODEMCONFIG2_RXPAYLOADCRC_ON
 0x04

	)

528 
	#RFLR_MODEMCONFIG2_RXPAYLOADCRC_OFF
 0x00

529 

	)

530 
	#RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK
 0xFC

	)

531 
	#RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB
 0x00

532 

	)

537 
	#RFLR_HOPCHANNEL_PLL_LOCK_TIMEOUT_MASK
 0x7F

	)

538 
	#RFLR_HOPCHANNEL_PLL_LOCK_FAIL
 0x80

	)

539 
	#RFLR_HOPCHANNEL_PLL_LOCK_SUCCEED
 0x00

540 

	)

541 
	#RFLR_HOPCHANNEL_PAYLOAD_CRC16_MASK
 0xBF

	)

542 
	#RFLR_HOPCHANNEL_PAYLOAD_CRC16_ON
 0x40

	)

543 
	#RFLR_HOPCHANNEL_PAYLOAD_CRC16_OFF
 0x00

544 

	)

545 
	#RFLR_HOPCHANNEL_CHANNEL_MASK
 0x3F

	)

551 
	#RFLR_SYMBTIMEOUTLSB_SYMBTIMEOUT
 0x64

552 

	)

556 
	#RFLR_PREAMBLELENGTHMSB
 0x00

557 

	)

561 
	#RFLR_PREAMBLELENGTHLSB
 0x08

562 

	)

566 
	#RFLR_PAYLOADLENGTH
 0x0E

567 

	)

571 
	#RFLR_PAYLOADMAXLENGTH
 0xFF

572 

	)

576 
	#RFLR_HOPPERIOD_FREQFOPPINGPERIOD
 0x00

577 

	)

582 
	#RFLR_DIOMAPPING1_DIO0_MASK
 0x3F

	)

583 
	#RFLR_DIOMAPPING1_DIO0_00
 0x00

584 
	#RFLR_DIOMAPPING1_DIO0_01
 0x40

	)

585 
	#RFLR_DIOMAPPING1_DIO0_10
 0x80

	)

586 
	#RFLR_DIOMAPPING1_DIO0_11
 0xC0

	)

588 
	#RFLR_DIOMAPPING1_DIO1_MASK
 0xCF

	)

589 
	#RFLR_DIOMAPPING1_DIO1_00
 0x00

590 
	#RFLR_DIOMAPPING1_DIO1_01
 0x10

	)

591 
	#RFLR_DIOMAPPING1_DIO1_10
 0x20

	)

592 
	#RFLR_DIOMAPPING1_DIO1_11
 0x30

	)

594 
	#RFLR_DIOMAPPING1_DIO2_MASK
 0xF3

	)

595 
	#RFLR_DIOMAPPING1_DIO2_00
 0x00

596 
	#RFLR_DIOMAPPING1_DIO2_01
 0x04

	)

597 
	#RFLR_DIOMAPPING1_DIO2_10
 0x08

	)

598 
	#RFLR_DIOMAPPING1_DIO2_11
 0x0C

	)

600 
	#RFLR_DIOMAPPING1_DIO3_MASK
 0xFC

	)

601 
	#RFLR_DIOMAPPING1_DIO3_00
 0x00

602 
	#RFLR_DIOMAPPING1_DIO3_01
 0x01

	)

603 
	#RFLR_DIOMAPPING1_DIO3_10
 0x02

	)

604 
	#RFLR_DIOMAPPING1_DIO3_11
 0x03

	)

609 
	#RFLR_DIOMAPPING2_DIO4_MASK
 0x3F

	)

610 
	#RFLR_DIOMAPPING2_DIO4_00
 0x00

611 
	#RFLR_DIOMAPPING2_DIO4_01
 0x40

	)

612 
	#RFLR_DIOMAPPING2_DIO4_10
 0x80

	)

613 
	#RFLR_DIOMAPPING2_DIO4_11
 0xC0

	)

615 
	#RFLR_DIOMAPPING2_DIO5_MASK
 0xCF

	)

616 
	#RFLR_DIOMAPPING2_DIO5_00
 0x00

617 
	#RFLR_DIOMAPPING2_DIO5_01
 0x10

	)

618 
	#RFLR_DIOMAPPING2_DIO5_10
 0x20

	)

619 
	#RFLR_DIOMAPPING2_DIO5_11
 0x30

	)

621 
	#RFLR_DIOMAPPING2_MAP_MASK
 0xFE

	)

622 
	#RFLR_DIOMAPPING2_MAP_PREAMBLEDETECT
 0x01

	)

623 
	#RFLR_DIOMAPPING2_MAP_RSSI
 0x00

624 

	)

652 
	#RFLR_PLLHOP_FASTHOP_MASK
 0x7F

	)

653 
	#RFLR_PLLHOP_FASTHOP_ON
 0x80

	)

654 
	#RFLR_PLLHOP_FASTHOP_OFF
 0x00

655 

	)

659 
	#RFLR_TCXO_TCXOINPUT_MASK
 0xEF

	)

660 
	#RFLR_TCXO_TCXOINPUT_ON
 0x10

	)

661 
	#RFLR_TCXO_TCXOINPUT_OFF
 0x00

662 

	)

666 
	#RFLR_PADAC_20DBM_MASK
 0xF8

	)

667 
	#RFLR_PADAC_20DBM_ON
 0x07

	)

668 
	#RFLR_PADAC_20DBM_OFF
 0x04

669 

	)

673 
	#RFLR_PLL_BANDWIDTH_MASK
 0x3F

	)

674 
	#RFLR_PLL_BANDWIDTH_75
 0x00

	)

675 
	#RFLR_PLL_BANDWIDTH_150
 0x40

	)

676 
	#RFLR_PLL_BANDWIDTH_225
 0x80

	)

677 
	#RFLR_PLL_BANDWIDTH_300
 0xC0

678 

	)

682 
	#RFLR_PLLLOWPN_BANDWIDTH_MASK
 0x3F

	)

683 
	#RFLR_PLLLOWPN_BANDWIDTH_75
 0x00

	)

684 
	#RFLR_PLLLOWPN_BANDWIDTH_150
 0x40

	)

685 
	#RFLR_PLLLOWPN_BANDWIDTH_225
 0x80

	)

686 
	#RFLR_PLLLOWPN_BANDWIDTH_300
 0xC0

687 

	)

691 
	#RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK
 0xF7

	)

692 
	#RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_ON
 0x08

	)

693 
	#RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_OFF
 0x00

694 

	)

695 
	#RFLR_MODEMCONFIG3_AGCAUTO_MASK
 0xFB

	)

696 
	#RFLR_MODEMCONFIG3_AGCAUTO_ON
 0x04

697 
	#RFLR_MODEMCONFIG3_AGCAUTO_OFF
 0x00

	)

703 
	ssSX1276LR


705 
uöt8_t
 
	mRegFifo
;

707 
uöt8_t
 
	mRegOpMode
;

708 
uöt8_t
 
	mRegRes02
;

709 
uöt8_t
 
	mRegRes03
;

710 
uöt8_t
 
	mRegB™dSëtög
;

711 
uöt8_t
 
	mRegRes05
;

712 
uöt8_t
 
	mRegFrfMsb
;

713 
uöt8_t
 
	mRegFrfMid
;

714 
uöt8_t
 
	mRegFrfLsb
;

716 
uöt8_t
 
	mRegPaC⁄fig
;

717 
uöt8_t
 
	mRegPaRamp
;

718 
uöt8_t
 
	mRegO˝
;

720 
uöt8_t
 
	mRegL«
;

722 
uöt8_t
 
	mRegFifoAddrPå
;

723 
uöt8_t
 
	mRegFifoTxBa£Addr
;

724 
uöt8_t
 
	mRegFifoRxBa£Addr
;

725 
uöt8_t
 
	mRegFifoRxCuºítAddr
;

726 
uöt8_t
 
	mRegIrqFœgsMask
;

727 
uöt8_t
 
	mRegIrqFœgs
;

728 
uöt8_t
 
	mRegNbRxByãs
;

729 
uöt8_t
 
	mRegRxHódîC¡VÆueMsb
;

730 
uöt8_t
 
	mRegRxHódîC¡VÆueLsb
;

731 
uöt8_t
 
	mRegRxPackëC¡VÆueMsb
;

732 
uöt8_t
 
	mRegRxPackëC¡VÆueLsb
;

733 
uöt8_t
 
	mRegModemSèt
;

734 
uöt8_t
 
	mRegPktSƒVÆue
;

735 
uöt8_t
 
	mRegPktRssiVÆue
;

736 
uöt8_t
 
	mRegRssiVÆue
;

737 
uöt8_t
 
	mRegH›Ch™√l
;

738 
uöt8_t
 
	mRegModemC⁄fig1
;

739 
uöt8_t
 
	mRegModemC⁄fig2
;

740 
uöt8_t
 
	mRegSymbTimeoutLsb
;

741 
uöt8_t
 
	mRegPªambÀMsb
;

742 
uöt8_t
 
	mRegPªambÀLsb
;

743 
uöt8_t
 
	mRegPaylﬂdLígth
;

744 
uöt8_t
 
	mRegMaxPaylﬂdLígth
;

745 
uöt8_t
 
	mRegH›Pîiod
;

746 
uöt8_t
 
	mRegFifoRxByãAddr
;

747 
uöt8_t
 
	mRegModemC⁄fig3
;

748 
uöt8_t
 
	mRegTe°Re£rved27
[0x30 - 0x27];

749 
uöt8_t
 
	mRegTe°Re£rved31
;

750 
uöt8_t
 
	mRegTe°Re£rved32
[0x40 - 0x32];

752 
uöt8_t
 
	mRegDioM≠pög1
;

753 
uöt8_t
 
	mRegDioM≠pög2
;

755 
uöt8_t
 
	mRegVîsi⁄
;

757 
uöt8_t
 
	mRegAgcRef
;

758 
uöt8_t
 
	mRegAgcThªsh1
;

759 
uöt8_t
 
	mRegAgcThªsh2
;

760 
uöt8_t
 
	mRegAgcThªsh3
;

762 
uöt8_t
 
	mRegTe°Re£rved47
[0x4B - 0x47];

764 
uöt8_t
 
	mRegPŒH›
;

765 
uöt8_t
 
	mRegTe°Re£rved4C
;

766 
uöt8_t
 
	mRegPaDac
;

768 
uöt8_t
 
	mRegTe°Re£rved4E
[0x58-0x4E];

770 
uöt8_t
 
	mRegTcxo
;

772 
uöt8_t
 
	mRegTe°Re£rved59
;

774 
uöt8_t
 
	mRegTe°Re£rved5B
;

776 
uöt8_t
 
	mRegPŒ
;

778 
uöt8_t
 
	mRegTe°Re£rved5D
;

780 
uöt8_t
 
	mRegPŒLowPn
;

782 
uöt8_t
 
	mRegTe°Re£rved5F
[0x6C - 0x5F];

784 
uöt8_t
 
	mRegF‹mîTemp
;

786 
uöt8_t
 
	mRegTe°Re£rved6D
[0x71 - 0x6D];

787 }
	ttSX1276LR
;

789 
tSX1276LR
* 
SX1276LR
;

794 
SX1276LoRaInô
( );

799 
SX1276LoRaSëDeÁu…s
( );

806 
SX1276LoRaSëLoRaOn
–
boﬁ
 
íabÀ
 );

813 
SX1276LoRaSëOpMode
–
uöt8_t
 
›Mode
 );

820 
uöt8_t
 
SX1276LoRaGëOpMode
( );

827 
uöt8_t
 
SX1276LoRaRódRxGaö
( );

834 
SX1276LoRaRódRssi
( );

841 
uöt8_t
 
SX1276LoRaGëPackëRxGaö
( );

848 
öt8_t
 
SX1276LoRaGëPackëSƒ
( );

855 
SX1276LoRaGëPackëRssi
( );

860 
SX1276LoRaSèπRx
( );

868 
SX1276LoRaGëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 );

876 
SX1276LoRaSëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 );

885 
uöt8_t
 
SX1276LoRaGëRFSèã
( );

892 
SX1276LoRaSëRFSèã
–
uöt8_t
 
°©e
 );

902 
uöt32_t
 
SX1276LoRaPro˚ss
( );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-LoRaMisc.c

29 
	~"∂©f‹m.h
"

31 #i‡
deföed
–
USE_SX1276_RADIO
 )

33 
	~"sx1276-HÆ.h
"

34 
	~"sx1276.h
"

36 
	~"sx1276-LoRa.h
"

37 
	~"sx1276-LoRaMisc.h
"

42 
	#XTAL_FREQ
 32000000

	)

43 
	#FREQ_STEP
 61.03515625

	)

45 
tLoRaSëtögs
 
LoRaSëtögs
;

47 
	$SX1276LoRaSëRFFªquícy
–
uöt32_t
 
‰eq
 )

49 
LoRaSëtögs
.
RFFªquícy
 = 
‰eq
;

51 
‰eq
 = ( 
uöt32_t
 )––)‰eq / ( )
FREQ_STEP
 );

52 
SX1276LR
->
RegFrfMsb
 = ( 
uöt8_t
 )––
‰eq
 >> 16 ) & 0xFF );

53 
SX1276LR
->
RegFrfMid
 = ( 
uöt8_t
 )––
‰eq
 >> 8 ) & 0xFF );

54 
SX1276LR
->
RegFrfLsb
 = ( 
uöt8_t
 )–
‰eq
 & 0xFF );

55 
	`SX1276WrôeBuf„r
–
REG_LR_FRFMSB
, &
SX1276LR
->
RegFrfMsb
, 3 );

57 
	`SX1276Ród
–
REG_LR_PACONFIG
, &
SX1276LR
->
RegPaC⁄fig
 );

59 if–
LoRaSëtögs
.
RFFªquícy
 > 860000000 )

61 
SX1276LR
->
RegPaC⁄fig
 = ( SX1276LR->RegPaC⁄fig & 
RFLR_PACONFIG_PASELECT_MASK
 ) | 
RFLR_PACONFIG_PASELECT_RFO
;

65 
SX1276LR
->
RegPaC⁄fig
 = ( SX1276LR->RegPaC⁄fig & 
RFLR_PACONFIG_PASELECT_MASK
 ) | 
RFLR_PACONFIG_PASELECT_PABOOST
;

67 
	`SX1276Wrôe
–
REG_LR_PACONFIG
, 
SX1276LR
->
RegPaC⁄fig
 );

68 
	}
}

70 
uöt32_t
 
	$SX1276LoRaGëRFFªquícy
( )

72 
	`SX1276RódBuf„r
–
REG_LR_FRFMSB
, &
SX1276LR
->
RegFrfMsb
, 3 );

73 
LoRaSëtögs
.
RFFªquícy
 = ( ( 
uöt32_t
 )
SX1276LR
->
RegFrfMsb
 << 16 ) | ( ( uöt32_à)SX1276LR->
RegFrfMid
 << 8 ) | ( ( uöt32_à)SX1276LR->
RegFrfLsb
 );

74 
LoRaSëtögs
.
RFFªquícy
 = ( 
uöt32_t
 )––)LoRaSëtögs.RFFªquícy * ( )
FREQ_STEP
 );

76  
LoRaSëtögs
.
RFFªquícy
;

77 
	}
}

79 
	$SX1276LoRaSëRFPowî
–
öt8_t
 
powî
 )

81 
	`SX1276Ród
–
REG_LR_PACONFIG
, &
SX1276LR
->
RegPaC⁄fig
 );

82 
	`SX1276Ród
–
REG_LR_PADAC
, &
SX1276LR
->
RegPaDac
 );

84 if––
SX1276LR
->
RegPaC⁄fig
 & 
RFLR_PACONFIG_PASELECT_PABOOST
 ) == RFLR_PACONFIG_PASELECT_PABOOST )

86 if––
SX1276LR
->
RegPaDac
 & 0x87 ) == 0x87 )

88 if–
powî
 < 5 )

90 
powî
 = 5;

92 if–
powî
 > 20 )

94 
powî
 = 20;

96 
SX1276LR
->
RegPaC⁄fig
 = ( SX1276LR->RegPaC⁄fig & 
RFLR_PACONFIG_MAX_POWER_MASK
 ) | 0x70;

97 
SX1276LR
->
RegPaC⁄fig
 = ( SX1276LR->RegPaC⁄fig & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 - 5 ) & 0x0F );

101 if–
powî
 < 2 )

103 
powî
 = 2;

105 if–
powî
 > 17 )

107 
powî
 = 17;

109 
SX1276LR
->
RegPaC⁄fig
 = ( SX1276LR->RegPaC⁄fig & 
RFLR_PACONFIG_MAX_POWER_MASK
 ) | 0x70;

110 
SX1276LR
->
RegPaC⁄fig
 = ( SX1276LR->RegPaC⁄fig & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 - 2 ) & 0x0F );

115 if–
powî
 < -1 )

117 
powî
 = -1;

119 if–
powî
 > 14 )

121 
powî
 = 14;

123 
SX1276LR
->
RegPaC⁄fig
 = ( SX1276LR->RegPaC⁄fig & 
RFLR_PACONFIG_MAX_POWER_MASK
 ) | 0x70;

124 
SX1276LR
->
RegPaC⁄fig
 = ( SX1276LR->RegPaC⁄fig & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 + 1 ) & 0x0F );

126 
	`SX1276Wrôe
–
REG_LR_PACONFIG
, 
SX1276LR
->
RegPaC⁄fig
 );

127 
LoRaSëtögs
.
Powî
 = 
powî
;

128 
	}
}

130 
öt8_t
 
	$SX1276LoRaGëRFPowî
( )

132 
	`SX1276Ród
–
REG_LR_PACONFIG
, &
SX1276LR
->
RegPaC⁄fig
 );

133 
	`SX1276Ród
–
REG_LR_PADAC
, &
SX1276LR
->
RegPaDac
 );

135 if––
SX1276LR
->
RegPaC⁄fig
 & 
RFLR_PACONFIG_PASELECT_PABOOST
 ) == RFLR_PACONFIG_PASELECT_PABOOST )

137 if––
SX1276LR
->
RegPaDac
 & 0x07 ) == 0x07 )

139 
LoRaSëtögs
.
Powî
 = 5 + ( 
SX1276LR
->
RegPaC⁄fig
 & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 );

143 
LoRaSëtögs
.
Powî
 = 2 + ( 
SX1276LR
->
RegPaC⁄fig
 & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 );

148 
LoRaSëtögs
.
Powî
 = -1 + ( 
SX1276LR
->
RegPaC⁄fig
 & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 );

150  
LoRaSëtögs
.
Powî
;

151 
	}
}

153 
	$SX1276LoRaSëSig«lB™dwidth
–
uöt8_t
 
bw
 )

155 
	`SX1276Ród
–
REG_LR_MODEMCONFIG1
, &
SX1276LR
->
RegModemC⁄fig1
 );

156 
SX1276LR
->
RegModemC⁄fig1
 = ( SX1276LR->RegModemC⁄fig1 & 
RFLR_MODEMCONFIG1_BW_MASK
 ) | ( 
bw
 << 4 );

157 
	`SX1276Wrôe
–
REG_LR_MODEMCONFIG1
, 
SX1276LR
->
RegModemC⁄fig1
 );

158 
LoRaSëtögs
.
Sig«lBw
 = 
bw
;

159 
	}
}

161 
uöt8_t
 
	$SX1276LoRaGëSig«lB™dwidth
( )

163 
	`SX1276Ród
–
REG_LR_MODEMCONFIG1
, &
SX1276LR
->
RegModemC⁄fig1
 );

164 
LoRaSëtögs
.
Sig«lBw
 = ( 
SX1276LR
->
RegModemC⁄fig1
 & ~
RFLR_MODEMCONFIG1_BW_MASK
 ) >> 4;

165  
LoRaSëtögs
.
Sig«lBw
;

166 
	}
}

168 
	$SX1276LoRaSëS¥ódögFa˘‹
–
uöt8_t
 
Á˘‹
 )

171 if–
Á˘‹
 > 12 )

173 
Á˘‹
 = 12;

175 if–
Á˘‹
 < 6 )

177 
Á˘‹
 = 6;

180 if–
Á˘‹
 == 6 )

182 
	`SX1276LoRaSëNbTrigPóks
( 5 );

186 
	`SX1276LoRaSëNbTrigPóks
( 3 );

189 
	`SX1276Ród
–
REG_LR_MODEMCONFIG2
, &
SX1276LR
->
RegModemC⁄fig2
 );

190 
SX1276LR
->
RegModemC⁄fig2
 = ( SX1276LR->RegModemC⁄fig2 & 
RFLR_MODEMCONFIG2_SF_MASK
 ) | ( 
Á˘‹
 << 4 );

191 
	`SX1276Wrôe
–
REG_LR_MODEMCONFIG2
, 
SX1276LR
->
RegModemC⁄fig2
 );

192 
LoRaSëtögs
.
S¥ódögFa˘‹
 = 
Á˘‹
;

193 
	}
}

195 
uöt8_t
 
	$SX1276LoRaGëS¥ódögFa˘‹
( )

197 
	`SX1276Ród
–
REG_LR_MODEMCONFIG2
, &
SX1276LR
->
RegModemC⁄fig2
 );

198 
LoRaSëtögs
.
S¥ódögFa˘‹
 = ( 
SX1276LR
->
RegModemC⁄fig2
 & ~
RFLR_MODEMCONFIG2_SF_MASK
 ) >> 4;

199  
LoRaSëtögs
.
S¥ódögFa˘‹
;

200 
	}
}

202 
	$SX1276LoRaSëEº‹Codög
–
uöt8_t
 
vÆue
 )

204 
	`SX1276Ród
–
REG_LR_MODEMCONFIG1
, &
SX1276LR
->
RegModemC⁄fig1
 );

205 
SX1276LR
->
RegModemC⁄fig1
 = ( SX1276LR->RegModemC⁄fig1 & 
RFLR_MODEMCONFIG1_CODINGRATE_MASK
 ) | ( 
vÆue
 << 1 );

206 
	`SX1276Wrôe
–
REG_LR_MODEMCONFIG1
, 
SX1276LR
->
RegModemC⁄fig1
 );

207 
LoRaSëtögs
.
Eº‹Codög
 = 
vÆue
;

208 
	}
}

210 
uöt8_t
 
	$SX1276LoRaGëEº‹Codög
( )

212 
	`SX1276Ród
–
REG_LR_MODEMCONFIG1
, &
SX1276LR
->
RegModemC⁄fig1
 );

213 
LoRaSëtögs
.
Eº‹Codög
 = ( 
SX1276LR
->
RegModemC⁄fig1
 & ~
RFLR_MODEMCONFIG1_CODINGRATE_MASK
 ) >> 1;

214  
LoRaSëtögs
.
Eº‹Codög
;

215 
	}
}

217 
	$SX1276LoRaSëPackëCrcOn
–
boﬁ
 
íabÀ
 )

219 
	`SX1276Ród
–
REG_LR_MODEMCONFIG2
, &
SX1276LR
->
RegModemC⁄fig2
 );

220 
SX1276LR
->
RegModemC⁄fig2
 = ( SX1276LR->RegModemC⁄fig2 & 
RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK
 ) | ( 
íabÀ
 << 2 );

221 
	`SX1276Wrôe
–
REG_LR_MODEMCONFIG2
, 
SX1276LR
->
RegModemC⁄fig2
 );

222 
LoRaSëtögs
.
CrcOn
 = 
íabÀ
;

223 
	}
}

225 
	$SX1276LoRaSëPªambÀLígth
–
uöt16_t
 
vÆue
 )

227 
	`SX1276RódBuf„r
–
REG_LR_PREAMBLEMSB
, &
SX1276LR
->
RegPªambÀMsb
, 2 );

229 
SX1276LR
->
RegPªambÀMsb
 = ( 
vÆue
 >> 8 ) & 0x00FF;

230 
SX1276LR
->
RegPªambÀLsb
 = 
vÆue
 & 0xFF;

231 
	`SX1276WrôeBuf„r
–
REG_LR_PREAMBLEMSB
, &
SX1276LR
->
RegPªambÀMsb
, 2 );

232 
	}
}

234 
uöt16_t
 
	$SX1276LoRaGëPªambÀLígth
( )

236 
	`SX1276RódBuf„r
–
REG_LR_PREAMBLEMSB
, &
SX1276LR
->
RegPªambÀMsb
, 2 );

237  ( ( 
SX1276LR
->
RegPªambÀMsb
 & 0x00FF ) << 8 ) | SX1276LR->
RegPªambÀLsb
;

238 
	}
}

240 
boﬁ
 
	$SX1276LoRaGëPackëCrcOn
( )

242 
	`SX1276Ród
–
REG_LR_MODEMCONFIG2
, &
SX1276LR
->
RegModemC⁄fig2
 );

243 
LoRaSëtögs
.
CrcOn
 = ( 
SX1276LR
->
RegModemC⁄fig2
 & 
RFLR_MODEMCONFIG2_RXPAYLOADCRC_ON
 ) >> 1;

244  
LoRaSëtögs
.
CrcOn
;

245 
	}
}

247 
	$SX1276LoRaSëIm∂icôHódîOn
–
boﬁ
 
íabÀ
 )

249 
	`SX1276Ród
–
REG_LR_MODEMCONFIG1
, &
SX1276LR
->
RegModemC⁄fig1
 );

250 
SX1276LR
->
RegModemC⁄fig1
 = ( SX1276LR->RegModemC⁄fig1 & 
RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK
 ) | ( 
íabÀ
 );

251 
	`SX1276Wrôe
–
REG_LR_MODEMCONFIG1
, 
SX1276LR
->
RegModemC⁄fig1
 );

252 
LoRaSëtögs
.
Im∂icôHódîOn
 = 
íabÀ
;

253 
	}
}

255 
boﬁ
 
	$SX1276LoRaGëIm∂icôHódîOn
( )

257 
	`SX1276Ród
–
REG_LR_MODEMCONFIG1
, &
SX1276LR
->
RegModemC⁄fig1
 );

258 
LoRaSëtögs
.
Im∂icôHódîOn
 = ( 
SX1276LR
->
RegModemC⁄fig1
 & 
RFLR_MODEMCONFIG1_IMPLICITHEADER_ON
 );

259  
LoRaSëtögs
.
Im∂icôHódîOn
;

260 
	}
}

262 
	$SX1276LoRaSëRxSögÀOn
–
boﬁ
 
íabÀ
 )

264 
LoRaSëtögs
.
RxSögÀOn
 = 
íabÀ
;

265 
	}
}

267 
boﬁ
 
	$SX1276LoRaGëRxSögÀOn
( )

269  
LoRaSëtögs
.
RxSögÀOn
;

270 
	}
}

272 
	$SX1276LoRaSëFªqH›On
–
boﬁ
 
íabÀ
 )

274 
LoRaSëtögs
.
FªqH›On
 = 
íabÀ
;

275 
	}
}

277 
boﬁ
 
	$SX1276LoRaGëFªqH›On
( )

279  
LoRaSëtögs
.
FªqH›On
;

280 
	}
}

282 
	$SX1276LoRaSëH›Pîiod
–
uöt8_t
 
vÆue
 )

284 
SX1276LR
->
RegH›Pîiod
 = 
vÆue
;

285 
	`SX1276Wrôe
–
REG_LR_HOPPERIOD
, 
SX1276LR
->
RegH›Pîiod
 );

286 
LoRaSëtögs
.
H›Pîiod
 = 
vÆue
;

287 
	}
}

289 
uöt8_t
 
	$SX1276LoRaGëH›Pîiod
( )

291 
	`SX1276Ród
–
REG_LR_HOPPERIOD
, &
SX1276LR
->
RegH›Pîiod
 );

292 
LoRaSëtögs
.
H›Pîiod
 = 
SX1276LR
->
RegH›Pîiod
;

293  
LoRaSëtögs
.
H›Pîiod
;

294 
	}
}

296 
	$SX1276LoRaSëTxPackëTimeout
–
uöt32_t
 
vÆue
 )

298 
LoRaSëtögs
.
TxPackëTimeout
 = 
vÆue
;

299 
	}
}

301 
uöt32_t
 
	$SX1276LoRaGëTxPackëTimeout
( )

303  
LoRaSëtögs
.
TxPackëTimeout
;

304 
	}
}

306 
	$SX1276LoRaSëRxPackëTimeout
–
uöt32_t
 
vÆue
 )

308 
LoRaSëtögs
.
RxPackëTimeout
 = 
vÆue
;

309 
	}
}

311 
uöt32_t
 
	$SX1276LoRaGëRxPackëTimeout
( )

313  
LoRaSëtögs
.
RxPackëTimeout
;

314 
	}
}

316 
	$SX1276LoRaSëPaylﬂdLígth
–
uöt8_t
 
vÆue
 )

318 
SX1276LR
->
RegPaylﬂdLígth
 = 
vÆue
;

319 
	`SX1276Wrôe
–
REG_LR_PAYLOADLENGTH
, 
SX1276LR
->
RegPaylﬂdLígth
 );

320 
LoRaSëtögs
.
PaylﬂdLígth
 = 
vÆue
;

321 
	}
}

323 
uöt8_t
 
	$SX1276LoRaGëPaylﬂdLígth
( )

325 
	`SX1276Ród
–
REG_LR_PAYLOADLENGTH
, &
SX1276LR
->
RegPaylﬂdLígth
 );

326 
LoRaSëtögs
.
PaylﬂdLígth
 = 
SX1276LR
->
RegPaylﬂdLígth
;

327  
LoRaSëtögs
.
PaylﬂdLígth
;

328 
	}
}

330 
	$SX1276LoRaSëPa20dBm
–
boﬁ
 
íÆe
 )

332 
	`SX1276Ród
–
REG_LR_PADAC
, &
SX1276LR
->
RegPaDac
 );

333 
	`SX1276Ród
–
REG_LR_PACONFIG
, &
SX1276LR
->
RegPaC⁄fig
 );

335 if––
SX1276LR
->
RegPaC⁄fig
 & 
RFLR_PACONFIG_PASELECT_PABOOST
 ) == RFLR_PACONFIG_PASELECT_PABOOST )

337 if–
íÆe
 =
åue
 )

339 
SX1276LR
->
RegPaDac
 = 0x87;

344 
SX1276LR
->
RegPaDac
 = 0x84;

346 
	`SX1276Wrôe
–
REG_LR_PADAC
, 
SX1276LR
->
RegPaDac
 );

347 
	}
}

349 
boﬁ
 
	$SX1276LoRaGëPa20dBm
( )

351 
	`SX1276Ród
–
REG_LR_PADAC
, &
SX1276LR
->
RegPaDac
 );

353  ( ( 
SX1276LR
->
RegPaDac
 & 0x07 ) =0x07 ) ? 
åue
 : 
Ál£
;

354 
	}
}

356 
	$SX1276LoRaSëPaRamp
–
uöt8_t
 
vÆue
 )

358 
	`SX1276Ród
–
REG_LR_PARAMP
, &
SX1276LR
->
RegPaRamp
 );

359 
SX1276LR
->
RegPaRamp
 = ( SX1276LR->RegPaRam∞& 
RFLR_PARAMP_MASK
 ) | ( 
vÆue
 & ~RFLR_PARAMP_MASK );

360 
	`SX1276Wrôe
–
REG_LR_PARAMP
, 
SX1276LR
->
RegPaRamp
 );

361 
	}
}

363 
uöt8_t
 
	$SX1276LoRaGëPaRamp
( )

365 
	`SX1276Ród
–
REG_LR_PARAMP
, &
SX1276LR
->
RegPaRamp
 );

366  
SX1276LR
->
RegPaRamp
 & ~
RFLR_PARAMP_MASK
;

367 
	}
}

369 
	$SX1276LoRaSëSymbTimeout
–
uöt16_t
 
vÆue
 )

371 
	`SX1276RódBuf„r
–
REG_LR_MODEMCONFIG2
, &
SX1276LR
->
RegModemC⁄fig2
, 2 );

373 
SX1276LR
->
RegModemC⁄fig2
 = ( SX1276LR->RegModemC⁄fig2 & 
RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK
 ) | ( ( 
vÆue
 >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK );

374 
SX1276LR
->
RegSymbTimeoutLsb
 = 
vÆue
 & 0xFF;

375 
	`SX1276WrôeBuf„r
–
REG_LR_MODEMCONFIG2
, &
SX1276LR
->
RegModemC⁄fig2
, 2 );

376 
	}
}

378 
uöt16_t
 
	$SX1276LoRaGëSymbTimeout
( )

380 
	`SX1276RódBuf„r
–
REG_LR_MODEMCONFIG2
, &
SX1276LR
->
RegModemC⁄fig2
, 2 );

381  ( ( 
SX1276LR
->
RegModemC⁄fig2
 & ~
RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK
 ) << 8 ) | SX1276LR->
RegSymbTimeoutLsb
;

382 
	}
}

384 
	$SX1276LoRaSëLowD©¨©eO±imize
–
boﬁ
 
íabÀ
 )

386 
	`SX1276Ród
–
REG_LR_MODEMCONFIG3
, &
SX1276LR
->
RegModemC⁄fig3
 );

387 
SX1276LR
->
RegModemC⁄fig3
 = ( SX1276LR->RegModemC⁄fig3 & 
RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK
 ) | ( 
íabÀ
 << 3 );

388 
	`SX1276Wrôe
–
REG_LR_MODEMCONFIG3
, 
SX1276LR
->
RegModemC⁄fig3
 );

389 
	}
}

391 
boﬁ
 
	$SX1276LoRaGëLowD©¨©eO±imize
( )

393 
	`SX1276Ród
–
REG_LR_MODEMCONFIG3
, &
SX1276LR
->
RegModemC⁄fig3
 );

394  ( ( 
SX1276LR
->
RegModemC⁄fig3
 & 
RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_ON
 ) >> 3 );

395 
	}
}

397 
	$SX1276LoRaSëNbTrigPóks
–
uöt8_t
 
vÆue
 )

399 
	`SX1276Ród
–0x31, &
SX1276LR
->
RegTe°Re£rved31
 );

400 
SX1276LR
->
RegTe°Re£rved31
 = ( SX1276LR->RegTe°Re£rved31 & 0xF8 ) | 
vÆue
;

401 
	`SX1276Wrôe
–0x31, 
SX1276LR
->
RegTe°Re£rved31
 );

402 
	}
}

404 
uöt8_t
 
	$SX1276LoRaGëNbTrigPóks
( )

406 
	`SX1276Ród
–0x31, &
SX1276LR
->
RegTe°Re£rved31
 );

407  ( 
SX1276LR
->
RegTe°Re£rved31
 & 0x07 );

408 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-LoRaMisc.h

29 #i‚de‡
__SX1276_LORA_MISC_H__


30 
	#__SX1276_LORA_MISC_H__


	)

38 
SX1276LoRaSëRFFªquícy
–
uöt32_t
 
‰eq
 );

45 
uöt32_t
 
SX1276LoRaGëRFFªquícy
( );

52 
SX1276LoRaSëRFPowî
–
öt8_t
 
powî
 );

59 
öt8_t
 
SX1276LoRaGëRFPowî
( );

68 
SX1276LoRaSëSig«lB™dwidth
–
uöt8_t
 
bw
 );

75 
uöt8_t
 
SX1276LoRaGëSig«lB™dwidth
( );

82 
SX1276LoRaSëS¥ódögFa˘‹
–
uöt8_t
 
Á˘‹
 );

89 
uöt8_t
 
SX1276LoRaGëS¥ódögFa˘‹
( );

96 
SX1276LoRaSëEº‹Codög
–
uöt8_t
 
vÆue
 );

103 
uöt8_t
 
SX1276LoRaGëEº‹Codög
( );

110 
SX1276LoRaSëPackëCrcOn
–
boﬁ
 
íabÀ
 );

117 
boﬁ
 
SX1276LoRaGëPackëCrcOn
( );

124 
SX1276LoRaSëIm∂icôHódîOn
–
boﬁ
 
íabÀ
 );

131 
boﬁ
 
SX1276LoRaGëIm∂icôHódîOn
( );

138 
SX1276LoRaSëRxSögÀOn
–
boﬁ
 
íabÀ
 );

145 
boﬁ
 
SX1276LoRaGëRxSögÀOn
( );

153 
SX1276LoRaSëFªqH›On
–
boﬁ
 
íabÀ
 );

160 
boﬁ
 
SX1276LoRaGëFªqH›On
( );

167 
SX1276LoRaSëH›Pîiod
–
uöt8_t
 
vÆue
 );

174 
uöt8_t
 
SX1276LoRaGëH›Pîiod
( );

181 
SX1276LoRaSëTxPackëTimeout
–
uöt32_t
 
vÆue
 );

188 
uöt32_t
 
SX1276LoRaGëTxPackëTimeout
( );

195 
SX1276LoRaSëRxPackëTimeout
–
uöt32_t
 
vÆue
 );

202 
uöt32_t
 
SX1276LoRaGëRxPackëTimeout
( );

209 
SX1276LoRaSëPaylﬂdLígth
–
uöt8_t
 
vÆue
 );

216 
uöt8_t
 
SX1276LoRaGëPaylﬂdLígth
( );

223 
SX1276LoRaSëPa20dBm
–
boﬁ
 
íÆe
 );

230 
boﬁ
 
SX1276LoRaGëPa20dBm
( );

237 
SX1276LoRaSëPaRamp
–
uöt8_t
 
vÆue
 );

244 
uöt8_t
 
SX1276LoRaGëPaRamp
( );

251 
SX1276LoRaSëSymbTimeout
–
uöt16_t
 
vÆue
 );

258 
uöt16_t
 
SX1276LoRaGëSymbTimeout
( );

265 
SX1276LoRaSëLowD©¨©eO±imize
–
boﬁ
 
íabÀ
 );

272 
boﬁ
 
SX1276LoRaGëLowD©¨©eO±imize
( );

279 
uöt16_t
 
SX1276LoRaGëPªambÀLígth
( );

286 
SX1276LoRaSëPªambÀLígth
–
uöt16_t
 
vÆue
 );

293 
SX1276LoRaSëNbTrigPóks
–
uöt8_t
 
vÆue
 );

300 
uöt8_t
 
SX1276LoRaGëNbTrigPóks
( );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276.c

22 
	~"∂©f‹m.h
"

23 
	~"ødio.h
"

25 #i‡
deföed
–
USE_SX1276_RADIO
 )

27 
	~"sx1276.h
"

29 
	~"sx1276-HÆ.h
"

30 
	~"sx1276-Fsk.h
"

31 
	~"sx1276-LoRa.h
"

36 
uöt8_t
 
	gSX1276Regs
[0x70];

38 
boﬁ
 
	gLoRaOn
 = 
Ál£
;

39 
boﬁ
 
	gLoRaOnSèã
 = 
Ál£
;

41 
	$SX1276Inô
( )

44 
SX1276
 = ( 
tSX1276
* )
SX1276Regs
;

45 
SX1276LR
 = ( 
tSX1276LR
* )
SX1276Regs
;

47 
	`SX1276InôIo
( );

49 
	`SX1276Re£t
( );

53 #i‡–
LORA
 == 0 )

55 
LoRaOn
 = 
Ál£
;

56 
	`SX1276SëLoRaOn
–
LoRaOn
 );

58 
	`SX1276FskInô
( );

62 
LoRaOn
 = 
åue
;

63 
	`SX1276SëLoRaOn
–
LoRaOn
 );

65 
	`SX1276LoRaInô
( );

69 
	}
}

71 
	$SX1276Re£t
( )

73 
	`SX1276SëRe£t
–
RADIO_RESET_ON
 );

76 
uöt32_t
 
°¨tTick
 = 
	`GET_TICK_COUNT
( );

77  ( 
	`GET_TICK_COUNT
–Ë- 
°¨tTick
 ) < 
	`TICK_RATE_MS
( 1 ) );

79 
	`SX1276SëRe£t
–
RADIO_RESET_OFF
 );

82 
°¨tTick
 = 
	`GET_TICK_COUNT
( );

83  ( 
	`GET_TICK_COUNT
–Ë- 
°¨tTick
 ) < 
	`TICK_RATE_MS
( 6 ) );

84 
	}
}

86 
	$SX1276SëLoRaOn
–
boﬁ
 
íabÀ
 )

88 if–
LoRaOnSèã
 =
íabÀ
 )

92 
LoRaOnSèã
 = 
íabÀ
;

93 
LoRaOn
 = 
íabÀ
;

95 if–
LoRaOn
 =
åue
 )

97 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_SLEEP
 );

99 
SX1276LR
->
RegOpMode
 = ( SX1276LR->RegOpModê& 
RFLR_OPMODE_LONGRANGEMODE_MASK
 ) | 
RFLR_OPMODE_LONGRANGEMODE_ON
;

100 
	`SX1276Wrôe
–
REG_LR_OPMODE
, 
SX1276LR
->
RegOpMode
 );

102 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

104 
SX1276LR
->
RegDioM≠pög1
 = 
RFLR_DIOMAPPING1_DIO0_00
 | 
RFLR_DIOMAPPING1_DIO1_00
 | 
RFLR_DIOMAPPING1_DIO2_00
 | 
RFLR_DIOMAPPING1_DIO3_00
;

106 
SX1276LR
->
RegDioM≠pög2
 = 
RFLR_DIOMAPPING2_DIO4_00
 | 
RFLR_DIOMAPPING2_DIO5_00
;

107 
	`SX1276WrôeBuf„r
–
REG_LR_DIOMAPPING1
, &
SX1276LR
->
RegDioM≠pög1
, 2 );

109 
	`SX1276RódBuf„r
–
REG_LR_OPMODE
, 
SX1276Regs
 + 1, 0x70 - 1 );

113 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_SLEEP
 );

115 
SX1276LR
->
RegOpMode
 = ( SX1276LR->RegOpModê& 
RFLR_OPMODE_LONGRANGEMODE_MASK
 ) | 
RFLR_OPMODE_LONGRANGEMODE_OFF
;

116 
	`SX1276Wrôe
–
REG_LR_OPMODE
, 
SX1276LR
->
RegOpMode
 );

118 
	`SX1276LoRaSëOpMode
–
RFLR_OPMODE_STANDBY
 );

120 
	`SX1276RódBuf„r
–
REG_OPMODE
, 
SX1276Regs
 + 1, 0x70 - 1 );

122 
	}
}

124 
boﬁ
 
	$SX1276GëLoRaOn
( )

126  
LoRaOn
;

127 
	}
}

129 
	$SX1276SëOpMode
–
uöt8_t
 
›Mode
 )

131 if–
LoRaOn
 =
Ál£
 )

133 
	`SX1276FskSëOpMode
–
›Mode
 );

137 
	`SX1276LoRaSëOpMode
–
›Mode
 );

139 
	}
}

141 
uöt8_t
 
	$SX1276GëOpMode
( )

143 if–
LoRaOn
 =
Ál£
 )

145  
	`SX1276FskGëOpMode
( );

149  
	`SX1276LoRaGëOpMode
( );

151 
	}
}

153 
	$SX1276RódRssi
( )

155 if–
LoRaOn
 =
Ál£
 )

157  
	`SX1276FskRódRssi
( );

161  
	`SX1276LoRaRódRssi
( );

163 
	}
}

165 
uöt8_t
 
	$SX1276RódRxGaö
( )

167 if–
LoRaOn
 =
Ál£
 )

169  
	`SX1276FskRódRxGaö
( );

173  
	`SX1276LoRaRódRxGaö
( );

175 
	}
}

177 
uöt8_t
 
	$SX1276GëPackëRxGaö
( )

179 if–
LoRaOn
 =
Ál£
 )

181  
	`SX1276FskGëPackëRxGaö
( );

185  
	`SX1276LoRaGëPackëRxGaö
( );

187 
	}
}

189 
öt8_t
 
	$SX1276GëPackëSƒ
( )

191 if–
LoRaOn
 =
Ál£
 )

201  
	`SX1276LoRaGëPackëSƒ
( );

203 
	}
}

205 
	$SX1276GëPackëRssi
( )

207 if–
LoRaOn
 =
Ál£
 )

209  
	`SX1276FskGëPackëRssi
( );

213  
	`SX1276LoRaGëPackëRssi
( );

215 
	}
}

217 
uöt32_t
 
	$SX1276GëPackëAfc
( )

219 if–
LoRaOn
 =
Ál£
 )

221  
	`SX1276FskGëPackëAfc
( );

231 
	}
}

233 
	$SX1276SèπRx
( )

235 if–
LoRaOn
 =
Ál£
 )

237 
	`SX1276FskSëRFSèã
–
RF_STATE_RX_INIT
 );

241 
	`SX1276LoRaSëRFSèã
–
RFLR_STATE_RX_INIT
 );

243 
	}
}

245 
	$SX1276GëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 )

247 if–
LoRaOn
 =
Ál£
 )

249 
	`SX1276FskGëRxPackë
–
buf„r
, 
size
 );

253 
	`SX1276LoRaGëRxPackë
–
buf„r
, 
size
 );

255 
	}
}

257 
	$SX1276SëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 )

259 if–
LoRaOn
 =
Ál£
 )

261 
	`SX1276FskSëTxPackë
–
buf„r
, 
size
 );

265 
	`SX1276LoRaSëTxPackë
–
buf„r
, 
size
 );

267 
	}
}

269 
uöt8_t
 
	$SX1276GëRFSèã
( )

271 if–
LoRaOn
 =
Ál£
 )

273  
	`SX1276FskGëRFSèã
( );

277  
	`SX1276LoRaGëRFSèã
( );

279 
	}
}

281 
	$SX1276SëRFSèã
–
uöt8_t
 
°©e
 )

283 if–
LoRaOn
 =
Ál£
 )

285 
	`SX1276FskSëRFSèã
–
°©e
 );

289 
	`SX1276LoRaSëRFSèã
–
°©e
 );

291 
	}
}

293 
uöt32_t
 
	$SX1276Pro˚ss
( )

295 if–
LoRaOn
 =
Ál£
 )

297  
	`SX1276FskPro˚ss
( );

301  
	`SX1276LoRaPro˚ss
( );

303 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276.h

21 #i‚de‡
__SX1276_H__


22 
	#__SX1276_H__


	)

27 
uöt8_t
 
SX1276Regs
[0x70];

34 
SX1276SëLoRaOn
–
boﬁ
 
íabÀ
 );

41 
boﬁ
 
SX1276GëLoRaOn
( );

46 
SX1276Inô
( );

51 
SX1276Re£t
( );

58 
SX1276SëOpMode
–
uöt8_t
 
›Mode
 );

65 
uöt8_t
 
SX1276GëOpMode
( );

72 
uöt8_t
 
SX1276RódRxGaö
( );

79 
SX1276RódRssi
( );

86 
uöt8_t
 
SX1276GëPackëRxGaö
( );

93 
öt8_t
 
SX1276GëPackëSƒ
( );

100 
SX1276GëPackëRssi
( );

107 
uöt32_t
 
SX1276GëPackëAfc
( );

112 
SX1276SèπRx
( );

120 
SX1276GëRxPackë
–*
buf„r
, 
uöt16_t
 *
size
 );

129 
SX1276SëTxPackë
–c⁄° *
buf„r
, 
uöt16_t
 
size
 );

138 
uöt8_t
 
SX1276GëRFSèã
( );

145 
SX1276SëRFSèã
–
uöt8_t
 
°©e
 );

155 
uöt32_t
 
SX1276Pro˚ss
( );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\startup_stm32l1xx_mdp.S

32 .
sy¡ax
 
	gunifõd


33 .
¨ch
 
	g¨mv7
-
	gm


35 .
	g£˘i⁄
 .
	g°ack


36 .
	gÆign
 3

37 #ifde‡
__STACK_SIZE


38 .
equ
 
	gSèck_Size
, 
	g__STACK_SIZE


40 .
equ
 
	gSèck_Size
, 0x400

42 .
globl
 
	g__SèckT›


43 .
globl
 
__SèckLimô


44 
	g__SèckLimô
:

45 .
•a˚
 
Sèck_Size


46 .
size
 
__SèckLimô
, . - __StackLimit

47 
	g__SèckT›
:

48 .
size
 
__SèckT›
, . - 
	g__SèckT›


50 .
	g£˘i⁄
 .
	ghóp


51 .
	gÆign
 3

52 #ifde‡
__HEAP_SIZE


53 .
equ
 
	gHóp_Size
, 
	g__HEAP_SIZE


55 .
equ
 
	gHóp_Size
, 0xC00

57 .
globl
 
	g__HópBa£


58 .
globl
 
__HópLimô


59 
	g__HópBa£
:

60 .
Hóp_Size


61 .
•a˚
 
Hóp_Size


62 .
ídif


63 .
size
 
__HópBa£
, . - __HeapBase

64 
	g__HópLimô
:

65 .
size
 
__HópLimô
, . - 
	g__HópLimô


67 .
	g£˘i⁄
 .
	gi§_ve˘‹


68 .
	gÆign
 2

69 .
globl
 
__i§_ve˘‹


70 
	g__i§_ve˘‹
:

71 .
__SèckT›


72 .
Re£t_H™dÀr


73 .
NMI_H™dÀr


74 .
H¨dFau…_H™dÀr


75 .
MemM™age_H™dÀr


76 .
BusFau…_H™dÀr


77 .
UßgeFau…_H™dÀr


82 .
SVC_H™dÀr


83 .
DebugM⁄_H™dÀr


85 .
PídSV_H™dÀr


86 .
SysTick_H™dÀr


89 .
WWDG_IRQH™dÀr


90 .
PVD_IRQH™dÀr


91 .
TAMPER_STAMP_IRQH™dÀr


92 .
RTC_WKUP_IRQH™dÀr


93 .
FLASH_IRQH™dÀr


94 .
RCC_IRQH™dÀr


95 .
EXTI0_IRQH™dÀr


96 .
EXTI1_IRQH™dÀr


97 .
EXTI2_IRQH™dÀr


98 .
EXTI3_IRQH™dÀr


99 .
EXTI4_IRQH™dÀr


100 .
DMA1_Ch™√l1_IRQH™dÀr


101 .
DMA1_Ch™√l2_IRQH™dÀr


102 .
DMA1_Ch™√l3_IRQH™dÀr


103 .
DMA1_Ch™√l4_IRQH™dÀr


104 .
DMA1_Ch™√l5_IRQH™dÀr


105 .
DMA1_Ch™√l6_IRQH™dÀr


106 .
DMA1_Ch™√l7_IRQH™dÀr


107 .
ADC1_IRQH™dÀr


108 .
USB_HP_IRQH™dÀr


109 .
USB_LP_IRQH™dÀr


110 .
DAC_IRQH™dÀr


111 .
COMP_IRQH™dÀr


112 .
EXTI9_5_IRQH™dÀr


113 .
LCD_IRQH™dÀr


114 .
TIM9_IRQH™dÀr


115 .
TIM10_IRQH™dÀr


116 .
TIM11_IRQH™dÀr


117 .
TIM2_IRQH™dÀr


118 .
TIM3_IRQH™dÀr


119 .
TIM4_IRQH™dÀr


120 .
I2C1_EV_IRQH™dÀr


121 .
I2C1_ER_IRQH™dÀr


122 .
I2C2_EV_IRQH™dÀr


123 .
I2C2_ER_IRQH™dÀr


124 .
SPI1_IRQH™dÀr


125 .
SPI2_IRQH™dÀr


126 .
USART1_IRQH™dÀr


127 .
USART2_IRQH™dÀr


128 .
USART3_IRQH™dÀr


129 .
EXTI15_10_IRQH™dÀr


130 .
RTC_Aœrm_IRQH™dÀr


131 .
USB_FS_WKUP_IRQH™dÀr


132 .
TIM6_IRQH™dÀr


133 .
TIM7_IRQH™dÀr


135 .
TIM5_IRQH™dÀr


136 .
SPI3_IRQH™dÀr


139 .
DMA2_Ch™√l1_IRQH™dÀr


140 .
DMA2_Ch™√l2_IRQH™dÀr


141 .
DMA2_Ch™√l3_IRQH™dÀr


142 .
DMA2_Ch™√l4_IRQH™dÀr


143 .
DMA2_Ch™√l5_IRQH™dÀr


144 .
AES_IRQH™dÀr


145 .
COMP_ACQ_IRQH™dÀr


147 .
size
 
__i§_ve˘‹
, . - 
	g__i§_ve˘‹


149 .
	gãxt


150 .
	gthumb


151 .
	gthumb_func


152 .
	gÆign
 2

153 .
globl
 
	gRe£t_H™dÀr


154 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


155 
	gRe£t_H™dÀr
:

163 
ldr
 
r1
, =
__ëext


164 
ldr
 
r2
, =
__d©a_°¨t__


165 
ldr
 
r3
, =
__d©a_íd__


171 .
Êash_to_øm_lo›
:

172 
cmp
 
r2
, 
r3


173 
ôâ
 
…


174 
ldæt
 
	gr0
, [
r1
], #4

175 
°æt
 
	gr0
, [
r2
], #4

176 
	gb…
 .
	gÊash_to_øm_lo›


178 
subs
 
	gr3
, 
r2


179 
	gbÀ
 .
	gÊash_to_øm_lo›_íd


180 .
	gÊash_to_øm_lo›
:

181 
subs
 
r3
, #4

182 
ldr
 
	gr0
, [
r1
, 
r3
]

183 
°r
 
	gr0
, [
r2
, 
r3
]

184 
	gbgt
 .
	gÊash_to_øm_lo›


185 .
	gÊash_to_øm_lo›_íd
:

188 #i‚de‡
__NO_SYSTEM_INIT


189 
ldr
 
r0
, =
Sy°emInô


190 
blx
 
r0


193 
ldr
 
r0
, =
_°¨t


194 
bx
 
r0


195 .
poﬁ


196 .
size
 
Re£t_H™dÀr
, . - 
	gRe£t_H™dÀr


201 .
	gÆign
 1

202 .
	gthumb_func


203 .
wók
 
	g_°¨t


204 .
ty≥
 
	g_°¨t
, %
fun˘i⁄


205 
	g_°¨t
:

208 
ldr
 
r1
, = 
__bss_°¨t__


209 
ldr
 
r2
, = 
__bss_íd__


210 
movs
 
r3
, #0

211 
	gb
 .
	gfûl_zîo_bss


212 .
	glo›_zîo_bss
:

213 
°r
 
r3
, [
r1
], #4

215 .
	gfûl_zîo_bss
:

216 
cmp
 
r1
, 
r2


217 
	gbcc
 .
lo›_zîo_bss


220 
bl
 
maö


221 
	gb
 .

222 .
size
 
	g_°¨t
, . - _start

227 .
ma¸o
 
def_úq_h™dÀr
 
	gh™dÀr_«me


228 .
	gÆign
 1

229 .
	gthumb_func


230 .
	gwók
 \
	gh™dÀr_«me


231 .
	gty≥
 \
	gh™dÀr_«me
, %
	gfun˘i⁄


232 \
	gh™dÀr_«me
 :

233 
b
 .

234 .
size
 \
h™dÀr_«me
, . - \
	gh™dÀr_«me


235 .
ídm


237 
def_úq_h™dÀr
 
NMI_H™dÀr


238 
def_úq_h™dÀr
 
H¨dFau…_H™dÀr


239 
def_úq_h™dÀr
 
MemM™age_H™dÀr


240 
def_úq_h™dÀr
 
BusFau…_H™dÀr


241 
def_úq_h™dÀr
 
UßgeFau…_H™dÀr


242 
def_úq_h™dÀr
 
SVC_H™dÀr


243 
def_úq_h™dÀr
 
DebugM⁄_H™dÀr


244 
def_úq_h™dÀr
 
PídSV_H™dÀr


245 
def_úq_h™dÀr
 
SysTick_H™dÀr


246 
def_úq_h™dÀr
 
DeÁu…_H™dÀr


249 
def_úq_h™dÀr
 
WWDG_IRQH™dÀr


250 
def_úq_h™dÀr
 
PVD_IRQH™dÀr


251 
def_úq_h™dÀr
 
TAMPER_STAMP_IRQH™dÀr


252 
def_úq_h™dÀr
 
RTC_WKUP_IRQH™dÀr


253 
def_úq_h™dÀr
 
FLASH_IRQH™dÀr


254 
def_úq_h™dÀr
 
RCC_IRQH™dÀr


255 
def_úq_h™dÀr
 
EXTI0_IRQH™dÀr


256 
def_úq_h™dÀr
 
EXTI1_IRQH™dÀr


257 
def_úq_h™dÀr
 
EXTI2_IRQH™dÀr


258 
def_úq_h™dÀr
 
EXTI3_IRQH™dÀr


259 
def_úq_h™dÀr
 
EXTI4_IRQH™dÀr


260 
def_úq_h™dÀr
 
DMA1_Ch™√l1_IRQH™dÀr


261 
def_úq_h™dÀr
 
DMA1_Ch™√l2_IRQH™dÀr


262 
def_úq_h™dÀr
 
DMA1_Ch™√l3_IRQH™dÀr


263 
def_úq_h™dÀr
 
DMA1_Ch™√l4_IRQH™dÀr


264 
def_úq_h™dÀr
 
DMA1_Ch™√l5_IRQH™dÀr


265 
def_úq_h™dÀr
 
DMA1_Ch™√l6_IRQH™dÀr


266 
def_úq_h™dÀr
 
DMA1_Ch™√l7_IRQH™dÀr


267 
def_úq_h™dÀr
 
ADC1_IRQH™dÀr


268 
def_úq_h™dÀr
 
USB_HP_IRQH™dÀr


269 
def_úq_h™dÀr
 
USB_LP_IRQH™dÀr


270 
def_úq_h™dÀr
 
DAC_IRQH™dÀr


271 
def_úq_h™dÀr
 
COMP_IRQH™dÀr


272 
def_úq_h™dÀr
 
EXTI9_5_IRQH™dÀr


273 
def_úq_h™dÀr
 
LCD_IRQH™dÀr


274 
def_úq_h™dÀr
 
TIM9_IRQH™dÀr


275 
def_úq_h™dÀr
 
TIM10_IRQH™dÀr


276 
def_úq_h™dÀr
 
TIM11_IRQH™dÀr


277 
def_úq_h™dÀr
 
TIM2_IRQH™dÀr


278 
def_úq_h™dÀr
 
TIM3_IRQH™dÀr


279 
def_úq_h™dÀr
 
TIM4_IRQH™dÀr


280 
def_úq_h™dÀr
 
I2C1_EV_IRQH™dÀr


281 
def_úq_h™dÀr
 
I2C1_ER_IRQH™dÀr


282 
def_úq_h™dÀr
 
I2C2_EV_IRQH™dÀr


283 
def_úq_h™dÀr
 
I2C2_ER_IRQH™dÀr


284 
def_úq_h™dÀr
 
SPI1_IRQH™dÀr


285 
def_úq_h™dÀr
 
SPI2_IRQH™dÀr


286 
def_úq_h™dÀr
 
USART1_IRQH™dÀr


287 
def_úq_h™dÀr
 
USART2_IRQH™dÀr


288 
def_úq_h™dÀr
 
USART3_IRQH™dÀr


289 
def_úq_h™dÀr
 
EXTI15_10_IRQH™dÀr


290 
def_úq_h™dÀr
 
RTC_Aœrm_IRQH™dÀr


291 
def_úq_h™dÀr
 
USB_FS_WKUP_IRQH™dÀr


292 
def_úq_h™dÀr
 
TIM6_IRQH™dÀr


293 
def_úq_h™dÀr
 
TIM7_IRQH™dÀr


294 
def_úq_h™dÀr
 
TIM5_IRQH™dÀr


295 
def_úq_h™dÀr
 
SPI3_IRQH™dÀr


296 
def_úq_h™dÀr
 
DMA2_Ch™√l1_IRQH™dÀr


297 
def_úq_h™dÀr
 
DMA2_Ch™√l2_IRQH™dÀr


298 
def_úq_h™dÀr
 
DMA2_Ch™√l3_IRQH™dÀr


299 
def_úq_h™dÀr
 
DMA2_Ch™√l4_IRQH™dÀr


300 
def_úq_h™dÀr
 
DMA2_Ch™√l5_IRQH™dÀr


301 
def_úq_h™dÀr
 
AES_IRQH™dÀr


302 
def_úq_h™dÀr
 
	gCOMP_ACQ_IRQH™dÀr


304 .
	gíd


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\system_stm32l1xx.c

104 
	~"°m32l1xx.h
"

125 
	#VECT_TAB_OFFSET
 0x0

	)

142 
uöt32_t
 
	gSy°emC‹eClock
 = 32000000;

143 
__I
 
uöt8_t
 
	gPLLMulTabÀ
[9] = {3, 4, 6, 8, 12, 16, 24, 32, 48};

144 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

154 
SëSysClock
();

171 
	$Sy°emInô
 ()

174 
RCC
->
CR
 |(
uöt32_t
)0x00000100;

177 
RCC
->
CFGR
 &(
uöt32_t
)0x88FFC00C;

180 
RCC
->
CR
 &(
uöt32_t
)0xEEFEFFFE;

183 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

186 
RCC
->
CFGR
 &(
uöt32_t
)0xFF02FFFF;

189 
RCC
->
CIR
 = 0x00000000;

192 
	`SëSysClock
();

194 #ifde‡
VECT_TAB_SRAM


195 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

197 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

199 
	}
}

239 
	$Sy°emC‹eClockUpd©e
 ()

241 
uöt32_t
 
tmp
 = 0, 
∂lmul
 = 0, 
∂ldiv
 = 0, 
∂lsour˚
 = 0, 
msú™ge
 = 0;

244 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

246 
tmp
)

249 
msú™ge
 = (
RCC
->
ICSCR
 & 
RCC_ICSCR_MSIRANGE
) >> 13;

250 
Sy°emC‹eClock
 = (32768 * (1 << (
msú™ge
 + 1)));

253 
Sy°emC‹eClock
 = 
HSI_VALUE
;

256 
Sy°emC‹eClock
 = 
HSE_VALUE
;

260 
∂lmul
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMUL
;

261 
∂ldiv
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLDIV
;

262 
∂lmul
 = 
PLLMulTabÀ
[(pllmul >> 18)];

263 
∂ldiv
 = (plldiv >> 22) + 1;

265 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

267 i‡(
∂lsour˚
 == 0x00)

270 
Sy°emC‹eClock
 = (((
HSI_VALUE
Ë* 
∂lmul
Ë/ 
∂ldiv
);

275 
Sy°emC‹eClock
 = (((
HSE_VALUE
Ë* 
∂lmul
Ë/ 
∂ldiv
);

279 
msú™ge
 = (
RCC
->
ICSCR
 & 
RCC_ICSCR_MSIRANGE
) >> 13;

280 
Sy°emC‹eClock
 = (32768 * (1 << (
msú™ge
 + 1)));

285 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

287 
Sy°emC‹eClock
 >>
tmp
;

288 
	}
}

298 
	$SëSysClock
()

300 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

304 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

309 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

310 
SèπUpCou¡î
++;

311 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

313 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

315 
HSESètus
 = (
uöt32_t
)0x01;

319 
HSESètus
 = (
uöt32_t
)0x00;

322 i‡(
HSESètus
 =(
uöt32_t
)0x01)

325 
FLASH
->
ACR
 |
FLASH_ACR_ACC64
;

328 
FLASH
->
ACR
 |
FLASH_ACR_PRFTEN
;

331 
FLASH
->
ACR
 |
FLASH_ACR_LATENCY
;

334 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

337 
PWR
->
CR
 = 
PWR_CR_VOS_0
;

340 (
PWR
->
CSR
 & 
PWR_CSR_VOSF
Ë!
RESET
)

345 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

348 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

351 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV1
;

354 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMUL
 |

355 
RCC_CFGR_PLLDIV
));

356 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_HSE
 | 
RCC_CFGR_PLLMUL4
 | 
RCC_CFGR_PLLDIV2
);

359 
RCC
->
CR
 |
RCC_CR_PLLON
;

362 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

367 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

368 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

371 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
Ë!(uöt32_t)
RCC_CFGR_SWS_PLL
)

380 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange-hw-ver.h

1 #i‚de‡
__XRANGE_HW_VER_H__


2 
	#__XRANGE_HW_VER_H__


	)

4 
	#XR_VER_0_1
 0

	)

5 
	#XR_VER_1_0
 1

	)

8 
	#XRANGE_HW_VER
 
XR_VER_1_0


	)

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\XRange-Hal.c

1 
	~<°döt.h
>

2 
	~"•i.h
"

3 
	~"Àd.h
"

4 
	~"XR™ge-HÆ.h
"

7 
	$BﬂrdInô
( )

11 if–
	`SysTick_C⁄fig
–
Sy°emC‹eClock
 / 1000 ) )

19 
	`SpiInô
( );

23 
	`LedInô
–
LED_RED
 );

24 
	`LedInô
–
LED_GREEN
 );

26 
	`LedOn
–
LED_RED
 );

27 
	`LedOn
–
LED_GREEN
 );

28 
	`Dñay
(500);

29 
	`LedOff
–
LED_RED
 );

30 
	`LedOff
–
LED_GREEN
 );

31 
	`Dñay
(500);

33 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\XRange-Hal.h

1 #i‚de‡
__XRANGE_HAL_H__


2 
	#__XRANGE_HAL_H__


	)

4 
	~"∂©f‹m.h
"

5 
	~"xønge-hw-vî.h
"

7 
	~<°döt.h
>

8 
	~<°dboﬁ.h
>

10 
	~"°m32l1xx.h
"

14 #i‚de‡
XRANGE_HW_VER


18 #if–
XRANGE_HW_VER
 =
XR_VER_1_0
 )

25 
	#LED1_PIN
 
GPIO_Pö_8


	)

26 
	#LED1_GPIO_PORT
 
GPIOA


	)

27 
	#LED1_GPIO_CLK
 
RCC_AHBPîùh_GPIOA


	)

29 
	#LED2_PIN
 
GPIO_Pö_7


	)

30 
	#LED2_GPIO_PORT
 
GPIOA


	)

31 
	#LED2_GPIO_CLK
 
RCC_AHBPîùh_GPIOA


	)

38 
	#SPI_INTERFACE
 
SPI2


	)

39 
	#SPI_CLK
 
RCC_APB1Pîùh_SPI2


	)

41 
	#SPI_PIN_SCK_PORT
 
GPIOB


	)

42 
	#SPI_PIN_SCK_PORT_CLK
 
RCC_AHBPîùh_GPIOB


	)

43 
	#SPI_PIN_SCK
 
GPIO_Pö_13


	)

44 
	#SPI_SCK_AF_PIN
 
GPIO_PöSour˚13


	)

46 
	#SPI_PIN_MISO_PORT
 
GPIOB


	)

47 
	#SPI_PIN_MISO_PORT_CLK
 
RCC_AHBPîùh_GPIOB


	)

48 
	#SPI_PIN_MISO
 
GPIO_Pö_14


	)

49 
	#SPI_MISO_AF_PIN
 
GPIO_PöSour˚14


	)

51 
	#SPI_PIN_MOSI_PORT
 
GPIOB


	)

52 
	#SPI_PIN_MOSI_PORT_CLK
 
RCC_AHBPîùh_GPIOB


	)

53 
	#SPI_PIN_MOSI
 
GPIO_Pö_15


	)

54 
	#SPI_MOSI_AF_PIN
 
GPIO_PöSour˚15


	)

64 
	#RESET_IOPORT
 
GPIOB


	)

65 
	#RESET_PIN
 
GPIO_Pö_2


	)

70 
	#NSS_IOPORT
 
GPIOB


	)

71 
	#NSS_PIN
 
GPIO_Pö_12


	)

76 
	#DIO0_IOPORT
 
GPIOA


	)

77 
	#DIO0_PIN
 
GPIO_Pö_10


	)

79 
	#DIO1_IOPORT
 
GPIOA


	)

80 
	#DIO1_PIN
 
GPIO_Pö_9


	)

82 
	#DIO2_IOPORT
 
GPIOC


	)

83 
	#DIO2_PIN
 
GPIO_Pö_13


	)

85 
	#DIO3_IOPORT
 
GPIOB


	)

86 
	#DIO3_PIN
 
GPIO_Pö_0


	)

88 
	#DIO4_IOPORT
 
GPIOB


	)

89 
	#DIO4_PIN
 
GPIO_Pö_4


	)

91 
	#DIO5_IOPORT
 
GPIOB


	)

92 
	#DIO5_PIN
 
GPIO_Pö_10


	)

95 
	#RXTX_IOPORT
 
GPIOB


	)

96 
	#RXTX_PIN
 
GPIO_Pö_11


	)

99 #ñif–
XRANGE_HW_VER
 =
XR_VER_0_1
 )

102 
	#LED1_PIN
 
GPIO_Pö_7


	)

103 
	#LED1_GPIO_PORT
 
GPIOA


	)

104 
	#LED1_GPIO_CLK
 
RCC_AHBPîùh_GPIOA


	)

106 
	#LED2_PIN
 
GPIO_Pö_6


	)

107 
	#LED2_GPIO_PORT
 
GPIOA


	)

108 
	#LED2_GPIO_CLK
 
RCC_AHBPîùh_GPIOA


	)

115 
	#SPI_INTERFACE
 
SPI2


	)

116 
	#SPI_CLK
 
RCC_APB1Pîùh_SPI2


	)

118 
	#SPI_PIN_SCK_PORT
 
GPIOB


	)

119 
	#SPI_PIN_SCK_PORT_CLK
 
RCC_AHBPîùh_GPIOB


	)

120 
	#SPI_PIN_SCK
 
GPIO_Pö_13


	)

121 
	#SPI_SCK_AF_PIN
 
GPIO_PöSour˚13


	)

123 
	#SPI_PIN_MISO_PORT
 
GPIOB


	)

124 
	#SPI_PIN_MISO_PORT_CLK
 
RCC_AHBPîùh_GPIOB


	)

125 
	#SPI_PIN_MISO
 
GPIO_Pö_14


	)

126 
	#SPI_MISO_AF_PIN
 
GPIO_PöSour˚14


	)

128 
	#SPI_PIN_MOSI_PORT
 
GPIOB


	)

129 
	#SPI_PIN_MOSI_PORT_CLK
 
RCC_AHBPîùh_GPIOB


	)

130 
	#SPI_PIN_MOSI
 
GPIO_Pö_15


	)

131 
	#SPI_MOSI_AF_PIN
 
GPIO_PöSour˚15


	)

141 
	#RESET_IOPORT
 
GPIOB


	)

142 
	#RESET_PIN
 
GPIO_Pö_2


	)

147 
	#NSS_IOPORT
 
GPIOB


	)

148 
	#NSS_PIN
 
GPIO_Pö_12


	)

153 
	#DIO0_IOPORT
 
GPIOA


	)

154 
	#DIO0_PIN
 
GPIO_Pö_10


	)

156 
	#DIO1_IOPORT
 
GPIOA


	)

157 
	#DIO1_PIN
 
GPIO_Pö_9


	)

159 
	#DIO2_IOPORT
 
GPIOC


	)

160 
	#DIO2_PIN
 
GPIO_Pö_13


	)

162 
	#DIO3_IOPORT
 
GPIOB


	)

163 
	#DIO3_PIN
 
GPIO_Pö_0


	)

165 
	#DIO4_IOPORT
 
GPIOB


	)

166 
	#DIO4_PIN
 
GPIO_Pö_4


	)

168 
	#DIO5_IOPORT
 
GPIOB


	)

169 
	#DIO5_PIN
 
GPIO_Pö_10


	)

172 
	#RXTX_IOPORT
 
GPIOB


	)

173 
	#RXTX_PIN
 
GPIO_Pö_11


	)

187 #ifde‡
__GNUC__


190 
	#PUTCHAR_PROTOTYPE
 
	`__io_putch¨
(
ch
)

	)

197 
BﬂrdInô
( );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\led.c

1 
	~"Àd.h
"

2 
	~"∂©f‹m.h
"

4 
GPIO_Ty≥Def
* 
	gLedP‹t
[
LED_NB
] =

6 
LED1_GPIO_PORT
,

7 
LED2_GPIO_PORT


9 c⁄° 
uöt16_t
 
	gLedPö
[
LED_NB
] =

11 
LED1_PIN
,

12 
LED2_PIN
,

15 c⁄° 
uöt32_t
 
	gLedClk
[
LED_NB
] =

17 
LED1_GPIO_CLK
,

18 
LED2_GPIO_CLK
,

21 
	$LedInô
–
tLed
 
Àd
 )

23 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

25 
	`RCC_AHBPîùhClockCmd
–
LedClk
[
Àd
], 
ENABLE
 );

26 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

27 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_10MHz
;

29 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
LedPö
[
Àd
];

30 
	`GPIO_Inô
–
LedP‹t
[
Àd
], &
GPIO_InôSåu˘uª
 );

31 
	`GPIO_WrôeBô
–
LedP‹t
[
Àd
], 
LedPö
[Àd], 
LED_OFF
 );

32 
	}
}

34 
	$LedOn
–
tLed
 
Àd
 )

36 
	`GPIO_WrôeBô
–
LedP‹t
[
Àd
], 
LedPö
[Àd], 
LED_ON
 );

37 
	}
}

39 
	$LedOff
–
tLed
 
Àd
 )

41 
	`GPIO_WrôeBô
–
LedP‹t
[
Àd
], 
LedPö
[Àd], 
LED_OFF
 );

42 
	}
}

44 
	$LedToggÀ
–
tLed
 
Àd
 )

46 
LedP‹t
[
Àd
]->
ODR
 ^
LedPö
[led];

47 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\led.h

1 #i‚de‡
__LED_H__


2 
	#__LED_H__


	)

6 
	#LED_INV
 0

	)

10 
	mLED_RED
 = 0,

11 
	mLED_GREEN
 = 1,

12 } 
	ttLed
;

16 
	#LED_NB
 2

	)

19 #i‡
LED_INV


20 
	#LED_ON
 
Bô_RESET


	)

21 
	#LED_OFF
 
Bô_SET


	)

23 
	#LED_ON
 
Bô_SET


	)

24 
	#LED_OFF
 
Bô_RESET


	)

27 
LedInô
–
tLed
 
Àd
 );

29 
LedOn
–
tLed
 
Àd
 );

31 
LedOff
–
tLed
 
Àd
 );

33 
LedToggÀ
–
tLed
 
Àd
 );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\spi.c

22 
	~<°döt.h
>

23 
	~"°m32l1xx_•i.h
"

24 
	~"•i.h
"

25 
	~"∂©f‹m.h
"

29 
	$SpiInô
( )

31 
SPI_InôTy≥Def
 
SPI_InôSåu˘uª
;

32 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

36 
	`RCC_AHBPîùhClockCmd
–
SPI_PIN_MISO_PORT_CLK
 | 
SPI_PIN_MOSI_PORT_CLK
 |

37 
SPI_PIN_SCK_PORT_CLK
, 
ENABLE
 );

38 
	`RCC_APB1PîùhClockCmd
–
SPI_CLK
, 
ENABLE
 );

40 
	`GPIO_Såu˘Inô
(&
GPIO_InôSåu˘uª
);

41 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
SPI_PIN_SCK
;

42 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

43 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_10MHz
;

44 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

45 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

46 
	`GPIO_Inô
(
SPI_PIN_SCK_PORT
, &
GPIO_InôSåu˘uª
);

49 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
SPI_PIN_MISO
;

50 
	`GPIO_Inô
(
SPI_PIN_MISO_PORT
, &
GPIO_InôSåu˘uª
);

53 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
SPI_PIN_MOSI
;

54 
	`GPIO_Inô
(
SPI_PIN_MOSI_PORT
, &
GPIO_InôSåu˘uª
);

57 
	`GPIO_PöAFC⁄fig
(
SPI_PIN_SCK_PORT
, 
SPI_SCK_AF_PIN
, 
GPIO_AF_SPI2
);

60 
	`GPIO_PöAFC⁄fig
(
SPI_PIN_MISO_PORT
, 
SPI_MISO_AF_PIN
, 
GPIO_AF_SPI2
);

63 
	`GPIO_PöAFC⁄fig
(
SPI_PIN_MOSI_PORT
, 
SPI_MOSI_AF_PIN
, 
GPIO_AF_SPI2
);

66 
SPI_InôSåu˘uª
.
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

67 
SPI_InôSåu˘uª
.
SPI_Mode
 = 
SPI_Mode_Ma°î
;

68 
SPI_InôSåu˘uª
.
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

69 
SPI_InôSåu˘uª
.
SPI_CPOL
 = 
SPI_CPOL_Low
;

70 
SPI_InôSåu˘uª
.
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

71 
SPI_InôSåu˘uª
.
SPI_NSS
 = 
SPI_NSS_So·
;

73 
SPI_InôSåu˘uª
.
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_8
;

75 
SPI_InôSåu˘uª
.
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

76 
SPI_InôSåu˘uª
.
SPI_CRCPﬁynomül
 = 7;

77 
	`SPI_Inô
–
SPI_INTERFACE
, &
SPI_InôSåu˘uª
 );

78 
	`SPI_Cmd
–
SPI_INTERFACE
, 
ENABLE
 );

79 
	}
}

81 
uöt8_t
 
	$SpiInOut
–
uöt8_t
 
outD©a
 )

84 
	`SPI_I2S_SídD©a
–
SPI_INTERFACE
, 
outD©a
 );

85  
	`SPI_I2S_GëFœgSètus
–
SPI_INTERFACE
, 
SPI_I2S_FLAG_RXNE
 ) =
RESET
 );

86  
	`SPI_I2S_Re˚iveD©a
–
SPI_INTERFACE
 );

87 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\spi.h

19 #i‚de‡
__SPI_H__


20 
	#__SPI_H__


	)

22 
SpiInô
( );

23 
uöt8_t
 
SpiInOut
–uöt8_à
outD©a
 );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\stm32fxxx_it.c

32 
	~"°m32l1xx_ô.h
"

34 
	~"XR™ge-HÆ.h
"

53 
	$NMI_H™dÀr
()

55 
	}
}

77 
	~<°dio.h
>

82 
	$H¨dFau…_H™dÀr_C
–*
¨gs
 )

85 
öt8_t
 
s
[100];

86 
°acked_r0
;

87 
°acked_r1
;

88 
°acked_r2
;

89 
°acked_r3
;

90 
°acked_r12
;

91 
°acked_Ã
;

92 
°acked_pc
;

93 
°acked_p§
;

95 
°acked_r0
 = ( ( Ë
¨gs
[0] );

96 
°acked_r1
 = ( ( Ë
¨gs
[1] );

97 
°acked_r2
 = ( ( Ë
¨gs
[2] );

98 
°acked_r3
 = ( ( Ë
¨gs
[3] );

100 
°acked_r12
 = ( ( Ë
¨gs
[4] );

101 
°acked_Ã
 = ( ( Ë
¨gs
[5] );

102 
°acked_pc
 = ( ( Ë
¨gs
[6] );

103 
°acked_p§
 = ( ( Ë
¨gs
[7] );

105 
	`•rötf
–
s
, "\n\n[Hard fault handler -állÇumbers in hex]\n" );

106 
	`•rötf
–
s
, "R0 = %x\n", 
°acked_r0
 );

107 
	`•rötf
–
s
, "R1 = %x\n", 
°acked_r1
 );

108 
	`•rötf
–
s
, "R2 = %x\n", 
°acked_r2
 );

109 
	`•rötf
–
s
, "R3 = %x\n", 
°acked_r3
 );

110 
	`•rötf
–
s
, "R12 = %x\n", 
°acked_r12
 );

111 
	`•rötf
–
s
, "LR [R14] = %x subroutöêˇŒÑëu∫áddªss\n", 
°acked_Ã
 );

112 
	`•rötf
–
s
, "PC [R15] = %xÖrogøm cou¡î\n", 
°acked_pc
 );

113 
	`•rötf
–
s
, "PSR = %x\n", 
°acked_p§
 );

114 
	`•rötf
–
s
, "BFAR = %x\n", ( *( ( volatile * )( 0xE000ED38 ) ) ) );

115 
	`•rötf
–
s
, "CFSR = %x\n", ( *( ( volatile * )( 0xE000ED28 ) ) ) );

116 
	`•rötf
–
s
, "HFSR = %x\n", ( *( ( volatile * )( 0xE000ED2C ) ) ) );

117 
	`•rötf
–
s
, "DFSR = %x\n", ( *( ( volatile * )( 0xE000ED30 ) ) ) );

118 
	`•rötf
–
s
, "AFSR = %x\n", ( *( ( volatile * )( 0xE000ED3C ) ) ) );

119 
	`•rötf
–
s
, "SCB_SHCSR = %x\n", 
SCB
->
SHCSR
 );

125 
	}
}

132 
	$MemM™age_H™dÀr
()

138 
	}
}

145 
	$BusFau…_H™dÀr
()

151 
	}
}

158 
	$UßgeFau…_H™dÀr
()

164 
	}
}

171 
	$SVC_H™dÀr
()

173 
	}
}

180 
	$DebugM⁄_H™dÀr
()

182 
	}
}

189 
	$PídSV_H™dÀr
()

191 
	}
}

198 
	$SysTick_H™dÀr
()

200 
TickCou¡î
++;

201 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\stm32l1xx_it.h

23 #i‚de‡
__STM32L1xx_IT_H


24 
	#__STM32L1xx_IT_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32l1xx.h
"

38 
NMI_H™dÀr
();

39 
H¨dFau…_H™dÀr
();

40 
MemM™age_H™dÀr
();

41 
BusFau…_H™dÀr
();

42 
UßgeFau…_H™dÀr
();

43 
SVC_H™dÀr
();

44 
DebugM⁄_H™dÀr
();

45 
PídSV_H™dÀr
();

46 
SysTick_H™dÀr
();

48 #ifde‡
__˝lu•lus


	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\sx1272-Hal.c

24 
	~<°döt.h
>

25 
	~<°dboﬁ.h
>

27 
	~"∂©f‹m.h
"

29 #i‡
deföed
–
USE_SX1272_RADIO
 )

31 
	~"•i.h
"

32 
	~"../ødio/sx1272-HÆ.h
"

35 
	$SX1272InôIo
( )

37 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

39 
	`RCC_AHBPîùhClockCmd
–
RCC_AHBPîùh_GPIOA
 | 
RCC_AHBPîùh_GPIOB
 | 
RCC_AHBPîùh_GPIOC
 , 
ENABLE
 );

41 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

42 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_10MHz
;

46 
	`GPIO_WrôeBô
–
NSS_IOPORT
, 
NSS_PIN
, 
Bô_SET
 );

47 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
NSS_PIN
;

48 
	`GPIO_Inô
–
NSS_IOPORT
, &
GPIO_InôSåu˘uª
 );

51 
	`GPIO_WrôeBô
–
RXTX_IOPORT
, 
RXTX_PIN
, 
Bô_RESET
 );

52 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
RXTX_PIN
;

53 
	`GPIO_Inô
–
RXTX_IOPORT
, &
GPIO_InôSåu˘uª
 );

56 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

59 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
DIO0_PIN
;

60 
	`GPIO_Inô
–
DIO0_IOPORT
, &
GPIO_InôSåu˘uª
 );

63 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
DIO1_PIN
;

64 
	`GPIO_Inô
–
DIO1_IOPORT
, &
GPIO_InôSåu˘uª
 );

67 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
DIO2_PIN
;

68 
	`GPIO_Inô
–
DIO2_IOPORT
, &
GPIO_InôSåu˘uª
 );

70 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
DIO3_PIN
;

71 
	`GPIO_Inô
–
DIO3_IOPORT
, &
GPIO_InôSåu˘uª
 );

73 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
DIO4_PIN
;

74 
	`GPIO_Inô
–
DIO4_IOPORT
, &
GPIO_InôSåu˘uª
 );

76 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
DIO5_PIN
;

77 
	`GPIO_Inô
–
DIO5_IOPORT
, &
GPIO_InôSåu˘uª
 );

78 
	}
}

80 
	$SX1272SëRe£t
–
uöt8_t
 
°©e
 )

82 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

84 if–
°©e
 =
RADIO_RESET_ON
 )

87 
	`GPIO_WrôeBô
–
RESET_IOPORT
, 
RESET_PIN
, 
Bô_SET
 );

90 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

91 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_10MHz
;

92 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
RESET_PIN
;

93 
	`GPIO_Inô
–
RESET_IOPORT
, &
GPIO_InôSåu˘uª
 );

98 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

100 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_10MHz
;

101 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
RESET_PIN
;

102 
	`GPIO_Inô
–
RESET_IOPORT
, &
GPIO_InôSåu˘uª
 );

105 
	}
}

108 
	$SX1272Wrôe
–
uöt8_t
 
addr
, uöt8_à
d©a
 )

110 
	`SX1272WrôeBuf„r
–
addr
, &
d©a
, 1 );

111 
	}
}

113 
	$SX1272Ród
–
uöt8_t
 
addr
, uöt8_à*
d©a
 )

115 
	`SX1272RódBuf„r
–
addr
, 
d©a
, 1 );

116 
	}
}

118 
	$SX1272WrôeBuf„r
–
uöt8_t
 
addr
, uöt8_à*
buf„r
, uöt8_à
size
 )

120 
uöt8_t
 
i
;

123 
	`GPIO_WrôeBô
–
NSS_IOPORT
, 
NSS_PIN
, 
Bô_RESET
 );

125 
	`SpiInOut
–
addr
 | 0x80 );

126  
i
 = 0; i < 
size
; i++ )

128 
	`SpiInOut
–
buf„r
[
i
] );

132 
	`GPIO_WrôeBô
–
NSS_IOPORT
, 
NSS_PIN
, 
Bô_SET
 );

133 
	}
}

135 
	$SX1272RódBuf„r
–
uöt8_t
 
addr
, uöt8_à*
buf„r
, uöt8_à
size
 )

137 
uöt8_t
 
i
;

140 
	`GPIO_WrôeBô
–
NSS_IOPORT
, 
NSS_PIN
, 
Bô_RESET
 );

142 
	`SpiInOut
–
addr
 & 0x7F );

144  
i
 = 0; i < 
size
; i++ )

146 
buf„r
[
i
] = 
	`SpiInOut
( 0 );

150 
	`GPIO_WrôeBô
–
NSS_IOPORT
, 
NSS_PIN
, 
Bô_SET
 );

151 
	}
}

153 
	$SX1272WrôeFifo
–
uöt8_t
 *
buf„r
, uöt8_à
size
 )

155 
	`SX1272WrôeBuf„r
–0, 
buf„r
, 
size
 );

156 
	}
}

158 
	$SX1272RódFifo
–
uöt8_t
 *
buf„r
, uöt8_à
size
 )

160 
	`SX1272RódBuf„r
–0, 
buf„r
, 
size
 );

161 
	}
}

163 
ölöe
 
uöt8_t
 
	$SX1272RódDio0
( )

165  
	`GPIO_RódI≈utD©aBô
–
DIO0_IOPORT
, 
DIO0_PIN
 );

166 
	}
}

168 
ölöe
 
uöt8_t
 
	$SX1272RódDio1
( )

170  
	`GPIO_RódI≈utD©aBô
–
DIO1_IOPORT
, 
DIO1_PIN
 );

171 
	}
}

173 
ölöe
 
uöt8_t
 
	$SX1272RódDio2
( )

175  
	`GPIO_RódI≈utD©aBô
–
DIO2_IOPORT
, 
DIO2_PIN
 );

176 
	}
}

178 
ölöe
 
uöt8_t
 
	$SX1272RódDio3
( )

180  
	`GPIO_RódI≈utD©aBô
–
DIO3_IOPORT
, 
DIO3_PIN
 );

181 
	}
}

183 
ölöe
 
uöt8_t
 
	$SX1272RódDio4
( )

185  
	`GPIO_RódI≈utD©aBô
–
DIO4_IOPORT
, 
DIO4_PIN
 );

186 
	}
}

188 
ölöe
 
uöt8_t
 
	$SX1272RódDio5
( )

190  
	`GPIO_RódI≈utD©aBô
–
DIO5_IOPORT
, 
DIO5_PIN
 );

191 
	}
}

193 
ölöe
 
	$SX1272WrôeRxTx
–
uöt8_t
 
txE«bÀ
 )

195 if–
txE«bÀ
 != 0 )

197 
	`GPIO_WrôeBô
–
RXTX_IOPORT
, 
RXTX_PIN
, 
Bô_SET
 );

201 
	`GPIO_WrôeBô
–
RXTX_IOPORT
, 
RXTX_PIN
, 
Bô_RESET
 );

203 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\utility.c

1 
	~"utûôy.h
"

5 vﬁ©ûê
uöt32_t
 
	gTickCou¡î
 = 0;

7 
	$Dñay
 ( 
uöt32_t
 
dñay
 )

10 
uöt32_t
 
°¨tTick
 = 
TickCou¡î
;

11  ( 
TickCou¡î
 - 
°¨tTick
 ) < 
dñay
 );

12 
	}
}

14 
	$L⁄gDñay
 ( 
uöt8_t
 
dñay
 )

16 
uöt32_t
 
l⁄gDñay
;

17 
uöt32_t
 
°¨tTick
;

19 
l⁄gDñay
 = 
dñay
 * 1000;

22 
°¨tTick
 = 
TickCou¡î
;

23  ( 
TickCou¡î
 - 
°¨tTick
 ) < 
l⁄gDñay
 );

24 
	}
}

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\utility.h

1 #i‚de‡
UTILITY_H_INCLUDED


2 
	#UTILITY_H_INCLUDED


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

12 
	mSX_OK
,

13 
	mSX_ERROR
,

14 
	mSX_BUSY
,

15 
	mSX_EMPTY
,

16 
	mSX_DONE
,

17 
	mSX_TIMEOUT
,

18 
	mSX_UNSUPPORTED
,

19 
	mSX_WAIT
,

20 
	mSX_CLOSE
,

21 
	mSX_YES
,

22 
	mSX_NO
,

23 }
	ttRëu∫Codes
;

25 vﬁ©ûê
uöt32_t
 
TickCou¡î
;

30 
Dñay
 ( 
uöt32_t
 
dñay
 );

35 
L⁄gDñay
 ( 
uöt8_t
 
dñay
 );

44 
uöt32_t
 
øndr
–uöt32_à
mö
, uöt32_à
max
 );

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\stm32l151cc_flash.ld

33 
OUTPUT_FORMAT
("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")

34 
	$OUTPUT_ARCH
(
¨m
)

35 
	$SEARCH_DIR
(.)

41 
MEMORY


43 
	`ROM
 (
rx
Ë: 
ORIGIN
 = 0x08000000, 
LENGTH
 = 64
K


44 
	`RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 10
K


45 
	}
}

75 
	gSECTIONS


77 .
	gãxt
 :

79 
KEEP
(*(.
i§_ve˘‹
))

80 *(.
ãxt
*)

82 
KEEP
(*(.
öô
))

83 
KEEP
(*(.
föi
))

86 *
¸tbegö
.
o
(.
˘‹s
)

87 *
¸tbegö
?.
o
(.
˘‹s
)

88 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
˘‹s
)

89 *(
SORT
(.
˘‹s
.*))

90 *(.
˘‹s
)

93 *
¸tbegö
.
o
(.
dt‹s
)

94 *
¸tbegö
?.
o
(.
dt‹s
)

95 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
dt‹s
)

96 *(
SORT
(.
dt‹s
.*))

97 *(.
dt‹s
)

99 *(.
rod©a
*)

101 
KEEP
(*(.
eh_‰ame
*))

102 } > 
ROM


104 .
ARM
.
exèb
 :

106 *(.
ARM
.
exèb
* .
gnu
.
lök⁄˚
.
¨mexèb
.*)

107 } > 
ROM


109 
__exidx_°¨t
 = .;

110 .
	gARM
.
	gexidx
 :

112 *(.
ARM
.
exidx
* .
gnu
.
lök⁄˚
.
¨mexidx
.*)

113 } > 
ROM


114 
__exidx_íd
 = .;

116 
	g__ëext
 = .;

118 .
	gd©a
 : 
AT
 (
__ëext
)

120 
__d©a_°¨t__
 = .;

121 *(
	gvèbÀ
)

122 *(.
	gd©a
*)

124 . = 
ALIGN
(4);

126 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

127 
KEEP
(*(.
¥eöô_¨øy
))

128 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

130 . = 
ALIGN
(4);

132 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

133 
KEEP
(*(
SORT
(.
öô_¨øy
.*)))

134 
KEEP
(*(.
öô_¨øy
))

135 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

138 . = 
ALIGN
(4);

140 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

141 
KEEP
(*(
SORT
(.
föi_¨øy
.*)))

142 
KEEP
(*(.
föi_¨øy
))

143 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

145 . = 
ALIGN
(4);

147 
	g__d©a_íd__
 = .;

149 } > 
	gRAM


151 .
bss
 (
NOLOAD
):

153 
__bss_°¨t__
 = .;

154 *(.
	gbss
*)

155 *(
	gCOMMON
)

156 
	g__bss_íd__
 = .;

157 } > 
	gRAM


159 .
hóp
 (
NOLOAD
):

161 
__íd__
 = .;

162 
	gíd
 = 
__íd__
;

163 *(.
	ghóp
*)

164 
	g__HópLimô
 = .;

165 } > 
	gRAM


170 .
°ack_dummy
 (
NOLOAD
):

172 *(.
°ack
)

173 } > 
RAM


177 
__SèckT›
 = 
ORIGIN
(
RAM
Ë+ 
LENGTH
(RAM);

178 
	g__SèckLimô
 = 
__SèckT›
 - 
SIZEOF
(.
°ack_dummy
);

179 
PROVIDE
(
__°ack
 = 
__SèckT›
);

182 
ASSERT
(
__SèckLimô
 >
__HópLimô
, "region RAM overflowed with stack")

	@C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\stm32l151cc_sram.ld

33 
OUTPUT_FORMAT
("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")

34 
	$OUTPUT_ARCH
(
¨m
)

35 
	$SEARCH_DIR
(.)

41 
MEMORY


43 
	`ROM
 (
rx
Ë: 
ORIGIN
 = 0x08000000, 
LENGTH
 = 64
K


44 
	`RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 10
K


46 
	}
}

76 
	gSECTIONS


78 .
	gãxt
 :

80 
KEEP
(*(.
i§_ve˘‹
))

81 *(.
ãxt
*)

83 
KEEP
(*(.
öô
))

84 
KEEP
(*(.
föi
))

87 *
¸tbegö
.
o
(.
˘‹s
)

88 *
¸tbegö
?.
o
(.
˘‹s
)

89 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
˘‹s
)

90 *(
SORT
(.
˘‹s
.*))

91 *(.
˘‹s
)

94 *
¸tbegö
.
o
(.
dt‹s
)

95 *
¸tbegö
?.
o
(.
dt‹s
)

96 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
dt‹s
)

97 *(
SORT
(.
dt‹s
.*))

98 *(.
dt‹s
)

100 *(.
rod©a
*)

102 
KEEP
(*(.
eh_‰ame
*))

103 } > 
RAM


105 .
ARM
.
exèb
 :

107 *(.
ARM
.
exèb
* .
gnu
.
lök⁄˚
.
¨mexèb
.*)

108 } > 
RAM


110 
__exidx_°¨t
 = .;

111 .
	gARM
.
	gexidx
 :

113 *(.
ARM
.
exidx
* .
gnu
.
lök⁄˚
.
¨mexidx
.*)

114 } > 
RAM


115 
__exidx_íd
 = .;

117 
	g__ëext
 = .;

119 .
	gd©a
 : 
AT
 (
__ëext
)

121 
__d©a_°¨t__
 = .;

122 *(
	gvèbÀ
)

123 *(.
	gd©a
*)

125 . = 
ALIGN
(4);

127 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

128 
KEEP
(*(.
¥eöô_¨øy
))

129 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

131 . = 
ALIGN
(4);

133 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

134 
KEEP
(*(
SORT
(.
öô_¨øy
.*)))

135 
KEEP
(*(.
öô_¨øy
))

136 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

139 . = 
ALIGN
(4);

141 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

142 
KEEP
(*(
SORT
(.
föi_¨øy
.*)))

143 
KEEP
(*(.
föi_¨øy
))

144 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

146 . = 
ALIGN
(4);

148 
	g__d©a_íd__
 = .;

150 } > 
	gRAM


152 .
bss
 (
NOLOAD
):

154 
__bss_°¨t__
 = .;

155 *(.
	gbss
*)

156 *(
	gCOMMON
)

157 
	g__bss_íd__
 = .;

158 } > 
	gRAM


160 .
hóp
 (
NOLOAD
):

162 
__íd__
 = .;

163 
	gíd
 = 
__íd__
;

164 *(.
	ghóp
*)

165 
	g__HópLimô
 = .;

166 } > 
	gRAM


171 .
°ack_dummy
 (
NOLOAD
):

173 . = 
ALIGN
(8);

174 *(.
	g°ack
)

175 } > 
RAM


179 
	g__SèckT›
 = 
ORIGIN
(
RAM
Ë+ 
LENGTH
(RAM);

180 
	g__SèckLimô
 = 
__SèckT›
 - 
SIZEOF
(.
°ack_dummy
);

181 
PROVIDE
(
__°ack
 = 
__SèckT›
);

184 
ASSERT
(
__SèckLimô
 >
__HópLimô
, "region RAM overflowed with stack")

	@
1
.
0
106
10303
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\misc.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_adc.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_aes.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_comp.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_crc.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_dac.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_dbgmcu.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_dma.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_exti.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_flash.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_fsmc.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_gpio.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_i2c.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_iwdg.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_lcd.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_opamp.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_pwr.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_rcc.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_rtc.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_sdio.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_spi.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_syscfg.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_tim.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_usart.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\inc\stm32l1xx_wwdg.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\misc.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_adc.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_aes.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_aes_util.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_comp.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_crc.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_dac.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_dbgmcu.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_dma.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_exti.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_flash.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_flash_ramfunc.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_fsmc.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_gpio.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_i2c.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_iwdg.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_lcd.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_opamp.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_pwr.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_rcc.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_rtc.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_sdio.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_spi.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_syscfg.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_tim.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_usart.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\SPL\src\stm32l1xx_wwdg.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\cmsis\core_cm3.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\cmsis\core_cmFunc.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\cmsis\core_cmInstr.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\inc\stm32l1xx.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\inc\stm32l1xx_conf.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\inc\system_stm32l1xx.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\readme.txt
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\main.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\platform.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\radio.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\radio.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1232-Hal.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1232-Misc.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1232-Misc.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1232.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1232.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-Fsk.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-Fsk.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-FskMisc.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-FskMisc.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-Hal.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-LoRa.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-LoRa.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-LoRaMisc.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272-LoRaMisc.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1272.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-Fsk.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-Fsk.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-FskMisc.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-FskMisc.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-Hal.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-LoRa.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-LoRa.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-LoRaMisc.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276-LoRaMisc.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\radio\sx1276.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\startup_stm32l1xx_mdp.S
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\system_stm32l1xx.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange-hw-ver.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\XRange-Hal.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\XRange-Hal.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\led.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\led.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\spi.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\spi.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\stm32fxxx_it.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\stm32l1xx_it.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\sx1272-Hal.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\utility.c
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\src\xrange\utility.h
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\stm32l151cc_flash.ld
C:\Users\mp\Documents\netblocks\Fimware\XRange\emblocks\XRange-stm32-libs\stm32l151cc_sram.ld
